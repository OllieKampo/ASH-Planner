[03-01-2022_17-11-05] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
          This program comes with ABSOLUTELY NO WARRANTY; for details use `--warranty'. This is free software,          
            and you are welcome to redistribute it under certain conditions; use `--conditions' for details.            
                    For help and usage instructions use `--help' and `--instructions' respectively.                     
                                                                                                                        
  ####################################################################################################################  

[03-01-2022_17-11-05] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[03-01-2022_17-11-05] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[03-01-2022_17-11-05] DEBUG :: __main__ >> Command line arguments:
'--config=experiments/configurations/initial/online/PS3_hcr_online_2_2_yield.config'
'-ao'
'experiment'
'-op'
'experiment'

[03-01-2022_17-11-05] DEBUG :: __main__ >> Configuration file loaded: experiments/configurations/initial/online/PS3_hcr_online_2_2_yield.config

[03-01-2022_17-11-05] DEBUG :: __main__ >> Configuration file arguments:
'./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp'
'./problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'
'-m'
'hcr'
'-yield'
'True'
'-min_bound'
'False'
'-conc'
'False'
'-strat'
'basic'
'-bound'
'3=2'
'2=2'
'-method'
'ground-first'
'-preempt_pos_fgoals'
'False'
'-preempt_neg_fgoals'
'False'
'-tl'
'1800'
'-ll'
'100'
'-xf'
'-df'
'-ao'
'experiment'
'-op'
'experiment'

[03-01-2022_17-11-05] DEBUG :: __main__ >> Parsed command line arguments:
('files', ['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'])
('load_schema', None)
('config_file_naming', False)
('plan_file', './solutions/plans/ASH_Plan_2022-01-03_17-11-05.txt')
('log_file', './logs/ASH_Log_2022-01-03_17-11-05.log')
('excel_file', './experiments/results/ASH_Excel_2022-01-03_17-11-05.xlsx')
('data_file', './experiments/results/ASH_Data_2022-01-03_17-11-05.dat')
('data_sep', ' ')
('data_end', '\n')
('save_schema', './solutions/schemas/ASH_Schema_2022-01-03_17-11-05.txt')
('schema_level', 1)
('warranty', False)
('conditions', False)
('instructions', False)
('ash_output', 'experiment')
('clingo_output', False)
('console_logging', 'INFO')
('disable_logging', False)
('disable_pause_on_start', False)
('display_graph', True)
('operation', 'experiment')
('experimental_runs', 1)
('initial_runs', 0)
('threads', 8)
('planning_time_limit', 1800)
('search_length_limit', 100)
('planning_mode', 'hcr')
('conformance_type', 'sequential')
('enable_concurrency', False)
('minimise_actions', None)
('sequential_yielding', True)
('detect_interleaving', False)
('minimum_search_length_bound', False)
('make_observable', False)
('problem_space', None)
('problem_space_level', 1)
('top_level', None)
('bottom_level', 1)
('pause_on_level_change', False)
('pause_on_increment_change', False)
('online_method', 'ground-first')
('division_strategy', 'basic')
('division_strategy_bounds', {3: 2, 2: 2})
('bound_type', 'incremental_time')
('save_grounding', False)
('backwards_horizon', 0)
('preemptive_division', False)
('interrupting_division', False)
('moving_average', 1)
('left_blend_quantities', 0)
('right_blend_quantities', 0)
('avoid_refining_sgoals_marked_for_blending', False)
('treat_tasks_as_independent', False)
('divide_tasks_on_final_goal_intermediate_achievement_ordering', False)
('final_goal_intermediate_achievement_ordering_preferences', None)
('positive_final_goal_preemptive_achievement', False)
('negative_final_goal_preemptive_achievement', False)
('final_goal_preemptive_achievement_mode', 'heuristic')

[03-01-2022_17-11-06] DEBUG :: core.Planner >> Instantiating new planning domain:
Name = None
Domain files = [./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp
                ./problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp]

[03-01-2022_17-11-06] DEBUG :: core.Planner >> The domain files ['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'] were loaded successfully, contain all domain program parts, and contain problem program parts: {'goal_state': True, 'initial_state': True, 'entities': True, 'static_state': True}.

[03-01-2022_17-11-06] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', None)
	('silent', True)
	('warnings', False)
	('message_limit', 20)
	('enable_tqdm', False)

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if;
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively,
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either;
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete;
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level;
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total quantity of actions in a plan, False to disable.
%%%%    order_fgoals: bool - A Boolean, True to enable enforce the task critical final-goal literal intermediate ordering preferences as a minimisation problem, False to disable.
%%%%    preempt_pos_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-mptively achieving positive final-goal literals, False to disable.
%%%%    preempt_neg_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-emptively achieving negative final-goal literals, False to disable.
%%%%    preempt_mode: {heuristic, optimise} - A string defining the type of statements used to enforce pre-emptive achievement of final-goal literals.
%%%%                                          Heuristic uses domain heuristic rules which affect solving throughout all search steps.
%%%%                                          Optimise uses weak constraint rules which maximise pre-emptive achievement of final-goals in the end state only.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Eliminate any unnecessary actions from the plan by minimising the total quantity of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final-goal intermediate achievement ordering preferences;
%%      - Solve the perference order problem as a minimisation problem,
%%      - TODO
% :~ not goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
%    fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * step) @ 4, AL, F, V, B]
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
   fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B),
                fluent(AL, _, F, V), pl(AL), boolean(B), order_fgoals = true.

%% Final goal preemptive achievement heuristics;
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true), fluent(AL, inertial, F, V), pl(AL),
                                        step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]

:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Solution checking constraint - The problem is satisfiable only iff all currently included goals are achieved
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- step > minimum_search_length_bound, incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
% :- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Enforce conformance constraints by ensuring plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    first: int - A natural number defining the first inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    last: int - A natural number defining the last inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    type: {simultaneous, sequential} - A string defining the sub-goal stage achievement type of subgoal stages.
%%%%    yield: bool - A Boolean, True to enable sequential yield planning mode, False to use standard planning mode.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint
%% and the step it was first commited at during sequential yield planning progression through the goal sequence.
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given;
%%          - Explicitly and fixed iff this program grounding will not be saved,
%%          - By a dynamic external context function (allowing it to be modified) if this program
%%            grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first),
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% The current sub-goal stage sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

%% Search heuristic that prefers planning actions that achieve a sub-goal literal in the current sub-goal stage;
%%      - This works only for sub-goal stages containing literals that are indentical to the state literals at the current planning level.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 3.

%% Abstraction types
#const reduc = 3. % Classical
#const conde = 2. % Refine both
#const groun = 1. % Refine both
model_type(3, reduced).
model_type(2, condensed).
model_type(1, ground).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(3, robot).
class(3, armed_robot).
class(3, location).
class(3, room).
class(3, object).
class(3, grounded).
class(3, graspable).
class(3, placeable).
class(3, block).
class(3, surface).
class(3, table).
class(3, colour).
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted in condensed model
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Manipulator arms can grasp objects because they are composed of a end effector
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator arms are extensible because they are composed of a manipulator limb
override_class(manipulator_arm, manipulator_limb, extensible).

%% A room is composed from a set of cells
override_class(room, cell, location).

%% A table has multiple sides that compose its surface
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                   insta_of(AL, table, TABLE),
                                                   sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 insta_of(AL, table, TABLE),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                        insta_of(AL, table, TABLE),
                                                        sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete_tower(COLOUR, TABLE), B) :- insta_of(AL, colour, COLOUR),
                                                         insta_of(AL, table, TABLE),
                                                         sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, sequencing_type, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < reduc, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
%**% #program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either;
%%      - On a table,
%%      - On a descenant surface of a table.
holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        insta_of(AL, surface, SURFACE),
                                        sl(AL).

%% A block is in a tower if it is either;
%%      - The base of the tower,
%%      - On a block that is in the tower.
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE, TABLE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE, TABLE), true),
                                            insta_of(AL, block, BASE),
                                            insta_of(AL, table, TABLE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE, TABLE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                                    holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                                    holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                                    holds(AL, tower_base(BASE, TABLE), true, t),
                                                    fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                                    fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                    fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
                                                    BLOCK_1 = (block, N_1), block_number(N_1),
                                                    BLOCK_2 = (block, N_2), block_number(N_2),
                                                    BLOCK_1 != BLOCK_2, N_1 > N_2,
                                                    insta_of(AL, block, BLOCK_1),
                                                    insta_of(AL, block, BLOCK_2),
                                                    insta_of(AL, block, BASE),
                                                    insta_of(AL, table, TABLE),
                                                    sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete_tower(COLOUR, TABLE), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                                          is(AL, colour_of(BLOCK, COLOUR)),
                                                                          fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                                          static(AL, colour_of(BLOCK, COLOUR)),
                                                                          insta_of(AL, block, BLOCK) },
                                                     blocks_per_tower(N),
                                                     holds(AL, unordered_tower(BASE, TABLE), false, t),
                                                     holds(AL, tower_base(BASE, TABLE), true, t),
                                                     fluent(AL, defined, complete_tower(COLOUR, TABLE), true),
                                                     fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                     fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                     is(AL, colour_of(BASE, COLOUR)),
                                                     static(AL, colour_of(BASE, COLOUR)),
                                                     insta_of(AL, colour, COLOUR),
                                                     insta_of(AL, block, BASE),
                                                     insta_of(AL, table, TABLE),
                                                     sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
% holds(1, on((block, 4)), (block, 2), 0).

%% The other three blocks are on the floor in the store room
holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete_tower(COLOUR, TABLE)) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, unordered_tower(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete_tower(COLOUR, TABLE), true, true) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Ancestry Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are six blocks
block_number(1..6).
blocks_per_tower(3).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Logic program code parsed successfully.

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Logic program instantiated successfully.

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Entering new direct one-shot solve call.

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = ['--parallel-mode=1,compete']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Program building started :: Processing 355 rules

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Program building completed in 0.007703999999999933s

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Grounding program parts:
[('abstraction_levels', [Number(0), Function('hierarchical', [], True)]), ('domain_sorts', [])]

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:97:58-77: info: atom does not occur in any rule head:
  insta_of(#X0,#P1,#X2)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:466:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:625:50-78: info: atom does not occur in any rule head:
  insta_of(AL,graspable,OBJ)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:638:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:639:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:643:47-68: info: atom does not occur in any rule head:
  insta_of(AL,door,D)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:644:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:645:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:649:27-52: info: atom does not occur in any rule head:
  insta_of(AL,object,OBJ)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:650:27-54: info: atom does not occur in any rule head:
  insta_of(AL,grounded,OBJ)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:651:27-52: info: atom does not occur in any rule head:
  insta_of(AL,location,L)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:655:41-67: info: atom does not occur in any rule head:
  insta_of(AL,block,BLOCK)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:656:41-69: info: atom does not occur in any rule head:
  insta_of(AL,colour,COLOUR)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:668:39-66: info: atom does not occur in any rule head:
  insta_of(AL_1,location,L)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:669:39-66: info: atom does not occur in any rule head:
  insta_of(AL_2,object,OBJ)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:670:43-72: info: atom does not occur in any rule head:
  insta_of(AL_2,grounded,OBJ)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:676:45-77: info: atom does not occur in any rule head:
  insta_of(AL_1,surface,SURFACE)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:677:45-75: info: atom does not occur in any rule head:
  insta_of(AL_2,placeable,OBJ)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:682:48-78: info: atom does not occur in any rule head:
  insta_of(AL_1,graspable,OBJ)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:683:48-77: info: atom does not occur in any rule head:
  insta_of(AL_2,grasper,DESC)


[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Grounding completed in 0.014532s.

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Solving program.

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Solving completed in 0.004421s with result Satisfiable.

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Freeing held grounding...

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Held grounding freed successfully.

[03-01-2022_17-11-06] DEBUG :: Logic Program Anonymous #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding = 0.014532s, Solving = 0.004421s, Total = 0.018954s, Memory = (RSS = 105.160156Mb, VMS = 92.304688Mb)
Final Model :: Total atoms = 70, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-06] DEBUG :: core.Planner >> Planning Domain Anon #1 :: Abstraction range = [1-3] instantiated successfully

[03-01-2022_17-11-06] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'ASH')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-01-2022_17-11-06] DEBUG :: Logic Program ASH #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if;
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively,
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either;
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete;
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level;
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total quantity of actions in a plan, False to disable.
%%%%    order_fgoals: bool - A Boolean, True to enable enforce the task critical final-goal literal intermediate ordering preferences as a minimisation problem, False to disable.
%%%%    preempt_pos_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-mptively achieving positive final-goal literals, False to disable.
%%%%    preempt_neg_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-emptively achieving negative final-goal literals, False to disable.
%%%%    preempt_mode: {heuristic, optimise} - A string defining the type of statements used to enforce pre-emptive achievement of final-goal literals.
%%%%                                          Heuristic uses domain heuristic rules which affect solving throughout all search steps.
%%%%                                          Optimise uses weak constraint rules which maximise pre-emptive achievement of final-goals in the end state only.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Eliminate any unnecessary actions from the plan by minimising the total quantity of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final-goal intermediate achievement ordering preferences;
%%      - Solve the perference order problem as a minimisation problem,
%%      - TODO
% :~ not goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
%    fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * step) @ 4, AL, F, V, B]
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
   fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B),
                fluent(AL, _, F, V), pl(AL), boolean(B), order_fgoals = true.

%% Final goal preemptive achievement heuristics;
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true), fluent(AL, inertial, F, V), pl(AL),
                                        step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]

:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Solution checking constraint - The problem is satisfiable only iff all currently included goals are achieved
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- step > minimum_search_length_bound, incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
% :- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Enforce conformance constraints by ensuring plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    first: int - A natural number defining the first inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    last: int - A natural number defining the last inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    type: {simultaneous, sequential} - A string defining the sub-goal stage achievement type of subgoal stages.
%%%%    yield: bool - A Boolean, True to enable sequential yield planning mode, False to use standard planning mode.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint
%% and the step it was first commited at during sequential yield planning progression through the goal sequence.
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given;
%%          - Explicitly and fixed iff this program grounding will not be saved,
%%          - By a dynamic external context function (allowing it to be modified) if this program
%%            grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first),
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% The current sub-goal stage sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

%% Search heuristic that prefers planning actions that achieve a sub-goal literal in the current sub-goal stage;
%%      - This works only for sub-goal stages containing literals that are indentical to the state literals at the current planning level.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 3.

%% Abstraction types
#const reduc = 3. % Classical
#const conde = 2. % Refine both
#const groun = 1. % Refine both
model_type(3, reduced).
model_type(2, condensed).
model_type(1, ground).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(3, robot).
class(3, armed_robot).
class(3, location).
class(3, room).
class(3, object).
class(3, grounded).
class(3, graspable).
class(3, placeable).
class(3, block).
class(3, surface).
class(3, table).
class(3, colour).
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted in condensed model
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Manipulator arms can grasp objects because they are composed of a end effector
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator arms are extensible because they are composed of a manipulator limb
override_class(manipulator_arm, manipulator_limb, extensible).

%% A room is composed from a set of cells
override_class(room, cell, location).

%% A table has multiple sides that compose its surface
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                   insta_of(AL, table, TABLE),
                                                   sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 insta_of(AL, table, TABLE),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                        insta_of(AL, table, TABLE),
                                                        sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete_tower(COLOUR, TABLE), B) :- insta_of(AL, colour, COLOUR),
                                                         insta_of(AL, table, TABLE),
                                                         sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, sequencing_type, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < reduc, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
%**% #program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either;
%%      - On a table,
%%      - On a descenant surface of a table.
holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        insta_of(AL, surface, SURFACE),
                                        sl(AL).

%% A block is in a tower if it is either;
%%      - The base of the tower,
%%      - On a block that is in the tower.
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE, TABLE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE, TABLE), true),
                                            insta_of(AL, block, BASE),
                                            insta_of(AL, table, TABLE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE, TABLE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                                    holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                                    holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                                    holds(AL, tower_base(BASE, TABLE), true, t),
                                                    fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                                    fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                    fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
                                                    BLOCK_1 = (block, N_1), block_number(N_1),
                                                    BLOCK_2 = (block, N_2), block_number(N_2),
                                                    BLOCK_1 != BLOCK_2, N_1 > N_2,
                                                    insta_of(AL, block, BLOCK_1),
                                                    insta_of(AL, block, BLOCK_2),
                                                    insta_of(AL, block, BASE),
                                                    insta_of(AL, table, TABLE),
                                                    sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete_tower(COLOUR, TABLE), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                                          is(AL, colour_of(BLOCK, COLOUR)),
                                                                          fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                                          static(AL, colour_of(BLOCK, COLOUR)),
                                                                          insta_of(AL, block, BLOCK) },
                                                     blocks_per_tower(N),
                                                     holds(AL, unordered_tower(BASE, TABLE), false, t),
                                                     holds(AL, tower_base(BASE, TABLE), true, t),
                                                     fluent(AL, defined, complete_tower(COLOUR, TABLE), true),
                                                     fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                     fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                     is(AL, colour_of(BASE, COLOUR)),
                                                     static(AL, colour_of(BASE, COLOUR)),
                                                     insta_of(AL, colour, COLOUR),
                                                     insta_of(AL, block, BASE),
                                                     insta_of(AL, table, TABLE),
                                                     sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
% holds(1, on((block, 4)), (block, 2), 0).

%% The other three blocks are on the floor in the store room
holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete_tower(COLOUR, TABLE)) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, unordered_tower(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete_tower(COLOUR, TABLE), true, true) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Ancestry Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are six blocks
block_number(1..6).
blocks_per_tower(3).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[03-01-2022_17-11-06] DEBUG :: Logic Program ASH #1 >> Logic program code parsed successfully.

[03-01-2022_17-11-06] DEBUG :: Logic Program ASH #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-06] DEBUG :: Logic Program ASH #1 >> Input storing variables set.

[03-01-2022_17-11-06] DEBUG :: Logic Program ASH #1 >> Resetting output storing variables.

[03-01-2022_17-11-06] DEBUG :: Logic Program ASH #1 >> Output storing variables reset.

[03-01-2022_17-11-06] DEBUG :: Logic Program ASH #1 >> Logic program instantiated successfully.

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,_,ROBOT,A) } :- pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = true.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); minimise_actions = true. [1@2,ROBOT,A,step]
:~ goal_satisfied(AL,F,V,B,step); goal_order(AL,F,V,B,ORDER); final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); max_order(M); order_fgoals = true. [(((M+1)-ORDER)*-step)@4,AL,F,V,B]
max_order(M) :- M = #max { ORDER: goal_order(AL,F,V,B,ORDER) }; final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); order_fgoals = true.
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = heuristic. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = heuristic. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = heuristic. [10@0,false]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = heuristic. [10@0,false]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = optimise. [-1@0,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = optimise. [-1@0,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = optimise. [1@-1,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = optimise. [1@-1,AL,ROBOT,A,F,V,step]
#program check(step).
:~ gen_search_space_at(step); incomplete_plan((step-1)); enforce_achieve_fgoals((step-1)). [1@1,step]
#external query(step). [false]
#external gen_search_space_at(step). [false]
#false :- step > minimum_search_length_bound; incomplete_plan(step); not gen_search_space_at(step); query(step).
#const minimum_search_length_bound = -1.
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; step >= S; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)) :- last != none.
sgoals_index((first..L)) :- last = none; L = @get_total_last_sgoals(PL); pl(PL).
current_sub_goal((AL+1),ROBOT,A,F,V,first,(start+1)) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); holds((AL+1),F,V,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); not unachieved_sgoals((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); include_sgoals((I_SG+1),step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,true,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,false,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,false,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,true,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
model_type(3,reduced).
model_type(2,condensed).
model_type(1,ground).
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL_I,manipulator_end); AL <= AL_I; AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL,defined,tower_base(BASE,TABLE),B) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE,TABLE),B) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,complete_tower(COLOUR,TABLE),B) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); sl(AL); boolean(B).
action(AL,sequential,locomotion,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,manipulation,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,manipulation,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,configuration,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,concurrent,manipulation,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,concurrent,manipulation,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < reduc; sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); action(AL,_,_,ROBO,actuate(DESC,D)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
#program action_preconditions(t).
precond(AL,ROBO,move(L_2),in(ROBO),L_1,false) :- not is(AL,connected(L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE,TABLE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE,TABLE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); insta_of(AL,surface,SURFACE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE,TABLE),true); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE,TABLE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,unordered_tower(BASE,TABLE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); block_number(N_1); BLOCK_2 = (block,N_2); block_number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,complete_tower(COLOUR,TABLE),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; blocks_per_tower(N); holds(AL,unordered_tower(BASE,TABLE),false,t); holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,complete_tower(COLOUR,TABLE),true); fluent(AL,defined,unordered_tower(BASE,TABLE),true); fluent(AL,defined,tower_base(BASE,TABLE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2 = (X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,in((block,4)),(store_room,0),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete_tower(COLOUR,TABLE)) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,unordered_tower(BASE,TABLE)) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,in_tower(BASE,BLOCK)) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); al(AL).
goal_fluent(AL,tower_base(BASE,TABLE)) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,on(BLOCK)) :- insta_of(AL,block,BLOCK); al(AL).
final_goal(AL,complete_tower(COLOUR,TABLE),true,true) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); al(AL).
final_goal(1,on((block,3)),puzzle_room_table_left,true).
final_goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
block_number((1..6)).
blocks_per_tower(3).
entity(block,(block,N)) :- block_number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X < MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Attempting to initialise hierarchical planning problem...

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Generating initial states...

[03-01-2022_17-11-06] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Initial States

[03-01-2022_17-11-06] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Initial States')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Parsing raw logic program code:


[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program code parsed successfully.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program instantiated successfully.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Entering new direct one-shot solve call.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=none']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building started :: Processing 355 rules

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building completed in 0.002577899999999911s

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('state_module', [Number(0), Number(0)]), ('entities', []), ('static_state', []), ('initial_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding completed in 0.107271s.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving program.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving completed in 0.019232s with result Satisfiable.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Freeing held grounding...

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Held grounding freed successfully.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.107271s, Solving = 0.019232s, Total = 0.126503s, Memory = (RSS = 113.890625Mb, VMS = 100.761719Mb)
Final Model :: Total atoms = 2735, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Initial states generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.107271s, Solving = 0.019232s, Total = 0.126503s, Memory = (RSS = 113.890625Mb, VMS = 100.761719Mb)
Final Model :: Total atoms = 2735, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 3            
      ================================================      

holds(3, complete_tower(blue,puzzle_room_table), false, 0)
holds(3, complete_tower(red,puzzle_room_table), false, 0)
holds(3, grasping(manipulator_arm_1), nothing, 0)
holds(3, grasping(manipulator_arm_2), nothing, 0)
holds(3, in((block,1)), puzzle_room, 0)
holds(3, in((block,2)), puzzle_room, 0)
holds(3, in((block,3)), puzzle_room, 0)
holds(3, in((block,4)), store_room, 0)
holds(3, in((block,5)), store_room, 0)
holds(3, in((block,6)), store_room, 0)
holds(3, in(manipulator_arm_1), starting_room, 0)
holds(3, in(manipulator_arm_2), starting_room, 0)
holds(3, in(puzzle_room_table), puzzle_room, 0)
holds(3, in(talos), starting_room, 0)
holds(3, in_tower((block,1),(block,1)), true, 0)
holds(3, in_tower((block,1),(block,2)), false, 0)
holds(3, in_tower((block,1),(block,3)), true, 0)
holds(3, in_tower((block,1),(block,4)), false, 0)
holds(3, in_tower((block,1),(block,5)), false, 0)
holds(3, in_tower((block,1),(block,6)), false, 0)
holds(3, in_tower((block,2),(block,1)), false, 0)
holds(3, in_tower((block,2),(block,2)), true, 0)
holds(3, in_tower((block,2),(block,3)), false, 0)
holds(3, in_tower((block,2),(block,4)), false, 0)
holds(3, in_tower((block,2),(block,5)), false, 0)
holds(3, in_tower((block,2),(block,6)), false, 0)
holds(3, in_tower((block,3),(block,1)), false, 0)
holds(3, in_tower((block,3),(block,2)), false, 0)
holds(3, in_tower((block,3),(block,3)), false, 0)
holds(3, in_tower((block,3),(block,4)), false, 0)
holds(3, in_tower((block,3),(block,5)), false, 0)
holds(3, in_tower((block,3),(block,6)), false, 0)
holds(3, in_tower((block,4),(block,1)), false, 0)
holds(3, in_tower((block,4),(block,2)), false, 0)
holds(3, in_tower((block,4),(block,3)), false, 0)
holds(3, in_tower((block,4),(block,4)), false, 0)
holds(3, in_tower((block,4),(block,5)), false, 0)
holds(3, in_tower((block,4),(block,6)), false, 0)
holds(3, in_tower((block,5),(block,1)), false, 0)
holds(3, in_tower((block,5),(block,2)), false, 0)
holds(3, in_tower((block,5),(block,3)), false, 0)
holds(3, in_tower((block,5),(block,4)), false, 0)
holds(3, in_tower((block,5),(block,5)), false, 0)
holds(3, in_tower((block,5),(block,6)), false, 0)
holds(3, in_tower((block,6),(block,1)), false, 0)
holds(3, in_tower((block,6),(block,2)), false, 0)
holds(3, in_tower((block,6),(block,3)), false, 0)
holds(3, in_tower((block,6),(block,4)), false, 0)
holds(3, in_tower((block,6),(block,5)), false, 0)
holds(3, in_tower((block,6),(block,6)), false, 0)
holds(3, on((block,1)), puzzle_room_table, 0)
holds(3, on((block,2)), puzzle_room_table, 0)
holds(3, on((block,3)), (block,1), 0)
holds(3, on((block,4)), nothing, 0)
holds(3, on((block,5)), nothing, 0)
holds(3, on((block,6)), nothing, 0)
holds(3, tower_base((block,1),puzzle_room_table), true, 0)
holds(3, tower_base((block,2),puzzle_room_table), true, 0)
holds(3, tower_base((block,3),puzzle_room_table), false, 0)
holds(3, tower_base((block,4),puzzle_room_table), false, 0)
holds(3, tower_base((block,5),puzzle_room_table), false, 0)
holds(3, tower_base((block,6),puzzle_room_table), false, 0)
holds(3, unordered_tower((block,1),puzzle_room_table), true, 0)
holds(3, unordered_tower((block,2),puzzle_room_table), false, 0)
holds(3, unordered_tower((block,3),puzzle_room_table), false, 0)
holds(3, unordered_tower((block,4),puzzle_room_table), false, 0)
holds(3, unordered_tower((block,5),puzzle_room_table), false, 0)
holds(3, unordered_tower((block,6),puzzle_room_table), false, 0)

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 2            
      ================================================      

holds(2, complete_tower(blue,puzzle_room_table), false, 0)
holds(2, complete_tower(red,puzzle_room_table), false, 0)
holds(2, configuration(manipulator_arm_1), retracted, 0)
holds(2, configuration(manipulator_arm_2), retracted, 0)
holds(2, configuration(puzzle_room_door), closed, 0)
holds(2, configuration(starting_room_door), closed, 0)
holds(2, configuration(store_room_door), closed, 0)
holds(2, grasping(manipulator_arm_1), nothing, 0)
holds(2, grasping(manipulator_arm_2), nothing, 0)
holds(2, in((block,1)), puzzle_room, 0)
holds(2, in((block,2)), puzzle_room, 0)
holds(2, in((block,3)), puzzle_room, 0)
holds(2, in((block,4)), store_room, 0)
holds(2, in((block,5)), store_room, 0)
holds(2, in((block,6)), store_room, 0)
holds(2, in(manipulator_arm_1), starting_room, 0)
holds(2, in(manipulator_arm_2), starting_room, 0)
holds(2, in(puzzle_room_table), puzzle_room, 0)
holds(2, in(talos), starting_room, 0)
holds(2, in_tower((block,1),(block,1)), true, 0)
holds(2, in_tower((block,1),(block,2)), false, 0)
holds(2, in_tower((block,1),(block,3)), true, 0)
holds(2, in_tower((block,1),(block,4)), false, 0)
holds(2, in_tower((block,1),(block,5)), false, 0)
holds(2, in_tower((block,1),(block,6)), false, 0)
holds(2, in_tower((block,2),(block,1)), false, 0)
holds(2, in_tower((block,2),(block,2)), true, 0)
holds(2, in_tower((block,2),(block,3)), false, 0)
holds(2, in_tower((block,2),(block,4)), false, 0)
holds(2, in_tower((block,2),(block,5)), false, 0)
holds(2, in_tower((block,2),(block,6)), false, 0)
holds(2, in_tower((block,3),(block,1)), false, 0)
holds(2, in_tower((block,3),(block,2)), false, 0)
holds(2, in_tower((block,3),(block,3)), false, 0)
holds(2, in_tower((block,3),(block,4)), false, 0)
holds(2, in_tower((block,3),(block,5)), false, 0)
holds(2, in_tower((block,3),(block,6)), false, 0)
holds(2, in_tower((block,4),(block,1)), false, 0)
holds(2, in_tower((block,4),(block,2)), false, 0)
holds(2, in_tower((block,4),(block,3)), false, 0)
holds(2, in_tower((block,4),(block,4)), false, 0)
holds(2, in_tower((block,4),(block,5)), false, 0)
holds(2, in_tower((block,4),(block,6)), false, 0)
holds(2, in_tower((block,5),(block,1)), false, 0)
holds(2, in_tower((block,5),(block,2)), false, 0)
holds(2, in_tower((block,5),(block,3)), false, 0)
holds(2, in_tower((block,5),(block,4)), false, 0)
holds(2, in_tower((block,5),(block,5)), false, 0)
holds(2, in_tower((block,5),(block,6)), false, 0)
holds(2, in_tower((block,6),(block,1)), false, 0)
holds(2, in_tower((block,6),(block,2)), false, 0)
holds(2, in_tower((block,6),(block,3)), false, 0)
holds(2, in_tower((block,6),(block,4)), false, 0)
holds(2, in_tower((block,6),(block,5)), false, 0)
holds(2, in_tower((block,6),(block,6)), false, 0)
holds(2, on((block,1)), puzzle_room_table, 0)
holds(2, on((block,2)), puzzle_room_table, 0)
holds(2, on((block,3)), (block,1), 0)
holds(2, on((block,4)), nothing, 0)
holds(2, on((block,5)), nothing, 0)
holds(2, on((block,6)), nothing, 0)
holds(2, tower_base((block,1),puzzle_room_table), true, 0)
holds(2, tower_base((block,2),puzzle_room_table), true, 0)
holds(2, tower_base((block,3),puzzle_room_table), false, 0)
holds(2, tower_base((block,4),puzzle_room_table), false, 0)
holds(2, tower_base((block,5),puzzle_room_table), false, 0)
holds(2, tower_base((block,6),puzzle_room_table), false, 0)
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0)
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0)
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0)
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0)
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0)
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0)

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 1            
      ================================================      

holds(1, complete_tower(blue,puzzle_room_table), false, 0)
holds(1, complete_tower(red,puzzle_room_table), false, 0)
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(1, configuration(manipulator_limb_1), retracted, 0)
holds(1, configuration(manipulator_limb_2), retracted, 0)
holds(1, configuration(puzzle_room_door), closed, 0)
holds(1, configuration(starting_room_door), closed, 0)
holds(1, configuration(store_room_door), closed, 0)
holds(1, grasping(manipulator_arm_1), nothing, 0)
holds(1, grasping(manipulator_arm_2), nothing, 0)
holds(1, grasping(manipulator_end_1), nothing, 0)
holds(1, grasping(manipulator_end_2), nothing, 0)
holds(1, in((block,1)), (puzzle_room,1), 0)
holds(1, in((block,2)), (puzzle_room,1), 0)
holds(1, in((block,3)), (puzzle_room,1), 0)
holds(1, in((block,4)), (store_room,0), 0)
holds(1, in((block,5)), (store_room,0), 0)
holds(1, in((block,6)), (store_room,0), 0)
holds(1, in(manipulator_arm_1), (starting_room,0), 0)
holds(1, in(manipulator_arm_2), (starting_room,0), 0)
holds(1, in(manipulator_end_1), (starting_room,0), 0)
holds(1, in(manipulator_end_2), (starting_room,0), 0)
holds(1, in(manipulator_limb_1), (starting_room,0), 0)
holds(1, in(manipulator_limb_2), (starting_room,0), 0)
holds(1, in(puzzle_room_table), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)
holds(1, in(talos), (starting_room,0), 0)
holds(1, in_tower((block,1),(block,1)), true, 0)
holds(1, in_tower((block,1),(block,2)), false, 0)
holds(1, in_tower((block,1),(block,3)), true, 0)
holds(1, in_tower((block,1),(block,4)), false, 0)
holds(1, in_tower((block,1),(block,5)), false, 0)
holds(1, in_tower((block,1),(block,6)), false, 0)
holds(1, in_tower((block,2),(block,1)), false, 0)
holds(1, in_tower((block,2),(block,2)), true, 0)
holds(1, in_tower((block,2),(block,3)), false, 0)
holds(1, in_tower((block,2),(block,4)), false, 0)
holds(1, in_tower((block,2),(block,5)), false, 0)
holds(1, in_tower((block,2),(block,6)), false, 0)
holds(1, in_tower((block,3),(block,1)), false, 0)
holds(1, in_tower((block,3),(block,2)), false, 0)
holds(1, in_tower((block,3),(block,3)), false, 0)
holds(1, in_tower((block,3),(block,4)), false, 0)
holds(1, in_tower((block,3),(block,5)), false, 0)
holds(1, in_tower((block,3),(block,6)), false, 0)
holds(1, in_tower((block,4),(block,1)), false, 0)
holds(1, in_tower((block,4),(block,2)), false, 0)
holds(1, in_tower((block,4),(block,3)), false, 0)
holds(1, in_tower((block,4),(block,4)), false, 0)
holds(1, in_tower((block,4),(block,5)), false, 0)
holds(1, in_tower((block,4),(block,6)), false, 0)
holds(1, in_tower((block,5),(block,1)), false, 0)
holds(1, in_tower((block,5),(block,2)), false, 0)
holds(1, in_tower((block,5),(block,3)), false, 0)
holds(1, in_tower((block,5),(block,4)), false, 0)
holds(1, in_tower((block,5),(block,5)), false, 0)
holds(1, in_tower((block,5),(block,6)), false, 0)
holds(1, in_tower((block,6),(block,1)), false, 0)
holds(1, in_tower((block,6),(block,2)), false, 0)
holds(1, in_tower((block,6),(block,3)), false, 0)
holds(1, in_tower((block,6),(block,4)), false, 0)
holds(1, in_tower((block,6),(block,5)), false, 0)
holds(1, in_tower((block,6),(block,6)), false, 0)
holds(1, on((block,1)), puzzle_room_table_left, 0)
holds(1, on((block,2)), puzzle_room_table_right, 0)
holds(1, on((block,3)), (block,1), 0)
holds(1, on((block,4)), nothing, 0)
holds(1, on((block,5)), nothing, 0)
holds(1, on((block,6)), nothing, 0)
holds(1, tower_base((block,1),puzzle_room_table), true, 0)
holds(1, tower_base((block,2),puzzle_room_table), true, 0)
holds(1, tower_base((block,3),puzzle_room_table), false, 0)
holds(1, tower_base((block,4),puzzle_room_table), false, 0)
holds(1, tower_base((block,5),puzzle_room_table), false, 0)
holds(1, tower_base((block,6),puzzle_room_table), false, 0)
holds(1, unordered_tower((block,1),puzzle_room_table), true, 0)
holds(1, unordered_tower((block,2),puzzle_room_table), false, 0)
holds(1, unordered_tower((block,3),puzzle_room_table), false, 0)
holds(1, unordered_tower((block,4),puzzle_room_table), false, 0)
holds(1, unordered_tower((block,5),puzzle_room_table), false, 0)
holds(1, unordered_tower((block,6),puzzle_room_table), false, 0)

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Generating final-goals...

[03-01-2022_17-11-06] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Final Goals

[03-01-2022_17-11-06] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Final Goals')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Parsing raw logic program code:


[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program code parsed successfully.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program instantiated successfully.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Entering new direct one-shot solve call.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=none']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building started :: Processing 355 rules

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building completed in 0.004923500000000303s

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('goal_abstraction_module', []), ('entities', []), ('static_state', []), ('goal_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding completed in 0.070010s.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving program.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving completed in 0.012880s with result Satisfiable.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Freeing held grounding...

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Held grounding freed successfully.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.070010s, Solving = 0.012880s, Total = 0.082890s, Memory = (RSS = 112.570312Mb, VMS = 99.636719Mb)
Final Model :: Total atoms = 3279, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Final-goals generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.070010s, Solving = 0.012880s, Total = 0.082890s, Memory = (RSS = 112.570312Mb, VMS = 99.636719Mb)
Final Model :: Total atoms = 3279, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 3         
      ================================================      

final_goal(3, complete_tower(blue,puzzle_room_table), true, true)
final_goal(3, complete_tower(red,puzzle_room_table), true, true)
final_goal(3, in_tower((block,1),(block,1)), false, true)
final_goal(3, in_tower((block,1),(block,2)), false, true)
final_goal(3, in_tower((block,1),(block,3)), false, true)
final_goal(3, in_tower((block,1),(block,4)), false, true)
final_goal(3, in_tower((block,1),(block,5)), false, true)
final_goal(3, in_tower((block,1),(block,6)), false, true)
final_goal(3, in_tower((block,2),(block,1)), false, true)
final_goal(3, in_tower((block,2),(block,2)), false, true)
final_goal(3, in_tower((block,2),(block,3)), false, true)
final_goal(3, in_tower((block,2),(block,4)), false, true)
final_goal(3, in_tower((block,2),(block,5)), false, true)
final_goal(3, in_tower((block,2),(block,6)), false, true)
final_goal(3, in_tower((block,3),(block,1)), true, true)
final_goal(3, in_tower((block,3),(block,2)), true, true)
final_goal(3, in_tower((block,3),(block,3)), true, true)
final_goal(3, in_tower((block,3),(block,4)), false, true)
final_goal(3, in_tower((block,3),(block,5)), false, true)
final_goal(3, in_tower((block,3),(block,6)), false, true)
final_goal(3, in_tower((block,4),(block,1)), false, true)
final_goal(3, in_tower((block,4),(block,2)), false, true)
final_goal(3, in_tower((block,4),(block,3)), false, true)
final_goal(3, in_tower((block,4),(block,4)), false, true)
final_goal(3, in_tower((block,4),(block,5)), false, true)
final_goal(3, in_tower((block,4),(block,6)), false, true)
final_goal(3, in_tower((block,5),(block,1)), false, true)
final_goal(3, in_tower((block,5),(block,2)), false, true)
final_goal(3, in_tower((block,5),(block,3)), false, true)
final_goal(3, in_tower((block,5),(block,4)), false, true)
final_goal(3, in_tower((block,5),(block,5)), false, true)
final_goal(3, in_tower((block,5),(block,6)), false, true)
final_goal(3, in_tower((block,6),(block,1)), false, true)
final_goal(3, in_tower((block,6),(block,2)), false, true)
final_goal(3, in_tower((block,6),(block,3)), false, true)
final_goal(3, in_tower((block,6),(block,4)), true, true)
final_goal(3, in_tower((block,6),(block,5)), true, true)
final_goal(3, in_tower((block,6),(block,6)), true, true)
final_goal(3, on((block,1)), (block,2), true)
final_goal(3, on((block,2)), (block,3), true)
final_goal(3, on((block,3)), puzzle_room_table, true)
final_goal(3, on((block,4)), (block,5), true)
final_goal(3, on((block,5)), (block,6), true)
final_goal(3, on((block,6)), puzzle_room_table, true)
final_goal(3, tower_base((block,1),puzzle_room_table), false, true)
final_goal(3, tower_base((block,2),puzzle_room_table), false, true)
final_goal(3, tower_base((block,3),puzzle_room_table), true, true)
final_goal(3, tower_base((block,4),puzzle_room_table), false, true)
final_goal(3, tower_base((block,5),puzzle_room_table), false, true)
final_goal(3, tower_base((block,6),puzzle_room_table), true, true)
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true)
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true)
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true)
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true)
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true)
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true)

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 3         
      ================================================      

final_goal(3, complete_tower(blue,puzzle_room_table), false, false)
final_goal(3, complete_tower(red,puzzle_room_table), false, false)
final_goal(3, in_tower((block,1),(block,1)), true, false)
final_goal(3, in_tower((block,1),(block,2)), true, false)
final_goal(3, in_tower((block,1),(block,3)), true, false)
final_goal(3, in_tower((block,1),(block,4)), true, false)
final_goal(3, in_tower((block,1),(block,5)), true, false)
final_goal(3, in_tower((block,1),(block,6)), true, false)
final_goal(3, in_tower((block,2),(block,1)), true, false)
final_goal(3, in_tower((block,2),(block,2)), true, false)
final_goal(3, in_tower((block,2),(block,3)), true, false)
final_goal(3, in_tower((block,2),(block,4)), true, false)
final_goal(3, in_tower((block,2),(block,5)), true, false)
final_goal(3, in_tower((block,2),(block,6)), true, false)
final_goal(3, in_tower((block,3),(block,1)), false, false)
final_goal(3, in_tower((block,3),(block,2)), false, false)
final_goal(3, in_tower((block,3),(block,3)), false, false)
final_goal(3, in_tower((block,3),(block,4)), true, false)
final_goal(3, in_tower((block,3),(block,5)), true, false)
final_goal(3, in_tower((block,3),(block,6)), true, false)
final_goal(3, in_tower((block,4),(block,1)), true, false)
final_goal(3, in_tower((block,4),(block,2)), true, false)
final_goal(3, in_tower((block,4),(block,3)), true, false)
final_goal(3, in_tower((block,4),(block,4)), true, false)
final_goal(3, in_tower((block,4),(block,5)), true, false)
final_goal(3, in_tower((block,4),(block,6)), true, false)
final_goal(3, in_tower((block,5),(block,1)), true, false)
final_goal(3, in_tower((block,5),(block,2)), true, false)
final_goal(3, in_tower((block,5),(block,3)), true, false)
final_goal(3, in_tower((block,5),(block,4)), true, false)
final_goal(3, in_tower((block,5),(block,5)), true, false)
final_goal(3, in_tower((block,5),(block,6)), true, false)
final_goal(3, in_tower((block,6),(block,1)), true, false)
final_goal(3, in_tower((block,6),(block,2)), true, false)
final_goal(3, in_tower((block,6),(block,3)), true, false)
final_goal(3, in_tower((block,6),(block,4)), false, false)
final_goal(3, in_tower((block,6),(block,5)), false, false)
final_goal(3, in_tower((block,6),(block,6)), false, false)
final_goal(3, on((block,1)), (block,3), false)
final_goal(3, on((block,1)), (block,4), false)
final_goal(3, on((block,1)), (block,5), false)
final_goal(3, on((block,1)), (block,6), false)
final_goal(3, on((block,1)), nothing, false)
final_goal(3, on((block,1)), puzzle_room_table, false)
final_goal(3, on((block,2)), (block,1), false)
final_goal(3, on((block,2)), (block,4), false)
final_goal(3, on((block,2)), (block,5), false)
final_goal(3, on((block,2)), (block,6), false)
final_goal(3, on((block,2)), nothing, false)
final_goal(3, on((block,2)), puzzle_room_table, false)
final_goal(3, on((block,3)), (block,1), false)
final_goal(3, on((block,3)), (block,2), false)
final_goal(3, on((block,3)), (block,4), false)
final_goal(3, on((block,3)), (block,5), false)
final_goal(3, on((block,3)), (block,6), false)
final_goal(3, on((block,3)), nothing, false)
final_goal(3, on((block,4)), (block,1), false)
final_goal(3, on((block,4)), (block,2), false)
final_goal(3, on((block,4)), (block,3), false)
final_goal(3, on((block,4)), (block,6), false)
final_goal(3, on((block,4)), nothing, false)
final_goal(3, on((block,4)), puzzle_room_table, false)
final_goal(3, on((block,5)), (block,1), false)
final_goal(3, on((block,5)), (block,2), false)
final_goal(3, on((block,5)), (block,3), false)
final_goal(3, on((block,5)), (block,4), false)
final_goal(3, on((block,5)), nothing, false)
final_goal(3, on((block,5)), puzzle_room_table, false)
final_goal(3, on((block,6)), (block,1), false)
final_goal(3, on((block,6)), (block,2), false)
final_goal(3, on((block,6)), (block,3), false)
final_goal(3, on((block,6)), (block,4), false)
final_goal(3, on((block,6)), (block,5), false)
final_goal(3, on((block,6)), nothing, false)
final_goal(3, tower_base((block,1),puzzle_room_table), true, false)
final_goal(3, tower_base((block,2),puzzle_room_table), true, false)
final_goal(3, tower_base((block,3),puzzle_room_table), false, false)
final_goal(3, tower_base((block,4),puzzle_room_table), true, false)
final_goal(3, tower_base((block,5),puzzle_room_table), true, false)
final_goal(3, tower_base((block,6),puzzle_room_table), false, false)
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false)
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false)
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false)
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false)
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false)
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false)

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 2         
      ================================================      

final_goal(2, complete_tower(blue,puzzle_room_table), true, true)
final_goal(2, complete_tower(red,puzzle_room_table), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, tower_base((block,1),puzzle_room_table), false, true)
final_goal(2, tower_base((block,2),puzzle_room_table), false, true)
final_goal(2, tower_base((block,3),puzzle_room_table), true, true)
final_goal(2, tower_base((block,4),puzzle_room_table), false, true)
final_goal(2, tower_base((block,5),puzzle_room_table), false, true)
final_goal(2, tower_base((block,6),puzzle_room_table), true, true)
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true)

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 2         
      ================================================      

final_goal(2, complete_tower(blue,puzzle_room_table), false, false)
final_goal(2, complete_tower(red,puzzle_room_table), false, false)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, tower_base((block,1),puzzle_room_table), true, false)
final_goal(2, tower_base((block,2),puzzle_room_table), true, false)
final_goal(2, tower_base((block,3),puzzle_room_table), false, false)
final_goal(2, tower_base((block,4),puzzle_room_table), true, false)
final_goal(2, tower_base((block,5),puzzle_room_table), true, false)
final_goal(2, tower_base((block,6),puzzle_room_table), false, false)
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false)

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 1         
      ================================================      

final_goal(1, complete_tower(blue,puzzle_room_table), true, true)
final_goal(1, complete_tower(red,puzzle_room_table), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1),puzzle_room_table), false, true)
final_goal(1, tower_base((block,2),puzzle_room_table), false, true)
final_goal(1, tower_base((block,3),puzzle_room_table), true, true)
final_goal(1, tower_base((block,4),puzzle_room_table), false, true)
final_goal(1, tower_base((block,5),puzzle_room_table), false, true)
final_goal(1, tower_base((block,6),puzzle_room_table), true, true)
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true)

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 1         
      ================================================      

final_goal(1, complete_tower(blue,puzzle_room_table), false, false)
final_goal(1, complete_tower(red,puzzle_room_table), false, false)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, tower_base((block,1),puzzle_room_table), true, false)
final_goal(1, tower_base((block,2),puzzle_room_table), true, false)
final_goal(1, tower_base((block,3),puzzle_room_table), false, false)
final_goal(1, tower_base((block,4),puzzle_room_table), true, false)
final_goal(1, tower_base((block,5),puzzle_room_table), true, false)
final_goal(1, tower_base((block,6),puzzle_room_table), false, false)
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false)

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Hierarchical planning problem successfully initialised:
Initial State is UNIQUE, Final-Goal is UNIQUE

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> The given problem specification has a unique interpretation (exactly one stable model exists).

[03-01-2022_17-11-06] INFO :: Experiment >> 

  ################################################################################################  
                   Running experiments : Initial runs = 0 : Experimental runs = 1                   
  ################################################################################################  

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', 3)
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000018B1F48BE80>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', False)
	('use_search_length_bound', False)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 100)
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3] : ONLINE MODE

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 2 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 1 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 3, Highest = 3.

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 1 by method ground-first is [1-3].

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 3

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000018B1F48BE80>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 100)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = False
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
Level = 3
Concurrency = disabled
Problem Type = classical
Minimum search length bound = disabled with value 0

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[03-01-2022_17-11-06] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-01-2022_17-11-06] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 68 rules into program part ash_initial_state:

holds(3, complete_tower(blue,puzzle_room_table), false, 0).
holds(3, complete_tower(red,puzzle_room_table), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, tower_base((block,1),puzzle_room_table), true, 0).
holds(3, tower_base((block,2),puzzle_room_table), true, 0).
holds(3, tower_base((block,3),puzzle_room_table), false, 0).
holds(3, tower_base((block,4),puzzle_room_table), false, 0).
holds(3, tower_base((block,5),puzzle_room_table), false, 0).
holds(3, tower_base((block,6),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 0).

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 142 rules into program part ash_goal_state:

final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000018B1F45FD30>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=1, step_end_max=100, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 569 rules

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005987399999999976s

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027110s.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003733s with result Satisfiable.

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000018B1F452C70>

[03-01-2022_17-11-06] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 3)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000018B1F48BE80>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000018B1F452C70>)

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, true). %* None *%
#program optimisation_module(#inc, 0, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.057398s.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005360s with result Unsatisfiable.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06275800000000009, Incremental time limit = None
Running cumulative time = 0.06275800000000009, Cumulative time limit = 1800
Used memory = (RSS = 114.480469Mb, VMS = 101.234375Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.045972s.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003463s with result Unsatisfiable.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.049434999999999896, Incremental time limit = None
Running cumulative time = 0.11219299999999999, Cumulative time limit = 1800
Used memory = (RSS = 116.121094Mb, VMS = 102.925781Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.049688s.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005097s with result Unsatisfiable.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.05478570000000005, Incremental time limit = None
Running cumulative time = 0.16697870000000004, Cumulative time limit = 1800
Used memory = (RSS = 118.285156Mb, VMS = 105.042969Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.052847s.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006507s with result Unsatisfiable.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.05935450000000042, Incremental time limit = None
Running cumulative time = 0.22633320000000046, Cumulative time limit = 1800
Used memory = (RSS = 119.828125Mb, VMS = 106.613281Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.061981s.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005542s with result Unsatisfiable.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06752269999999871, Incremental time limit = None
Running cumulative time = 0.29385589999999917, Cumulative time limit = 1800
Used memory = (RSS = 122.925781Mb, VMS = 109.804688Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.054412s.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006045s with result Unsatisfiable.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0604572000000001, Incremental time limit = None
Running cumulative time = 0.35431309999999927, Cumulative time limit = 1800
Used memory = (RSS = 126.054688Mb, VMS = 112.851562Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)])]

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.064616s.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009449s with result Unsatisfiable.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07406509999999944, Incremental time limit = None
Running cumulative time = 0.4283781999999987, Cumulative time limit = 1800
Used memory = (RSS = 129.421875Mb, VMS = 116.554688Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)])]

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.054065s.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009007s with result Unsatisfiable.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06307229999999997, Incremental time limit = None
Running cumulative time = 0.4914504999999987, Cumulative time limit = 1800
Used memory = (RSS = 132.847656Mb, VMS = 120.093750Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)])]

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.060121s.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009066s with result Unsatisfiable.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06918660000000099, Incremental time limit = None
Running cumulative time = 0.5606370999999997, Cumulative time limit = 1800
Used memory = (RSS = 136.308594Mb, VMS = 124.019531Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)])]

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.055216s.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044998s with result Unsatisfiable.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10021439999999959, Incremental time limit = None
Running cumulative time = 0.6608514999999993, Cumulative time limit = 1800
Used memory = (RSS = 138.414062Mb, VMS = 125.921875Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)])]

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.062156s.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013556s with result Unsatisfiable.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07571199999999934, Incremental time limit = None
Running cumulative time = 0.7365634999999986, Cumulative time limit = 1800
Used memory = (RSS = 140.152344Mb, VMS = 127.445312Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)])]

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.057853s.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018009s with result Unsatisfiable.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0758618000000002, Incremental time limit = None
Running cumulative time = 0.8124252999999988, Cumulative time limit = 1800
Used memory = (RSS = 143.625000Mb, VMS = 130.921875Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)])]

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.062508s.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027208s with result Unsatisfiable.

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08971679999999971, Incremental time limit = None
Running cumulative time = 0.9021420999999985, Cumulative time limit = 1800
Used memory = (RSS = 147.597656Mb, VMS = 135.832031Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)])]

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.065849s.

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.038769s with result Unsatisfiable.

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10461790000000004, Incremental time limit = None
Running cumulative time = 1.0067599999999985, Cumulative time limit = 1800
Used memory = (RSS = 149.027344Mb, VMS = 137.000000Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)])]

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.064757s.

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.084414s with result Unsatisfiable.

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14917070000000088, Incremental time limit = None
Running cumulative time = 1.1559306999999994, Cumulative time limit = 1800
Used memory = (RSS = 151.996094Mb, VMS = 139.789062Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)])]

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.062031s.

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.147699s with result Unsatisfiable.

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.20972969999999957, Incremental time limit = None
Running cumulative time = 1.365660399999999, Cumulative time limit = 1800
Used memory = (RSS = 155.347656Mb, VMS = 143.312500Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)])]

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.064414s.

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.159304s with result Unsatisfiable.

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2237171, Incremental time limit = None
Running cumulative time = 1.589377499999999, Cumulative time limit = 1800
Used memory = (RSS = 158.785156Mb, VMS = 146.691406Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)])]

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.076619s.

[03-01-2022_17-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.296811s with result Unsatisfiable.

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3734302000000005, Incremental time limit = None
Running cumulative time = 1.9628076999999995, Cumulative time limit = 1800
Used memory = (RSS = 164.996094Mb, VMS = 154.703125Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)])]

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.086909s.

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.558411s with result Unsatisfiable.

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6453199999999999, Incremental time limit = None
Running cumulative time = 2.6081276999999994, Cumulative time limit = 1800
Used memory = (RSS = 170.265625Mb, VMS = 159.914062Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =      1 : Maximum =    100

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)])]

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.079989s.

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.075799s with result Satisfiable.

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.15578809999999965, Incremental time limit = None
Running cumulative time = 2.763915799999999, Cumulative time limit = 1800
Used memory = (RSS = 174.093750Mb, VMS = 163.726562Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.239401s, Solving = 1.524514s, Total = 2.763916s, Memory = (RSS = 174.093750Mb, VMS = 163.726562Mb), Step range = [0-20]), Calls = 20
Final Model :: Total atoms = 9748, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.057398s, Solving = 0.005360s, Total = 0.062758s, Memory = (RSS = 114.480469Mb, VMS = 101.234375Mb), Step range = [0-1]
2 : Statistics :: Grounding = 0.045972s, Solving = 0.003463s, Total = 0.049435s, Memory = (RSS = 116.121094Mb, VMS = 102.925781Mb), Step range = [2-2]
3 : Statistics :: Grounding = 0.049688s, Solving = 0.005097s, Total = 0.054786s, Memory = (RSS = 118.285156Mb, VMS = 105.042969Mb), Step range = [3-3]
4 : Statistics :: Grounding = 0.052847s, Solving = 0.006507s, Total = 0.059355s, Memory = (RSS = 119.828125Mb, VMS = 106.613281Mb), Step range = [4-4]
5 : Statistics :: Grounding = 0.061981s, Solving = 0.005542s, Total = 0.067523s, Memory = (RSS = 122.925781Mb, VMS = 109.804688Mb), Step range = [5-5]
6 : Statistics :: Grounding = 0.054412s, Solving = 0.006045s, Total = 0.060457s, Memory = (RSS = 126.054688Mb, VMS = 112.851562Mb), Step range = [6-6]
7 : Statistics :: Grounding = 0.064616s, Solving = 0.009449s, Total = 0.074065s, Memory = (RSS = 129.421875Mb, VMS = 116.554688Mb), Step range = [7-7]
8 : Statistics :: Grounding = 0.054065s, Solving = 0.009007s, Total = 0.063072s, Memory = (RSS = 132.847656Mb, VMS = 120.093750Mb), Step range = [8-8]
9 : Statistics :: Grounding = 0.060121s, Solving = 0.009066s, Total = 0.069187s, Memory = (RSS = 136.308594Mb, VMS = 124.019531Mb), Step range = [9-9]
10 : Statistics :: Grounding = 0.055216s, Solving = 0.044998s, Total = 0.100214s, Memory = (RSS = 138.414062Mb, VMS = 125.921875Mb), Step range = [10-10]
11 : Statistics :: Grounding = 0.062156s, Solving = 0.013556s, Total = 0.075712s, Memory = (RSS = 140.152344Mb, VMS = 127.445312Mb), Step range = [11-11]
12 : Statistics :: Grounding = 0.057853s, Solving = 0.018009s, Total = 0.075862s, Memory = (RSS = 143.625000Mb, VMS = 130.921875Mb), Step range = [12-12]
13 : Statistics :: Grounding = 0.062508s, Solving = 0.027208s, Total = 0.089717s, Memory = (RSS = 147.597656Mb, VMS = 135.832031Mb), Step range = [13-13]
14 : Statistics :: Grounding = 0.065849s, Solving = 0.038769s, Total = 0.104618s, Memory = (RSS = 149.027344Mb, VMS = 137.000000Mb), Step range = [14-14]
15 : Statistics :: Grounding = 0.064757s, Solving = 0.084414s, Total = 0.149171s, Memory = (RSS = 151.996094Mb, VMS = 139.789062Mb), Step range = [15-15]
16 : Statistics :: Grounding = 0.062031s, Solving = 0.147699s, Total = 0.209730s, Memory = (RSS = 155.347656Mb, VMS = 143.312500Mb), Step range = [16-16]
17 : Statistics :: Grounding = 0.064414s, Solving = 0.159304s, Total = 0.223717s, Memory = (RSS = 158.785156Mb, VMS = 146.691406Mb), Step range = [17-17]
18 : Statistics :: Grounding = 0.076619s, Solving = 0.296811s, Total = 0.373430s, Memory = (RSS = 164.996094Mb, VMS = 154.703125Mb), Step range = [18-18]
19 : Statistics :: Grounding = 0.086909s, Solving = 0.558411s, Total = 0.645320s, Memory = (RSS = 170.265625Mb, VMS = 159.914062Mb), Step range = [19-19]
20 : Statistics :: Grounding = 0.079989s, Solving = 0.075799s, Total = 0.155788s, Memory = (RSS = 174.093750Mb, VMS = 163.726562Mb), Step range = [20-20]

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.763916s due to: Stop condition reached.

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.239401s, Solving = 1.524514s, Total = 2.763916s, Memory = (RSS = 174.093750Mb, VMS = 163.726562Mb), Step range = [0-20]), Calls = 20
Model :: Total atoms = 9748, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 20 :: Actions = 20                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room)
Step 2:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,6))
Step 3:
    Planned actions:
        talos : move(puzzle_room)
Step 4:
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 5:
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 6:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
Step 7:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 8:
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 9:
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 10:
    Planned actions:
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 11:
    Planned actions:
        talos : release(manipulator_arm_2,(block,2))
Step 12:
    Planned actions:
        talos : move(store_room)
Step 13:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 14:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
Step 15:
    Planned actions:
        talos : move(puzzle_room)
Step 16:
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 17:
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 18:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
Step 19:
    Planned actions:
        talos : put(manipulator_arm_1,(block,4),(block,5))
Step 20:
    Planned actions:
        talos : put(manipulator_arm_2,(block,1),(block,2))

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 3 (classic), LE =  20, AC =  20, CF = 1.0, GT =   1.27s, ST =   1.53s, OT = 0.00s, TT =   2.79s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)

[03-01-2022_17-11-10] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=20, start_step=0, blend=Blend(left=0, right=0)

[03-01-2022_17-11-10] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=10, large_group_size=11

[03-01-2022_17-11-10] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=10, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 20, Sub-goal Stage Range = [1-20]
Division points [total=1] : [(Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 3 solved.

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 1 at level 2:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 20, Sub-goal Stage Range = [1-20]
Division points [total=1] : [(Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-10]

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [1-10], problem number = 1, increment number = 1

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 10)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000018B1F48BE80>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 100)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 10
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 9

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
Level = 2
Concurrency = disabled
Problem Type = partial conformance refinement (sequential) with sgoals range [1-10]
Minimum search length bound = disabled with value 9

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[03-01-2022_17-11-10] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-01-2022_17-11-10] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 0).
holds(2, complete_tower(red,puzzle_room_table), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1),puzzle_room_table), true, 0).
holds(2, tower_base((block,2),puzzle_room_table), true, 0).
holds(2, tower_base((block,3),puzzle_room_table), false, 0).
holds(2, tower_base((block,4),puzzle_room_table), false, 0).
holds(2, tower_base((block,5),puzzle_room_table), false, 0).
holds(2, tower_base((block,6),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(3, complete_tower(blue,puzzle_room_table), false, 0).
holds(3, complete_tower(red,puzzle_room_table), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, tower_base((block,1),puzzle_room_table), true, 0).
holds(3, tower_base((block,2),puzzle_room_table), true, 0).
holds(3, tower_base((block,3),puzzle_room_table), false, 0).
holds(3, tower_base((block,4),puzzle_room_table), false, 0).
holds(3, tower_base((block,5),puzzle_room_table), false, 0).
holds(3, tower_base((block,6),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 0).

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 3})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 4})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 10})

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(3, talos, move(store_room), in(talos), store_room, 1).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 2).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 3).
sub_goal(3, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 4).
sub_goal(3, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 5).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 6).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 7).
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 8).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 9).
sub_goal(3, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 10).

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000018B1F3B3280>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=10, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 10, 'sequential', 'true'), range_=None)]

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 796 rules

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00461720000000021s

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.022073s.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005690s with result Satisfiable.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000018B224E23B0>

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 0)
	('last_sgoals', 10)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000018B1F48BE80>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000018B224E23B0>)

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 10, sequential, true). %* None *%

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.088157s.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010216s with result Unsatisfiable.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09837339999999895, Incremental time limit = None
Running cumulative time = 0.09837339999999895, Cumulative time limit = 1800
Used memory = (RSS = 134.476562Mb, VMS = 126.972656Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.08815739999999916, solving_time=0.01021599999999978, total_time=0.09837339999999895, memory=Memory(rss=134.4765625, vms=126.97265625), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08815739999999916, solving_time=0.01021599999999978, total_time=0.09837339999999895, memory=Memory(rss=134.4765625, vms=126.97265625), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 8416.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16885.0, 'bodies_tr': 16885.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 227.0, 'count_bodies_tr': 227.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 358.0, 'rules': 34844.0, 'rules_normal': 34512.0, 'rules_choice': 331.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 34844.0, 'rules_tr_normal': 34512.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 14864.0, 'eqs_atom': 3455.0, 'eqs_body': 1151.0, 'eqs_other': 10258.0}, 'lpStep': {'atoms': 3919.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15701.0, 'bodies_tr': 15701.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 227.0, 'count_bodies_tr': 227.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 358.0, 'rules': 29988.0, 'rules_normal': 29656.0, 'rules_choice': 331.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 29988.0, 'rules_tr_normal': 29656.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8702.0, 'eqs_atom': 1172.0, 'eqs_body': 378.0, 'eqs_other': 7152.0}, 'generator': {'vars': 1741.0, 'vars_eliminated': 0.0, 'vars_frozen': 1155.0, 'constraints': 32.0, 'constraints_binary': 857.0, 'constraints_ternary': 109.0, 'acyc_edges': 0.0, 'complexity': 1012.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 125.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.09873771667480469, 'cpu': 0.109375, 'solve': 0.0019702911376953125, 'unsat': 0.0019702911376953125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1326465606689453, 'cpu': 0.140625, 'solve': 0.0059604644775390625, 'unsat': 0.0019702911376953125, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 133.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.060687s.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004671s with result Unsatisfiable.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.06535780000000013, Incremental time limit = None
Running cumulative time = 0.16373119999999908, Cumulative time limit = 1800
Used memory = (RSS = 136.402344Mb, VMS = 129.593750Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.14884389999999925, solving_time=0.014887299999999826, total_time=0.16373119999999908, memory=Memory(rss=136.40234375, vms=129.59375), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.06068650000000009, solving_time=0.004671300000000045, total_time=0.06535780000000013, memory=Memory(rss=136.40234375, vms=129.59375), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 10103.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 30221.0, 'bodies_tr': 30221.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 408.0, 'count_bodies_tr': 408.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 410.0, 'rules': 60277.0, 'rules_normal': 59792.0, 'rules_choice': 483.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 60277.0, 'rules_tr_normal': 59792.0, 'rules_tr_choice': 483.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 18021.0, 'eqs_atom': 4177.0, 'eqs_body': 1595.0, 'eqs_other': 12249.0}, 'lpStep': {'atoms': 1687.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13336.0, 'bodies_tr': 13336.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 52.0, 'rules': 25433.0, 'rules_normal': 25280.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 25433.0, 'rules_tr_normal': 25280.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3157.0, 'eqs_atom': 722.0, 'eqs_body': 444.0, 'eqs_other': 1991.0}, 'generator': {'vars': 1886.0, 'vars_eliminated': 0.0, 'vars_frozen': 1290.0, 'constraints': 79.0, 'constraints_binary': 1502.0, 'constraints_ternary': 159.0, 'acyc_edges': 0.0, 'complexity': 1772.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 6.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 11.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 222.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 11.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.06538581848144531, 'cpu': 0.0625, 'solve': 0.0009975433349609375, 'unsat': 0.0009975433349609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.19803237915039062, 'cpu': 0.203125, 'solve': 0.0069580078125, 'unsat': 0.00296783447265625, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 6.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 15.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 355.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 15.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.076188s.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005714s with result Unsatisfiable.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08190160000000102, Incremental time limit = None
Running cumulative time = 0.2456328000000001, Cumulative time limit = 1800
Used memory = (RSS = 137.464844Mb, VMS = 130.585938Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.22503169999999972, solving_time=0.020601100000000372, total_time=0.2456328000000001, memory=Memory(rss=137.46484375, vms=130.5859375), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07618780000000047, solving_time=0.005713800000000546, total_time=0.08190160000000102, memory=Memory(rss=137.46484375, vms=130.5859375), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 11979.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 43684.0, 'bodies_tr': 43684.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 589.0, 'count_bodies_tr': 589.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 86050.0, 'rules_normal': 85412.0, 'rules_choice': 635.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 86050.0, 'rules_tr_normal': 85412.0, 'rules_tr_choice': 635.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 22329.0, 'eqs_atom': 5083.0, 'eqs_body': 2050.0, 'eqs_other': 15196.0}, 'lpStep': {'atoms': 1876.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13463.0, 'bodies_tr': 13463.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 8.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 76.0, 'rules': 25773.0, 'rules_normal': 25620.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 25773.0, 'rules_tr_normal': 25620.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4308.0, 'eqs_atom': 906.0, 'eqs_body': 455.0, 'eqs_other': 2947.0}, 'generator': {'vars': 2207.0, 'vars_eliminated': 0.0, 'vars_frozen': 1520.0, 'constraints': 158.0, 'constraints_binary': 3195.0, 'constraints_ternary': 353.0, 'acyc_edges': 0.0, 'complexity': 3772.0}}, 'solving': {'solvers': {'choices': 183.0, 'conflicts': 27.0, 'conflicts_analyzed': 19.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 19.0, 'distributed_sum_lbd': 23.0, 'integrated': 94.0, 'lemmas': 96.0, 'lits_learnt': 138.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 73.0, 'integrated_jumps': 45.0, 'guiding_paths_lits': 343.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 19.0, 'lemmas_loop': 4.0, 'lemmas_other': 73.0, 'lits_conflict': 29.0, 'lits_loop': 24.0, 'lits_other': 85.0, 'jumps': {'jumps': 19.0, 'jumps_bounded': 9.0, 'levels': 585.0, 'levels_bounded': 441.0, 'max': 66.0, 'max_executed': 66.0, 'max_bounded': 49.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.08277702331542969, 'cpu': 0.078125, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2808094024658203, 'cpu': 0.28125, 'solve': 0.008951187133789062, 'unsat': 0.0049610137939453125, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 183.0, 'conflicts': 33.0, 'conflicts_analyzed': 19.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 22.0, 'distributed_sum_lbd': 29.0, 'integrated': 94.0, 'lemmas': 104.0, 'lits_learnt': 153.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 73.0, 'integrated_jumps': 45.0, 'guiding_paths_lits': 698.0, 'guiding_paths': 26.0, 'splits': 0.0, 'lemmas_conflict': 19.0, 'lemmas_loop': 12.0, 'lemmas_other': 73.0, 'lits_conflict': 29.0, 'lits_loop': 39.0, 'lits_other': 85.0, 'jumps': {'jumps': 19.0, 'jumps_bounded': 9.0, 'levels': 585.0, 'levels_bounded': 441.0, 'max': 66.0, 'max_executed': 66.0, 'max_bounded': 49.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.074661s.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008218s with result Unsatisfiable.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.0828793000000001, Incremental time limit = None
Running cumulative time = 0.3285121000000002, Cumulative time limit = 1800
Used memory = (RSS = 138.531250Mb, VMS = 131.492188Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.29969279999999987, solving_time=0.028819300000000325, total_time=0.3285121000000002, memory=Memory(rss=138.53125, vms=131.4921875), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07466110000000015, solving_time=0.008218199999999953, total_time=0.0828793000000001, memory=Memory(rss=138.53125, vms=131.4921875), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 14013.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 57230.0, 'bodies_tr': 57230.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 770.0, 'count_bodies_tr': 770.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 562.0, 'rules': 111953.0, 'rules_normal': 111162.0, 'rules_choice': 787.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 111953.0, 'rules_tr_normal': 111162.0, 'rules_tr_choice': 787.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 27064.0, 'eqs_atom': 5998.0, 'eqs_body': 2514.0, 'eqs_other': 18552.0}, 'lpStep': {'atoms': 2034.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13546.0, 'bodies_tr': 13546.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 8.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 76.0, 'rules': 25903.0, 'rules_normal': 25750.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 25903.0, 'rules_tr_normal': 25750.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4735.0, 'eqs_atom': 915.0, 'eqs_body': 464.0, 'eqs_other': 3356.0}, 'generator': {'vars': 2537.0, 'vars_eliminated': 0.0, 'vars_frozen': 1756.0, 'constraints': 198.0, 'constraints_binary': 4193.0, 'constraints_ternary': 407.0, 'acyc_edges': 0.0, 'complexity': 4882.0}}, 'solving': {'solvers': {'choices': 183.0, 'conflicts': 43.0, 'conflicts_analyzed': 35.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 29.0, 'distributed_sum_lbd': 43.0, 'integrated': 125.0, 'lemmas': 168.0, 'lits_learnt': 404.0, 'lemmas_binary': 24.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.0, 'integrated_imps': 75.0, 'integrated_jumps': 12.0, 'guiding_paths_lits': 427.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 15.0, 'lemmas_other': 125.0, 'lits_conflict': 59.0, 'lits_loop': 58.0, 'lits_other': 287.0, 'jumps': {'jumps': 35.0, 'jumps_bounded': 16.0, 'levels': 1088.0, 'levels_bounded': 916.0, 'max': 70.0, 'max_executed': 70.0, 'max_bounded': 61.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.08380508422851562, 'cpu': 0.078125, 'solve': 0.0009975433349609375, 'unsat': 0.0009975433349609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.36461448669433594, 'cpu': 0.359375, 'solve': 0.00994873046875, 'unsat': 0.00595855712890625, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 366.0, 'conflicts': 76.0, 'conflicts_analyzed': 54.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 51.0, 'distributed_sum_lbd': 72.0, 'integrated': 219.0, 'lemmas': 272.0, 'lits_learnt': 557.0, 'lemmas_binary': 29.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.0, 'integrated_imps': 148.0, 'integrated_jumps': 57.0, 'guiding_paths_lits': 1125.0, 'guiding_paths': 33.0, 'splits': 0.0, 'lemmas_conflict': 47.0, 'lemmas_loop': 27.0, 'lemmas_other': 198.0, 'lits_conflict': 88.0, 'lits_loop': 97.0, 'lits_other': 372.0, 'jumps': {'jumps': 54.0, 'jumps_bounded': 25.0, 'levels': 1673.0, 'levels_bounded': 1357.0, 'max': 70.0, 'max_executed': 70.0, 'max_bounded': 61.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.090012s.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006836s with result Unsatisfiable.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09684769999999965, Incremental time limit = None
Running cumulative time = 0.42535979999999984, Cumulative time limit = 1800
Used memory = (RSS = 141.031250Mb, VMS = 134.257812Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.38970479999999963, solving_time=0.035655000000000214, total_time=0.42535979999999984, memory=Memory(rss=141.03125, vms=134.2578125), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09001199999999976, solving_time=0.006835699999999889, total_time=0.09684769999999965, memory=Memory(rss=141.03125, vms=134.2578125), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 16047.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 70973.0, 'bodies_tr': 70973.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 951.0, 'count_bodies_tr': 951.0, 'sccs': 52.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 648.0, 'rules': 138098.0, 'rules_normal': 137154.0, 'rules_choice': 939.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 138098.0, 'rules_tr_normal': 137154.0, 'rules_tr_choice': 939.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 31342.0, 'eqs_atom': 6891.0, 'eqs_body': 2904.0, 'eqs_other': 21547.0}, 'lpStep': {'atoms': 2034.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13743.0, 'bodies_tr': 13743.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 86.0, 'rules': 26145.0, 'rules_normal': 25992.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 26145.0, 'rules_tr_normal': 25992.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4278.0, 'eqs_atom': 893.0, 'eqs_body': 390.0, 'eqs_other': 2995.0}, 'generator': {'vars': 3074.0, 'vars_eliminated': 0.0, 'vars_frozen': 2129.0, 'constraints': 271.0, 'constraints_binary': 6940.0, 'constraints_ternary': 731.0, 'acyc_edges': 0.0, 'complexity': 8064.0}}, 'solving': {'solvers': {'choices': 90.0, 'conflicts': 21.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 13.0, 'distributed_sum_lbd': 27.0, 'integrated': 60.0, 'lemmas': 69.0, 'lits_learnt': 179.0, 'lemmas_binary': 10.0, 'lemmas_ternary': 20.0, 'cpu_time': 0.0, 'integrated_imps': 37.0, 'integrated_jumps': 45.0, 'guiding_paths_lits': 438.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 0.0, 'lemmas_other': 56.0, 'lits_conflict': 33.0, 'lits_loop': 0.0, 'lits_other': 146.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 5.0, 'levels': 338.0, 'levels_bounded': 293.0, 'max': 84.0, 'max_executed': 84.0, 'max_bounded': 73.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.09873580932617188, 'cpu': 0.09375, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4633502960205078, 'cpu': 0.453125, 'solve': 0.011943817138671875, 'unsat': 0.007953643798828125, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 456.0, 'conflicts': 97.0, 'conflicts_analyzed': 69.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 64.0, 'distributed_sum_lbd': 99.0, 'integrated': 279.0, 'lemmas': 341.0, 'lits_learnt': 736.0, 'lemmas_binary': 39.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.0, 'integrated_imps': 185.0, 'integrated_jumps': 102.0, 'guiding_paths_lits': 1563.0, 'guiding_paths': 39.0, 'splits': 0.0, 'lemmas_conflict': 60.0, 'lemmas_loop': 27.0, 'lemmas_other': 254.0, 'lits_conflict': 121.0, 'lits_loop': 97.0, 'lits_other': 518.0, 'jumps': {'jumps': 69.0, 'jumps_bounded': 30.0, 'levels': 2011.0, 'levels_bounded': 1650.0, 'max': 84.0, 'max_executed': 84.0, 'max_bounded': 73.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.068968s.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008162s with result Unsatisfiable.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.07712990000000008, Incremental time limit = None
Running cumulative time = 0.5024896999999999, Cumulative time limit = 1800
Used memory = (RSS = 141.816406Mb, VMS = 134.929688Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.45867289999999983, solving_time=0.0438168000000001, total_time=0.5024896999999999, memory=Memory(rss=141.81640625, vms=134.9296875), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.0689681000000002, solving_time=0.008161799999999886, total_time=0.07712990000000008, memory=Memory(rss=141.81640625, vms=134.9296875), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 18175.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 84877.0, 'bodies_tr': 84877.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1132.0, 'count_bodies_tr': 1132.0, 'sccs': 62.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 735.0, 'rules': 164513.0, 'rules_normal': 163416.0, 'rules_choice': 1091.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 164513.0, 'rules_tr_normal': 163416.0, 'rules_tr_choice': 1091.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 36010.0, 'eqs_atom': 7878.0, 'eqs_body': 3301.0, 'eqs_other': 24831.0}, 'lpStep': {'atoms': 2128.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13904.0, 'bodies_tr': 13904.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 87.0, 'rules': 26415.0, 'rules_normal': 26262.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 26415.0, 'rules_tr_normal': 26262.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4668.0, 'eqs_atom': 987.0, 'eqs_body': 397.0, 'eqs_other': 3284.0}, 'generator': {'vars': 3683.0, 'vars_eliminated': 0.0, 'vars_frozen': 2525.0, 'constraints': 364.0, 'constraints_binary': 10159.0, 'constraints_ternary': 1161.0, 'acyc_edges': 0.0, 'complexity': 11844.0}}, 'solving': {'solvers': {'choices': 198.0, 'conflicts': 48.0, 'conflicts_analyzed': 40.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 36.0, 'distributed_sum_lbd': 78.0, 'integrated': 199.0, 'lemmas': 253.0, 'lits_learnt': 1028.0, 'lemmas_binary': 68.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.0, 'integrated_imps': 112.0, 'integrated_jumps': 143.0, 'guiding_paths_lits': 595.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 36.0, 'lemmas_loop': 23.0, 'lemmas_other': 194.0, 'lits_conflict': 151.0, 'lits_loop': 129.0, 'lits_other': 748.0, 'jumps': {'jumps': 40.0, 'jumps_bounded': 2.0, 'levels': 63.0, 'levels_bounded': 2.0, 'max': 6.0, 'max_executed': 6.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.07779312133789062, 'cpu': 0.0625, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5411434173583984, 'cpu': 0.515625, 'solve': 0.01393890380859375, 'unsat': 0.00994873046875, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 654.0, 'conflicts': 145.0, 'conflicts_analyzed': 109.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 100.0, 'distributed_sum_lbd': 177.0, 'integrated': 478.0, 'lemmas': 594.0, 'lits_learnt': 1764.0, 'lemmas_binary': 107.0, 'lemmas_ternary': 42.0, 'cpu_time': 0.0, 'integrated_imps': 297.0, 'integrated_jumps': 245.0, 'guiding_paths_lits': 2158.0, 'guiding_paths': 46.0, 'splits': 0.0, 'lemmas_conflict': 96.0, 'lemmas_loop': 50.0, 'lemmas_other': 448.0, 'lits_conflict': 272.0, 'lits_loop': 226.0, 'lits_other': 1266.0, 'jumps': {'jumps': 109.0, 'jumps_bounded': 32.0, 'levels': 2074.0, 'levels_bounded': 1652.0, 'max': 84.0, 'max_executed': 84.0, 'max_bounded': 73.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.076775s.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016205s with result Satisfiable.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09298009999999923, Incremental time limit = None
Running cumulative time = 0.5954697999999992, Cumulative time limit = 1800
Used memory = (RSS = 145.601562Mb, VMS = 138.894531Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.535448s, Solving = 0.060022s, Total = 0.595470s, Memory = (RSS = 145.601562Mb, VMS = 138.894531Mb), Step range = [0-7]), Calls = 7
Final Model :: Total atoms = 5614, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.5354475999999995, solving_time=0.06002219999999969, total_time=0.5954697999999992, memory=Memory(rss=145.6015625, vms=138.89453125), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07677469999999964, solving_time=0.016205399999999592, total_time=0.09298009999999923, memory=Memory(rss=145.6015625, vms=138.89453125), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 20309.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 99184.0, 'bodies_tr': 99184.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1313.0, 'count_bodies_tr': 1313.0, 'sccs': 82.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1055.0, 'rules': 191471.0, 'rules_normal': 190221.0, 'rules_choice': 1243.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 191471.0, 'rules_tr_normal': 190221.0, 'rules_tr_choice': 1243.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 41404.0, 'eqs_atom': 8903.0, 'eqs_body': 3522.0, 'eqs_other': 28979.0}, 'lpStep': {'atoms': 2134.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14307.0, 'bodies_tr': 14307.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 320.0, 'rules': 26958.0, 'rules_normal': 26805.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 26958.0, 'rules_tr_normal': 26805.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5394.0, 'eqs_atom': 1025.0, 'eqs_body': 221.0, 'eqs_other': 4148.0}, 'generator': {'vars': 5030.0, 'vars_eliminated': 0.0, 'vars_frozen': 3390.0, 'constraints': 657.0, 'constraints_binary': 20590.0, 'constraints_ternary': 2318.0, 'acyc_edges': 0.0, 'complexity': 23767.0}}, 'solving': {'solvers': {'choices': 693.0, 'conflicts': 71.0, 'conflicts_analyzed': 71.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 149.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 65.0, 'distributed_sum_lbd': 161.0, 'integrated': 346.0, 'lemmas': 515.0, 'lits_learnt': 2954.0, 'lemmas_binary': 173.0, 'lemmas_ternary': 48.0, 'cpu_time': 0.109375, 'integrated_imps': 103.0, 'integrated_jumps': 181.0, 'guiding_paths_lits': 679.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 70.0, 'lemmas_loop': 102.0, 'lemmas_other': 343.0, 'lits_conflict': 407.0, 'lits_loop': 679.0, 'lits_other': 1868.0, 'jumps': {'jumps': 71.0, 'jumps_bounded': 8.0, 'levels': 280.0, 'levels_bounded': 104.0, 'max': 98.0, 'max_executed': 98.0, 'max_bounded': 97.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.09428215026855469, 'cpu': 0.1875, 'solve': 0.009002685546875, 'unsat': 0.0, 'sat': 0.00299072265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6354255676269531, 'cpu': 0.703125, 'solve': 0.02294158935546875, 'unsat': 0.00994873046875, 'sat': 0.004985809326171875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1347.0, 'conflicts': 216.0, 'conflicts_analyzed': 180.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 150.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 165.0, 'distributed_sum_lbd': 338.0, 'integrated': 824.0, 'lemmas': 1109.0, 'lits_learnt': 4718.0, 'lemmas_binary': 280.0, 'lemmas_ternary': 90.0, 'cpu_time': 0.109375, 'integrated_imps': 400.0, 'integrated_jumps': 426.0, 'guiding_paths_lits': 2837.0, 'guiding_paths': 53.0, 'splits': 0.0, 'lemmas_conflict': 166.0, 'lemmas_loop': 152.0, 'lemmas_other': 791.0, 'lits_conflict': 679.0, 'lits_loop': 905.0, 'lits_other': 3134.0, 'jumps': {'jumps': 180.0, 'jumps_bounded': 40.0, 'levels': 2354.0, 'levels_bounded': 1756.0, 'max': 98.0, 'max_executed': 98.0, 'max_bounded': 97.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7}

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 2 ( 20.00% solved)

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=None)

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 7]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 2)

[03-01-2022_17-11-10] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.084145s.

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 8: original = External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=None), conversion = current_last_sgoals(2,7).

[03-01-2022_17-11-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015527s with result Unsatisfiable.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09967199999999998, Incremental time limit = None
Running cumulative time = 0.6951417999999991, Cumulative time limit = 1800
Used memory = (RSS = 148.585938Mb, VMS = 140.632812Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.619592299999999, solving_time=0.07554950000000016, total_time=0.6951417999999991, memory=Memory(rss=148.5859375, vms=140.6328125), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08414469999999952, solving_time=0.015527300000000466, total_time=0.09967199999999998, memory=Memory(rss=148.5859375, vms=140.6328125), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 22500.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 113556.0, 'bodies_tr': 113556.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1494.0, 'count_bodies_tr': 1494.0, 'sccs': 102.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1375.0, 'rules': 218541.0, 'rules_normal': 217138.0, 'rules_choice': 1395.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 218541.0, 'rules_tr_normal': 217138.0, 'rules_tr_choice': 1395.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 47039.0, 'eqs_atom': 9960.0, 'eqs_body': 3779.0, 'eqs_other': 33300.0}, 'lpStep': {'atoms': 2191.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14372.0, 'bodies_tr': 14372.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 320.0, 'rules': 27070.0, 'rules_normal': 26917.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27070.0, 'rules_tr_normal': 26917.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5635.0, 'eqs_atom': 1057.0, 'eqs_body': 257.0, 'eqs_other': 4321.0}, 'generator': {'vars': 6370.0, 'vars_eliminated': 0.0, 'vars_frozen': 4250.0, 'constraints': 710.0, 'constraints_binary': 22330.0, 'constraints_ternary': 2432.0, 'acyc_edges': 0.0, 'complexity': 25692.0}}, 'solving': {'solvers': {'choices': 1.0, 'conflicts': 8.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 7.0, 'lits_learnt': 44.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 654.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 6.0, 'lemmas_other': 0.0, 'lits_conflict': 2.0, 'lits_loop': 42.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 2.0, 'levels_bounded': 1.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.10223770141601562, 'cpu': 0.109375, 'solve': 0.002994537353515625, 'unsat': 0.002994537353515625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.7376632690429688, 'cpu': 0.8125, 'solve': 0.025936126708984375, 'unsat': 0.012943267822265625, 'sat': 0.004985809326171875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1348.0, 'conflicts': 224.0, 'conflicts_analyzed': 181.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 150.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 166.0, 'distributed_sum_lbd': 340.0, 'integrated': 824.0, 'lemmas': 1116.0, 'lits_learnt': 4762.0, 'lemmas_binary': 281.0, 'lemmas_ternary': 90.0, 'cpu_time': 0.109375, 'integrated_imps': 400.0, 'integrated_jumps': 426.0, 'guiding_paths_lits': 3491.0, 'guiding_paths': 59.0, 'splits': 0.0, 'lemmas_conflict': 167.0, 'lemmas_loop': 158.0, 'lemmas_other': 791.0, 'lits_conflict': 681.0, 'lits_loop': 947.0, 'lits_other': 3134.0, 'jumps': {'jumps': 181.0, 'jumps_bounded': 41.0, 'levels': 2356.0, 'levels_bounded': 1757.0, 'max': 98.0, 'max_executed': 98.0, 'max_bounded': 97.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082897s.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026721s with result Satisfiable.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10961839999999956, Incremental time limit = None
Running cumulative time = 0.8047601999999987, Cumulative time limit = 1800
Used memory = (RSS = 151.890625Mb, VMS = 142.929688Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.702489s, Solving = 0.102271s, Total = 0.804760s, Memory = (RSS = 151.890625Mb, VMS = 142.929688Mb), Step range = [0-9]), Calls = 9
Final Model :: Total atoms = 6281, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.7024894999999987, solving_time=0.10227070000000005, total_time=0.8047601999999987, memory=Memory(rss=151.890625, vms=142.9296875), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08289719999999967, solving_time=0.02672119999999989, total_time=0.10961839999999956, memory=Memory(rss=151.890625, vms=142.9296875), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 24691.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 128376.0, 'bodies_tr': 128376.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1675.0, 'count_bodies_tr': 1675.0, 'sccs': 122.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1811.0, 'rules': 246103.0, 'rules_normal': 244547.0, 'rules_choice': 1547.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 246103.0, 'rules_tr_normal': 244547.0, 'rules_tr_choice': 1547.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 51695.0, 'eqs_atom': 10954.0, 'eqs_body': 3891.0, 'eqs_other': 36850.0}, 'lpStep': {'atoms': 2191.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14820.0, 'bodies_tr': 14820.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27562.0, 'rules_normal': 27409.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27562.0, 'rules_tr_normal': 27409.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4656.0, 'eqs_atom': 994.0, 'eqs_body': 112.0, 'eqs_other': 3550.0}, 'generator': {'vars': 8073.0, 'vars_eliminated': 0.0, 'vars_frozen': 5329.0, 'constraints': 1182.0, 'constraints_binary': 38569.0, 'constraints_ternary': 4332.0, 'acyc_edges': 0.0, 'complexity': 44373.0}}, 'solving': {'solvers': {'choices': 485.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 181.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 13.0, 'integrated': 36.0, 'lemmas': 165.0, 'lits_learnt': 1014.0, 'lemmas_binary': 14.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 23.0, 'integrated_jumps': 47.0, 'guiding_paths_lits': 847.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 122.0, 'lemmas_other': 36.0, 'lits_conflict': 22.0, 'lits_loop': 866.0, 'lits_other': 126.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 3.0, 'levels': 20.0, 'levels_bounded': 3.0, 'max': 6.0, 'max_executed': 6.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.11226272583007812, 'cpu': 0.125, 'solve': 0.0109710693359375, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8499259948730469, 'cpu': 0.9375, 'solve': 0.036907196044921875, 'unsat': 0.012943267822265625, 'sat': 0.00698089599609375}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1833.0, 'conflicts': 231.0, 'conflicts_analyzed': 188.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 331.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 173.0, 'distributed_sum_lbd': 353.0, 'integrated': 860.0, 'lemmas': 1281.0, 'lits_learnt': 5776.0, 'lemmas_binary': 295.0, 'lemmas_ternary': 90.0, 'cpu_time': 0.140625, 'integrated_imps': 423.0, 'integrated_jumps': 473.0, 'guiding_paths_lits': 4338.0, 'guiding_paths': 66.0, 'splits': 0.0, 'lemmas_conflict': 174.0, 'lemmas_loop': 280.0, 'lemmas_other': 827.0, 'lits_conflict': 703.0, 'lits_loop': 1813.0, 'lits_other': 3260.0, 'jumps': {'jumps': 188.0, 'jumps_bounded': 44.0, 'levels': 2376.0, 'levels_bounded': 1760.0, 'max': 98.0, 'max_executed': 98.0, 'max_bounded': 97.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9}

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 3 ( 30.00% solved)

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=None)

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 9]:
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 3)

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.093422s.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 10: original = External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=None), conversion = current_last_sgoals(3,9).

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013516s with result Unsatisfiable.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10693779999999986, Incremental time limit = None
Running cumulative time = 0.9116979999999986, Cumulative time limit = 1800
Used memory = (RSS = 158.855469Mb, VMS = 148.683594Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.7959112999999984, solving_time=0.11578670000000013, total_time=0.9116979999999986, memory=Memory(rss=158.85546875, vms=148.68359375), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09342179999999978, solving_time=0.013516000000000084, total_time=0.10693779999999986, memory=Memory(rss=158.85546875, vms=148.68359375), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 26946.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 143367.0, 'bodies_tr': 143367.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1856.0, 'count_bodies_tr': 1856.0, 'sccs': 142.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2247.0, 'rules': 273914.0, 'rules_normal': 272205.0, 'rules_choice': 1699.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 273914.0, 'rules_tr_normal': 272205.0, 'rules_tr_choice': 1699.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 56554.0, 'eqs_atom': 11996.0, 'eqs_body': 4003.0, 'eqs_other': 40555.0}, 'lpStep': {'atoms': 2255.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14991.0, 'bodies_tr': 14991.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27811.0, 'rules_normal': 27658.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27811.0, 'rules_tr_normal': 27658.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4859.0, 'eqs_atom': 1042.0, 'eqs_body': 112.0, 'eqs_other': 3705.0}, 'generator': {'vars': 9811.0, 'vars_eliminated': 0.0, 'vars_frozen': 6418.0, 'constraints': 1664.0, 'constraints_binary': 54920.0, 'constraints_ternary': 6281.0, 'acyc_edges': 0.0, 'complexity': 63225.0}}, 'solving': {'solvers': {'choices': 1.0, 'conflicts': 5.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 1.0, 'lits_learnt': 2.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 798.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 2.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 2.0, 'levels_bounded': 1.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.10771369934082031, 'cpu': 0.09375, 'solve': 0.00299072265625, 'unsat': 0.00299072265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.9576396942138672, 'cpu': 1.03125, 'solve': 0.039897918701171875, 'unsat': 0.015933990478515625, 'sat': 0.00698089599609375}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1834.0, 'conflicts': 236.0, 'conflicts_analyzed': 189.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 331.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 174.0, 'distributed_sum_lbd': 355.0, 'integrated': 860.0, 'lemmas': 1282.0, 'lits_learnt': 5778.0, 'lemmas_binary': 296.0, 'lemmas_ternary': 90.0, 'cpu_time': 0.140625, 'integrated_imps': 423.0, 'integrated_jumps': 473.0, 'guiding_paths_lits': 5136.0, 'guiding_paths': 72.0, 'splits': 0.0, 'lemmas_conflict': 175.0, 'lemmas_loop': 280.0, 'lemmas_other': 827.0, 'lits_conflict': 705.0, 'lits_loop': 1813.0, 'lits_other': 3260.0, 'jumps': {'jumps': 189.0, 'jumps_bounded': 45.0, 'levels': 2378.0, 'levels_bounded': 1761.0, 'max': 98.0, 'max_executed': 98.0, 'max_bounded': 97.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082745s.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014811s with result Unsatisfiable.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09755620000000054, Incremental time limit = None
Running cumulative time = 1.009254199999999, Cumulative time limit = 1800
Used memory = (RSS = 161.679688Mb, VMS = 150.449219Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.8786565999999985, solving_time=0.13059760000000065, total_time=1.009254199999999, memory=Memory(rss=161.6796875, vms=150.44921875), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08274530000000002, solving_time=0.014810900000000515, total_time=0.09755620000000054, memory=Memory(rss=161.6796875, vms=150.44921875), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 29212.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 158382.0, 'bodies_tr': 158382.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2037.0, 'count_bodies_tr': 2037.0, 'sccs': 162.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2683.0, 'rules': 301795.0, 'rules_normal': 299933.0, 'rules_choice': 1851.0, 'rules_minimize': 11.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 301795.0, 'rules_tr_normal': 299933.0, 'rules_tr_choice': 1851.0, 'rules_tr_minimize': 11.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 61463.0, 'eqs_atom': 13045.0, 'eqs_body': 4117.0, 'eqs_other': 44301.0}, 'lpStep': {'atoms': 2266.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15015.0, 'bodies_tr': 15015.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27881.0, 'rules_normal': 27728.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27881.0, 'rules_tr_normal': 27728.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4909.0, 'eqs_atom': 1049.0, 'eqs_body': 114.0, 'eqs_other': 3746.0}, 'generator': {'vars': 11556.0, 'vars_eliminated': 0.0, 'vars_frozen': 7511.0, 'constraints': 2147.0, 'constraints_binary': 71373.0, 'constraints_ternary': 8236.0, 'acyc_edges': 0.0, 'complexity': 82186.0}}, 'solving': {'solvers': {'choices': 165.0, 'conflicts': 34.0, 'conflicts_analyzed': 28.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 25.0, 'distributed_sum_lbd': 68.0, 'integrated': 86.0, 'lemmas': 303.0, 'lits_learnt': 2564.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.0, 'integrated_imps': 15.0, 'integrated_jumps': 87.0, 'guiding_paths_lits': 870.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 189.0, 'lemmas_other': 86.0, 'lits_conflict': 243.0, 'lits_loop': 1603.0, 'lits_other': 718.0, 'jumps': {'jumps': 28.0, 'jumps_bounded': 7.0, 'levels': 229.0, 'levels_bounded': 151.0, 'max': 147.0, 'max_executed': 22.0, 'max_bounded': 145.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.09939956665039062, 'cpu': 0.09375, 'solve': 0.0056514739990234375, 'unsat': 0.0056514739990234375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.0570392608642578, 'cpu': 1.125, 'solve': 0.04554939270019531, 'unsat': 0.021585464477539062, 'sat': 0.00698089599609375}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1999.0, 'conflicts': 270.0, 'conflicts_analyzed': 217.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 331.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 199.0, 'distributed_sum_lbd': 423.0, 'integrated': 946.0, 'lemmas': 1585.0, 'lits_learnt': 8342.0, 'lemmas_binary': 308.0, 'lemmas_ternary': 104.0, 'cpu_time': 0.140625, 'integrated_imps': 438.0, 'integrated_jumps': 560.0, 'guiding_paths_lits': 6006.0, 'guiding_paths': 78.0, 'splits': 0.0, 'lemmas_conflict': 203.0, 'lemmas_loop': 469.0, 'lemmas_other': 913.0, 'lits_conflict': 948.0, 'lits_loop': 3416.0, 'lits_other': 3978.0, 'jumps': {'jumps': 217.0, 'jumps_bounded': 52.0, 'levels': 2607.0, 'levels_bounded': 1912.0, 'max': 147.0, 'max_executed': 98.0, 'max_bounded': 145.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.081535s.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016328s with result Unsatisfiable.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09786360000000016, Incremental time limit = None
Running cumulative time = 1.1071177999999993, Cumulative time limit = 1800
Used memory = (RSS = 167.070312Mb, VMS = 158.257812Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.960191899999999, solving_time=0.14692590000000028, total_time=1.1071177999999993, memory=Memory(rss=167.0703125, vms=158.2578125), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08153530000000053, solving_time=0.01632829999999963, total_time=0.09786360000000016, memory=Memory(rss=167.0703125, vms=158.2578125), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 31490.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 173414.0, 'bodies_tr': 173414.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2218.0, 'count_bodies_tr': 2218.0, 'sccs': 182.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3119.0, 'rules': 329740.0, 'rules_normal': 327725.0, 'rules_choice': 2003.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 329740.0, 'rules_tr_normal': 327725.0, 'rules_tr_choice': 2003.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 66393.0, 'eqs_atom': 14094.0, 'eqs_body': 4230.0, 'eqs_other': 48069.0}, 'lpStep': {'atoms': 2278.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15032.0, 'bodies_tr': 15032.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27945.0, 'rules_normal': 27792.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27945.0, 'rules_tr_normal': 27792.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4930.0, 'eqs_atom': 1049.0, 'eqs_body': 113.0, 'eqs_other': 3768.0}, 'generator': {'vars': 13301.0, 'vars_eliminated': 0.0, 'vars_frozen': 8604.0, 'constraints': 2351.0, 'constraints_binary': 78621.0, 'constraints_ternary': 9183.0, 'acyc_edges': 0.0, 'complexity': 90631.0}}, 'solving': {'solvers': {'choices': 129.0, 'conflicts': 44.0, 'conflicts_analyzed': 39.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 31.0, 'distributed_sum_lbd': 84.0, 'integrated': 144.0, 'lemmas': 537.0, 'lits_learnt': 4378.0, 'lemmas_binary': 14.0, 'lemmas_ternary': 26.0, 'cpu_time': 0.109375, 'integrated_imps': 50.0, 'integrated_jumps': 62.0, 'guiding_paths_lits': 942.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 38.0, 'lemmas_loop': 362.0, 'lemmas_other': 137.0, 'lits_conflict': 331.0, 'lits_loop': 3026.0, 'lits_other': 1021.0, 'jumps': {'jumps': 39.0, 'jumps_bounded': 3.0, 'levels': 70.0, 'levels_bounded': 3.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 12.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.10075759887695312, 'cpu': 0.203125, 'solve': 0.00699615478515625, 'unsat': 0.00699615478515625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.157796859741211, 'cpu': 1.328125, 'solve': 0.05254554748535156, 'unsat': 0.028581619262695312, 'sat': 0.00698089599609375}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2128.0, 'conflicts': 314.0, 'conflicts_analyzed': 256.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 331.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 230.0, 'distributed_sum_lbd': 507.0, 'integrated': 1090.0, 'lemmas': 2122.0, 'lits_learnt': 12720.0, 'lemmas_binary': 322.0, 'lemmas_ternary': 130.0, 'cpu_time': 0.25, 'integrated_imps': 488.0, 'integrated_jumps': 622.0, 'guiding_paths_lits': 6948.0, 'guiding_paths': 84.0, 'splits': 0.0, 'lemmas_conflict': 241.0, 'lemmas_loop': 831.0, 'lemmas_other': 1050.0, 'lits_conflict': 1279.0, 'lits_loop': 6442.0, 'lits_other': 4999.0, 'jumps': {'jumps': 256.0, 'jumps_bounded': 55.0, 'levels': 2677.0, 'levels_bounded': 1915.0, 'max': 147.0, 'max_executed': 98.0, 'max_bounded': 145.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.081540s.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026594s with result Unsatisfiable.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10813469999999903, Incremental time limit = None
Running cumulative time = 1.2152524999999983, Cumulative time limit = 1800
Used memory = (RSS = 168.289062Mb, VMS = 159.328125Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.0417321999999993, solving_time=0.17352029999999896, total_time=1.2152524999999983, memory=Memory(rss=168.2890625, vms=159.328125), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08154030000000034, solving_time=0.026594399999998686, total_time=0.10813469999999903, memory=Memory(rss=168.2890625, vms=159.328125), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 33768.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 188465.0, 'bodies_tr': 188465.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2399.0, 'count_bodies_tr': 2399.0, 'sccs': 202.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3555.0, 'rules': 357748.0, 'rules_normal': 355580.0, 'rules_choice': 2155.0, 'rules_minimize': 13.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 357748.0, 'rules_tr_normal': 355580.0, 'rules_tr_choice': 2155.0, 'rules_tr_minimize': 13.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 71376.0, 'eqs_atom': 15151.0, 'eqs_body': 4345.0, 'eqs_other': 51880.0}, 'lpStep': {'atoms': 2278.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15051.0, 'bodies_tr': 15051.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28008.0, 'rules_normal': 27855.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28008.0, 'rules_tr_normal': 27855.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4983.0, 'eqs_atom': 1057.0, 'eqs_body': 115.0, 'eqs_other': 3811.0}, 'generator': {'vars': 15053.0, 'vars_eliminated': 0.0, 'vars_frozen': 9701.0, 'constraints': 2835.0, 'constraints_binary': 95251.0, 'constraints_ternary': 11372.0, 'acyc_edges': 0.0, 'complexity': 110004.0}}, 'solving': {'solvers': {'choices': 439.0, 'conflicts': 140.0, 'conflicts_analyzed': 137.0, 'restarts': 0.0, 'restarts_last': 28.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 114.0, 'distributed_sum_lbd': 316.0, 'integrated': 634.0, 'lemmas': 1165.0, 'lits_learnt': 10638.0, 'lemmas_binary': 149.0, 'lemmas_ternary': 147.0, 'cpu_time': 0.0, 'integrated_imps': 83.0, 'integrated_jumps': 158.0, 'guiding_paths_lits': 1183.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 137.0, 'lemmas_loop': 407.0, 'lemmas_other': 621.0, 'lits_conflict': 1432.0, 'lits_loop': 3477.0, 'lits_other': 5729.0, 'jumps': {'jumps': 137.0, 'jumps_bounded': 3.0, 'levels': 451.0, 'levels_bounded': 171.0, 'max': 173.0, 'max_executed': 22.0, 'max_bounded': 169.0}}}}, 'summary': {'call': 13.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.10970497131347656, 'cpu': 0.109375, 'solve': 0.009973526000976562, 'unsat': 0.009973526000976562, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.2675018310546875, 'cpu': 1.4375, 'solve': 0.06251907348632812, 'unsat': 0.038555145263671875, 'sat': 0.00698089599609375}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2567.0, 'conflicts': 454.0, 'conflicts_analyzed': 393.0, 'restarts': 0.0, 'restarts_last': 28.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 331.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 344.0, 'distributed_sum_lbd': 823.0, 'integrated': 1724.0, 'lemmas': 3287.0, 'lits_learnt': 23358.0, 'lemmas_binary': 471.0, 'lemmas_ternary': 277.0, 'cpu_time': 0.25, 'integrated_imps': 571.0, 'integrated_jumps': 780.0, 'guiding_paths_lits': 8131.0, 'guiding_paths': 91.0, 'splits': 0.0, 'lemmas_conflict': 378.0, 'lemmas_loop': 1238.0, 'lemmas_other': 1671.0, 'lits_conflict': 2711.0, 'lits_loop': 9919.0, 'lits_other': 10728.0, 'jumps': {'jumps': 393.0, 'jumps_bounded': 58.0, 'levels': 3128.0, 'levels_bounded': 2086.0, 'max': 173.0, 'max_executed': 98.0, 'max_bounded': 169.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.088138s.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024877s with result Unsatisfiable.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.11301480000000019, Incremental time limit = None
Running cumulative time = 1.3282672999999985, Cumulative time limit = 1800
Used memory = (RSS = 171.378906Mb, VMS = 160.570312Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.1298700999999989, solving_time=0.1983971999999996, total_time=1.3282672999999985, memory=Memory(rss=171.37890625, vms=160.5703125), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08813789999999955, solving_time=0.024876900000000646, total_time=0.11301480000000019, memory=Memory(rss=171.37890625, vms=160.5703125), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 36059.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 203542.0, 'bodies_tr': 203542.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2580.0, 'count_bodies_tr': 2580.0, 'sccs': 222.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3991.0, 'rules': 385828.0, 'rules_normal': 383507.0, 'rules_choice': 2307.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 385828.0, 'rules_tr_normal': 383507.0, 'rules_tr_choice': 2307.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 76413.0, 'eqs_atom': 16217.0, 'eqs_body': 4460.0, 'eqs_other': 55736.0}, 'lpStep': {'atoms': 2291.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15077.0, 'bodies_tr': 15077.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28080.0, 'rules_normal': 27927.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28080.0, 'rules_tr_normal': 27927.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5037.0, 'eqs_atom': 1066.0, 'eqs_body': 115.0, 'eqs_other': 3856.0}, 'generator': {'vars': 16812.0, 'vars_eliminated': 0.0, 'vars_frozen': 10802.0, 'constraints': 3316.0, 'constraints_binary': 110645.0, 'constraints_ternary': 13260.0, 'acyc_edges': 0.0, 'complexity': 127837.0}}, 'solving': {'solvers': {'choices': 926.0, 'conflicts': 201.0, 'conflicts_analyzed': 193.0, 'restarts': 0.0, 'restarts_last': 41.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 142.0, 'distributed_sum_lbd': 390.0, 'integrated': 839.0, 'lemmas': 1486.0, 'lits_learnt': 13576.0, 'lemmas_binary': 168.0, 'lemmas_ternary': 76.0, 'cpu_time': 0.109375, 'integrated_imps': 211.0, 'integrated_jumps': 435.0, 'guiding_paths_lits': 1267.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 193.0, 'lemmas_loop': 491.0, 'lemmas_other': 802.0, 'lits_conflict': 2249.0, 'lits_loop': 3732.0, 'lits_other': 7595.0, 'jumps': {'jumps': 193.0, 'jumps_bounded': 3.0, 'levels': 674.0, 'levels_bounded': 183.0, 'max': 189.0, 'max_executed': 189.0, 'max_bounded': 181.0}}}}, 'summary': {'call': 14.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.115692138671875, 'cpu': 0.203125, 'solve': 0.01496124267578125, 'unsat': 0.01496124267578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.3831939697265625, 'cpu': 1.640625, 'solve': 0.07748031616210938, 'unsat': 0.053516387939453125, 'sat': 0.00698089599609375}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3493.0, 'conflicts': 655.0, 'conflicts_analyzed': 586.0, 'restarts': 0.0, 'restarts_last': 41.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 331.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 486.0, 'distributed_sum_lbd': 1213.0, 'integrated': 2563.0, 'lemmas': 4773.0, 'lits_learnt': 36934.0, 'lemmas_binary': 639.0, 'lemmas_ternary': 353.0, 'cpu_time': 0.359375, 'integrated_imps': 782.0, 'integrated_jumps': 1215.0, 'guiding_paths_lits': 9398.0, 'guiding_paths': 98.0, 'splits': 0.0, 'lemmas_conflict': 571.0, 'lemmas_loop': 1729.0, 'lemmas_other': 2473.0, 'lits_conflict': 4960.0, 'lits_loop': 13651.0, 'lits_other': 18323.0, 'jumps': {'jumps': 586.0, 'jumps_bounded': 61.0, 'levels': 3802.0, 'levels_bounded': 2269.0, 'max': 189.0, 'max_executed': 189.0, 'max_bounded': 181.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.086698s.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033494s with result Satisfiable.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12019270000000049, Incremental time limit = None
Running cumulative time = 1.448459999999999, Cumulative time limit = 1800
Used memory = (RSS = 176.765625Mb, VMS = 165.488281Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.216568s, Solving = 0.231892s, Total = 1.448460s, Memory = (RSS = 176.765625Mb, VMS = 165.488281Mb), Step range = [0-15]), Calls = 15
Final Model :: Total atoms = 8286, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.2165684999999984, solving_time=0.23189150000000058, total_time=1.448459999999999, memory=Memory(rss=176.765625, vms=165.48828125), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08669839999999951, solving_time=0.033494300000000976, total_time=0.12019270000000049, memory=Memory(rss=176.765625, vms=165.48828125), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 38364.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 218646.0, 'bodies_tr': 218646.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2761.0, 'count_bodies_tr': 2761.0, 'sccs': 242.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4427.0, 'rules': 413981.0, 'rules_normal': 411507.0, 'rules_choice': 2459.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 413981.0, 'rules_tr_normal': 411507.0, 'rules_tr_choice': 2459.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 81509.0, 'eqs_atom': 17293.0, 'eqs_body': 4577.0, 'eqs_other': 59639.0}, 'lpStep': {'atoms': 2305.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15104.0, 'bodies_tr': 15104.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28153.0, 'rules_normal': 28000.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28153.0, 'rules_tr_normal': 28000.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5096.0, 'eqs_atom': 1076.0, 'eqs_body': 117.0, 'eqs_other': 3903.0}, 'generator': {'vars': 18578.0, 'vars_eliminated': 0.0, 'vars_frozen': 11907.0, 'constraints': 3802.0, 'constraints_binary': 127271.0, 'constraints_ternary': 15234.0, 'acyc_edges': 0.0, 'complexity': 146993.0}}, 'solving': {'solvers': {'choices': 1242.0, 'conflicts': 298.0, 'conflicts_analyzed': 298.0, 'restarts': 0.0, 'restarts_last': 78.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 298.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 233.0, 'distributed_sum_lbd': 659.0, 'integrated': 916.0, 'lemmas': 1675.0, 'lits_learnt': 21756.0, 'lemmas_binary': 141.0, 'lemmas_ternary': 170.0, 'cpu_time': 0.109375, 'integrated_imps': 148.0, 'integrated_jumps': 306.0, 'guiding_paths_lits': 1351.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 298.0, 'lemmas_loop': 470.0, 'lemmas_other': 907.0, 'lits_conflict': 5447.0, 'lits_loop': 3817.0, 'lits_other': 12492.0, 'jumps': {'jumps': 298.0, 'jumps_bounded': 5.0, 'levels': 810.0, 'levels_bounded': 197.0, 'max': 198.0, 'max_executed': 198.0, 'max_bounded': 193.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.12267494201660156, 'cpu': 0.203125, 'solve': 0.021915435791015625, 'unsat': 0.0, 'sat': 0.008951187133789062}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.505868911743164, 'cpu': 1.84375, 'solve': 0.099395751953125, 'unsat': 0.053516387939453125, 'sat': 0.015932083129882812}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4735.0, 'conflicts': 953.0, 'conflicts_analyzed': 884.0, 'restarts': 0.0, 'restarts_last': 78.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 629.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 719.0, 'distributed_sum_lbd': 1872.0, 'integrated': 3479.0, 'lemmas': 6448.0, 'lits_learnt': 58690.0, 'lemmas_binary': 780.0, 'lemmas_ternary': 523.0, 'cpu_time': 0.46875, 'integrated_imps': 930.0, 'integrated_jumps': 1521.0, 'guiding_paths_lits': 10749.0, 'guiding_paths': 105.0, 'splits': 0.0, 'lemmas_conflict': 869.0, 'lemmas_loop': 2199.0, 'lemmas_other': 3380.0, 'lits_conflict': 10407.0, 'lits_loop': 17468.0, 'lits_other': 30815.0, 'jumps': {'jumps': 884.0, 'jumps_bounded': 66.0, 'levels': 4612.0, 'levels_bounded': 2466.0, 'max': 198.0, 'max_executed': 198.0, 'max_bounded': 193.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 15}

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 4 ( 40.00% solved)

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 15)', truth=True, inc_range=None)

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 15]:
sub_goal(3, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 4)

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.091615s.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(4, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(4,15).

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018114s with result Unsatisfiable.

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1097286000000004, Incremental time limit = None
Running cumulative time = 1.5581885999999994, Cumulative time limit = 1800
Used memory = (RSS = 185.925781Mb, VMS = 177.980469Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.3081832999999987, solving_time=0.25000530000000065, total_time=1.5581885999999994, memory=Memory(rss=185.92578125, vms=177.98046875), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09161480000000033, solving_time=0.01811380000000007, total_time=0.1097286000000004, memory=Memory(rss=185.92578125, vms=177.98046875), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 40684.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 233777.0, 'bodies_tr': 233777.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2942.0, 'count_bodies_tr': 2942.0, 'sccs': 262.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4863.0, 'rules': 442207.0, 'rules_normal': 439580.0, 'rules_choice': 2611.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 442207.0, 'rules_tr_normal': 439580.0, 'rules_tr_choice': 2611.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 86665.0, 'eqs_atom': 18380.0, 'eqs_body': 4694.0, 'eqs_other': 63591.0}, 'lpStep': {'atoms': 2320.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15131.0, 'bodies_tr': 15131.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28226.0, 'rules_normal': 28073.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28226.0, 'rules_tr_normal': 28073.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5156.0, 'eqs_atom': 1087.0, 'eqs_body': 117.0, 'eqs_other': 3952.0}, 'generator': {'vars': 20350.0, 'vars_eliminated': 0.0, 'vars_frozen': 13016.0, 'constraints': 4018.0, 'constraints_binary': 136153.0, 'constraints_ternary': 16122.0, 'acyc_edges': 0.0, 'complexity': 157013.0}}, 'solving': {'solvers': {'choices': 61.0, 'conflicts': 18.0, 'conflicts_analyzed': 13.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 21.0, 'integrated': 10.0, 'lemmas': 22.0, 'lits_learnt': 303.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.0, 'integrated_imps': 1.0, 'integrated_jumps': 11.0, 'guiding_paths_lits': 1230.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 1.0, 'lemmas_other': 10.0, 'lits_conflict': 197.0, 'lits_loop': 7.0, 'lits_other': 99.0, 'jumps': {'jumps': 13.0, 'jumps_bounded': 4.0, 'levels': 52.0, 'levels_bounded': 4.0, 'max': 12.0, 'max_executed': 12.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 16.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.11369705200195312, 'cpu': 0.109375, 'solve': 0.0049877166748046875, 'unsat': 0.0049877166748046875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.6195659637451172, 'cpu': 1.953125, 'solve': 0.10438346862792969, 'unsat': 0.05850410461425781, 'sat': 0.015932083129882812}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4796.0, 'conflicts': 971.0, 'conflicts_analyzed': 897.0, 'restarts': 0.0, 'restarts_last': 78.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 629.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 727.0, 'distributed_sum_lbd': 1893.0, 'integrated': 3489.0, 'lemmas': 6470.0, 'lits_learnt': 58993.0, 'lemmas_binary': 785.0, 'lemmas_ternary': 529.0, 'cpu_time': 0.46875, 'integrated_imps': 931.0, 'integrated_jumps': 1532.0, 'guiding_paths_lits': 11979.0, 'guiding_paths': 111.0, 'splits': 0.0, 'lemmas_conflict': 880.0, 'lemmas_loop': 2200.0, 'lemmas_other': 3390.0, 'lits_conflict': 10604.0, 'lits_loop': 17475.0, 'lits_other': 30914.0, 'jumps': {'jumps': 897.0, 'jumps_bounded': 70.0, 'levels': 4664.0, 'levels_bounded': 2470.0, 'max': 198.0, 'max_executed': 198.0, 'max_bounded': 193.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-11] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.103752s.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.062517s with result Satisfiable.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.16626890000000039, Incremental time limit = None
Running cumulative time = 1.7244574999999998, Cumulative time limit = 1800
Used memory = (RSS = 187.683594Mb, VMS = 178.679688Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.411935s, Solving = 0.312523s, Total = 1.724457s, Memory = (RSS = 187.683594Mb, VMS = 178.679688Mb), Step range = [0-17]), Calls = 17
Final Model :: Total atoms = 8957, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.4119349999999988, solving_time=0.3125225000000009, total_time=1.7244574999999998, memory=Memory(rss=187.68359375, vms=178.6796875), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10375170000000011, solving_time=0.06251720000000027, total_time=0.16626890000000039, memory=Memory(rss=187.68359375, vms=178.6796875), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 43014.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 248930.0, 'bodies_tr': 248930.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3123.0, 'count_bodies_tr': 3123.0, 'sccs': 282.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5299.0, 'rules': 470500.0, 'rules_normal': 467720.0, 'rules_choice': 2763.0, 'rules_minimize': 17.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 470500.0, 'rules_tr_normal': 467720.0, 'rules_tr_choice': 2763.0, 'rules_tr_minimize': 17.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 91872.0, 'eqs_atom': 19477.0, 'eqs_body': 4812.0, 'eqs_other': 67583.0}, 'lpStep': {'atoms': 2330.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15153.0, 'bodies_tr': 15153.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28293.0, 'rules_normal': 28140.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28293.0, 'rules_tr_normal': 28140.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5207.0, 'eqs_atom': 1097.0, 'eqs_body': 118.0, 'eqs_other': 3992.0}, 'generator': {'vars': 22124.0, 'vars_eliminated': 0.0, 'vars_frozen': 14125.0, 'constraints': 4505.0, 'constraints_binary': 153015.0, 'constraints_ternary': 18188.0, 'acyc_edges': 0.0, 'complexity': 176498.0}}, 'solving': {'solvers': {'choices': 1260.0, 'conflicts': 226.0, 'conflicts_analyzed': 226.0, 'restarts': 0.0, 'restarts_last': 79.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 328.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 142.0, 'distributed_sum_lbd': 421.0, 'integrated': 363.0, 'lemmas': 1005.0, 'lits_learnt': 12676.0, 'lemmas_binary': 57.0, 'lemmas_ternary': 74.0, 'cpu_time': 0.15625, 'integrated_imps': 30.0, 'integrated_jumps': 123.0, 'guiding_paths_lits': 1519.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 226.0, 'lemmas_loop': 416.0, 'lemmas_other': 363.0, 'lits_conflict': 3874.0, 'lits_loop': 3632.0, 'lits_other': 5170.0, 'jumps': {'jumps': 226.0, 'jumps_bounded': 2.0, 'levels': 335.0, 'levels_bounded': 2.0, 'max': 7.0, 'max_executed': 7.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.168548583984375, 'cpu': 0.25, 'solve': 0.04986763000488281, 'unsat': 0.0, 'sat': 0.00698089599609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.7881145477294922, 'cpu': 2.203125, 'solve': 0.1542510986328125, 'unsat': 0.05850410461425781, 'sat': 0.022912979125976562}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6056.0, 'conflicts': 1197.0, 'conflicts_analyzed': 1123.0, 'restarts': 0.0, 'restarts_last': 79.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 957.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 869.0, 'distributed_sum_lbd': 2314.0, 'integrated': 3852.0, 'lemmas': 7475.0, 'lits_learnt': 71669.0, 'lemmas_binary': 842.0, 'lemmas_ternary': 603.0, 'cpu_time': 0.625, 'integrated_imps': 961.0, 'integrated_jumps': 1655.0, 'guiding_paths_lits': 13498.0, 'guiding_paths': 118.0, 'splits': 0.0, 'lemmas_conflict': 1106.0, 'lemmas_loop': 2616.0, 'lemmas_other': 3753.0, 'lits_conflict': 14478.0, 'lits_loop': 21107.0, 'lits_other': 36084.0, 'jumps': {'jumps': 1123.0, 'jumps_bounded': 72.0, 'levels': 4999.0, 'levels_bounded': 2472.0, 'max': 198.0, 'max_executed': 198.0, 'max_bounded': 193.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 15, 4: 17}

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 5 ( 50.00% solved)

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 17)', truth=True, inc_range=None)

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 17]:
sub_goal(3, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 5)

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.110131s.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 18: original = External(symbol='current_last_sgoals(5, 17)', truth=True, inc_range=None), conversion = current_last_sgoals(5,17).

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032724s with result Satisfiable.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14285500000000084, Incremental time limit = None
Running cumulative time = 1.8673125000000006, Cumulative time limit = 1800
Used memory = (RSS = 191.300781Mb, VMS = 181.480469Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.522066s, Solving = 0.345247s, Total = 1.867313s, Memory = (RSS = 191.300781Mb, VMS = 181.480469Mb), Step range = [0-18]), Calls = 18
Final Model :: Total atoms = 9295, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.5220659000000003, solving_time=0.3452466000000003, total_time=1.8673125000000006, memory=Memory(rss=191.30078125, vms=181.48046875), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11013090000000147, solving_time=0.03272409999999937, total_time=0.14285500000000084, memory=Memory(rss=191.30078125, vms=181.48046875), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 45354.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 264104.0, 'bodies_tr': 264104.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3304.0, 'count_bodies_tr': 3304.0, 'sccs': 302.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5735.0, 'rules': 498859.0, 'rules_normal': 495926.0, 'rules_choice': 2915.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 498859.0, 'rules_tr_normal': 495926.0, 'rules_tr_choice': 2915.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 97130.0, 'eqs_atom': 20584.0, 'eqs_body': 4929.0, 'eqs_other': 71617.0}, 'lpStep': {'atoms': 2340.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15174.0, 'bodies_tr': 15174.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28359.0, 'rules_normal': 28206.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28359.0, 'rules_tr_normal': 28206.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5258.0, 'eqs_atom': 1107.0, 'eqs_body': 117.0, 'eqs_other': 4034.0}, 'generator': {'vars': 23898.0, 'vars_eliminated': 0.0, 'vars_frozen': 15234.0, 'constraints': 4845.0, 'constraints_binary': 164661.0, 'constraints_ternary': 19421.0, 'acyc_edges': 0.0, 'complexity': 189771.0}}, 'solving': {'solvers': {'choices': 959.0, 'conflicts': 40.0, 'conflicts_analyzed': 40.0, 'restarts': 0.0, 'restarts_last': 20.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 356.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 25.0, 'distributed_sum_lbd': 75.0, 'integrated': 89.0, 'lemmas': 212.0, 'lits_learnt': 2961.0, 'lemmas_binary': 16.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.109375, 'integrated_imps': 10.0, 'integrated_jumps': 48.0, 'guiding_paths_lits': 1603.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 40.0, 'lemmas_loop': 84.0, 'lemmas_other': 88.0, 'lits_conflict': 999.0, 'lits_loop': 561.0, 'lits_other': 1401.0, 'jumps': {'jumps': 40.0, 'jumps_bounded': 1.0, 'levels': 62.0, 'levels_bounded': 1.0, 'max': 7.0, 'max_executed': 7.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.14663314819335938, 'cpu': 0.234375, 'solve': 0.019947052001953125, 'unsat': 0.0, 'sat': 0.0069828033447265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.9347476959228516, 'cpu': 2.4375, 'solve': 0.17419815063476562, 'unsat': 0.05850410461425781, 'sat': 0.029895782470703125}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 7015.0, 'conflicts': 1237.0, 'conflicts_analyzed': 1163.0, 'restarts': 0.0, 'restarts_last': 79.0, 'extra': {'domain_choices': 0.0, 'models': 6.0, 'models_level': 1313.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 894.0, 'distributed_sum_lbd': 2389.0, 'integrated': 3941.0, 'lemmas': 7687.0, 'lits_learnt': 74630.0, 'lemmas_binary': 858.0, 'lemmas_ternary': 611.0, 'cpu_time': 0.734375, 'integrated_imps': 971.0, 'integrated_jumps': 1703.0, 'guiding_paths_lits': 15101.0, 'guiding_paths': 125.0, 'splits': 0.0, 'lemmas_conflict': 1146.0, 'lemmas_loop': 2700.0, 'lemmas_other': 3841.0, 'lits_conflict': 15477.0, 'lits_loop': 21668.0, 'lits_other': 37485.0, 'jumps': {'jumps': 1163.0, 'jumps_bounded': 73.0, 'levels': 5061.0, 'levels_bounded': 2473.0, 'max': 198.0, 'max_executed': 198.0, 'max_bounded': 193.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 15, 4: 17, 5: 18}

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 6 ( 60.00% solved)

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 18)', truth=True, inc_range=None)

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 18]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 6)

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Reaction at search length 18:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096345s.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(6, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(6,18).

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.038405s with result Satisfiable.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1347503000000021, Incremental time limit = None
Running cumulative time = 2.0020628000000027, Cumulative time limit = 1800
Used memory = (RSS = 195.593750Mb, VMS = 185.378906Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.618411s, Solving = 0.383652s, Total = 2.002063s, Memory = (RSS = 195.593750Mb, VMS = 185.378906Mb), Step range = [0-19]), Calls = 19
Final Model :: Total atoms = 9634, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.6184112000000015, solving_time=0.3836516000000012, total_time=2.0020628000000027, memory=Memory(rss=195.59375, vms=185.37890625), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09634530000000119, solving_time=0.03840500000000091, total_time=0.1347503000000021, memory=Memory(rss=195.59375, vms=185.37890625), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 47704.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 279299.0, 'bodies_tr': 279299.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3485.0, 'count_bodies_tr': 3485.0, 'sccs': 322.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6171.0, 'rules': 527284.0, 'rules_normal': 524198.0, 'rules_choice': 3067.0, 'rules_minimize': 19.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 527284.0, 'rules_tr_normal': 524198.0, 'rules_tr_choice': 3067.0, 'rules_tr_minimize': 19.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 102441.0, 'eqs_atom': 21701.0, 'eqs_body': 5047.0, 'eqs_other': 75693.0}, 'lpStep': {'atoms': 2350.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15195.0, 'bodies_tr': 15195.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28425.0, 'rules_normal': 28272.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28425.0, 'rules_tr_normal': 28272.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5311.0, 'eqs_atom': 1117.0, 'eqs_body': 118.0, 'eqs_other': 4076.0}, 'generator': {'vars': 25672.0, 'vars_eliminated': 0.0, 'vars_frozen': 16343.0, 'constraints': 5332.0, 'constraints_binary': 181679.0, 'constraints_ternary': 21539.0, 'acyc_edges': 0.0, 'complexity': 209464.0}}, 'solving': {'solvers': {'choices': 1025.0, 'conflicts': 39.0, 'conflicts_analyzed': 39.0, 'restarts': 0.0, 'restarts_last': 25.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 368.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 36.0, 'distributed_sum_lbd': 98.0, 'integrated': 187.0, 'lemmas': 249.0, 'lits_learnt': 6806.0, 'lemmas_binary': 45.0, 'lemmas_ternary': 13.0, 'cpu_time': 0.09375, 'integrated_imps': 23.0, 'integrated_jumps': 85.0, 'guiding_paths_lits': 1687.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 39.0, 'lemmas_loop': 41.0, 'lemmas_other': 169.0, 'lits_conflict': 1229.0, 'lits_loop': 327.0, 'lits_other': 5250.0, 'jumps': {'jumps': 39.0, 'jumps_bounded': 2.0, 'levels': 54.0, 'levels_bounded': 2.0, 'max': 4.0, 'max_executed': 4.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 19.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.1386280059814453, 'cpu': 0.203125, 'solve': 0.024934768676757812, 'unsat': 0.0, 'sat': 0.007982254028320312}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.073375701904297, 'cpu': 2.640625, 'solve': 0.19913291931152344, 'unsat': 0.05850410461425781, 'sat': 0.03787803649902344}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 8040.0, 'conflicts': 1276.0, 'conflicts_analyzed': 1202.0, 'restarts': 0.0, 'restarts_last': 79.0, 'extra': {'domain_choices': 0.0, 'models': 7.0, 'models_level': 1681.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 930.0, 'distributed_sum_lbd': 2487.0, 'integrated': 4128.0, 'lemmas': 7936.0, 'lits_learnt': 81436.0, 'lemmas_binary': 903.0, 'lemmas_ternary': 624.0, 'cpu_time': 0.828125, 'integrated_imps': 994.0, 'integrated_jumps': 1788.0, 'guiding_paths_lits': 16788.0, 'guiding_paths': 132.0, 'splits': 0.0, 'lemmas_conflict': 1185.0, 'lemmas_loop': 2741.0, 'lemmas_other': 4010.0, 'lits_conflict': 16706.0, 'lits_loop': 21995.0, 'lits_other': 42735.0, 'jumps': {'jumps': 1202.0, 'jumps_bounded': 75.0, 'levels': 5115.0, 'levels_bounded': 2475.0, 'max': 198.0, 'max_executed': 198.0, 'max_bounded': 193.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 15, 4: 17, 5: 18, 6: 19}

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 7 ( 70.00% solved)

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 19)', truth=True, inc_range=None)

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 19]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 7)

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.111013s.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 20: original = External(symbol='current_last_sgoals(7, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(7,19).

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024917s with result Unsatisfiable.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13592990000000071, Incremental time limit = None
Running cumulative time = 2.1379927000000034, Cumulative time limit = 1800
Used memory = (RSS = 198.859375Mb, VMS = 188.109375Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.7294239000000031, solving_time=0.4085688000000003, total_time=2.1379927000000034, memory=Memory(rss=198.859375, vms=188.109375), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11101270000000163, solving_time=0.024917199999999085, total_time=0.13592990000000071, memory=Memory(rss=198.859375, vms=188.109375), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 50064.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 294515.0, 'bodies_tr': 294515.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3666.0, 'count_bodies_tr': 3666.0, 'sccs': 342.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6607.0, 'rules': 555775.0, 'rules_normal': 552536.0, 'rules_choice': 3219.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 555775.0, 'rules_tr_normal': 552536.0, 'rules_tr_choice': 3219.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 107803.0, 'eqs_atom': 22828.0, 'eqs_body': 5164.0, 'eqs_other': 79811.0}, 'lpStep': {'atoms': 2360.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15216.0, 'bodies_tr': 15216.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28491.0, 'rules_normal': 28338.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28491.0, 'rules_tr_normal': 28338.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5362.0, 'eqs_atom': 1127.0, 'eqs_body': 117.0, 'eqs_other': 4118.0}, 'generator': {'vars': 27446.0, 'vars_eliminated': 0.0, 'vars_frozen': 17452.0, 'constraints': 5819.0, 'constraints_binary': 198705.0, 'constraints_ternary': 23519.0, 'acyc_edges': 0.0, 'complexity': 229027.0}}, 'solving': {'solvers': {'choices': 51.0, 'conflicts': 16.0, 'conflicts_analyzed': 14.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 24.0, 'integrated': 5.0, 'lemmas': 19.0, 'lits_learnt': 1083.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1771.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 14.0, 'lemmas_loop': 0.0, 'lemmas_other': 5.0, 'lits_conflict': 861.0, 'lits_loop': 0.0, 'lits_other': 222.0, 'jumps': {'jumps': 14.0, 'jumps_bounded': 1.0, 'levels': 15.0, 'levels_bounded': 1.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 20.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.13866233825683594, 'cpu': 0.140625, 'solve': 0.007978439331054688, 'unsat': 0.007978439331054688, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.212038040161133, 'cpu': 2.78125, 'solve': 0.20711135864257812, 'unsat': 0.0664825439453125, 'sat': 0.03787803649902344}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 8091.0, 'conflicts': 1292.0, 'conflicts_analyzed': 1216.0, 'restarts': 0.0, 'restarts_last': 79.0, 'extra': {'domain_choices': 0.0, 'models': 7.0, 'models_level': 1681.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 937.0, 'distributed_sum_lbd': 2511.0, 'integrated': 4133.0, 'lemmas': 7955.0, 'lits_learnt': 82519.0, 'lemmas_binary': 903.0, 'lemmas_ternary': 624.0, 'cpu_time': 0.84375, 'integrated_imps': 994.0, 'integrated_jumps': 1788.0, 'guiding_paths_lits': 18559.0, 'guiding_paths': 139.0, 'splits': 0.0, 'lemmas_conflict': 1199.0, 'lemmas_loop': 2741.0, 'lemmas_other': 4015.0, 'lits_conflict': 17567.0, 'lits_loop': 21995.0, 'lits_other': 42957.0, 'jumps': {'jumps': 1216.0, 'jumps_bounded': 76.0, 'levels': 5130.0, 'levels_bounded': 2476.0, 'max': 198.0, 'max_executed': 198.0, 'max_bounded': 193.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.097872s.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034657s with result Satisfiable.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1325295999999998, Incremental time limit = None
Running cumulative time = 2.270522300000003, Cumulative time limit = 1800
Used memory = (RSS = 204.988281Mb, VMS = 194.191406Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.827296s, Solving = 0.443226s, Total = 2.270522s, Memory = (RSS = 204.988281Mb, VMS = 194.191406Mb), Step range = [0-21]), Calls = 21
Final Model :: Total atoms = 10311, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=20, end_step=21, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.827296300000003, solving_time=0.4432260000000001, total_time=2.270522300000003, memory=Memory(rss=204.98828125, vms=194.19140625), step_range=range(0, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09787239999999997, solving_time=0.03465719999999983, total_time=0.1325295999999998, memory=Memory(rss=204.98828125, vms=194.19140625), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 52434.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 309752.0, 'bodies_tr': 309752.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3847.0, 'count_bodies_tr': 3847.0, 'sccs': 362.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7043.0, 'rules': 584332.0, 'rules_normal': 580940.0, 'rules_choice': 3371.0, 'rules_minimize': 21.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 584332.0, 'rules_tr_normal': 580940.0, 'rules_tr_choice': 3371.0, 'rules_tr_minimize': 21.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 113218.0, 'eqs_atom': 23965.0, 'eqs_body': 5282.0, 'eqs_other': 83971.0}, 'lpStep': {'atoms': 2370.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15237.0, 'bodies_tr': 15237.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28557.0, 'rules_normal': 28404.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28557.0, 'rules_tr_normal': 28404.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5415.0, 'eqs_atom': 1137.0, 'eqs_body': 118.0, 'eqs_other': 4160.0}, 'generator': {'vars': 29220.0, 'vars_eliminated': 0.0, 'vars_frozen': 18561.0, 'constraints': 6306.0, 'constraints_binary': 215787.0, 'constraints_ternary': 25499.0, 'acyc_edges': 0.0, 'complexity': 248646.0}}, 'solving': {'solvers': {'choices': 911.0, 'conflicts': 108.0, 'conflicts_analyzed': 108.0, 'restarts': 0.0, 'restarts_last': 53.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 410.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 91.0, 'distributed_sum_lbd': 274.0, 'integrated': 169.0, 'lemmas': 519.0, 'lits_learnt': 6258.0, 'lemmas_binary': 29.0, 'lemmas_ternary': 40.0, 'cpu_time': 0.109375, 'integrated_imps': 6.0, 'integrated_jumps': 10.0, 'guiding_paths_lits': 1855.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 108.0, 'lemmas_loop': 242.0, 'lemmas_other': 169.0, 'lits_conflict': 1959.0, 'lits_loop': 2053.0, 'lits_other': 2246.0, 'jumps': {'jumps': 108.0, 'jumps_bounded': 3.0, 'levels': 713.0, 'levels_bounded': 531.0, 'max': 267.0, 'max_executed': 267.0, 'max_bounded': 265.0}}}}, 'summary': {'call': 21.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.13564109802246094, 'cpu': 0.21875, 'solve': 0.018951416015625, 'unsat': 0.0, 'sat': 0.00698089599609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.3476791381835938, 'cpu': 3.0, 'solve': 0.22606277465820312, 'unsat': 0.0664825439453125, 'sat': 0.04485893249511719}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 9002.0, 'conflicts': 1400.0, 'conflicts_analyzed': 1324.0, 'restarts': 0.0, 'restarts_last': 79.0, 'extra': {'domain_choices': 0.0, 'models': 8.0, 'models_level': 2091.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1028.0, 'distributed_sum_lbd': 2785.0, 'integrated': 4302.0, 'lemmas': 8474.0, 'lits_learnt': 88777.0, 'lemmas_binary': 932.0, 'lemmas_ternary': 664.0, 'cpu_time': 0.953125, 'integrated_imps': 1000.0, 'integrated_jumps': 1798.0, 'guiding_paths_lits': 20414.0, 'guiding_paths': 146.0, 'splits': 0.0, 'lemmas_conflict': 1307.0, 'lemmas_loop': 2983.0, 'lemmas_other': 4184.0, 'lits_conflict': 19526.0, 'lits_loop': 24048.0, 'lits_other': 45203.0, 'jumps': {'jumps': 1324.0, 'jumps_bounded': 79.0, 'levels': 5843.0, 'levels_bounded': 3007.0, 'max': 267.0, 'max_executed': 267.0, 'max_bounded': 265.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 15, 4: 17, 5: 18, 6: 19, 7: 21}

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 8 ( 80.00% solved)

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 21)', truth=True, inc_range=None)

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 21]:
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 8)

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.107342s.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 22: original = External(symbol='current_last_sgoals(8, 21)', truth=True, inc_range=None), conversion = current_last_sgoals(8,21).

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036756s with result Satisfiable.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14409880000000008, Incremental time limit = None
Running cumulative time = 2.4146211000000033, Cumulative time limit = 1800
Used memory = (RSS = 212.988281Mb, VMS = 208.628906Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.934639s, Solving = 0.479982s, Total = 2.414621s, Memory = (RSS = 212.988281Mb, VMS = 208.628906Mb), Step range = [0-22]), Calls = 22
Final Model :: Total atoms = 10652, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=21, end_step=22, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.9346387000000016, solving_time=0.4799824000000017, total_time=2.4146211000000033, memory=Memory(rss=212.98828125, vms=208.62890625), step_range=range(0, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1073423999999985, solving_time=0.03675640000000158, total_time=0.14409880000000008, memory=Memory(rss=212.98828125, vms=208.62890625), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 54814.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 325010.0, 'bodies_tr': 325010.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4028.0, 'count_bodies_tr': 4028.0, 'sccs': 382.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7479.0, 'rules': 612955.0, 'rules_normal': 609410.0, 'rules_choice': 3523.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 612955.0, 'rules_tr_normal': 609410.0, 'rules_tr_choice': 3523.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 118684.0, 'eqs_atom': 25112.0, 'eqs_body': 5399.0, 'eqs_other': 88173.0}, 'lpStep': {'atoms': 2380.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15258.0, 'bodies_tr': 15258.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28623.0, 'rules_normal': 28470.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28623.0, 'rules_tr_normal': 28470.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5466.0, 'eqs_atom': 1147.0, 'eqs_body': 117.0, 'eqs_other': 4202.0}, 'generator': {'vars': 30994.0, 'vars_eliminated': 0.0, 'vars_frozen': 19670.0, 'constraints': 6781.0, 'constraints_binary': 232907.0, 'constraints_ternary': 27341.0, 'acyc_edges': 0.0, 'complexity': 268149.0}}, 'solving': {'solvers': {'choices': 932.0, 'conflicts': 89.0, 'conflicts_analyzed': 89.0, 'restarts': 0.0, 'restarts_last': 56.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 428.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 52.0, 'distributed_sum_lbd': 153.0, 'integrated': 107.0, 'lemmas': 416.0, 'lits_learnt': 5183.0, 'lemmas_binary': 30.0, 'lemmas_ternary': 11.0, 'cpu_time': 0.0625, 'integrated_imps': 4.0, 'integrated_jumps': 14.0, 'guiding_paths_lits': 1939.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 89.0, 'lemmas_loop': 220.0, 'lemmas_other': 107.0, 'lits_conflict': 2015.0, 'lits_loop': 1880.0, 'lits_other': 1288.0, 'jumps': {'jumps': 89.0, 'jumps_bounded': 1.0, 'levels': 161.0, 'levels_bounded': 1.0, 'max': 10.0, 'max_executed': 10.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 22.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.1476459503173828, 'cpu': 0.1875, 'solve': 0.02291107177734375, 'unsat': 0.0, 'sat': 0.009946823120117188}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.4953250885009766, 'cpu': 3.1875, 'solve': 0.24897384643554688, 'unsat': 0.0664825439453125, 'sat': 0.054805755615234375}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 9934.0, 'conflicts': 1489.0, 'conflicts_analyzed': 1413.0, 'restarts': 0.0, 'restarts_last': 79.0, 'extra': {'domain_choices': 0.0, 'models': 9.0, 'models_level': 2519.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1080.0, 'distributed_sum_lbd': 2938.0, 'integrated': 4409.0, 'lemmas': 8890.0, 'lits_learnt': 93960.0, 'lemmas_binary': 962.0, 'lemmas_ternary': 675.0, 'cpu_time': 1.015625, 'integrated_imps': 1004.0, 'integrated_jumps': 1812.0, 'guiding_paths_lits': 22353.0, 'guiding_paths': 153.0, 'splits': 0.0, 'lemmas_conflict': 1396.0, 'lemmas_loop': 3203.0, 'lemmas_other': 4291.0, 'lits_conflict': 21541.0, 'lits_loop': 25928.0, 'lits_other': 46491.0, 'jumps': {'jumps': 1413.0, 'jumps_bounded': 80.0, 'levels': 6004.0, 'levels_bounded': 3008.0, 'max': 267.0, 'max_executed': 267.0, 'max_bounded': 265.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 15, 4: 17, 5: 18, 6: 19, 7: 21, 8: 22}

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 9 ( 90.00% solved)

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 22)', truth=True, inc_range=None)

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 22]:
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 9)

[03-01-2022_17-11-12] DEBUG :: ASH Planner Main #1 >> Reaction at search length 22:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096034s.

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 23: original = External(symbol='current_last_sgoals(9, 22)', truth=True, inc_range=None), conversion = current_last_sgoals(9,22).

[03-01-2022_17-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043837s with result Satisfiable.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13987129999999937, Incremental time limit = None
Running cumulative time = 2.5544924000000027, Cumulative time limit = 1800
Used memory = (RSS = 217.296875Mb, VMS = 211.812500Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.030673s, Solving = 0.523820s, Total = 2.554492s, Memory = (RSS = 217.296875Mb, VMS = 211.812500Mb), Step range = [0-23]), Calls = 23
Final Model :: Total atoms = 10994, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=22, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.0306726000000017, solving_time=0.523819800000001, total_time=2.5544924000000027, memory=Memory(rss=217.296875, vms=211.8125), step_range=range(0, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09603390000000012, solving_time=0.04383739999999925, total_time=0.13987129999999937, memory=Memory(rss=217.296875, vms=211.8125), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 57204.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 340289.0, 'bodies_tr': 340289.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4209.0, 'count_bodies_tr': 4209.0, 'sccs': 402.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7915.0, 'rules': 641644.0, 'rules_normal': 637946.0, 'rules_choice': 3675.0, 'rules_minimize': 23.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 641644.0, 'rules_tr_normal': 637946.0, 'rules_tr_choice': 3675.0, 'rules_tr_minimize': 23.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 124203.0, 'eqs_atom': 26269.0, 'eqs_body': 5517.0, 'eqs_other': 92417.0}, 'lpStep': {'atoms': 2390.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15279.0, 'bodies_tr': 15279.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28689.0, 'rules_normal': 28536.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28689.0, 'rules_tr_normal': 28536.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5519.0, 'eqs_atom': 1157.0, 'eqs_body': 118.0, 'eqs_other': 4244.0}, 'generator': {'vars': 32768.0, 'vars_eliminated': 0.0, 'vars_frozen': 20779.0, 'constraints': 7268.0, 'constraints_binary': 250101.0, 'constraints_ternary': 29321.0, 'acyc_edges': 0.0, 'complexity': 287880.0}}, 'solving': {'solvers': {'choices': 886.0, 'conflicts': 93.0, 'conflicts_analyzed': 93.0, 'restarts': 0.0, 'restarts_last': 63.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 439.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 74.0, 'distributed_sum_lbd': 221.0, 'integrated': 146.0, 'lemmas': 338.0, 'lits_learnt': 5382.0, 'lemmas_binary': 48.0, 'lemmas_ternary': 15.0, 'cpu_time': 0.171875, 'integrated_imps': 19.0, 'integrated_jumps': 108.0, 'guiding_paths_lits': 2023.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 92.0, 'lemmas_loop': 100.0, 'lemmas_other': 146.0, 'lits_conflict': 1893.0, 'lits_loop': 893.0, 'lits_other': 2596.0, 'jumps': {'jumps': 93.0, 'jumps_bounded': 3.0, 'levels': 139.0, 'levels_bounded': 3.0, 'max': 6.0, 'max_executed': 6.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 23.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.1436176300048828, 'cpu': 0.296875, 'solve': 0.027898788452148438, 'unsat': 0.0, 'sat': 0.008951187133789062}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.6389427185058594, 'cpu': 3.484375, 'solve': 0.2768726348876953, 'unsat': 0.0664825439453125, 'sat': 0.06375694274902344}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 10820.0, 'conflicts': 1582.0, 'conflicts_analyzed': 1506.0, 'restarts': 0.0, 'restarts_last': 79.0, 'extra': {'domain_choices': 0.0, 'models': 10.0, 'models_level': 2958.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1154.0, 'distributed_sum_lbd': 3159.0, 'integrated': 4555.0, 'lemmas': 9228.0, 'lits_learnt': 99342.0, 'lemmas_binary': 1010.0, 'lemmas_ternary': 690.0, 'cpu_time': 1.1875, 'integrated_imps': 1023.0, 'integrated_jumps': 1920.0, 'guiding_paths_lits': 24376.0, 'guiding_paths': 160.0, 'splits': 0.0, 'lemmas_conflict': 1488.0, 'lemmas_loop': 3303.0, 'lemmas_other': 4437.0, 'lits_conflict': 23434.0, 'lits_loop': 26821.0, 'lits_other': 49087.0, 'jumps': {'jumps': 1506.0, 'jumps_bounded': 83.0, 'levels': 6143.0, 'levels_bounded': 3011.0, 'max': 267.0, 'max_executed': 267.0, 'max_bounded': 265.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 15, 4: 17, 5: 18, 6: 19, 7: 21, 8: 22, 9: 23}

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 10 (100.00% solved)

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 23)', truth=True, inc_range=None)

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 10, step = 23]:
sub_goal(3, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 10)

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =     10 : Maximum =    100

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.105975s.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(10, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(10,23).

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039941s with result Satisfiable.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1459154999999992, Incremental time limit = None
Running cumulative time = 2.700407900000002, Cumulative time limit = 1800
Used memory = (RSS = 221.937500Mb, VMS = 215.917969Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.136648s, Solving = 0.563760s, Total = 2.700408s, Memory = (RSS = 221.937500Mb, VMS = 215.917969Mb), Step range = [0-24]), Calls = 24
Final Model :: Total atoms = 11337, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=23, end_step=24, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.1366475000000014, solving_time=0.5637604000000005, total_time=2.700407900000002, memory=Memory(rss=221.9375, vms=215.91796875), step_range=range(0, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10597489999999965, solving_time=0.03994059999999955, total_time=0.1459154999999992, memory=Memory(rss=221.9375, vms=215.91796875), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 59604.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 355589.0, 'bodies_tr': 355589.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4390.0, 'count_bodies_tr': 4390.0, 'sccs': 422.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8351.0, 'rules': 670399.0, 'rules_normal': 666548.0, 'rules_choice': 3827.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 670399.0, 'rules_tr_normal': 666548.0, 'rules_tr_choice': 3827.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 129773.0, 'eqs_atom': 27436.0, 'eqs_body': 5634.0, 'eqs_other': 96703.0}, 'lpStep': {'atoms': 2400.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15300.0, 'bodies_tr': 15300.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28755.0, 'rules_normal': 28602.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28755.0, 'rules_tr_normal': 28602.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5570.0, 'eqs_atom': 1167.0, 'eqs_body': 117.0, 'eqs_other': 4286.0}, 'generator': {'vars': 34542.0, 'vars_eliminated': 0.0, 'vars_frozen': 21888.0, 'constraints': 7755.0, 'constraints_binary': 267351.0, 'constraints_ternary': 31301.0, 'acyc_edges': 0.0, 'complexity': 307667.0}}, 'solving': {'solvers': {'choices': 1037.0, 'conflicts': 80.0, 'conflicts_analyzed': 80.0, 'restarts': 0.0, 'restarts_last': 47.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 460.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 48.0, 'distributed_sum_lbd': 160.0, 'integrated': 162.0, 'lemmas': 417.0, 'lits_learnt': 9503.0, 'lemmas_binary': 15.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.09375, 'integrated_imps': 5.0, 'integrated_jumps': 98.0, 'guiding_paths_lits': 2107.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 80.0, 'lemmas_loop': 175.0, 'lemmas_other': 162.0, 'lits_conflict': 2946.0, 'lits_loop': 1532.0, 'lits_other': 5025.0, 'jumps': {'jumps': 80.0, 'jumps_bounded': 0.0, 'levels': 109.0, 'levels_bounded': 0.0, 'max': 8.0, 'max_executed': 8.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 24.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.1495990753173828, 'cpu': 0.21875, 'solve': 0.023937225341796875, 'unsat': 0.0, 'sat': 0.0079803466796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.788541793823242, 'cpu': 3.703125, 'solve': 0.3008098602294922, 'unsat': 0.0664825439453125, 'sat': 0.07173728942871094}, 'models': {'enumerated': 11.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 11857.0, 'conflicts': 1662.0, 'conflicts_analyzed': 1586.0, 'restarts': 0.0, 'restarts_last': 79.0, 'extra': {'domain_choices': 0.0, 'models': 11.0, 'models_level': 3418.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1202.0, 'distributed_sum_lbd': 3319.0, 'integrated': 4717.0, 'lemmas': 9645.0, 'lits_learnt': 108845.0, 'lemmas_binary': 1025.0, 'lemmas_ternary': 704.0, 'cpu_time': 1.28125, 'integrated_imps': 1028.0, 'integrated_jumps': 2018.0, 'guiding_paths_lits': 26483.0, 'guiding_paths': 167.0, 'splits': 0.0, 'lemmas_conflict': 1568.0, 'lemmas_loop': 3478.0, 'lemmas_other': 4599.0, 'lits_conflict': 26380.0, 'lits_loop': 28353.0, 'lits_other': 54112.0, 'jumps': {'jumps': 1586.0, 'jumps_bounded': 83.0, 'levels': 6252.0, 'levels_bounded': 3011.0, 'max': 267.0, 'max_executed': 267.0, 'max_bounded': 265.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 15, 4: 17, 5: 18, 6: 19, 7: 21, 8: 22, 9: 23, 10: 24}

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 11 (110.00% solved)

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 10 was achieved successfully.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.088157s, Solving = 0.010216s, Total = 0.098373s, Memory = (RSS = 134.476562Mb, VMS = 126.972656Mb), Step range = [0-1]
2 : Statistics :: Grounding = 0.060687s, Solving = 0.004671s, Total = 0.065358s, Memory = (RSS = 136.402344Mb, VMS = 129.593750Mb), Step range = [2-2]
3 : Statistics :: Grounding = 0.076188s, Solving = 0.005714s, Total = 0.081902s, Memory = (RSS = 137.464844Mb, VMS = 130.585938Mb), Step range = [3-3]
4 : Statistics :: Grounding = 0.074661s, Solving = 0.008218s, Total = 0.082879s, Memory = (RSS = 138.531250Mb, VMS = 131.492188Mb), Step range = [4-4]
5 : Statistics :: Grounding = 0.090012s, Solving = 0.006836s, Total = 0.096848s, Memory = (RSS = 141.031250Mb, VMS = 134.257812Mb), Step range = [5-5]
6 : Statistics :: Grounding = 0.068968s, Solving = 0.008162s, Total = 0.077130s, Memory = (RSS = 141.816406Mb, VMS = 134.929688Mb), Step range = [6-6]
7 : Statistics :: Grounding = 0.076775s, Solving = 0.016205s, Total = 0.092980s, Memory = (RSS = 145.601562Mb, VMS = 138.894531Mb), Step range = [7-7]
8 : Statistics :: Grounding = 0.084145s, Solving = 0.015527s, Total = 0.099672s, Memory = (RSS = 148.585938Mb, VMS = 140.632812Mb), Step range = [8-8]
9 : Statistics :: Grounding = 0.082897s, Solving = 0.026721s, Total = 0.109618s, Memory = (RSS = 151.890625Mb, VMS = 142.929688Mb), Step range = [9-9]
10 : Statistics :: Grounding = 0.093422s, Solving = 0.013516s, Total = 0.106938s, Memory = (RSS = 158.855469Mb, VMS = 148.683594Mb), Step range = [10-10]
11 : Statistics :: Grounding = 0.082745s, Solving = 0.014811s, Total = 0.097556s, Memory = (RSS = 161.679688Mb, VMS = 150.449219Mb), Step range = [11-11]
12 : Statistics :: Grounding = 0.081535s, Solving = 0.016328s, Total = 0.097864s, Memory = (RSS = 167.070312Mb, VMS = 158.257812Mb), Step range = [12-12]
13 : Statistics :: Grounding = 0.081540s, Solving = 0.026594s, Total = 0.108135s, Memory = (RSS = 168.289062Mb, VMS = 159.328125Mb), Step range = [13-13]
14 : Statistics :: Grounding = 0.088138s, Solving = 0.024877s, Total = 0.113015s, Memory = (RSS = 171.378906Mb, VMS = 160.570312Mb), Step range = [14-14]
15 : Statistics :: Grounding = 0.086698s, Solving = 0.033494s, Total = 0.120193s, Memory = (RSS = 176.765625Mb, VMS = 165.488281Mb), Step range = [15-15]
16 : Statistics :: Grounding = 0.091615s, Solving = 0.018114s, Total = 0.109729s, Memory = (RSS = 185.925781Mb, VMS = 177.980469Mb), Step range = [16-16]
17 : Statistics :: Grounding = 0.103752s, Solving = 0.062517s, Total = 0.166269s, Memory = (RSS = 187.683594Mb, VMS = 178.679688Mb), Step range = [17-17]
18 : Statistics :: Grounding = 0.110131s, Solving = 0.032724s, Total = 0.142855s, Memory = (RSS = 191.300781Mb, VMS = 181.480469Mb), Step range = [18-18]
19 : Statistics :: Grounding = 0.096345s, Solving = 0.038405s, Total = 0.134750s, Memory = (RSS = 195.593750Mb, VMS = 185.378906Mb), Step range = [19-19]
20 : Statistics :: Grounding = 0.111013s, Solving = 0.024917s, Total = 0.135930s, Memory = (RSS = 198.859375Mb, VMS = 188.109375Mb), Step range = [20-20]
21 : Statistics :: Grounding = 0.097872s, Solving = 0.034657s, Total = 0.132530s, Memory = (RSS = 204.988281Mb, VMS = 194.191406Mb), Step range = [21-21]
22 : Statistics :: Grounding = 0.107342s, Solving = 0.036756s, Total = 0.144099s, Memory = (RSS = 212.988281Mb, VMS = 208.628906Mb), Step range = [22-22]
23 : Statistics :: Grounding = 0.096034s, Solving = 0.043837s, Total = 0.139871s, Memory = (RSS = 217.296875Mb, VMS = 211.812500Mb), Step range = [23-23]
24 : Statistics :: Grounding = 0.105975s, Solving = 0.039941s, Total = 0.145915s, Memory = (RSS = 221.937500Mb, VMS = 215.917969Mb), Step range = [24-24]

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.700408s due to: External generator exit.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 18, 6: 19, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 10, Last requested goal index = 10, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.136648s, Solving = 0.563760s, Total = 2.700408s, Memory = (RSS = 221.937500Mb, VMS = 215.917969Mb), Step range = [0-24]), Calls = 24
Model :: Total atoms = 11337, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 24 :: Actions = 24                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 18:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
Step 20:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 22:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 23:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 24:
    Current Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_arm_2,(block,2),(block,3))

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=24, step_range=range(0, 25)

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Tota actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  24, AC =  24, CF = 1.0, GT =   2.16s, ST =   0.57s, OT = 0.01s, TT =   2.74s, EF = (LE = 2.4, AC = 2.4), ED = (LE = 2.8, AC = 2.8), EB = (LE = 1.1, AC = 1.1)

[03-01-2022_17-11-13] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=24, start_step=0, blend=Blend(left=0, right=0)

[03-01-2022_17-11-13] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=12, large_group_size=13

[03-01-2022_17-11-13] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=12, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 24, Sub-goal Stage Range = [1-24]
Division points [total=1] : [(Index = 12, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 2 solved.

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 1 at level 1:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 24, Sub-goal Stage Range = [1-24]
Division points [total=1] : [(Index = 12, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-12]

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-12], problem number = 1, increment number = 1

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 12)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000018B1F48BE80>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 100)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 12
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 11

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
Level = 1
Concurrency = disabled
Problem Type = partial conformance refinement (sequential) with sgoals range [1-12]
Minimum search length bound = disabled with value 11

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[03-01-2022_17-11-13] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-01-2022_17-11-13] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 0).
holds(1, complete_tower(red,puzzle_room_table), false, 0).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(1, configuration(manipulator_limb_1), retracted, 0).
holds(1, configuration(manipulator_limb_2), retracted, 0).
holds(1, configuration(puzzle_room_door), closed, 0).
holds(1, configuration(starting_room_door), closed, 0).
holds(1, configuration(store_room_door), closed, 0).
holds(1, grasping(manipulator_arm_1), nothing, 0).
holds(1, grasping(manipulator_arm_2), nothing, 0).
holds(1, grasping(manipulator_end_1), nothing, 0).
holds(1, grasping(manipulator_end_2), nothing, 0).
holds(1, in((block,1)), (puzzle_room,1), 0).
holds(1, in((block,2)), (puzzle_room,1), 0).
holds(1, in((block,3)), (puzzle_room,1), 0).
holds(1, in((block,4)), (store_room,0), 0).
holds(1, in((block,5)), (store_room,0), 0).
holds(1, in((block,6)), (store_room,0), 0).
holds(1, in(manipulator_arm_1), (starting_room,0), 0).
holds(1, in(manipulator_arm_2), (starting_room,0), 0).
holds(1, in(manipulator_end_1), (starting_room,0), 0).
holds(1, in(manipulator_end_2), (starting_room,0), 0).
holds(1, in(manipulator_limb_1), (starting_room,0), 0).
holds(1, in(manipulator_limb_2), (starting_room,0), 0).
holds(1, in(puzzle_room_table), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0).
holds(1, in(talos), (starting_room,0), 0).
holds(1, in_tower((block,1),(block,1)), true, 0).
holds(1, in_tower((block,1),(block,2)), false, 0).
holds(1, in_tower((block,1),(block,3)), true, 0).
holds(1, in_tower((block,1),(block,4)), false, 0).
holds(1, in_tower((block,1),(block,5)), false, 0).
holds(1, in_tower((block,1),(block,6)), false, 0).
holds(1, in_tower((block,2),(block,1)), false, 0).
holds(1, in_tower((block,2),(block,2)), true, 0).
holds(1, in_tower((block,2),(block,3)), false, 0).
holds(1, in_tower((block,2),(block,4)), false, 0).
holds(1, in_tower((block,2),(block,5)), false, 0).
holds(1, in_tower((block,2),(block,6)), false, 0).
holds(1, in_tower((block,3),(block,1)), false, 0).
holds(1, in_tower((block,3),(block,2)), false, 0).
holds(1, in_tower((block,3),(block,3)), false, 0).
holds(1, in_tower((block,3),(block,4)), false, 0).
holds(1, in_tower((block,3),(block,5)), false, 0).
holds(1, in_tower((block,3),(block,6)), false, 0).
holds(1, in_tower((block,4),(block,1)), false, 0).
holds(1, in_tower((block,4),(block,2)), false, 0).
holds(1, in_tower((block,4),(block,3)), false, 0).
holds(1, in_tower((block,4),(block,4)), false, 0).
holds(1, in_tower((block,4),(block,5)), false, 0).
holds(1, in_tower((block,4),(block,6)), false, 0).
holds(1, in_tower((block,5),(block,1)), false, 0).
holds(1, in_tower((block,5),(block,2)), false, 0).
holds(1, in_tower((block,5),(block,3)), false, 0).
holds(1, in_tower((block,5),(block,4)), false, 0).
holds(1, in_tower((block,5),(block,5)), false, 0).
holds(1, in_tower((block,5),(block,6)), false, 0).
holds(1, in_tower((block,6),(block,1)), false, 0).
holds(1, in_tower((block,6),(block,2)), false, 0).
holds(1, in_tower((block,6),(block,3)), false, 0).
holds(1, in_tower((block,6),(block,4)), false, 0).
holds(1, in_tower((block,6),(block,5)), false, 0).
holds(1, in_tower((block,6),(block,6)), false, 0).
holds(1, on((block,1)), puzzle_room_table_left, 0).
holds(1, on((block,2)), puzzle_room_table_right, 0).
holds(1, on((block,3)), (block,1), 0).
holds(1, on((block,4)), nothing, 0).
holds(1, on((block,5)), nothing, 0).
holds(1, on((block,6)), nothing, 0).
holds(1, tower_base((block,1),puzzle_room_table), true, 0).
holds(1, tower_base((block,2),puzzle_room_table), true, 0).
holds(1, tower_base((block,3),puzzle_room_table), false, 0).
holds(1, tower_base((block,4),puzzle_room_table), false, 0).
holds(1, tower_base((block,5),puzzle_room_table), false, 0).
holds(1, tower_base((block,6),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(2, complete_tower(blue,puzzle_room_table), false, 0).
holds(2, complete_tower(red,puzzle_room_table), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1),puzzle_room_table), true, 0).
holds(2, tower_base((block,2),puzzle_room_table), true, 0).
holds(2, tower_base((block,3),puzzle_room_table), false, 0).
holds(2, tower_base((block,4),puzzle_room_table), false, 0).
holds(2, tower_base((block,5),puzzle_room_table), false, 0).
holds(2, tower_base((block,6),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0).

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 1})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'store_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_2,store_room_door)', 'F': 'configuration(store_room_door)', 'V': 'open', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'puzzle_room_door_handle_outer', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_2,puzzle_room_door)', 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'I': 7})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'I': 12})

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 12 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 1).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 2).
sub_goal(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), store_room_door_handle_outer, 3).
sub_goal(2, talos, actuate(manipulator_arm_2,store_room_door), configuration(store_room_door), open, 4).
sub_goal(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 5).
sub_goal(2, talos, grasp(manipulator_arm_2,puzzle_room_door_handle_outer), grasping(manipulator_arm_2), puzzle_room_door_handle_outer, 6).
sub_goal(2, talos, actuate(manipulator_arm_2,puzzle_room_door), configuration(puzzle_room_door), open, 7).
sub_goal(2, talos, release(manipulator_arm_2,puzzle_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 8).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 9).
sub_goal(2, talos, move(store_room), in(talos), store_room, 10).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 11).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 12).

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000018B1F4194C0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=12, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 12, 'sequential', 'true'), range_=None)]

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 819 rules

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.007482200000000105s

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027926s.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005903s with result Satisfiable.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000018B24FFFB80>

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 0)
	('last_sgoals', 12)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000018B1F48BE80>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000018B24FFFB80>)

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 12, sequential, true). %* None *%

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.131636s.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021158s with result Unsatisfiable.

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.15279389999999893, Incremental time limit = None
Running cumulative time = 0.15279389999999893, Cumulative time limit = 1800
Used memory = (RSS = 150.605469Mb, VMS = 140.425781Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-13] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.13163599999999853, solving_time=0.021157900000000396, total_time=0.15279389999999893, memory=Memory(rss=150.60546875, vms=140.42578125), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13163599999999853, solving_time=0.021157900000000396, total_time=0.15279389999999893, memory=Memory(rss=150.60546875, vms=140.42578125), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 12254.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28691.0, 'bodies_tr': 28691.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 592.0, 'rules': 57379.0, 'rules_normal': 56835.0, 'rules_choice': 543.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 57379.0, 'rules_tr_normal': 56835.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 26859.0, 'eqs_atom': 7037.0, 'eqs_body': 1904.0, 'eqs_other': 17918.0}, 'lpStep': {'atoms': 5727.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26072.0, 'bodies_tr': 26072.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 592.0, 'rules': 49942.0, 'rules_normal': 49398.0, 'rules_choice': 543.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 49942.0, 'rules_tr_normal': 49398.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 13803.0, 'eqs_atom': 2127.0, 'eqs_body': 379.0, 'eqs_other': 11297.0}, 'generator': {'vars': 2641.0, 'vars_eliminated': 0.0, 'vars_frozen': 1607.0, 'constraints': 36.0, 'constraints_binary': 1056.0, 'constraints_ternary': 131.0, 'acyc_edges': 0.0, 'complexity': 1239.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 10.0, 'lits_learnt': 10.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 116.0, 'guiding_paths': 4.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 10.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 10.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.15356826782226562, 'cpu': 0.1875, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.19542694091796875, 'cpu': 0.21875, 'solve': 0.0059566497802734375, 'unsat': 0.001995086669921875, 'sat': 0.0009708404541015625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 10.0, 'lits_learnt': 10.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 124.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 10.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 10.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.095855s.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010716s with result Satisfiable.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10657119999999942, Incremental time limit = None
Running cumulative time = 0.25936509999999835, Cumulative time limit = 1800
Used memory = (RSS = 153.371094Mb, VMS = 143.277344Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.227491s, Solving = 0.031874s, Total = 0.259365s, Memory = (RSS = 153.371094Mb, VMS = 143.277344Mb), Step range = [0-2]), Calls = 2
Final Model :: Total atoms = 4543, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.22749079999999822, solving_time=0.03187430000000013, total_time=0.25936509999999835, memory=Memory(rss=153.37109375, vms=143.27734375), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09585479999999968, solving_time=0.010716399999999737, total_time=0.10657119999999942, memory=Memory(rss=153.37109375, vms=143.27734375), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 14101.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 50282.0, 'bodies_tr': 50282.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 464.0, 'count_bodies_tr': 464.0, 'sccs': 47.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 768.0, 'rules': 98710.0, 'rules_normal': 97970.0, 'rules_choice': 738.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 98710.0, 'rules_tr_normal': 97970.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 30626.0, 'eqs_atom': 7802.0, 'eqs_body': 2337.0, 'eqs_other': 20487.0}, 'lpStep': {'atoms': 1847.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21591.0, 'bodies_tr': 21591.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176.0, 'rules': 41331.0, 'rules_normal': 41135.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41331.0, 'rules_tr_normal': 41135.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3767.0, 'eqs_atom': 765.0, 'eqs_body': 433.0, 'eqs_other': 2569.0}, 'generator': {'vars': 2901.0, 'vars_eliminated': 0.0, 'vars_frozen': 1835.0, 'constraints': 127.0, 'constraints_binary': 3013.0, 'constraints_ternary': 221.0, 'acyc_edges': 0.0, 'complexity': 3403.0}}, 'solving': {'solvers': {'choices': 154.0, 'conflicts': 28.0, 'conflicts_analyzed': 28.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 61.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 36.0, 'distributed_sum_lbd': 45.0, 'integrated': 87.0, 'lemmas': 99.0, 'lits_learnt': 208.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.046875, 'integrated_imps': 30.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 344.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 12.0, 'lemmas_other': 59.0, 'lits_conflict': 34.0, 'lits_loop': 49.0, 'lits_other': 125.0, 'jumps': {'jumps': 28.0, 'jumps_bounded': 2.0, 'levels': 73.0, 'levels_bounded': 44.0, 'max': 45.0, 'max_executed': 2.0, 'max_bounded': 43.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.10724830627441406, 'cpu': 0.140625, 'solve': 0.0059833526611328125, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3026752471923828, 'cpu': 0.359375, 'solve': 0.01194000244140625, 'unsat': 0.001995086669921875, 'sat': 0.0029659271240234375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 154.0, 'conflicts': 28.0, 'conflicts_analyzed': 28.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 62.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 36.0, 'distributed_sum_lbd': 45.0, 'integrated': 87.0, 'lemmas': 109.0, 'lits_learnt': 218.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.09375, 'integrated_imps': 30.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 468.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 22.0, 'lemmas_other': 59.0, 'lits_conflict': 34.0, 'lits_loop': 59.0, 'lits_other': 125.0, 'jumps': {'jumps': 28.0, 'jumps_bounded': 2.0, 'levels': 73.0, 'levels_bounded': 44.0, 'max': 45.0, 'max_executed': 2.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2}

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 2 ( 16.67% solved)

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None)

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 2]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 2)

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 2:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124964s.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 3: original = External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None), conversion = current_last_sgoals(2,2).

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.038252s with result Satisfiable.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.16321590000000086, Incremental time limit = None
Running cumulative time = 0.4225809999999992, Cumulative time limit = 1800
Used memory = (RSS = 155.957031Mb, VMS = 145.812500Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.352455s, Solving = 0.070126s, Total = 0.422581s, Memory = (RSS = 155.957031Mb, VMS = 145.812500Mb), Step range = [0-3]), Calls = 3
Final Model :: Total atoms = 4917, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.35245459999999973, solving_time=0.07012639999999948, total_time=0.4225809999999992, memory=Memory(rss=155.95703125, vms=145.8125), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12496380000000151, solving_time=0.038252099999999345, total_time=0.16321590000000086, memory=Memory(rss=155.95703125, vms=145.8125), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 16705.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71970.0, 'bodies_tr': 71970.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 666.0, 'count_bodies_tr': 666.0, 'sccs': 60.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 954.0, 'rules': 140305.0, 'rules_normal': 139369.0, 'rules_choice': 933.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 140305.0, 'rules_tr_normal': 139369.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 35244.0, 'eqs_atom': 8655.0, 'eqs_body': 2774.0, 'eqs_other': 23815.0}, 'lpStep': {'atoms': 2604.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21688.0, 'bodies_tr': 21688.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 41595.0, 'rules_normal': 41399.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41595.0, 'rules_tr_normal': 41399.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4618.0, 'eqs_atom': 853.0, 'eqs_body': 437.0, 'eqs_other': 3328.0}, 'generator': {'vars': 3159.0, 'vars_eliminated': 0.0, 'vars_frozen': 2083.0, 'constraints': 174.0, 'constraints_binary': 3312.0, 'constraints_ternary': 143.0, 'acyc_edges': 0.0, 'complexity': 3693.0}}, 'solving': {'solvers': {'choices': 192.0, 'conflicts': 31.0, 'conflicts_analyzed': 31.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 81.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 37.0, 'distributed_sum_lbd': 43.0, 'integrated': 42.0, 'lemmas': 57.0, 'lits_learnt': 223.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 456.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 31.0, 'lemmas_loop': 26.0, 'lemmas_other': 0.0, 'lits_conflict': 31.0, 'lits_loop': 192.0, 'lits_other': 0.0, 'jumps': {'jumps': 31.0, 'jumps_bounded': 0.0, 'levels': 31.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.16455841064453125, 'cpu': 0.171875, 'solve': 0.032909393310546875, 'unsat': 0.0, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.46723365783691406, 'cpu': 0.53125, 'solve': 0.044849395751953125, 'unsat': 0.001995086669921875, 'sat': 0.003963470458984375}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 346.0, 'conflicts': 59.0, 'conflicts_analyzed': 59.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 143.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 73.0, 'distributed_sum_lbd': 88.0, 'integrated': 129.0, 'lemmas': 166.0, 'lits_learnt': 441.0, 'lemmas_binary': 42.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.125, 'integrated_imps': 30.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 924.0, 'guiding_paths': 28.0, 'splits': 0.0, 'lemmas_conflict': 59.0, 'lemmas_loop': 48.0, 'lemmas_other': 59.0, 'lits_conflict': 65.0, 'lits_loop': 251.0, 'lits_other': 125.0, 'jumps': {'jumps': 59.0, 'jumps_bounded': 2.0, 'levels': 104.0, 'levels_bounded': 44.0, 'max': 45.0, 'max_executed': 2.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3}

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 3 ( 25.00% solved)

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 3)', truth=True, inc_range=None)

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 3]:
sub_goal(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), store_room_door_handle_outer, 3)

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 3:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.101863s.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 4: original = External(symbol='current_last_sgoals(3, 3)', truth=True, inc_range=None), conversion = current_last_sgoals(3,3).

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007244s with result Unsatisfiable.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10910729999999802, Incremental time limit = None
Running cumulative time = 0.5316882999999972, Cumulative time limit = 1800
Used memory = (RSS = 157.078125Mb, VMS = 146.945312Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.45431769999999894, solving_time=0.07737059999999829, total_time=0.5316882999999972, memory=Memory(rss=157.078125, vms=146.9453125), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10186309999999921, solving_time=0.007244199999998813, total_time=0.10910729999999802, memory=Memory(rss=157.078125, vms=146.9453125), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 19317.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 93725.0, 'bodies_tr': 93725.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 868.0, 'count_bodies_tr': 868.0, 'sccs': 73.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1154.0, 'rules': 182226.0, 'rules_normal': 181094.0, 'rules_choice': 1128.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 182226.0, 'rules_tr_normal': 181094.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 40398.0, 'eqs_atom': 9702.0, 'eqs_body': 3207.0, 'eqs_other': 27489.0}, 'lpStep': {'atoms': 2612.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21755.0, 'bodies_tr': 21755.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 200.0, 'rules': 41921.0, 'rules_normal': 41725.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41921.0, 'rules_tr_normal': 41725.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5154.0, 'eqs_atom': 1047.0, 'eqs_body': 433.0, 'eqs_other': 3674.0}, 'generator': {'vars': 3463.0, 'vars_eliminated': 0.0, 'vars_frozen': 2368.0, 'constraints': 264.0, 'constraints_binary': 4516.0, 'constraints_ternary': 285.0, 'acyc_edges': 0.0, 'complexity': 5167.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 4.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 426.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.10970497131347656, 'cpu': 0.109375, 'solve': 0.0019779205322265625, 'unsat': 0.0019779205322265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5769386291503906, 'cpu': 0.640625, 'solve': 0.04682731628417969, 'unsat': 0.0039730072021484375, 'sat': 0.003963470458984375}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 346.0, 'conflicts': 63.0, 'conflicts_analyzed': 59.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 143.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 73.0, 'distributed_sum_lbd': 88.0, 'integrated': 129.0, 'lemmas': 166.0, 'lits_learnt': 441.0, 'lemmas_binary': 42.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.125, 'integrated_imps': 30.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 1350.0, 'guiding_paths': 34.0, 'splits': 0.0, 'lemmas_conflict': 59.0, 'lemmas_loop': 48.0, 'lemmas_other': 59.0, 'lits_conflict': 65.0, 'lits_loop': 251.0, 'lits_other': 125.0, 'jumps': {'jumps': 59.0, 'jumps_bounded': 2.0, 'levels': 104.0, 'levels_bounded': 44.0, 'max': 45.0, 'max_executed': 2.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 4:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.092433s.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009666s with result Unsatisfiable.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10209860000000148, Incremental time limit = None
Running cumulative time = 0.6337868999999987, Cumulative time limit = 1800
Used memory = (RSS = 159.531250Mb, VMS = 149.957031Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5467507999999999, solving_time=0.08703609999999884, total_time=0.6337868999999987, memory=Memory(rss=159.53125, vms=149.95703125), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09243310000000093, solving_time=0.009665500000000549, total_time=0.10209860000000148, memory=Memory(rss=159.53125, vms=149.95703125), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 21951.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 115818.0, 'bodies_tr': 115818.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1070.0, 'count_bodies_tr': 1070.0, 'sccs': 86.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1388.0, 'rules': 224924.0, 'rules_normal': 223596.0, 'rules_choice': 1323.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 224924.0, 'rules_tr_normal': 223596.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 47768.0, 'eqs_atom': 11157.0, 'eqs_body': 3830.0, 'eqs_other': 32781.0}, 'lpStep': {'atoms': 2634.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22093.0, 'bodies_tr': 22093.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 42698.0, 'rules_normal': 42502.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 42698.0, 'rules_tr_normal': 42502.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7370.0, 'eqs_atom': 1455.0, 'eqs_body': 623.0, 'eqs_other': 5292.0}, 'generator': {'vars': 4116.0, 'vars_eliminated': 0.0, 'vars_frozen': 2814.0, 'constraints': 433.0, 'constraints_binary': 9373.0, 'constraints_ternary': 760.0, 'acyc_edges': 0.0, 'complexity': 10718.0}}, 'solving': {'solvers': {'choices': 23.0, 'conflicts': 13.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 6.0, 'integrated': 7.0, 'lemmas': 11.0, 'lits_learnt': 61.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 3.0, 'cpu_time': 0.0, 'integrated_imps': 7.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 595.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 1.0, 'lemmas_other': 7.0, 'lits_conflict': 16.0, 'lits_loop': 4.0, 'lits_other': 41.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 2.0, 'levels': 18.0, 'levels_bounded': 2.0, 'max': 12.0, 'max_executed': 12.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.10272598266601562, 'cpu': 0.09375, 'solve': 0.000995635986328125, 'unsat': 0.000995635986328125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6796646118164062, 'cpu': 0.734375, 'solve': 0.04782295227050781, 'unsat': 0.0049686431884765625, 'sat': 0.003963470458984375}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 369.0, 'conflicts': 76.0, 'conflicts_analyzed': 65.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 143.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 76.0, 'distributed_sum_lbd': 94.0, 'integrated': 136.0, 'lemmas': 177.0, 'lits_learnt': 502.0, 'lemmas_binary': 42.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.125, 'integrated_imps': 37.0, 'integrated_jumps': 14.0, 'guiding_paths_lits': 1945.0, 'guiding_paths': 41.0, 'splits': 0.0, 'lemmas_conflict': 62.0, 'lemmas_loop': 49.0, 'lemmas_other': 66.0, 'lits_conflict': 81.0, 'lits_loop': 255.0, 'lits_other': 166.0, 'jumps': {'jumps': 65.0, 'jumps_bounded': 4.0, 'levels': 122.0, 'levels_bounded': 46.0, 'max': 45.0, 'max_executed': 12.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 5:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.106709s.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022988s with result Satisfiable.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1296967999999996, Incremental time limit = None
Running cumulative time = 0.7634836999999983, Cumulative time limit = 1800
Used memory = (RSS = 165.074219Mb, VMS = 156.921875Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.653459s, Solving = 0.110024s, Total = 0.763484s, Memory = (RSS = 165.074219Mb, VMS = 156.921875Mb), Step range = [0-6]), Calls = 6
Final Model :: Total atoms = 6039, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.6534593999999991, solving_time=0.11002429999999919, total_time=0.7634836999999983, memory=Memory(rss=165.07421875, vms=156.921875), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10670859999999927, solving_time=0.022988200000000347, total_time=0.1296967999999996, memory=Memory(rss=165.07421875, vms=156.921875), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 24969.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 139105.0, 'bodies_tr': 139105.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1272.0, 'count_bodies_tr': 1272.0, 'sccs': 111.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1874.0, 'rules': 269144.0, 'rules_normal': 267620.0, 'rules_choice': 1518.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 269144.0, 'rules_tr_normal': 267620.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 55387.0, 'eqs_atom': 12668.0, 'eqs_body': 3981.0, 'eqs_other': 38738.0}, 'lpStep': {'atoms': 3018.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23287.0, 'bodies_tr': 23287.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 44220.0, 'rules_normal': 44024.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 44220.0, 'rules_tr_normal': 44024.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7619.0, 'eqs_atom': 1511.0, 'eqs_body': 151.0, 'eqs_other': 5957.0}, 'generator': {'vars': 5981.0, 'vars_eliminated': 0.0, 'vars_frozen': 3947.0, 'constraints': 897.0, 'constraints_binary': 28279.0, 'constraints_ternary': 2933.0, 'acyc_edges': 0.0, 'complexity': 32339.0}}, 'solving': {'solvers': {'choices': 372.0, 'conflicts': 108.0, 'conflicts_analyzed': 108.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 141.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 117.0, 'distributed_sum_lbd': 163.0, 'integrated': 186.0, 'lemmas': 430.0, 'lits_learnt': 2756.0, 'lemmas_binary': 72.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.109375, 'integrated_imps': 59.0, 'integrated_jumps': 13.0, 'guiding_paths_lits': 693.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 105.0, 'lemmas_loop': 148.0, 'lemmas_other': 177.0, 'lits_conflict': 295.0, 'lits_loop': 1259.0, 'lits_other': 1202.0, 'jumps': {'jumps': 108.0, 'jumps_bounded': 5.0, 'levels': 148.0, 'levels_bounded': 5.0, 'max': 8.0, 'max_executed': 8.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 6.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.13064956665039062, 'cpu': 0.21875, 'solve': 0.011966705322265625, 'unsat': 0.0, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8103141784667969, 'cpu': 0.953125, 'solve': 0.05978965759277344, 'unsat': 0.0049686431884765625, 'sat': 0.0069561004638671875}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 741.0, 'conflicts': 184.0, 'conflicts_analyzed': 173.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 284.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 193.0, 'distributed_sum_lbd': 257.0, 'integrated': 322.0, 'lemmas': 607.0, 'lits_learnt': 3258.0, 'lemmas_binary': 114.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.234375, 'integrated_imps': 96.0, 'integrated_jumps': 27.0, 'guiding_paths_lits': 2638.0, 'guiding_paths': 48.0, 'splits': 0.0, 'lemmas_conflict': 167.0, 'lemmas_loop': 197.0, 'lemmas_other': 243.0, 'lits_conflict': 376.0, 'lits_loop': 1514.0, 'lits_other': 1368.0, 'jumps': {'jumps': 173.0, 'jumps_bounded': 9.0, 'levels': 270.0, 'levels_bounded': 51.0, 'max': 45.0, 'max_executed': 12.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6}

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 4 ( 33.33% solved)

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 6)', truth=True, inc_range=None)

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 6]:
sub_goal(2, talos, actuate(manipulator_arm_2,store_room_door), configuration(store_room_door), open, 4)

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 6:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.104200s.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 7: original = External(symbol='current_last_sgoals(4, 6)', truth=True, inc_range=None), conversion = current_last_sgoals(4,6).

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016288s with result Satisfiable.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12048740000000002, Incremental time limit = None
Running cumulative time = 0.8839710999999983, Cumulative time limit = 1800
Used memory = (RSS = 167.746094Mb, VMS = 158.917969Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.757659s, Solving = 0.126312s, Total = 0.883971s, Memory = (RSS = 167.746094Mb, VMS = 158.917969Mb), Step range = [0-7]), Calls = 7
Final Model :: Total atoms = 6415, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.7576588999999991, solving_time=0.1263121999999992, total_time=0.8839710999999983, memory=Memory(rss=167.74609375, vms=158.91796875), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1041995, solving_time=0.016287900000000022, total_time=0.12048740000000002, memory=Memory(rss=167.74609375, vms=158.91796875), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 28269.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 161202.0, 'bodies_tr': 161202.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1474.0, 'count_bodies_tr': 1474.0, 'sccs': 124.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2074.0, 'rules': 311600.0, 'rules_normal': 309880.0, 'rules_choice': 1713.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 311600.0, 'rules_tr_normal': 309880.0, 'rules_tr_choice': 1713.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 61645.0, 'eqs_atom': 13869.0, 'eqs_body': 4555.0, 'eqs_other': 43221.0}, 'lpStep': {'atoms': 3300.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22097.0, 'bodies_tr': 22097.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 200.0, 'rules': 42456.0, 'rules_normal': 42260.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 42456.0, 'rules_tr_normal': 42260.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6258.0, 'eqs_atom': 1201.0, 'eqs_body': 574.0, 'eqs_other': 4483.0}, 'generator': {'vars': 6386.0, 'vars_eliminated': 0.0, 'vars_frozen': 4278.0, 'constraints': 589.0, 'constraints_binary': 10889.0, 'constraints_ternary': 832.0, 'acyc_edges': 0.0, 'complexity': 32339.0}}, 'solving': {'solvers': {'choices': 399.0, 'conflicts': 22.0, 'conflicts_analyzed': 22.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 161.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 26.0, 'distributed_sum_lbd': 32.0, 'integrated': 36.0, 'lemmas': 79.0, 'lits_learnt': 308.0, 'lemmas_binary': 35.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 7.0, 'integrated_jumps': 12.0, 'guiding_paths_lits': 791.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 22.0, 'lemmas_loop': 21.0, 'lemmas_other': 36.0, 'lits_conflict': 31.0, 'lits_loop': 163.0, 'lits_other': 114.0, 'jumps': {'jumps': 22.0, 'jumps_bounded': 1.0, 'levels': 30.0, 'levels_bounded': 1.0, 'max': 7.0, 'max_executed': 7.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.12364006042480469, 'cpu': 0.109375, 'solve': 0.008974075317382812, 'unsat': 0.0, 'sat': 0.0019931793212890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.9339542388916016, 'cpu': 1.0625, 'solve': 0.06876373291015625, 'unsat': 0.0049686431884765625, 'sat': 0.00894927978515625}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1140.0, 'conflicts': 206.0, 'conflicts_analyzed': 195.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 445.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 219.0, 'distributed_sum_lbd': 289.0, 'integrated': 358.0, 'lemmas': 686.0, 'lits_learnt': 3566.0, 'lemmas_binary': 149.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.234375, 'integrated_imps': 103.0, 'integrated_jumps': 39.0, 'guiding_paths_lits': 3429.0, 'guiding_paths': 55.0, 'splits': 0.0, 'lemmas_conflict': 189.0, 'lemmas_loop': 218.0, 'lemmas_other': 279.0, 'lits_conflict': 407.0, 'lits_loop': 1677.0, 'lits_other': 1482.0, 'jumps': {'jumps': 195.0, 'jumps_bounded': 10.0, 'levels': 300.0, 'levels_bounded': 52.0, 'max': 45.0, 'max_executed': 12.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7}

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 5 ( 41.67% solved)

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 7)', truth=True, inc_range=None)

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 7]:
sub_goal(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 5)

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.099737s.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 8: original = External(symbol='current_last_sgoals(5, 7)', truth=True, inc_range=None), conversion = current_last_sgoals(5,7).

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015970s with result Satisfiable.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11570629999999937, Incremental time limit = None
Running cumulative time = 0.9996773999999977, Cumulative time limit = 1800
Used memory = (RSS = 169.996094Mb, VMS = 160.972656Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.857395s, Solving = 0.142282s, Total = 0.999677s, Memory = (RSS = 169.996094Mb, VMS = 160.972656Mb), Step range = [0-8]), Calls = 8
Final Model :: Total atoms = 6792, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.8573954999999991, solving_time=0.14228189999999863, total_time=0.9996773999999977, memory=Memory(rss=169.99609375, vms=160.97265625), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09973659999999995, solving_time=0.01596969999999942, total_time=0.11570629999999937, memory=Memory(rss=169.99609375, vms=160.97265625), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 30930.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 183181.0, 'bodies_tr': 183181.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1676.0, 'count_bodies_tr': 1676.0, 'sccs': 137.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2284.0, 'rules': 354097.0, 'rules_normal': 352181.0, 'rules_choice': 1908.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 354097.0, 'rules_tr_normal': 352181.0, 'rules_tr_choice': 1908.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 67578.0, 'eqs_atom': 15021.0, 'eqs_body': 4974.0, 'eqs_other': 47583.0}, 'lpStep': {'atoms': 2661.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21979.0, 'bodies_tr': 21979.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 210.0, 'rules': 42497.0, 'rules_normal': 42301.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 42497.0, 'rules_tr_normal': 42301.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5933.0, 'eqs_atom': 1152.0, 'eqs_body': 419.0, 'eqs_other': 4362.0}, 'generator': {'vars': 6816.0, 'vars_eliminated': 0.0, 'vars_frozen': 4623.0, 'constraints': 713.0, 'constraints_binary': 13455.0, 'constraints_ternary': 1081.0, 'acyc_edges': 0.0, 'complexity': 32339.0}}, 'solving': {'solvers': {'choices': 425.0, 'conflicts': 18.0, 'conflicts_analyzed': 18.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 181.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 34.0, 'integrated': 55.0, 'lemmas': 75.0, 'lits_learnt': 455.0, 'lemmas_binary': 16.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 6.0, 'integrated_jumps': 8.0, 'guiding_paths_lits': 889.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 54.0, 'lemmas_other': 6.0, 'lits_conflict': 16.0, 'lits_loop': 427.0, 'lits_other': 12.0, 'jumps': {'jumps': 18.0, 'jumps_bounded': 4.0, 'levels': 42.0, 'levels_bounded': 4.0, 'max': 7.0, 'max_executed': 6.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 8.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.11668586730957031, 'cpu': 0.09375, 'solve': 0.00698089599609375, 'unsat': 0.0, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.0506401062011719, 'cpu': 1.15625, 'solve': 0.07574462890625, 'unsat': 0.0049686431884765625, 'sat': 0.009946823120117188}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1565.0, 'conflicts': 224.0, 'conflicts_analyzed': 213.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 0.0, 'models': 6.0, 'models_level': 626.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 243.0, 'distributed_sum_lbd': 323.0, 'integrated': 413.0, 'lemmas': 761.0, 'lits_learnt': 4021.0, 'lemmas_binary': 165.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.234375, 'integrated_imps': 109.0, 'integrated_jumps': 47.0, 'guiding_paths_lits': 4318.0, 'guiding_paths': 62.0, 'splits': 0.0, 'lemmas_conflict': 204.0, 'lemmas_loop': 272.0, 'lemmas_other': 285.0, 'lits_conflict': 423.0, 'lits_loop': 2104.0, 'lits_other': 1494.0, 'jumps': {'jumps': 213.0, 'jumps_bounded': 14.0, 'levels': 342.0, 'levels_bounded': 56.0, 'max': 45.0, 'max_executed': 12.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8}

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 6 ( 50.00% solved)

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 8)', truth=True, inc_range=None)

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 8]:
sub_goal(2, talos, grasp(manipulator_arm_2,puzzle_room_door_handle_outer), grasping(manipulator_arm_2), puzzle_room_door_handle_outer, 6)

[03-01-2022_17-11-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.110065s.

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 9: original = External(symbol='current_last_sgoals(6, 8)', truth=True, inc_range=None), conversion = current_last_sgoals(6,8).

[03-01-2022_17-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010463s with result Unsatisfiable.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.12052809999999958, Incremental time limit = None
Running cumulative time = 1.1202054999999973, Cumulative time limit = 1800
Used memory = (RSS = 172.027344Mb, VMS = 162.621094Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.967460899999999, solving_time=0.15274459999999834, total_time=1.1202054999999973, memory=Memory(rss=172.02734375, vms=162.62109375), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11006539999999987, solving_time=0.010462699999999714, total_time=0.12052809999999958, memory=Memory(rss=172.02734375, vms=162.62109375), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 33602.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 205243.0, 'bodies_tr': 205243.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1878.0, 'count_bodies_tr': 1878.0, 'sccs': 150.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2518.0, 'rules': 397030.0, 'rules_normal': 394918.0, 'rules_choice': 2103.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 397030.0, 'rules_tr_normal': 394918.0, 'rules_tr_choice': 2103.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 74197.0, 'eqs_atom': 16473.0, 'eqs_body': 5398.0, 'eqs_other': 52326.0}, 'lpStep': {'atoms': 2672.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22062.0, 'bodies_tr': 22062.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 42933.0, 'rules_normal': 42737.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 42933.0, 'rules_tr_normal': 42737.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6619.0, 'eqs_atom': 1452.0, 'eqs_body': 424.0, 'eqs_other': 4743.0}, 'generator': {'vars': 7283.0, 'vars_eliminated': 0.0, 'vars_frozen': 5000.0, 'constraints': 867.0, 'constraints_binary': 16748.0, 'constraints_ternary': 1349.0, 'acyc_edges': 0.0, 'complexity': 32339.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 705.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 9.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.121673583984375, 'cpu': 0.125, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.1723136901855469, 'cpu': 1.28125, 'solve': 0.07773971557617188, 'unsat': 0.0069637298583984375, 'sat': 0.009946823120117188}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1565.0, 'conflicts': 230.0, 'conflicts_analyzed': 213.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 0.0, 'models': 6.0, 'models_level': 626.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 243.0, 'distributed_sum_lbd': 323.0, 'integrated': 413.0, 'lemmas': 761.0, 'lits_learnt': 4021.0, 'lemmas_binary': 165.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.234375, 'integrated_imps': 109.0, 'integrated_jumps': 47.0, 'guiding_paths_lits': 5023.0, 'guiding_paths': 67.0, 'splits': 0.0, 'lemmas_conflict': 204.0, 'lemmas_loop': 272.0, 'lemmas_other': 285.0, 'lits_conflict': 423.0, 'lits_loop': 2104.0, 'lits_other': 1494.0, 'jumps': {'jumps': 213.0, 'jumps_bounded': 14.0, 'levels': 342.0, 'levels_bounded': 56.0, 'max': 45.0, 'max_executed': 12.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.107770s.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014530s with result Unsatisfiable.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.12229999999999919, Incremental time limit = None
Running cumulative time = 1.2425054999999965, Cumulative time limit = 1800
Used memory = (RSS = 173.402344Mb, VMS = 163.644531Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.0752308999999975, solving_time=0.16727459999999894, total_time=1.2425054999999965, memory=Memory(rss=173.40234375, vms=163.64453125), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10776999999999859, solving_time=0.014530000000000598, total_time=0.12229999999999919, memory=Memory(rss=173.40234375, vms=163.64453125), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 36292.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 227488.0, 'bodies_tr': 227488.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2080.0, 'count_bodies_tr': 2080.0, 'sccs': 163.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2752.0, 'rules': 440213.0, 'rules_normal': 437905.0, 'rules_choice': 2298.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 440213.0, 'rules_tr_normal': 437905.0, 'rules_tr_choice': 2298.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 82236.0, 'eqs_atom': 17937.0, 'eqs_body': 6012.0, 'eqs_other': 58287.0}, 'lpStep': {'atoms': 2690.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22245.0, 'bodies_tr': 22245.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 43183.0, 'rules_normal': 42987.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 43183.0, 'rules_tr_normal': 42987.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8039.0, 'eqs_atom': 1464.0, 'eqs_body': 614.0, 'eqs_other': 5961.0}, 'generator': {'vars': 8000.0, 'vars_eliminated': 0.0, 'vars_frozen': 5482.0, 'constraints': 1045.0, 'constraints_binary': 22578.0, 'constraints_ternary': 1867.0, 'acyc_edges': 0.0, 'complexity': 32339.0}}, 'solving': {'solvers': {'choices': 67.0, 'conflicts': 20.0, 'conflicts_analyzed': 13.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 12.0, 'distributed_sum_lbd': 32.0, 'integrated': 60.0, 'lemmas': 97.0, 'lits_learnt': 919.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 27.0, 'integrated_jumps': 42.0, 'guiding_paths_lits': 930.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 33.0, 'lemmas_other': 51.0, 'lits_conflict': 127.0, 'lits_loop': 307.0, 'lits_other': 485.0, 'jumps': {'jumps': 13.0, 'jumps_bounded': 1.0, 'levels': 26.0, 'levels_bounded': 1.0, 'max': 9.0, 'max_executed': 9.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.1236724853515625, 'cpu': 0.125, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.2959861755371094, 'cpu': 1.40625, 'solve': 0.07973480224609375, 'unsat': 0.008958816528320312, 'sat': 0.009946823120117188}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1632.0, 'conflicts': 250.0, 'conflicts_analyzed': 226.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 0.0, 'models': 6.0, 'models_level': 626.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 255.0, 'distributed_sum_lbd': 355.0, 'integrated': 473.0, 'lemmas': 858.0, 'lits_learnt': 4940.0, 'lemmas_binary': 171.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.234375, 'integrated_imps': 136.0, 'integrated_jumps': 89.0, 'guiding_paths_lits': 5953.0, 'guiding_paths': 73.0, 'splits': 0.0, 'lemmas_conflict': 217.0, 'lemmas_loop': 305.0, 'lemmas_other': 336.0, 'lits_conflict': 550.0, 'lits_loop': 2411.0, 'lits_other': 1979.0, 'jumps': {'jumps': 226.0, 'jumps_bounded': 15.0, 'levels': 368.0, 'levels_bounded': 57.0, 'max': 45.0, 'max_executed': 12.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.110373s.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018327s with result Unsatisfiable.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.12870070000000133, Incremental time limit = None
Running cumulative time = 1.3712061999999978, Cumulative time limit = 1800
Used memory = (RSS = 179.343750Mb, VMS = 170.957031Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.1856041999999984, solving_time=0.18560199999999938, total_time=1.3712061999999978, memory=Memory(rss=179.34375, vms=170.95703125), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1103733000000009, solving_time=0.018327400000000438, total_time=0.12870070000000133, memory=Memory(rss=179.34375, vms=170.95703125), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 39352.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 250888.0, 'bodies_tr': 250888.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2282.0, 'count_bodies_tr': 2282.0, 'sccs': 188.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3238.0, 'rules': 484879.0, 'rules_normal': 482375.0, 'rules_choice': 2493.0, 'rules_minimize': 11.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 484879.0, 'rules_tr_normal': 482375.0, 'rules_tr_choice': 2493.0, 'rules_tr_minimize': 11.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 90167.0, 'eqs_atom': 19478.0, 'eqs_body': 6166.0, 'eqs_other': 64523.0}, 'lpStep': {'atoms': 3060.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23400.0, 'bodies_tr': 23400.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 44666.0, 'rules_normal': 44470.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 44666.0, 'rules_tr_normal': 44470.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7931.0, 'eqs_atom': 1541.0, 'eqs_body': 154.0, 'eqs_other': 6236.0}, 'generator': {'vars': 9886.0, 'vars_eliminated': 0.0, 'vars_frozen': 6627.0, 'constraints': 1512.0, 'constraints_binary': 41930.0, 'constraints_ternary': 4058.0, 'acyc_edges': 0.0, 'complexity': 47920.0}}, 'solving': {'solvers': {'choices': 136.0, 'conflicts': 38.0, 'conflicts_analyzed': 31.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 29.0, 'distributed_sum_lbd': 80.0, 'integrated': 168.0, 'lemmas': 280.0, 'lits_learnt': 3554.0, 'lemmas_binary': 26.0, 'lemmas_ternary': 11.0, 'cpu_time': 0.0, 'integrated_imps': 54.0, 'integrated_jumps': 82.0, 'guiding_paths_lits': 1183.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 31.0, 'lemmas_loop': 92.0, 'lemmas_other': 157.0, 'lits_conflict': 459.0, 'lits_loop': 790.0, 'lits_other': 2305.0, 'jumps': {'jumps': 31.0, 'jumps_bounded': 1.0, 'levels': 55.0, 'levels_bounded': 1.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.13065338134765625, 'cpu': 0.125, 'solve': 0.004962921142578125, 'unsat': 0.004962921142578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.4266395568847656, 'cpu': 1.53125, 'solve': 0.08469772338867188, 'unsat': 0.013921737670898438, 'sat': 0.009946823120117188}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1768.0, 'conflicts': 288.0, 'conflicts_analyzed': 257.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 0.0, 'models': 6.0, 'models_level': 626.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 284.0, 'distributed_sum_lbd': 435.0, 'integrated': 641.0, 'lemmas': 1138.0, 'lits_learnt': 8494.0, 'lemmas_binary': 197.0, 'lemmas_ternary': 17.0, 'cpu_time': 0.234375, 'integrated_imps': 190.0, 'integrated_jumps': 171.0, 'guiding_paths_lits': 7136.0, 'guiding_paths': 80.0, 'splits': 0.0, 'lemmas_conflict': 248.0, 'lemmas_loop': 397.0, 'lemmas_other': 493.0, 'lits_conflict': 1009.0, 'lits_loop': 3201.0, 'lits_other': 4284.0, 'jumps': {'jumps': 257.0, 'jumps_bounded': 16.0, 'levels': 423.0, 'levels_bounded': 58.0, 'max': 45.0, 'max_executed': 12.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122473s.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023444s with result Unsatisfiable.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.14591740000000186, Incremental time limit = None
Running cumulative time = 1.5171235999999997, Cumulative time limit = 1800
Used memory = (RSS = 181.421875Mb, VMS = 171.582031Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.308077299999999, solving_time=0.20904630000000068, total_time=1.5171235999999997, memory=Memory(rss=181.421875, vms=171.58203125), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12247310000000056, solving_time=0.023444300000001306, total_time=0.14591740000000186, memory=Memory(rss=181.421875, vms=171.58203125), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 42697.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 275037.0, 'bodies_tr': 275037.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2484.0, 'count_bodies_tr': 2484.0, 'sccs': 213.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3728.0, 'rules': 530535.0, 'rules_normal': 527835.0, 'rules_choice': 2688.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 530535.0, 'rules_tr_normal': 527835.0, 'rules_tr_choice': 2688.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 102459.0, 'eqs_atom': 21237.0, 'eqs_body': 6351.0, 'eqs_other': 74871.0}, 'lpStep': {'atoms': 3345.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24149.0, 'bodies_tr': 24149.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 45656.0, 'rules_normal': 45460.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45656.0, 'rules_tr_normal': 45460.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 12292.0, 'eqs_atom': 1759.0, 'eqs_body': 185.0, 'eqs_other': 10348.0}, 'generator': {'vars': 11953.0, 'vars_eliminated': 0.0, 'vars_frozen': 7823.0, 'constraints': 2025.0, 'constraints_binary': 63664.0, 'constraints_ternary': 6719.0, 'acyc_edges': 0.0, 'complexity': 72906.0}}, 'solving': {'solvers': {'choices': 95.0, 'conflicts': 59.0, 'conflicts_analyzed': 51.0, 'restarts': 0.0, 'restarts_last': 15.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 46.0, 'distributed_sum_lbd': 114.0, 'integrated': 221.0, 'lemmas': 336.0, 'lits_learnt': 3189.0, 'lemmas_binary': 90.0, 'lemmas_ternary': 35.0, 'cpu_time': 0.0, 'integrated_imps': 25.0, 'integrated_jumps': 20.0, 'guiding_paths_lits': 1281.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 48.0, 'lemmas_loop': 67.0, 'lemmas_other': 221.0, 'lits_conflict': 587.0, 'lits_loop': 549.0, 'lits_other': 2053.0, 'jumps': {'jumps': 51.0, 'jumps_bounded': 8.0, 'levels': 83.0, 'levels_bounded': 8.0, 'max': 7.0, 'max_executed': 7.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 12.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.1473407745361328, 'cpu': 0.140625, 'solve': 0.0049877166748046875, 'unsat': 0.0049877166748046875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.5739803314208984, 'cpu': 1.671875, 'solve': 0.08968544006347656, 'unsat': 0.018909454345703125, 'sat': 0.009946823120117188}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1863.0, 'conflicts': 347.0, 'conflicts_analyzed': 308.0, 'restarts': 0.0, 'restarts_last': 15.0, 'extra': {'domain_choices': 0.0, 'models': 6.0, 'models_level': 626.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 330.0, 'distributed_sum_lbd': 549.0, 'integrated': 862.0, 'lemmas': 1474.0, 'lits_learnt': 11683.0, 'lemmas_binary': 287.0, 'lemmas_ternary': 52.0, 'cpu_time': 0.234375, 'integrated_imps': 215.0, 'integrated_jumps': 191.0, 'guiding_paths_lits': 8417.0, 'guiding_paths': 87.0, 'splits': 0.0, 'lemmas_conflict': 296.0, 'lemmas_loop': 464.0, 'lemmas_other': 714.0, 'lits_conflict': 1596.0, 'lits_loop': 3750.0, 'lits_other': 6337.0, 'jumps': {'jumps': 308.0, 'jumps_bounded': 24.0, 'levels': 506.0, 'levels_bounded': 66.0, 'max': 45.0, 'max_executed': 12.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.126091s.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022591s with result Unsatisfiable.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1486812000000004, Incremental time limit = None
Running cumulative time = 1.6658048, Cumulative time limit = 1800
Used memory = (RSS = 187.902344Mb, VMS = 180.781250Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.434167799999999, solving_time=0.23163700000000098, total_time=1.6658048, memory=Memory(rss=187.90234375, vms=180.78125), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1260905000000001, solving_time=0.022590700000000297, total_time=0.1486812000000004, memory=Memory(rss=187.90234375, vms=180.78125), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 46071.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 299536.0, 'bodies_tr': 299536.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2686.0, 'count_bodies_tr': 2686.0, 'sccs': 238.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4322.0, 'rules': 576608.0, 'rules_normal': 573712.0, 'rules_choice': 2883.0, 'rules_minimize': 13.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 576608.0, 'rules_tr_normal': 573712.0, 'rules_tr_choice': 2883.0, 'rules_tr_minimize': 13.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 109883.0, 'eqs_atom': 22965.0, 'eqs_body': 6426.0, 'eqs_other': 80492.0}, 'lpStep': {'atoms': 3374.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24499.0, 'bodies_tr': 24499.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46073.0, 'rules_normal': 45877.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46073.0, 'rules_tr_normal': 45877.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7424.0, 'eqs_atom': 1728.0, 'eqs_body': 75.0, 'eqs_other': 5621.0}, 'generator': {'vars': 14348.0, 'vars_eliminated': 0.0, 'vars_frozen': 9214.0, 'constraints': 2648.0, 'constraints_binary': 89916.0, 'constraints_ternary': 9954.0, 'acyc_edges': 0.0, 'complexity': 103102.0}}, 'solving': {'solvers': {'choices': 246.0, 'conflicts': 84.0, 'conflicts_analyzed': 78.0, 'restarts': 0.0, 'restarts_last': 21.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 59.0, 'distributed_sum_lbd': 179.0, 'integrated': 317.0, 'lemmas': 513.0, 'lits_learnt': 7914.0, 'lemmas_binary': 28.0, 'lemmas_ternary': 28.0, 'cpu_time': 0.0, 'integrated_imps': 37.0, 'integrated_jumps': 124.0, 'guiding_paths_lits': 1379.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 78.0, 'lemmas_loop': 119.0, 'lemmas_other': 316.0, 'lits_conflict': 1516.0, 'lits_loop': 1092.0, 'lits_other': 5306.0, 'jumps': {'jumps': 78.0, 'jumps_bounded': 2.0, 'levels': 123.0, 'levels_bounded': 2.0, 'max': 7.0, 'max_executed': 7.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 13.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.15059852600097656, 'cpu': 0.15625, 'solve': 0.00698089599609375, 'unsat': 0.00698089599609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.724578857421875, 'cpu': 1.828125, 'solve': 0.09666633605957031, 'unsat': 0.025890350341796875, 'sat': 0.009946823120117188}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2109.0, 'conflicts': 431.0, 'conflicts_analyzed': 386.0, 'restarts': 0.0, 'restarts_last': 21.0, 'extra': {'domain_choices': 0.0, 'models': 6.0, 'models_level': 626.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 389.0, 'distributed_sum_lbd': 728.0, 'integrated': 1179.0, 'lemmas': 1987.0, 'lits_learnt': 19597.0, 'lemmas_binary': 315.0, 'lemmas_ternary': 80.0, 'cpu_time': 0.234375, 'integrated_imps': 252.0, 'integrated_jumps': 315.0, 'guiding_paths_lits': 9796.0, 'guiding_paths': 94.0, 'splits': 0.0, 'lemmas_conflict': 374.0, 'lemmas_loop': 583.0, 'lemmas_other': 1030.0, 'lits_conflict': 3112.0, 'lits_loop': 4842.0, 'lits_other': 11643.0, 'jumps': {'jumps': 386.0, 'jumps_bounded': 26.0, 'levels': 629.0, 'levels_bounded': 68.0, 'max': 45.0, 'max_executed': 12.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.140223s.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.037752s with result Satisfiable.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1779749000000006, Incremental time limit = None
Running cumulative time = 1.8437797000000007, Cumulative time limit = 1800
Used memory = (RSS = 192.109375Mb, VMS = 182.613281Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.574391s, Solving = 0.269389s, Total = 1.843780s, Memory = (RSS = 192.109375Mb, VMS = 182.613281Mb), Step range = [0-14]), Calls = 14
Final Model :: Total atoms = 9050, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.574391199999999, solving_time=0.2693885000000016, total_time=1.8437797000000007, memory=Memory(rss=192.109375, vms=182.61328125), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1402234, solving_time=0.037751500000000604, total_time=0.1779749000000006, memory=Memory(rss=192.109375, vms=182.61328125), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 49580.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 324291.0, 'bodies_tr': 324291.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2888.0, 'count_bodies_tr': 2888.0, 'sccs': 263.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4916.0, 'rules': 623091.0, 'rules_normal': 619999.0, 'rules_choice': 3078.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 623091.0, 'rules_tr_normal': 619999.0, 'rules_tr_choice': 3078.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 117680.0, 'eqs_atom': 24805.0, 'eqs_body': 6502.0, 'eqs_other': 86373.0}, 'lpStep': {'atoms': 3509.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24755.0, 'bodies_tr': 24755.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46483.0, 'rules_normal': 46287.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46483.0, 'rules_tr_normal': 46287.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7797.0, 'eqs_atom': 1840.0, 'eqs_body': 76.0, 'eqs_other': 5881.0}, 'generator': {'vars': 16785.0, 'vars_eliminated': 0.0, 'vars_frozen': 10616.0, 'constraints': 3283.0, 'constraints_binary': 116308.0, 'constraints_ternary': 13439.0, 'acyc_edges': 0.0, 'complexity': 133700.0}}, 'solving': {'solvers': {'choices': 1451.0, 'conflicts': 150.0, 'conflicts_analyzed': 150.0, 'restarts': 0.0, 'restarts_last': 33.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 300.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 116.0, 'distributed_sum_lbd': 310.0, 'integrated': 696.0, 'lemmas': 1160.0, 'lits_learnt': 16822.0, 'lemmas_binary': 127.0, 'lemmas_ternary': 112.0, 'cpu_time': 0.109375, 'integrated_imps': 213.0, 'integrated_jumps': 502.0, 'guiding_paths_lits': 1477.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 148.0, 'lemmas_loop': 342.0, 'lemmas_other': 670.0, 'lits_conflict': 3118.0, 'lits_loop': 3008.0, 'lits_other': 10696.0, 'jumps': {'jumps': 150.0, 'jumps_bounded': 3.0, 'levels': 329.0, 'levels_bounded': 3.0, 'max': 13.0, 'max_executed': 13.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 14.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.18051719665527344, 'cpu': 0.265625, 'solve': 0.021942138671875, 'unsat': 0.0, 'sat': 0.012966156005859375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.9050960540771484, 'cpu': 2.09375, 'solve': 0.11860847473144531, 'unsat': 0.025890350341796875, 'sat': 0.022912979125976562}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3560.0, 'conflicts': 581.0, 'conflicts_analyzed': 536.0, 'restarts': 0.0, 'restarts_last': 33.0, 'extra': {'domain_choices': 0.0, 'models': 7.0, 'models_level': 926.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 505.0, 'distributed_sum_lbd': 1038.0, 'integrated': 1875.0, 'lemmas': 3147.0, 'lits_learnt': 36419.0, 'lemmas_binary': 442.0, 'lemmas_ternary': 192.0, 'cpu_time': 0.34375, 'integrated_imps': 465.0, 'integrated_jumps': 817.0, 'guiding_paths_lits': 11273.0, 'guiding_paths': 101.0, 'splits': 0.0, 'lemmas_conflict': 522.0, 'lemmas_loop': 925.0, 'lemmas_other': 1700.0, 'lits_conflict': 6230.0, 'lits_loop': 7850.0, 'lits_other': 22339.0, 'jumps': {'jumps': 536.0, 'jumps_bounded': 29.0, 'levels': 958.0, 'levels_bounded': 71.0, 'max': 45.0, 'max_executed': 13.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-15] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14}

[03-01-2022_17-11-15] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 7 ( 58.33% solved)

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 14)', truth=True, inc_range=None)

[03-01-2022_17-11-15] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 14]:
sub_goal(2, talos, actuate(manipulator_arm_2,puzzle_room_door), configuration(puzzle_room_door), open, 7)

[03-01-2022_17-11-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.187477s.

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 15: original = External(symbol='current_last_sgoals(7, 14)', truth=True, inc_range=None), conversion = current_last_sgoals(7,14).

[03-01-2022_17-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033466s with result Satisfiable.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.22094299999999834, Incremental time limit = None
Running cumulative time = 2.064722699999999, Cumulative time limit = 1800
Used memory = (RSS = 197.617188Mb, VMS = 186.730469Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.761868s, Solving = 0.302855s, Total = 2.064723s, Memory = (RSS = 197.617188Mb, VMS = 186.730469Mb), Step range = [0-15]), Calls = 15
Final Model :: Total atoms = 9429, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.761867999999998, solving_time=0.30285470000000103, total_time=2.064722699999999, memory=Memory(rss=197.6171875, vms=186.73046875), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1874767999999989, solving_time=0.033466199999999446, total_time=0.22094299999999834, memory=Memory(rss=197.6171875, vms=186.73046875), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 53105.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 349076.0, 'bodies_tr': 349076.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3090.0, 'count_bodies_tr': 3090.0, 'sccs': 288.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5510.0, 'rules': 669671.0, 'rules_normal': 666383.0, 'rules_choice': 3273.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 669671.0, 'rules_tr_normal': 666383.0, 'rules_tr_choice': 3273.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 125545.0, 'eqs_atom': 26657.0, 'eqs_body': 6579.0, 'eqs_other': 92309.0}, 'lpStep': {'atoms': 3525.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24785.0, 'bodies_tr': 24785.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46580.0, 'rules_normal': 46384.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46580.0, 'rules_tr_normal': 46384.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7865.0, 'eqs_atom': 1852.0, 'eqs_body': 77.0, 'eqs_other': 5936.0}, 'generator': {'vars': 19228.0, 'vars_eliminated': 0.0, 'vars_frozen': 12022.0, 'constraints': 3919.0, 'constraints_binary': 142793.0, 'constraints_ternary': 16929.0, 'acyc_edges': 0.0, 'complexity': 164397.0}}, 'solving': {'solvers': {'choices': 699.0, 'conflicts': 5.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 319.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 10.0, 'integrated': 24.0, 'lemmas': 39.0, 'lits_learnt': 626.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.03125, 'integrated_imps': 13.0, 'integrated_jumps': 30.0, 'guiding_paths_lits': 1575.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 4.0, 'lemmas_loop': 16.0, 'lemmas_other': 19.0, 'lits_conflict': 71.0, 'lits_loop': 144.0, 'lits_other': 411.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 2.0, 'levels': 13.0, 'levels_bounded': 2.0, 'max': 6.0, 'max_executed': 6.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.22340011596679688, 'cpu': 0.203125, 'solve': 0.014928817749023438, 'unsat': 0.0, 'sat': 0.005954742431640625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.1284961700439453, 'cpu': 2.296875, 'solve': 0.13353729248046875, 'unsat': 0.025890350341796875, 'sat': 0.028867721557617188}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4259.0, 'conflicts': 586.0, 'conflicts_analyzed': 541.0, 'restarts': 0.0, 'restarts_last': 33.0, 'extra': {'domain_choices': 0.0, 'models': 8.0, 'models_level': 1245.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 509.0, 'distributed_sum_lbd': 1048.0, 'integrated': 1899.0, 'lemmas': 3186.0, 'lits_learnt': 37045.0, 'lemmas_binary': 449.0, 'lemmas_ternary': 194.0, 'cpu_time': 0.375, 'integrated_imps': 478.0, 'integrated_jumps': 847.0, 'guiding_paths_lits': 12848.0, 'guiding_paths': 108.0, 'splits': 0.0, 'lemmas_conflict': 526.0, 'lemmas_loop': 941.0, 'lemmas_other': 1719.0, 'lits_conflict': 6301.0, 'lits_loop': 7994.0, 'lits_other': 22750.0, 'jumps': {'jumps': 541.0, 'jumps_bounded': 31.0, 'levels': 971.0, 'levels_bounded': 73.0, 'max': 45.0, 'max_executed': 13.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15}

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 8 ( 66.67% solved)

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 15)', truth=True, inc_range=None)

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 15]:
sub_goal(2, talos, release(manipulator_arm_2,puzzle_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 8)

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.120274s.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(8, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(8,15).

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035987s with result Satisfiable.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15626089999999948, Incremental time limit = None
Running cumulative time = 2.2209835999999985, Cumulative time limit = 1800
Used memory = (RSS = 207.433594Mb, VMS = 199.433594Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.882142s, Solving = 0.338842s, Total = 2.220984s, Memory = (RSS = 207.433594Mb, VMS = 199.433594Mb), Step range = [0-16]), Calls = 16
Final Model :: Total atoms = 9809, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.8821420999999976, solving_time=0.3388415000000009, total_time=2.2209835999999985, memory=Memory(rss=207.43359375, vms=199.43359375), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1202740999999996, solving_time=0.035986799999999874, total_time=0.15626089999999948, memory=Memory(rss=207.43359375, vms=199.43359375), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 56641.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 373886.0, 'bodies_tr': 373886.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3292.0, 'count_bodies_tr': 3292.0, 'sccs': 313.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6104.0, 'rules': 716342.0, 'rules_normal': 712858.0, 'rules_choice': 3468.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 716342.0, 'rules_tr_normal': 712858.0, 'rules_tr_choice': 3468.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 133467.0, 'eqs_atom': 28520.0, 'eqs_body': 6656.0, 'eqs_other': 98291.0}, 'lpStep': {'atoms': 3536.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24810.0, 'bodies_tr': 24810.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46671.0, 'rules_normal': 46475.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46671.0, 'rules_tr_normal': 46475.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7922.0, 'eqs_atom': 1863.0, 'eqs_body': 77.0, 'eqs_other': 5982.0}, 'generator': {'vars': 21673.0, 'vars_eliminated': 0.0, 'vars_frozen': 13428.0, 'constraints': 4555.0, 'constraints_binary': 169361.0, 'constraints_ternary': 20421.0, 'acyc_edges': 0.0, 'complexity': 195179.0}}, 'solving': {'solvers': {'choices': 700.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 339.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 56.0, 'lits_learnt': 504.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1673.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 56.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 504.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.1595478057861328, 'cpu': 0.171875, 'solve': 0.018922805786132812, 'unsat': 0.0, 'sat': 0.006954193115234375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.288043975830078, 'cpu': 2.46875, 'solve': 0.15246009826660156, 'unsat': 0.025890350341796875, 'sat': 0.03582191467285156}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4959.0, 'conflicts': 586.0, 'conflicts_analyzed': 541.0, 'restarts': 0.0, 'restarts_last': 33.0, 'extra': {'domain_choices': 0.0, 'models': 9.0, 'models_level': 1584.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 509.0, 'distributed_sum_lbd': 1048.0, 'integrated': 1899.0, 'lemmas': 3242.0, 'lits_learnt': 37549.0, 'lemmas_binary': 449.0, 'lemmas_ternary': 194.0, 'cpu_time': 0.40625, 'integrated_imps': 478.0, 'integrated_jumps': 847.0, 'guiding_paths_lits': 14521.0, 'guiding_paths': 115.0, 'splits': 0.0, 'lemmas_conflict': 526.0, 'lemmas_loop': 997.0, 'lemmas_other': 1719.0, 'lits_conflict': 6301.0, 'lits_loop': 8498.0, 'lits_other': 22750.0, 'jumps': {'jumps': 541.0, 'jumps_bounded': 31.0, 'levels': 971.0, 'levels_bounded': 73.0, 'max': 45.0, 'max_executed': 13.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16}

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 9 ( 75.00% solved)

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 16)', truth=True, inc_range=None)

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 16]:
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 9)

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.112994s.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 17: original = External(symbol='current_last_sgoals(9, 16)', truth=True, inc_range=None), conversion = current_last_sgoals(9,16).

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032796s with result Satisfiable.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14579029999999982, Incremental time limit = None
Running cumulative time = 2.3667738999999983, Cumulative time limit = 1800
Used memory = (RSS = 212.183594Mb, VMS = 203.800781Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.995136s, Solving = 0.371637s, Total = 2.366774s, Memory = (RSS = 212.183594Mb, VMS = 203.800781Mb), Step range = [0-17]), Calls = 17
Final Model :: Total atoms = 10191, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.9951364999999974, solving_time=0.3716374000000009, total_time=2.3667738999999983, memory=Memory(rss=212.18359375, vms=203.80078125), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11299439999999983, solving_time=0.03279589999999999, total_time=0.14579029999999982, memory=Memory(rss=212.18359375, vms=203.80078125), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 60188.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 398720.0, 'bodies_tr': 398720.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3494.0, 'count_bodies_tr': 3494.0, 'sccs': 338.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6698.0, 'rules': 763103.0, 'rules_normal': 759423.0, 'rules_choice': 3663.0, 'rules_minimize': 17.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 763103.0, 'rules_tr_normal': 759423.0, 'rules_tr_choice': 3663.0, 'rules_tr_minimize': 17.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 141448.0, 'eqs_atom': 30394.0, 'eqs_body': 6733.0, 'eqs_other': 104321.0}, 'lpStep': {'atoms': 3547.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24834.0, 'bodies_tr': 24834.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46761.0, 'rules_normal': 46565.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46761.0, 'rules_tr_normal': 46565.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7981.0, 'eqs_atom': 1874.0, 'eqs_body': 77.0, 'eqs_other': 6030.0}, 'generator': {'vars': 24118.0, 'vars_eliminated': 0.0, 'vars_frozen': 14834.0, 'constraints': 5191.0, 'constraints_binary': 196008.0, 'constraints_ternary': 23913.0, 'acyc_edges': 0.0, 'complexity': 226040.0}}, 'solving': {'solvers': {'choices': 742.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 359.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 56.0, 'lits_learnt': 504.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1771.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 56.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 504.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1485748291015625, 'cpu': 0.15625, 'solve': 0.015956878662109375, 'unsat': 0.0, 'sat': 0.0049877166748046875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.4366188049316406, 'cpu': 2.625, 'solve': 0.16841697692871094, 'unsat': 0.025890350341796875, 'sat': 0.04080963134765625}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 5701.0, 'conflicts': 586.0, 'conflicts_analyzed': 541.0, 'restarts': 0.0, 'restarts_last': 33.0, 'extra': {'domain_choices': 0.0, 'models': 10.0, 'models_level': 1943.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 509.0, 'distributed_sum_lbd': 1048.0, 'integrated': 1899.0, 'lemmas': 3298.0, 'lits_learnt': 38053.0, 'lemmas_binary': 449.0, 'lemmas_ternary': 194.0, 'cpu_time': 0.4375, 'integrated_imps': 478.0, 'integrated_jumps': 847.0, 'guiding_paths_lits': 16292.0, 'guiding_paths': 122.0, 'splits': 0.0, 'lemmas_conflict': 526.0, 'lemmas_loop': 1053.0, 'lemmas_other': 1719.0, 'lits_conflict': 6301.0, 'lits_loop': 9002.0, 'lits_other': 22750.0, 'jumps': {'jumps': 541.0, 'jumps_bounded': 31.0, 'levels': 971.0, 'levels_bounded': 73.0, 'max': 45.0, 'max_executed': 13.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17}

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 10 ( 83.33% solved)

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 17)', truth=True, inc_range=None)

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 10, step = 17]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 10)

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.115747s.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 18: original = External(symbol='current_last_sgoals(10, 17)', truth=True, inc_range=None), conversion = current_last_sgoals(10,17).

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025691s with result Unsatisfiable.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1414371999999986, Incremental time limit = None
Running cumulative time = 2.508211099999997, Cumulative time limit = 1800
Used memory = (RSS = 216.500000Mb, VMS = 207.312500Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.110883099999997, solving_time=0.3973279999999999, total_time=2.508211099999997, memory=Memory(rss=216.5, vms=207.3125), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11574659999999959, solving_time=0.02569059999999901, total_time=0.1414371999999986, memory=Memory(rss=216.5, vms=207.3125), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 63746.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 423578.0, 'bodies_tr': 423578.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3696.0, 'count_bodies_tr': 3696.0, 'sccs': 363.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7292.0, 'rules': 809954.0, 'rules_normal': 806078.0, 'rules_choice': 3858.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 809954.0, 'rules_tr_normal': 806078.0, 'rules_tr_choice': 3858.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 149488.0, 'eqs_atom': 32279.0, 'eqs_body': 6810.0, 'eqs_other': 110399.0}, 'lpStep': {'atoms': 3558.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24858.0, 'bodies_tr': 24858.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46851.0, 'rules_normal': 46655.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46851.0, 'rules_tr_normal': 46655.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8040.0, 'eqs_atom': 1885.0, 'eqs_body': 77.0, 'eqs_other': 6078.0}, 'generator': {'vars': 26563.0, 'vars_eliminated': 0.0, 'vars_frozen': 16240.0, 'constraints': 5827.0, 'constraints_binary': 222734.0, 'constraints_ternary': 27405.0, 'acyc_edges': 0.0, 'complexity': 256980.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 6.0, 'lits_learnt': 54.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1869.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 6.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 54.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 18.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.14461517333984375, 'cpu': 0.15625, 'solve': 0.007978439331054688, 'unsat': 0.007978439331054688, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.5812339782714844, 'cpu': 2.78125, 'solve': 0.17639541625976562, 'unsat': 0.03386878967285156, 'sat': 0.04080963134765625}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 5701.0, 'conflicts': 593.0, 'conflicts_analyzed': 541.0, 'restarts': 0.0, 'restarts_last': 33.0, 'extra': {'domain_choices': 0.0, 'models': 10.0, 'models_level': 1943.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 509.0, 'distributed_sum_lbd': 1048.0, 'integrated': 1899.0, 'lemmas': 3304.0, 'lits_learnt': 38107.0, 'lemmas_binary': 449.0, 'lemmas_ternary': 194.0, 'cpu_time': 0.453125, 'integrated_imps': 478.0, 'integrated_jumps': 847.0, 'guiding_paths_lits': 18161.0, 'guiding_paths': 129.0, 'splits': 0.0, 'lemmas_conflict': 526.0, 'lemmas_loop': 1059.0, 'lemmas_other': 1719.0, 'lits_conflict': 6301.0, 'lits_loop': 9056.0, 'lits_other': 22750.0, 'jumps': {'jumps': 541.0, 'jumps_bounded': 31.0, 'levels': 971.0, 'levels_bounded': 73.0, 'max': 45.0, 'max_executed': 13.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 18:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.166453s.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031903s with result Unsatisfiable.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.19835599999999864, Incremental time limit = None
Running cumulative time = 2.7065670999999956, Cumulative time limit = 1800
Used memory = (RSS = 221.738281Mb, VMS = 211.714844Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.2773356999999965, solving_time=0.42923139999999904, total_time=2.7065670999999956, memory=Memory(rss=221.73828125, vms=211.71484375), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1664525999999995, solving_time=0.03190339999999914, total_time=0.19835599999999864, memory=Memory(rss=221.73828125, vms=211.71484375), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 67315.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 448460.0, 'bodies_tr': 448460.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3898.0, 'count_bodies_tr': 3898.0, 'sccs': 388.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7886.0, 'rules': 856895.0, 'rules_normal': 852823.0, 'rules_choice': 4053.0, 'rules_minimize': 19.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 856895.0, 'rules_tr_normal': 852823.0, 'rules_tr_choice': 4053.0, 'rules_tr_minimize': 19.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 157587.0, 'eqs_atom': 34175.0, 'eqs_body': 6887.0, 'eqs_other': 116525.0}, 'lpStep': {'atoms': 3569.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24882.0, 'bodies_tr': 24882.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46941.0, 'rules_normal': 46745.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46941.0, 'rules_tr_normal': 46745.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8099.0, 'eqs_atom': 1896.0, 'eqs_body': 77.0, 'eqs_other': 6126.0}, 'generator': {'vars': 29008.0, 'vars_eliminated': 0.0, 'vars_frozen': 17646.0, 'constraints': 6463.0, 'constraints_binary': 249539.0, 'constraints_ternary': 30897.0, 'acyc_edges': 0.0, 'complexity': 287999.0}}, 'solving': {'solvers': {'choices': 432.0, 'conflicts': 80.0, 'conflicts_analyzed': 73.0, 'restarts': 0.0, 'restarts_last': 22.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 59.0, 'distributed_sum_lbd': 154.0, 'integrated': 302.0, 'lemmas': 993.0, 'lits_learnt': 12578.0, 'lemmas_binary': 92.0, 'lemmas_ternary': 23.0, 'cpu_time': 0.125, 'integrated_imps': 61.0, 'integrated_jumps': 190.0, 'guiding_paths_lits': 1967.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 73.0, 'lemmas_loop': 618.0, 'lemmas_other': 302.0, 'lits_conflict': 1753.0, 'lits_loop': 5666.0, 'lits_other': 5159.0, 'jumps': {'jumps': 73.0, 'jumps_bounded': 7.0, 'levels': 248.0, 'levels_bounded': 7.0, 'max': 42.0, 'max_executed': 41.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 19.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2005023956298828, 'cpu': 0.28125, 'solve': 0.013963699340820312, 'unsat': 0.013963699340820312, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.781736373901367, 'cpu': 3.0625, 'solve': 0.19035911560058594, 'unsat': 0.047832489013671875, 'sat': 0.04080963134765625}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6133.0, 'conflicts': 673.0, 'conflicts_analyzed': 614.0, 'restarts': 0.0, 'restarts_last': 33.0, 'extra': {'domain_choices': 0.0, 'models': 10.0, 'models_level': 1943.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 568.0, 'distributed_sum_lbd': 1202.0, 'integrated': 2201.0, 'lemmas': 4297.0, 'lits_learnt': 50685.0, 'lemmas_binary': 541.0, 'lemmas_ternary': 217.0, 'cpu_time': 0.578125, 'integrated_imps': 539.0, 'integrated_jumps': 1037.0, 'guiding_paths_lits': 20128.0, 'guiding_paths': 136.0, 'splits': 0.0, 'lemmas_conflict': 599.0, 'lemmas_loop': 1677.0, 'lemmas_other': 2021.0, 'lits_conflict': 8054.0, 'lits_loop': 14722.0, 'lits_other': 27909.0, 'jumps': {'jumps': 614.0, 'jumps_bounded': 38.0, 'levels': 1219.0, 'levels_bounded': 80.0, 'max': 45.0, 'max_executed': 41.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.121337s.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046658s with result Satisfiable.

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.16799430000000015, Incremental time limit = None
Running cumulative time = 2.8745613999999957, Cumulative time limit = 1800
Used memory = (RSS = 232.304688Mb, VMS = 229.234375Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.398672s, Solving = 0.475889s, Total = 2.874561s, Memory = (RSS = 232.304688Mb, VMS = 229.234375Mb), Step range = [0-20]), Calls = 20
Final Model :: Total atoms = 11333, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.398672299999996, solving_time=0.47588909999999984, total_time=2.8745613999999957, memory=Memory(rss=232.3046875, vms=229.234375), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12133659999999935, solving_time=0.0466577000000008, total_time=0.16799430000000015, memory=Memory(rss=232.3046875, vms=229.234375), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 70895.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 473366.0, 'bodies_tr': 473366.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4100.0, 'count_bodies_tr': 4100.0, 'sccs': 413.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8480.0, 'rules': 903926.0, 'rules_normal': 899658.0, 'rules_choice': 4248.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 903926.0, 'rules_tr_normal': 899658.0, 'rules_tr_choice': 4248.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 165745.0, 'eqs_atom': 36082.0, 'eqs_body': 6964.0, 'eqs_other': 122699.0}, 'lpStep': {'atoms': 3580.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24906.0, 'bodies_tr': 24906.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 47031.0, 'rules_normal': 46835.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 47031.0, 'rules_tr_normal': 46835.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8158.0, 'eqs_atom': 1907.0, 'eqs_body': 77.0, 'eqs_other': 6174.0}, 'generator': {'vars': 31453.0, 'vars_eliminated': 0.0, 'vars_frozen': 19052.0, 'constraints': 7099.0, 'constraints_binary': 276423.0, 'constraints_ternary': 34389.0, 'acyc_edges': 0.0, 'complexity': 319097.0}}, 'solving': {'solvers': {'choices': 1526.0, 'conflicts': 85.0, 'conflicts_analyzed': 85.0, 'restarts': 0.0, 'restarts_last': 39.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 451.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 74.0, 'distributed_sum_lbd': 206.0, 'integrated': 189.0, 'lemmas': 565.0, 'lits_learnt': 8748.0, 'lemmas_binary': 32.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.15625, 'integrated_imps': 32.0, 'integrated_jumps': 213.0, 'guiding_paths_lits': 2065.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 85.0, 'lemmas_loop': 292.0, 'lemmas_other': 188.0, 'lits_conflict': 2186.0, 'lits_loop': 2812.0, 'lits_other': 3750.0, 'jumps': {'jumps': 85.0, 'jumps_bounded': 1.0, 'levels': 265.0, 'levels_bounded': 1.0, 'max': 43.0, 'max_executed': 43.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 20.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.17157554626464844, 'cpu': 0.328125, 'solve': 0.02790069580078125, 'unsat': 0.0, 'sat': 0.010950088500976562}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.9533119201660156, 'cpu': 3.390625, 'solve': 0.2182598114013672, 'unsat': 0.047832489013671875, 'sat': 0.05175971984863281}, 'models': {'enumerated': 11.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 7659.0, 'conflicts': 758.0, 'conflicts_analyzed': 699.0, 'restarts': 0.0, 'restarts_last': 39.0, 'extra': {'domain_choices': 0.0, 'models': 11.0, 'models_level': 2394.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 642.0, 'distributed_sum_lbd': 1408.0, 'integrated': 2390.0, 'lemmas': 4862.0, 'lits_learnt': 59433.0, 'lemmas_binary': 573.0, 'lemmas_ternary': 221.0, 'cpu_time': 0.734375, 'integrated_imps': 571.0, 'integrated_jumps': 1250.0, 'guiding_paths_lits': 22193.0, 'guiding_paths': 143.0, 'splits': 0.0, 'lemmas_conflict': 684.0, 'lemmas_loop': 1969.0, 'lemmas_other': 2209.0, 'lits_conflict': 10240.0, 'lits_loop': 17534.0, 'lits_other': 31659.0, 'jumps': {'jumps': 699.0, 'jumps_bounded': 39.0, 'levels': 1484.0, 'levels_bounded': 81.0, 'max': 45.0, 'max_executed': 43.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20}

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 11 ( 91.67% solved)

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 20)', truth=True, inc_range=None)

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 11, step = 20]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 11)

[03-01-2022_17-11-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.128159s.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 21: original = External(symbol='current_last_sgoals(11, 20)', truth=True, inc_range=None), conversion = current_last_sgoals(11,20).

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046235s with result Satisfiable.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.17439360000000015, Incremental time limit = None
Running cumulative time = 3.048954999999996, Cumulative time limit = 1800
Used memory = (RSS = 239.542969Mb, VMS = 234.992188Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 12
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.526831s, Solving = 0.522124s, Total = 3.048955s, Memory = (RSS = 239.542969Mb, VMS = 234.992188Mb), Step range = [0-21]), Calls = 21
Final Model :: Total atoms = 11717, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[03-01-2022_17-11-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=20, end_step=21, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.5268313999999954, solving_time=0.5221236000000005, total_time=3.048954999999996, memory=Memory(rss=239.54296875, vms=234.9921875), step_range=range(0, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12815909999999953, solving_time=0.04623450000000062, total_time=0.17439360000000015, memory=Memory(rss=239.54296875, vms=234.9921875), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 74486.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 498296.0, 'bodies_tr': 498296.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4302.0, 'count_bodies_tr': 4302.0, 'sccs': 438.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9074.0, 'rules': 951047.0, 'rules_normal': 946583.0, 'rules_choice': 4443.0, 'rules_minimize': 21.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 951047.0, 'rules_tr_normal': 946583.0, 'rules_tr_choice': 4443.0, 'rules_tr_minimize': 21.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 173962.0, 'eqs_atom': 38000.0, 'eqs_body': 7041.0, 'eqs_other': 128921.0}, 'lpStep': {'atoms': 3591.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24930.0, 'bodies_tr': 24930.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 47121.0, 'rules_normal': 46925.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 47121.0, 'rules_tr_normal': 46925.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8217.0, 'eqs_atom': 1918.0, 'eqs_body': 77.0, 'eqs_other': 6222.0}, 'generator': {'vars': 33898.0, 'vars_eliminated': 0.0, 'vars_frozen': 20458.0, 'constraints': 7726.0, 'constraints_binary': 303261.0, 'constraints_ternary': 37882.0, 'acyc_edges': 0.0, 'complexity': 350141.0}}, 'solving': {'solvers': {'choices': 1414.0, 'conflicts': 38.0, 'conflicts_analyzed': 38.0, 'restarts': 0.0, 'restarts_last': 21.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 448.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 22.0, 'distributed_sum_lbd': 63.0, 'integrated': 94.0, 'lemmas': 236.0, 'lits_learnt': 6594.0, 'lemmas_binary': 16.0, 'lemmas_ternary': 28.0, 'cpu_time': 0.15625, 'integrated_imps': 11.0, 'integrated_jumps': 423.0, 'guiding_paths_lits': 2163.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 38.0, 'lemmas_loop': 106.0, 'lemmas_other': 92.0, 'lits_conflict': 2981.0, 'lits_loop': 974.0, 'lits_other': 2639.0, 'jumps': {'jumps': 38.0, 'jumps_bounded': 1.0, 'levels': 64.0, 'levels_bounded': 1.0, 'max': 6.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 21.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.17757034301757812, 'cpu': 0.3125, 'solve': 0.023904800415039062, 'unsat': 0.0, 'sat': 0.009943008422851562}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.1308822631835938, 'cpu': 3.703125, 'solve': 0.24216461181640625, 'unsat': 0.047832489013671875, 'sat': 0.061702728271484375}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 9073.0, 'conflicts': 796.0, 'conflicts_analyzed': 737.0, 'restarts': 0.0, 'restarts_last': 39.0, 'extra': {'domain_choices': 0.0, 'models': 12.0, 'models_level': 2842.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 664.0, 'distributed_sum_lbd': 1471.0, 'integrated': 2484.0, 'lemmas': 5098.0, 'lits_learnt': 66027.0, 'lemmas_binary': 589.0, 'lemmas_ternary': 249.0, 'cpu_time': 0.890625, 'integrated_imps': 582.0, 'integrated_jumps': 1673.0, 'guiding_paths_lits': 24356.0, 'guiding_paths': 150.0, 'splits': 0.0, 'lemmas_conflict': 722.0, 'lemmas_loop': 2075.0, 'lemmas_other': 2301.0, 'lits_conflict': 13221.0, 'lits_loop': 18508.0, 'lits_other': 34298.0, 'jumps': {'jumps': 737.0, 'jumps_bounded': 40.0, 'levels': 1548.0, 'levels_bounded': 82.0, 'max': 45.0, 'max_executed': 43.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-17] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 21}

[03-01-2022_17-11-17] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 12 (100.00% solved)

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 21)', truth=True, inc_range=None)

[03-01-2022_17-11-17] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 21]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 12)

[03-01-2022_17-11-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.128008s.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 22: original = External(symbol='current_last_sgoals(12, 21)', truth=True, inc_range=None), conversion = current_last_sgoals(12,21).

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032507s with result Unsatisfiable.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16051569999999948, Incremental time limit = None
Running cumulative time = 3.2094706999999953, Cumulative time limit = 1800
Used memory = (RSS = 243.285156Mb, VMS = 237.523438Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=21, end_step=22, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.6548398999999954, solving_time=0.5546308, total_time=3.2094706999999953, memory=Memory(rss=243.28515625, vms=237.5234375), step_range=range(0, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12800849999999997, solving_time=0.032507199999999514, total_time=0.16051569999999948, memory=Memory(rss=243.28515625, vms=237.5234375), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 78088.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 523250.0, 'bodies_tr': 523250.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4504.0, 'count_bodies_tr': 4504.0, 'sccs': 463.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9668.0, 'rules': 998258.0, 'rules_normal': 993598.0, 'rules_choice': 4638.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 998258.0, 'rules_tr_normal': 993598.0, 'rules_tr_choice': 4638.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 182238.0, 'eqs_atom': 39929.0, 'eqs_body': 7118.0, 'eqs_other': 135191.0}, 'lpStep': {'atoms': 3602.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24954.0, 'bodies_tr': 24954.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 47211.0, 'rules_normal': 47015.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 47211.0, 'rules_tr_normal': 47015.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8276.0, 'eqs_atom': 1929.0, 'eqs_body': 77.0, 'eqs_other': 6270.0}, 'generator': {'vars': 36343.0, 'vars_eliminated': 0.0, 'vars_frozen': 21864.0, 'constraints': 8362.0, 'constraints_binary': 330303.0, 'constraints_ternary': 41410.0, 'acyc_edges': 0.0, 'complexity': 381433.0}}, 'solving': {'solvers': {'choices': 170.0, 'conflicts': 34.0, 'conflicts_analyzed': 31.0, 'restarts': 0.0, 'restarts_last': 10.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 42.0, 'integrated': 51.0, 'lemmas': 162.0, 'lits_learnt': 4531.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 3.0, 'cpu_time': 0.109375, 'integrated_imps': 5.0, 'integrated_jumps': 6.0, 'guiding_paths_lits': 2261.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 31.0, 'lemmas_loop': 85.0, 'lemmas_other': 46.0, 'lits_conflict': 1895.0, 'lits_loop': 690.0, 'lits_other': 1946.0, 'jumps': {'jumps': 31.0, 'jumps_bounded': 2.0, 'levels': 91.0, 'levels_bounded': 2.0, 'max': 42.0, 'max_executed': 42.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 22.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.16507720947265625, 'cpu': 0.265625, 'solve': 0.011991500854492188, 'unsat': 0.011991500854492188, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.29595947265625, 'cpu': 3.96875, 'solve': 0.25415611267089844, 'unsat': 0.05982398986816406, 'sat': 0.061702728271484375}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 9243.0, 'conflicts': 830.0, 'conflicts_analyzed': 768.0, 'restarts': 0.0, 'restarts_last': 39.0, 'extra': {'domain_choices': 0.0, 'models': 12.0, 'models_level': 2842.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 681.0, 'distributed_sum_lbd': 1513.0, 'integrated': 2535.0, 'lemmas': 5260.0, 'lits_learnt': 70558.0, 'lemmas_binary': 593.0, 'lemmas_ternary': 252.0, 'cpu_time': 1.0, 'integrated_imps': 587.0, 'integrated_jumps': 1679.0, 'guiding_paths_lits': 26617.0, 'guiding_paths': 157.0, 'splits': 0.0, 'lemmas_conflict': 753.0, 'lemmas_loop': 2160.0, 'lemmas_other': 2347.0, 'lits_conflict': 15116.0, 'lits_loop': 19198.0, 'lits_other': 36244.0, 'jumps': {'jumps': 768.0, 'jumps_bounded': 42.0, 'levels': 1639.0, 'levels_bounded': 84.0, 'max': 45.0, 'max_executed': 43.0, 'max_bounded': 43.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 22:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.128297s.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.079328s with result Unsatisfiable.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.20762480000000139, Incremental time limit = None
Running cumulative time = 3.4170954999999967, Cumulative time limit = 1800
Used memory = (RSS = 248.953125Mb, VMS = 241.925781Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=22, end_step=23, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.7831366999999965, solving_time=0.6339588000000003, total_time=3.4170954999999967, memory=Memory(rss=248.953125, vms=241.92578125), step_range=range(0, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1282968000000011, solving_time=0.07932800000000029, total_time=0.20762480000000139, memory=Memory(rss=248.953125, vms=241.92578125), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 81701.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 548228.0, 'bodies_tr': 548228.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4706.0, 'count_bodies_tr': 4706.0, 'sccs': 488.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10262.0, 'rules': 1045559.0, 'rules_normal': 1040703.0, 'rules_choice': 4833.0, 'rules_minimize': 23.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1045559.0, 'rules_tr_normal': 1040703.0, 'rules_tr_choice': 4833.0, 'rules_tr_minimize': 23.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 190573.0, 'eqs_atom': 41869.0, 'eqs_body': 7195.0, 'eqs_other': 141509.0}, 'lpStep': {'atoms': 3613.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24978.0, 'bodies_tr': 24978.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 47301.0, 'rules_normal': 47105.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 47301.0, 'rules_tr_normal': 47105.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8335.0, 'eqs_atom': 1940.0, 'eqs_body': 77.0, 'eqs_other': 6318.0}, 'generator': {'vars': 38788.0, 'vars_eliminated': 0.0, 'vars_frozen': 23270.0, 'constraints': 8998.0, 'constraints_binary': 357424.0, 'constraints_ternary': 44902.0, 'acyc_edges': 0.0, 'complexity': 412768.0}}, 'solving': {'solvers': {'choices': 2267.0, 'conflicts': 399.0, 'conflicts_analyzed': 394.0, 'restarts': 0.0, 'restarts_last': 90.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 262.0, 'distributed_sum_lbd': 738.0, 'integrated': 1497.0, 'lemmas': 3321.0, 'lits_learnt': 79154.0, 'lemmas_binary': 293.0, 'lemmas_ternary': 189.0, 'cpu_time': 0.421875, 'integrated_imps': 176.0, 'integrated_jumps': 1149.0, 'guiding_paths_lits': 2359.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 394.0, 'lemmas_loop': 1443.0, 'lemmas_other': 1484.0, 'lits_conflict': 22696.0, 'lits_loop': 12914.0, 'lits_other': 43544.0, 'jumps': {'jumps': 394.0, 'jumps_bounded': 9.0, 'levels': 2122.0, 'levels_bounded': 1017.0, 'max': 359.0, 'max_executed': 359.0, 'max_bounded': 337.0}}}}, 'summary': {'call': 23.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.21146202087402344, 'cpu': 0.546875, 'solve': 0.05986785888671875, 'unsat': 0.05986785888671875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.5074214935302734, 'cpu': 4.515625, 'solve': 0.3140239715576172, 'unsat': 0.11969184875488281, 'sat': 0.061702728271484375}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 11510.0, 'conflicts': 1229.0, 'conflicts_analyzed': 1162.0, 'restarts': 0.0, 'restarts_last': 90.0, 'extra': {'domain_choices': 0.0, 'models': 12.0, 'models_level': 2842.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 943.0, 'distributed_sum_lbd': 2251.0, 'integrated': 4032.0, 'lemmas': 8581.0, 'lits_learnt': 149712.0, 'lemmas_binary': 886.0, 'lemmas_ternary': 441.0, 'cpu_time': 1.421875, 'integrated_imps': 763.0, 'integrated_jumps': 2828.0, 'guiding_paths_lits': 28976.0, 'guiding_paths': 164.0, 'splits': 0.0, 'lemmas_conflict': 1147.0, 'lemmas_loop': 3603.0, 'lemmas_other': 3831.0, 'lits_conflict': 37812.0, 'lits_loop': 32112.0, 'lits_other': 79788.0, 'jumps': {'jumps': 1162.0, 'jumps_bounded': 51.0, 'levels': 3761.0, 'levels_bounded': 1101.0, 'max': 359.0, 'max_executed': 359.0, 'max_bounded': 337.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =     12 : Maximum =    100

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Number(12), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.129975s.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.136622s with result Satisfiable.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.26659770000000016, Incremental time limit = None
Running cumulative time = 3.683693199999997, Cumulative time limit = 1800
Used memory = (RSS = 257.300781Mb, VMS = 249.218750Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 13
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.913112s, Solving = 0.770581s, Total = 3.683693s, Memory = (RSS = 257.300781Mb, VMS = 249.218750Mb), Step range = [0-24]), Calls = 24
Final Model :: Total atoms = 12863, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[03-01-2022_17-11-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=23, end_step=24, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.9131119999999964, solving_time=0.7705812000000005, total_time=3.683693199999997, memory=Memory(rss=257.30078125, vms=249.21875), step_range=range(0, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1299752999999999, solving_time=0.13662240000000025, total_time=0.26659770000000016, memory=Memory(rss=257.30078125, vms=249.21875), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 85325.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 573230.0, 'bodies_tr': 573230.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4908.0, 'count_bodies_tr': 4908.0, 'sccs': 513.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10856.0, 'rules': 1092950.0, 'rules_normal': 1087898.0, 'rules_choice': 5028.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 1092950.0, 'rules_tr_normal': 1087898.0, 'rules_tr_choice': 5028.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 198967.0, 'eqs_atom': 43820.0, 'eqs_body': 7272.0, 'eqs_other': 147875.0}, 'lpStep': {'atoms': 3624.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25002.0, 'bodies_tr': 25002.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 47391.0, 'rules_normal': 47195.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 47391.0, 'rules_tr_normal': 47195.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8394.0, 'eqs_atom': 1951.0, 'eqs_body': 77.0, 'eqs_other': 6366.0}, 'generator': {'vars': 41233.0, 'vars_eliminated': 0.0, 'vars_frozen': 24676.0, 'constraints': 9377.0, 'constraints_binary': 373613.0, 'constraints_ternary': 47074.0, 'acyc_edges': 0.0, 'complexity': 431570.0}}, 'solving': {'solvers': {'choices': 2893.0, 'conflicts': 334.0, 'conflicts_analyzed': 334.0, 'restarts': 1.0, 'restarts_last': 48.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 501.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 197.0, 'distributed_sum_lbd': 577.0, 'integrated': 883.0, 'lemmas': 1875.0, 'lits_learnt': 61625.0, 'lemmas_binary': 112.0, 'lemmas_ternary': 174.0, 'cpu_time': 0.578125, 'integrated_imps': 129.0, 'integrated_jumps': 680.0, 'guiding_paths_lits': 2457.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 334.0, 'lemmas_loop': 658.0, 'lemmas_other': 883.0, 'lits_conflict': 19913.0, 'lits_loop': 5354.0, 'lits_other': 36358.0, 'jumps': {'jumps': 334.0, 'jumps_bounded': 1.0, 'levels': 1122.0, 'levels_bounded': 1.0, 'max': 36.0, 'max_executed': 36.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 24.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.2722759246826172, 'cpu': 0.734375, 'solve': 0.11466217041015625, 'unsat': 0.0, 'sat': 0.03188514709472656}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.7796974182128906, 'cpu': 5.25, 'solve': 0.42868614196777344, 'unsat': 0.11969184875488281, 'sat': 0.09358787536621094}, 'models': {'enumerated': 13.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 14403.0, 'conflicts': 1563.0, 'conflicts_analyzed': 1496.0, 'restarts': 1.0, 'restarts_last': 90.0, 'extra': {'domain_choices': 0.0, 'models': 13.0, 'models_level': 3343.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1140.0, 'distributed_sum_lbd': 2828.0, 'integrated': 4915.0, 'lemmas': 10456.0, 'lits_learnt': 211337.0, 'lemmas_binary': 998.0, 'lemmas_ternary': 615.0, 'cpu_time': 2.0, 'integrated_imps': 892.0, 'integrated_jumps': 3508.0, 'guiding_paths_lits': 31433.0, 'guiding_paths': 171.0, 'splits': 0.0, 'lemmas_conflict': 1481.0, 'lemmas_loop': 4261.0, 'lemmas_other': 4714.0, 'lits_conflict': 57725.0, 'lits_loop': 37466.0, 'lits_other': 116146.0, 'jumps': {'jumps': 1496.0, 'jumps_bounded': 52.0, 'levels': 4883.0, 'levels_bounded': 1102.0, 'max': 359.0, 'max_executed': 359.0, 'max_bounded': 337.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-17] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 21, 12: 24}

[03-01-2022_17-11-17] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 13 (108.33% solved)

[03-01-2022_17-11-17] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 12 was achieved successfully.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.131636s, Solving = 0.021158s, Total = 0.152794s, Memory = (RSS = 150.605469Mb, VMS = 140.425781Mb), Step range = [0-1]
2 : Statistics :: Grounding = 0.095855s, Solving = 0.010716s, Total = 0.106571s, Memory = (RSS = 153.371094Mb, VMS = 143.277344Mb), Step range = [2-2]
3 : Statistics :: Grounding = 0.124964s, Solving = 0.038252s, Total = 0.163216s, Memory = (RSS = 155.957031Mb, VMS = 145.812500Mb), Step range = [3-3]
4 : Statistics :: Grounding = 0.101863s, Solving = 0.007244s, Total = 0.109107s, Memory = (RSS = 157.078125Mb, VMS = 146.945312Mb), Step range = [4-4]
5 : Statistics :: Grounding = 0.092433s, Solving = 0.009666s, Total = 0.102099s, Memory = (RSS = 159.531250Mb, VMS = 149.957031Mb), Step range = [5-5]
6 : Statistics :: Grounding = 0.106709s, Solving = 0.022988s, Total = 0.129697s, Memory = (RSS = 165.074219Mb, VMS = 156.921875Mb), Step range = [6-6]
7 : Statistics :: Grounding = 0.104200s, Solving = 0.016288s, Total = 0.120487s, Memory = (RSS = 167.746094Mb, VMS = 158.917969Mb), Step range = [7-7]
8 : Statistics :: Grounding = 0.099737s, Solving = 0.015970s, Total = 0.115706s, Memory = (RSS = 169.996094Mb, VMS = 160.972656Mb), Step range = [8-8]
9 : Statistics :: Grounding = 0.110065s, Solving = 0.010463s, Total = 0.120528s, Memory = (RSS = 172.027344Mb, VMS = 162.621094Mb), Step range = [9-9]
10 : Statistics :: Grounding = 0.107770s, Solving = 0.014530s, Total = 0.122300s, Memory = (RSS = 173.402344Mb, VMS = 163.644531Mb), Step range = [10-10]
11 : Statistics :: Grounding = 0.110373s, Solving = 0.018327s, Total = 0.128701s, Memory = (RSS = 179.343750Mb, VMS = 170.957031Mb), Step range = [11-11]
12 : Statistics :: Grounding = 0.122473s, Solving = 0.023444s, Total = 0.145917s, Memory = (RSS = 181.421875Mb, VMS = 171.582031Mb), Step range = [12-12]
13 : Statistics :: Grounding = 0.126091s, Solving = 0.022591s, Total = 0.148681s, Memory = (RSS = 187.902344Mb, VMS = 180.781250Mb), Step range = [13-13]
14 : Statistics :: Grounding = 0.140223s, Solving = 0.037752s, Total = 0.177975s, Memory = (RSS = 192.109375Mb, VMS = 182.613281Mb), Step range = [14-14]
15 : Statistics :: Grounding = 0.187477s, Solving = 0.033466s, Total = 0.220943s, Memory = (RSS = 197.617188Mb, VMS = 186.730469Mb), Step range = [15-15]
16 : Statistics :: Grounding = 0.120274s, Solving = 0.035987s, Total = 0.156261s, Memory = (RSS = 207.433594Mb, VMS = 199.433594Mb), Step range = [16-16]
17 : Statistics :: Grounding = 0.112994s, Solving = 0.032796s, Total = 0.145790s, Memory = (RSS = 212.183594Mb, VMS = 203.800781Mb), Step range = [17-17]
18 : Statistics :: Grounding = 0.115747s, Solving = 0.025691s, Total = 0.141437s, Memory = (RSS = 216.500000Mb, VMS = 207.312500Mb), Step range = [18-18]
19 : Statistics :: Grounding = 0.166453s, Solving = 0.031903s, Total = 0.198356s, Memory = (RSS = 221.738281Mb, VMS = 211.714844Mb), Step range = [19-19]
20 : Statistics :: Grounding = 0.121337s, Solving = 0.046658s, Total = 0.167994s, Memory = (RSS = 232.304688Mb, VMS = 229.234375Mb), Step range = [20-20]
21 : Statistics :: Grounding = 0.128159s, Solving = 0.046235s, Total = 0.174394s, Memory = (RSS = 239.542969Mb, VMS = 234.992188Mb), Step range = [21-21]
22 : Statistics :: Grounding = 0.128008s, Solving = 0.032507s, Total = 0.160516s, Memory = (RSS = 243.285156Mb, VMS = 237.523438Mb), Step range = [22-22]
23 : Statistics :: Grounding = 0.128297s, Solving = 0.079328s, Total = 0.207625s, Memory = (RSS = 248.953125Mb, VMS = 241.925781Mb), Step range = [23-23]
24 : Statistics :: Grounding = 0.129975s, Solving = 0.136622s, Total = 0.266598s, Memory = (RSS = 257.300781Mb, VMS = 249.218750Mb), Step range = [24-24]

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.683693s due to: External generator exit.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 18, 6: 19, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 18, 6: 19, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 12, Last requested goal index = 12, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.913112s, Solving = 0.770581s, Total = 3.683693s, Memory = (RSS = 257.300781Mb, VMS = 249.218750Mb), Step range = [0-24]), Calls = 24
Model :: Total atoms = 12863, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 24 :: Actions = 24                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 1 solved.

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Online planning increment 1 finished.

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 10 : Goals unachieved = 10 : Complete = False
Level = 1 : Solved problems = 1 : Total constraining sub-goal stages = 24 : Goals achieved = 12 : Goals unachieved = 12 : Complete = False

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 2 by method ground-first is [1-1].

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 2 at level 1:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 24, Sub-goal Stage Range = [1-24]
Division points [total=1] : [(Index = 12, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [13-24]

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [13-24], problem number = 2, increment number = 2

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 13)
	('last_sgoals', 24)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000018B1F48BE80>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 100)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 13
last_sgoals = 24
start_step = 24
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 35

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
Level = 1
Concurrency = disabled
Problem Type = partial conformance refinement (sequential) with sgoals range [13-24]
Minimum search length bound = disabled with value 35

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[03-01-2022_17-11-18] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-01-2022_17-11-18] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 24 as problem start state.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 24})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,6))', 'S': 24})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 24})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 24})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 24})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 24})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 24})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 24})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'S': 24})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 24})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,6)', 'S': 24})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 24})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 24})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 24})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 24})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 24})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 24})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 24})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 24})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 24})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 24})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 24})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 24})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 24})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 24})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 24})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 24})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 24})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 24})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 24})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 24})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 24})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 24})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 24})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 24})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 24})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 24})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 24})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 24})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 24})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 24})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 24})

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 24).
holds(1, complete_tower(red,puzzle_room_table), false, 24).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 24).
holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 24).
holds(1, configuration(manipulator_limb_1), retracted, 24).
holds(1, configuration(manipulator_limb_2), extended, 24).
holds(1, configuration(puzzle_room_door), open, 24).
holds(1, configuration(starting_room_door), closed, 24).
holds(1, configuration(store_room_door), open, 24).
holds(1, grasping(manipulator_arm_1), nothing, 24).
holds(1, grasping(manipulator_arm_2), (block,6), 24).
holds(1, grasping(manipulator_end_1), nothing, 24).
holds(1, grasping(manipulator_end_2), (block,6), 24).
holds(1, in((block,1)), (puzzle_room,1), 24).
holds(1, in((block,2)), (puzzle_room,1), 24).
holds(1, in((block,3)), (puzzle_room,1), 24).
holds(1, in((block,4)), (store_room,0), 24).
holds(1, in((block,5)), (store_room,0), 24).
holds(1, in((block,6)), (store_room,0), 24).
holds(1, in(manipulator_arm_1), (store_room,0), 24).
holds(1, in(manipulator_arm_2), (store_room,0), 24).
holds(1, in(manipulator_end_1), (store_room,0), 24).
holds(1, in(manipulator_end_2), (store_room,0), 24).
holds(1, in(manipulator_limb_1), (store_room,0), 24).
holds(1, in(manipulator_limb_2), (store_room,0), 24).
holds(1, in(puzzle_room_table), (puzzle_room,1), 24).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 24).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 24).
holds(1, in(talos), (store_room,0), 24).
holds(1, in_tower((block,1),(block,1)), true, 24).
holds(1, in_tower((block,1),(block,2)), false, 24).
holds(1, in_tower((block,1),(block,3)), true, 24).
holds(1, in_tower((block,1),(block,4)), false, 24).
holds(1, in_tower((block,1),(block,5)), false, 24).
holds(1, in_tower((block,1),(block,6)), false, 24).
holds(1, in_tower((block,2),(block,1)), false, 24).
holds(1, in_tower((block,2),(block,2)), true, 24).
holds(1, in_tower((block,2),(block,3)), false, 24).
holds(1, in_tower((block,2),(block,4)), false, 24).
holds(1, in_tower((block,2),(block,5)), false, 24).
holds(1, in_tower((block,2),(block,6)), false, 24).
holds(1, in_tower((block,3),(block,1)), false, 24).
holds(1, in_tower((block,3),(block,2)), false, 24).
holds(1, in_tower((block,3),(block,3)), false, 24).
holds(1, in_tower((block,3),(block,4)), false, 24).
holds(1, in_tower((block,3),(block,5)), false, 24).
holds(1, in_tower((block,3),(block,6)), false, 24).
holds(1, in_tower((block,4),(block,1)), false, 24).
holds(1, in_tower((block,4),(block,2)), false, 24).
holds(1, in_tower((block,4),(block,3)), false, 24).
holds(1, in_tower((block,4),(block,4)), false, 24).
holds(1, in_tower((block,4),(block,5)), false, 24).
holds(1, in_tower((block,4),(block,6)), false, 24).
holds(1, in_tower((block,5),(block,1)), false, 24).
holds(1, in_tower((block,5),(block,2)), false, 24).
holds(1, in_tower((block,5),(block,3)), false, 24).
holds(1, in_tower((block,5),(block,4)), false, 24).
holds(1, in_tower((block,5),(block,5)), false, 24).
holds(1, in_tower((block,5),(block,6)), false, 24).
holds(1, in_tower((block,6),(block,1)), false, 24).
holds(1, in_tower((block,6),(block,2)), false, 24).
holds(1, in_tower((block,6),(block,3)), false, 24).
holds(1, in_tower((block,6),(block,4)), false, 24).
holds(1, in_tower((block,6),(block,5)), false, 24).
holds(1, in_tower((block,6),(block,6)), false, 24).
holds(1, on((block,1)), puzzle_room_table_left, 24).
holds(1, on((block,2)), puzzle_room_table_right, 24).
holds(1, on((block,3)), (block,1), 24).
holds(1, on((block,4)), nothing, 24).
holds(1, on((block,5)), nothing, 24).
holds(1, on((block,6)), nothing, 24).
holds(1, tower_base((block,1),puzzle_room_table), true, 24).
holds(1, tower_base((block,2),puzzle_room_table), true, 24).
holds(1, tower_base((block,3),puzzle_room_table), false, 24).
holds(1, tower_base((block,4),puzzle_room_table), false, 24).
holds(1, tower_base((block,5),puzzle_room_table), false, 24).
holds(1, tower_base((block,6),puzzle_room_table), false, 24).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 24).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 24).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 24).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 24).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 24).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 24).
holds(2, complete_tower(blue,puzzle_room_table), false, 24).
holds(2, complete_tower(red,puzzle_room_table), false, 24).
holds(2, configuration(manipulator_arm_1), retracted, 24).
holds(2, configuration(manipulator_arm_2), extended, 24).
holds(2, configuration(puzzle_room_door), open, 24).
holds(2, configuration(starting_room_door), closed, 24).
holds(2, configuration(store_room_door), open, 24).
holds(2, grasping(manipulator_arm_1), nothing, 24).
holds(2, grasping(manipulator_arm_2), (block,6), 24).
holds(2, in((block,1)), puzzle_room, 24).
holds(2, in((block,2)), puzzle_room, 24).
holds(2, in((block,3)), puzzle_room, 24).
holds(2, in((block,4)), store_room, 24).
holds(2, in((block,5)), store_room, 24).
holds(2, in((block,6)), store_room, 24).
holds(2, in(manipulator_arm_1), store_room, 24).
holds(2, in(manipulator_arm_2), store_room, 24).
holds(2, in(puzzle_room_table), puzzle_room, 24).
holds(2, in(talos), store_room, 24).
holds(2, in_tower((block,1),(block,1)), true, 24).
holds(2, in_tower((block,1),(block,2)), false, 24).
holds(2, in_tower((block,1),(block,3)), true, 24).
holds(2, in_tower((block,1),(block,4)), false, 24).
holds(2, in_tower((block,1),(block,5)), false, 24).
holds(2, in_tower((block,1),(block,6)), false, 24).
holds(2, in_tower((block,2),(block,1)), false, 24).
holds(2, in_tower((block,2),(block,2)), true, 24).
holds(2, in_tower((block,2),(block,3)), false, 24).
holds(2, in_tower((block,2),(block,4)), false, 24).
holds(2, in_tower((block,2),(block,5)), false, 24).
holds(2, in_tower((block,2),(block,6)), false, 24).
holds(2, in_tower((block,3),(block,1)), false, 24).
holds(2, in_tower((block,3),(block,2)), false, 24).
holds(2, in_tower((block,3),(block,3)), false, 24).
holds(2, in_tower((block,3),(block,4)), false, 24).
holds(2, in_tower((block,3),(block,5)), false, 24).
holds(2, in_tower((block,3),(block,6)), false, 24).
holds(2, in_tower((block,4),(block,1)), false, 24).
holds(2, in_tower((block,4),(block,2)), false, 24).
holds(2, in_tower((block,4),(block,3)), false, 24).
holds(2, in_tower((block,4),(block,4)), false, 24).
holds(2, in_tower((block,4),(block,5)), false, 24).
holds(2, in_tower((block,4),(block,6)), false, 24).
holds(2, in_tower((block,5),(block,1)), false, 24).
holds(2, in_tower((block,5),(block,2)), false, 24).
holds(2, in_tower((block,5),(block,3)), false, 24).
holds(2, in_tower((block,5),(block,4)), false, 24).
holds(2, in_tower((block,5),(block,5)), false, 24).
holds(2, in_tower((block,5),(block,6)), false, 24).
holds(2, in_tower((block,6),(block,1)), false, 24).
holds(2, in_tower((block,6),(block,2)), false, 24).
holds(2, in_tower((block,6),(block,3)), false, 24).
holds(2, in_tower((block,6),(block,4)), false, 24).
holds(2, in_tower((block,6),(block,5)), false, 24).
holds(2, in_tower((block,6),(block,6)), false, 24).
holds(2, on((block,1)), puzzle_room_table, 24).
holds(2, on((block,2)), puzzle_room_table, 24).
holds(2, on((block,3)), (block,1), 24).
holds(2, on((block,4)), nothing, 24).
holds(2, on((block,5)), nothing, 24).
holds(2, on((block,6)), nothing, 24).
holds(2, tower_base((block,1),puzzle_room_table), true, 24).
holds(2, tower_base((block,2),puzzle_room_table), true, 24).
holds(2, tower_base((block,3),puzzle_room_table), false, 24).
holds(2, tower_base((block,4),puzzle_room_table), false, 24).
holds(2, tower_base((block,5),puzzle_room_table), false, 24).
holds(2, tower_base((block,6),puzzle_room_table), false, 24).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 24).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 24).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 24).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 24).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 24).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 24).

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 17})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 24})

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 12 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 13).
sub_goal(2, talos, move(hallway), in(talos), hallway, 14).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 15).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 16).
sub_goal(2, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 17).
sub_goal(2, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 18).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 19).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 20).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 21).
sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 22).
sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 23).
sub_goal(2, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 24).

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000018B204C54C0>]
	incrementor = SolveIncrementor(step_start=24, step_increase=1, step_increase_initial=2, step_end_min=36, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 24), range_=None), IncPart(name='plan_module', args=('#inc', 24, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 24, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 24, 13, 24, 'sequential', 'true'), range_=None)]

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 819 rules

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004222600000000298s

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025946s.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006903s with result Satisfiable.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000018B2537B590>

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 24)
	('last_sgoals', 24)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000018B1F48BE80>)
	('first_sgoals', 13)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000018B2537B590>)

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 25)', truth=True, inc_range=None)

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 24). %* None *%
#program plan_module(#inc, 24, false, false). %* None *%
#program optimisation_module(#inc, 24, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 24, 13, 24, sequential, true). %* None *%

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     23 : Current =     25
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(24), Number(24)]), ('plan_module', [Number(24), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(25), Number(24)]), ('plan_module', [Number(25), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.199065s.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(13, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(13,25).

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 25: original = External(symbol='current_last_sgoals(13, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(13,25).

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019009s with result Satisfiable.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2180738999999985, Incremental time limit = None
Running cumulative time = 0.2180738999999985, Cumulative time limit = 1800
Used memory = (RSS = 174.074219Mb, VMS = 163.261719Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.199065s, Solving = 0.019009s, Total = 0.218074s, Memory = (RSS = 174.074219Mb, VMS = 163.261719Mb), Step range = [24-25]), Calls = 1
Final Model :: Total atoms = 4172, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=23, end_step=25, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.19906519999999972, solving_time=0.019008699999998768, total_time=0.2180738999999985, memory=Memory(rss=174.07421875, vms=163.26171875), step_range=range(24, 26), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.19906519999999972, solving_time=0.019008699999998768, total_time=0.2180738999999985, memory=Memory(rss=174.07421875, vms=163.26171875), step_range=range(24, 26), clingo_stats={'problem': {'lp': {'atoms': 12254.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28494.0, 'bodies_tr': 28494.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 57197.0, 'rules_normal': 56653.0, 'rules_choice': 543.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 57197.0, 'rules_tr_normal': 56653.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 26819.0, 'eqs_atom': 7043.0, 'eqs_body': 1914.0, 'eqs_other': 17862.0}, 'lpStep': {'atoms': 5727.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25875.0, 'bodies_tr': 25875.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 49760.0, 'rules_normal': 49216.0, 'rules_choice': 543.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 49760.0, 'rules_tr_normal': 49216.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 13763.0, 'eqs_atom': 2133.0, 'eqs_body': 389.0, 'eqs_other': 11241.0}, 'generator': {'vars': 2631.0, 'vars_eliminated': 0.0, 'vars_frozen': 1599.0, 'constraints': 31.0, 'constraints_binary': 1173.0, 'constraints_ternary': 130.0, 'acyc_edges': 0.0, 'complexity': 1344.0}}, 'solving': {'solvers': {'choices': 283.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 41.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 49.0, 'lemmas': 65.0, 'lits_learnt': 65.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 49.0, 'integrated_jumps': 187.0, 'guiding_paths_lits': 232.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 49.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 49.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.2180328369140625, 'cpu': 0.21875, 'solve': 0.004985809326171875, 'unsat': 0.0, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.25613975524902344, 'cpu': 0.265625, 'solve': 0.010150909423828125, 'unsat': 0.0, 'sat': 0.0039520263671875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 283.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 42.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 49.0, 'lemmas': 65.0, 'lits_learnt': 65.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 49.0, 'integrated_jumps': 187.0, 'guiding_paths_lits': 240.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 49.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 49.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{13: 25}

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 2 ( 16.67% solved)

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 25)', truth=True, inc_range=None)

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 14, step = 25]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 14)

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 25:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(24)]), ('plan_module', [Number(26), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082487s.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 26: original = External(symbol='current_last_sgoals(14, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(14,25).

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006396s with result Unsatisfiable.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08888340000000028, Incremental time limit = None
Running cumulative time = 0.30695729999999877, Cumulative time limit = 1800
Used memory = (RSS = 176.351562Mb, VMS = 166.371094Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=25, end_step=26, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.28155229999999953, solving_time=0.025404999999999234, total_time=0.30695729999999877, memory=Memory(rss=176.3515625, vms=166.37109375), step_range=range(24, 27), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08248709999999981, solving_time=0.0063963000000004655, total_time=0.08888340000000028, memory=Memory(rss=176.3515625, vms=166.37109375), step_range=range(26, 27), clingo_stats={'problem': {'lp': {'atoms': 14001.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 50062.0, 'bodies_tr': 50062.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 464.0, 'count_bodies_tr': 464.0, 'sccs': 36.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 627.0, 'rules': 98415.0, 'rules_normal': 97675.0, 'rules_choice': 738.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 98415.0, 'rules_tr_normal': 97675.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 29968.0, 'eqs_atom': 7605.0, 'eqs_body': 2348.0, 'eqs_other': 20015.0}, 'lpStep': {'atoms': 1747.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21568.0, 'bodies_tr': 21568.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 41218.0, 'rules_normal': 41022.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41218.0, 'rules_tr_normal': 41022.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3149.0, 'eqs_atom': 562.0, 'eqs_body': 434.0, 'eqs_other': 2153.0}, 'generator': {'vars': 2828.0, 'vars_eliminated': 0.0, 'vars_frozen': 1768.0, 'constraints': 60.0, 'constraints_binary': 2241.0, 'constraints_ternary': 62.0, 'acyc_edges': 0.0, 'complexity': 2379.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 3.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 215.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.08908271789550781, 'cpu': 0.09375, 'solve': 0.0009975433349609375, 'unsat': 0.0009975433349609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.34522247314453125, 'cpu': 0.359375, 'solve': 0.011148452758789062, 'unsat': 0.0009975433349609375, 'sat': 0.0039520263671875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 283.0, 'conflicts': 11.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 42.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 49.0, 'lemmas': 65.0, 'lits_learnt': 65.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 49.0, 'integrated_jumps': 187.0, 'guiding_paths_lits': 455.0, 'guiding_paths': 21.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 49.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 49.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(24)]), ('plan_module', [Number(27), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.083922s.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020855s with result Satisfiable.

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10477679999999978, Incremental time limit = None
Running cumulative time = 0.41173409999999855, Cumulative time limit = 1800
Used memory = (RSS = 178.082031Mb, VMS = 167.871094Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.365474s, Solving = 0.046260s, Total = 0.411734s, Memory = (RSS = 178.082031Mb, VMS = 167.871094Mb), Step range = [24-27]), Calls = 3
Final Model :: Total atoms = 4916, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=26, end_step=27, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.3654742999999989, solving_time=0.04625979999999963, total_time=0.41173409999999855, memory=Memory(rss=178.08203125, vms=167.87109375), step_range=range(24, 28), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08392199999999939, solving_time=0.020854800000000395, total_time=0.10477679999999978, memory=Memory(rss=178.08203125, vms=167.87109375), step_range=range(27, 28), clingo_stats={'problem': {'lp': {'atoms': 15897.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71839.0, 'bodies_tr': 71839.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 666.0, 'count_bodies_tr': 666.0, 'sccs': 49.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 803.0, 'rules': 140008.0, 'rules_normal': 139072.0, 'rules_choice': 933.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 140008.0, 'rules_tr_normal': 139072.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 34439.0, 'eqs_atom': 8368.0, 'eqs_body': 2861.0, 'eqs_other': 23210.0}, 'lpStep': {'atoms': 1896.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21777.0, 'bodies_tr': 21777.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176.0, 'rules': 41593.0, 'rules_normal': 41397.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41593.0, 'rules_tr_normal': 41397.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4471.0, 'eqs_atom': 763.0, 'eqs_body': 513.0, 'eqs_other': 3195.0}, 'generator': {'vars': 3343.0, 'vars_eliminated': 0.0, 'vars_frozen': 2113.0, 'constraints': 201.0, 'constraints_binary': 5323.0, 'constraints_ternary': 483.0, 'acyc_edges': 0.0, 'complexity': 6073.0}}, 'solving': {'solvers': {'choices': 183.0, 'conflicts': 57.0, 'conflicts_analyzed': 57.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 81.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 65.0, 'distributed_sum_lbd': 81.0, 'integrated': 112.0, 'lemmas': 163.0, 'lits_learnt': 472.0, 'lemmas_binary': 56.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.0, 'integrated_imps': 32.0, 'integrated_jumps': 5.0, 'guiding_paths_lits': 456.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 57.0, 'lemmas_loop': 20.0, 'lemmas_other': 86.0, 'lits_conflict': 93.0, 'lits_loop': 117.0, 'lits_other': 262.0, 'jumps': {'jumps': 57.0, 'jumps_bounded': 4.0, 'levels': 63.0, 'levels_bounded': 4.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.10582923889160156, 'cpu': 0.09375, 'solve': 0.013048171997070312, 'unsat': 0.0, 'sat': 0.002964019775390625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4510517120361328, 'cpu': 0.453125, 'solve': 0.024196624755859375, 'unsat': 0.0009975433349609375, 'sat': 0.006916046142578125}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 466.0, 'conflicts': 68.0, 'conflicts_analyzed': 65.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 123.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 73.0, 'distributed_sum_lbd': 89.0, 'integrated': 161.0, 'lemmas': 228.0, 'lits_learnt': 537.0, 'lemmas_binary': 56.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.015625, 'integrated_imps': 81.0, 'integrated_jumps': 192.0, 'guiding_paths_lits': 911.0, 'guiding_paths': 29.0, 'splits': 0.0, 'lemmas_conflict': 65.0, 'lemmas_loop': 28.0, 'lemmas_other': 135.0, 'lits_conflict': 101.0, 'lits_loop': 125.0, 'lits_other': 311.0, 'jumps': {'jumps': 65.0, 'jumps_bounded': 4.0, 'levels': 71.0, 'levels_bounded': 4.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{13: 25, 14: 27}

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 3 ( 25.00% solved)

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(15, 27)', truth=True, inc_range=None)

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 15, step = 27]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 15)

[03-01-2022_17-11-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 27:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(24)]), ('plan_module', [Number(28), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.132873s.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 28: original = External(symbol='current_last_sgoals(15, 27)', truth=True, inc_range=None), conversion = current_last_sgoals(15,27).

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008438s with result Unsatisfiable.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.14131110000000113, Incremental time limit = None
Running cumulative time = 0.5530451999999997, Cumulative time limit = 1800
Used memory = (RSS = 180.695312Mb, VMS = 171.726562Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=27, end_step=28, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.49834719999999955, solving_time=0.054698000000000135, total_time=0.5530451999999997, memory=Memory(rss=180.6953125, vms=171.7265625), step_range=range(24, 29), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13287290000000063, solving_time=0.008438200000000506, total_time=0.14131110000000113, memory=Memory(rss=180.6953125, vms=171.7265625), step_range=range(28, 29), clingo_stats={'problem': {'lp': {'atoms': 18863.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 94106.0, 'bodies_tr': 94106.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 868.0, 'count_bodies_tr': 868.0, 'sccs': 62.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 989.0, 'rules': 182289.0, 'rules_normal': 181157.0, 'rules_choice': 1128.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 182289.0, 'rules_tr_normal': 181157.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 40165.0, 'eqs_atom': 9282.0, 'eqs_body': 3256.0, 'eqs_other': 27627.0}, 'lpStep': {'atoms': 2966.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22267.0, 'bodies_tr': 22267.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 42281.0, 'rules_normal': 42085.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 42281.0, 'rules_tr_normal': 42085.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5726.0, 'eqs_atom': 914.0, 'eqs_body': 395.0, 'eqs_other': 4417.0}, 'generator': {'vars': 3988.0, 'vars_eliminated': 0.0, 'vars_frozen': 2505.0, 'constraints': 309.0, 'constraints_binary': 7559.0, 'constraints_ternary': 886.0, 'acyc_edges': 0.0, 'complexity': 8878.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 4.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 1.0, 'lits_learnt': 2.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 426.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 1.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 2.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.14260482788085938, 'cpu': 0.171875, 'solve': 0.0019626617431640625, 'unsat': 0.0019626617431640625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5936565399169922, 'cpu': 0.625, 'solve': 0.026159286499023438, 'unsat': 0.002960205078125, 'sat': 0.006916046142578125}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 466.0, 'conflicts': 72.0, 'conflicts_analyzed': 65.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 123.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 74.0, 'distributed_sum_lbd': 91.0, 'integrated': 161.0, 'lemmas': 229.0, 'lits_learnt': 539.0, 'lemmas_binary': 57.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.046875, 'integrated_imps': 81.0, 'integrated_jumps': 192.0, 'guiding_paths_lits': 1337.0, 'guiding_paths': 35.0, 'splits': 0.0, 'lemmas_conflict': 65.0, 'lemmas_loop': 29.0, 'lemmas_other': 135.0, 'lits_conflict': 101.0, 'lits_loop': 127.0, 'lits_other': 311.0, 'jumps': {'jumps': 65.0, 'jumps_bounded': 4.0, 'levels': 71.0, 'levels_bounded': 4.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Reaction at search length 28:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(24)]), ('plan_module', [Number(29), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.097180s.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012288s with result Unsatisfiable.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10946760000000033, Incremental time limit = None
Running cumulative time = 0.6625128, Cumulative time limit = 1800
Used memory = (RSS = 182.386719Mb, VMS = 173.414062Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=28, end_step=29, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5955271, solving_time=0.06698570000000004, total_time=0.6625128, memory=Memory(rss=182.38671875, vms=173.4140625), step_range=range(24, 30), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09717990000000043, solving_time=0.012287699999999901, total_time=0.10946760000000033, memory=Memory(rss=182.38671875, vms=173.4140625), step_range=range(29, 30), clingo_stats={'problem': {'lp': {'atoms': 21843.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 116976.0, 'bodies_tr': 116976.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1070.0, 'count_bodies_tr': 1070.0, 'sccs': 85.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1301.0, 'rules': 226025.0, 'rules_normal': 224697.0, 'rules_choice': 1323.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 226025.0, 'rules_tr_normal': 224697.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 49478.0, 'eqs_atom': 10929.0, 'eqs_body': 3634.0, 'eqs_other': 34915.0}, 'lpStep': {'atoms': 2980.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22870.0, 'bodies_tr': 22870.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 312.0, 'rules': 43736.0, 'rules_normal': 43540.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 43736.0, 'rules_tr_normal': 43540.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 9313.0, 'eqs_atom': 1647.0, 'eqs_body': 378.0, 'eqs_other': 7288.0}, 'generator': {'vars': 5211.0, 'vars_eliminated': 0.0, 'vars_frozen': 3246.0, 'constraints': 591.0, 'constraints_binary': 18403.0, 'constraints_ternary': 2198.0, 'acyc_edges': 0.0, 'complexity': 21378.0}}, 'solving': {'solvers': {'choices': 85.0, 'conflicts': 22.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 26.0, 'distributed_sum_lbd': 54.0, 'integrated': 137.0, 'lemmas': 237.0, 'lits_learnt': 1376.0, 'lemmas_binary': 35.0, 'lemmas_ternary': 49.0, 'cpu_time': 0.0, 'integrated_imps': 34.0, 'integrated_jumps': 29.0, 'guiding_paths_lits': 595.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 113.0, 'lemmas_other': 109.0, 'lits_conflict': 189.0, 'lits_loop': 636.0, 'lits_other': 551.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 2.0, 'levels': 142.0, 'levels_bounded': 86.0, 'max': 104.0, 'max_executed': 19.0, 'max_bounded': 85.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.11071014404296875, 'cpu': 0.109375, 'solve': 0.0029697418212890625, 'unsat': 0.0029697418212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.7043666839599609, 'cpu': 0.734375, 'solve': 0.0291290283203125, 'unsat': 0.0059299468994140625, 'sat': 0.006916046142578125}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 551.0, 'conflicts': 94.0, 'conflicts_analyzed': 82.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 123.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 100.0, 'distributed_sum_lbd': 145.0, 'integrated': 298.0, 'lemmas': 466.0, 'lits_learnt': 1915.0, 'lemmas_binary': 92.0, 'lemmas_ternary': 53.0, 'cpu_time': 0.046875, 'integrated_imps': 115.0, 'integrated_jumps': 221.0, 'guiding_paths_lits': 1932.0, 'guiding_paths': 42.0, 'splits': 0.0, 'lemmas_conflict': 80.0, 'lemmas_loop': 142.0, 'lemmas_other': 244.0, 'lits_conflict': 290.0, 'lits_loop': 763.0, 'lits_other': 862.0, 'jumps': {'jumps': 82.0, 'jumps_bounded': 6.0, 'levels': 213.0, 'levels_bounded': 90.0, 'max': 104.0, 'max_executed': 19.0, 'max_bounded': 85.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Reaction at search length 29:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(24)]), ('plan_module', [Number(30), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.121744s.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025858s with result Satisfiable.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14760169999999917, Incremental time limit = None
Running cumulative time = 0.8101144999999992, Cumulative time limit = 1800
Used memory = (RSS = 187.898438Mb, VMS = 180.031250Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.717271s, Solving = 0.092844s, Total = 0.810114s, Memory = (RSS = 187.898438Mb, VMS = 180.031250Mb), Step range = [24-30]), Calls = 6
Final Model :: Total atoms = 6034, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=29, end_step=30, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.7172706999999985, solving_time=0.0928438000000007, total_time=0.8101144999999992, memory=Memory(rss=187.8984375, vms=180.03125), step_range=range(24, 31), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12174359999999851, solving_time=0.02585810000000066, total_time=0.14760169999999917, memory=Memory(rss=187.8984375, vms=180.03125), step_range=range(30, 31), clingo_stats={'problem': {'lp': {'atoms': 24896.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 139974.0, 'bodies_tr': 139974.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1272.0, 'count_bodies_tr': 1272.0, 'sccs': 108.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1613.0, 'rules': 269956.0, 'rules_normal': 268432.0, 'rules_choice': 1518.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 269956.0, 'rules_tr_normal': 268432.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 59472.0, 'eqs_atom': 12572.0, 'eqs_body': 4016.0, 'eqs_other': 42884.0}, 'lpStep': {'atoms': 3053.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22998.0, 'bodies_tr': 22998.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 312.0, 'rules': 43931.0, 'rules_normal': 43735.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 43931.0, 'rules_tr_normal': 43735.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 9994.0, 'eqs_atom': 1643.0, 'eqs_body': 382.0, 'eqs_other': 7969.0}, 'generator': {'vars': 6508.0, 'vars_eliminated': 0.0, 'vars_frozen': 4028.0, 'constraints': 808.0, 'constraints_binary': 26765.0, 'constraints_ternary': 3357.0, 'acyc_edges': 0.0, 'complexity': 31178.0}}, 'solving': {'solvers': {'choices': 397.0, 'conflicts': 69.0, 'conflicts_analyzed': 69.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 141.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 74.0, 'distributed_sum_lbd': 138.0, 'integrated': 264.0, 'lemmas': 460.0, 'lits_learnt': 4158.0, 'lemmas_binary': 19.0, 'lemmas_ternary': 63.0, 'cpu_time': 0.03125, 'integrated_imps': 62.0, 'integrated_jumps': 47.0, 'guiding_paths_lits': 693.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 68.0, 'lemmas_loop': 146.0, 'lemmas_other': 246.0, 'lits_conflict': 491.0, 'lits_loop': 1093.0, 'lits_other': 2574.0, 'jumps': {'jumps': 69.0, 'jumps_bounded': 4.0, 'levels': 286.0, 'levels_bounded': 200.0, 'max': 104.0, 'max_executed': 104.0, 'max_bounded': 99.0}}}}, 'summary': {'call': 6.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.14960289001464844, 'cpu': 0.15625, 'solve': 0.009973526000976562, 'unsat': 0.0, 'sat': 0.004985809326171875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8539695739746094, 'cpu': 0.890625, 'solve': 0.03910255432128906, 'unsat': 0.0059299468994140625, 'sat': 0.01190185546875}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 948.0, 'conflicts': 163.0, 'conflicts_analyzed': 151.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 264.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 174.0, 'distributed_sum_lbd': 283.0, 'integrated': 562.0, 'lemmas': 926.0, 'lits_learnt': 6073.0, 'lemmas_binary': 111.0, 'lemmas_ternary': 116.0, 'cpu_time': 0.078125, 'integrated_imps': 177.0, 'integrated_jumps': 268.0, 'guiding_paths_lits': 2625.0, 'guiding_paths': 49.0, 'splits': 0.0, 'lemmas_conflict': 148.0, 'lemmas_loop': 288.0, 'lemmas_other': 490.0, 'lits_conflict': 781.0, 'lits_loop': 1856.0, 'lits_other': 3436.0, 'jumps': {'jumps': 151.0, 'jumps_bounded': 10.0, 'levels': 499.0, 'levels_bounded': 290.0, 'max': 104.0, 'max_executed': 104.0, 'max_bounded': 99.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{13: 25, 14: 27, 15: 30}

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 16 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 4 ( 33.33% solved)

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(16, 30)', truth=True, inc_range=None)

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 16, step = 30]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 16)

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Reaction at search length 30:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(24)]), ('plan_module', [Number(31), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.098023s.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 31: original = External(symbol='current_last_sgoals(16, 30)', truth=True, inc_range=None), conversion = current_last_sgoals(16,30).

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032774s with result Satisfiable.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13079730000000112, Incremental time limit = None
Running cumulative time = 0.9409118000000003, Cumulative time limit = 1800
Used memory = (RSS = 191.007812Mb, VMS = 182.195312Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.815294s, Solving = 0.125618s, Total = 0.940912s, Memory = (RSS = 191.007812Mb, VMS = 182.195312Mb), Step range = [24-31]), Calls = 7
Final Model :: Total atoms = 6410, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=30, end_step=31, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.815293500000001, solving_time=0.1256182999999993, total_time=0.9409118000000003, memory=Memory(rss=191.0078125, vms=182.1953125), step_range=range(24, 32), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09802280000000252, solving_time=0.032774499999998596, total_time=0.13079730000000112, memory=Memory(rss=191.0078125, vms=182.1953125), step_range=range(31, 32), clingo_stats={'problem': {'lp': {'atoms': 27960.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 163499.0, 'bodies_tr': 163499.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1474.0, 'count_bodies_tr': 1474.0, 'sccs': 133.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2099.0, 'rules': 314481.0, 'rules_normal': 312761.0, 'rules_choice': 1713.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 314481.0, 'rules_tr_normal': 312761.0, 'rules_tr_choice': 1713.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 67304.0, 'eqs_atom': 14086.0, 'eqs_body': 4144.0, 'eqs_other': 49074.0}, 'lpStep': {'atoms': 3064.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23525.0, 'bodies_tr': 23525.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 44525.0, 'rules_normal': 44329.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 44525.0, 'rules_tr_normal': 44329.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7832.0, 'eqs_atom': 1514.0, 'eqs_body': 128.0, 'eqs_other': 6190.0}, 'generator': {'vars': 8428.0, 'vars_eliminated': 0.0, 'vars_frozen': 5174.0, 'constraints': 1227.0, 'constraints_binary': 41257.0, 'constraints_ternary': 5143.0, 'acyc_edges': 0.0, 'complexity': 47941.0}}, 'solving': {'solvers': {'choices': 337.0, 'conflicts': 1.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 161.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 6.0, 'lemmas': 75.0, 'lits_learnt': 632.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 791.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 74.0, 'lemmas_other': 0.0, 'lits_conflict': 2.0, 'lits_loop': 630.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 2.0, 'levels_bounded': 1.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.1326427459716797, 'cpu': 0.140625, 'solve': 0.018968582153320312, 'unsat': 0.0, 'sat': 0.006000518798828125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.9866123199462891, 'cpu': 1.03125, 'solve': 0.058071136474609375, 'unsat': 0.0059299468994140625, 'sat': 0.017902374267578125}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1285.0, 'conflicts': 164.0, 'conflicts_analyzed': 152.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 425.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 175.0, 'distributed_sum_lbd': 285.0, 'integrated': 568.0, 'lemmas': 1001.0, 'lits_learnt': 6705.0, 'lemmas_binary': 112.0, 'lemmas_ternary': 116.0, 'cpu_time': 0.109375, 'integrated_imps': 177.0, 'integrated_jumps': 268.0, 'guiding_paths_lits': 3416.0, 'guiding_paths': 56.0, 'splits': 0.0, 'lemmas_conflict': 149.0, 'lemmas_loop': 362.0, 'lemmas_other': 490.0, 'lits_conflict': 783.0, 'lits_loop': 2486.0, 'lits_other': 3436.0, 'jumps': {'jumps': 152.0, 'jumps_bounded': 11.0, 'levels': 501.0, 'levels_bounded': 291.0, 'max': 104.0, 'max_executed': 104.0, 'max_bounded': 99.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{13: 25, 14: 27, 15: 30, 16: 31}

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 17 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 5 ( 41.67% solved)

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(17, 31)', truth=True, inc_range=None)

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 17, step = 31]:
sub_goal(2, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 17)

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Reaction at search length 31:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(32), Number(24)]), ('plan_module', [Number(32), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.159187s.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 32: original = External(symbol='current_last_sgoals(17, 31)', truth=True, inc_range=None), conversion = current_last_sgoals(17,31).

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023768s with result Unsatisfiable.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.18295510000000093, Incremental time limit = None
Running cumulative time = 1.1238669000000012, Cumulative time limit = 1800
Used memory = (RSS = 199.136719Mb, VMS = 191.617188Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=31, end_step=32, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.9744806000000015, solving_time=0.14938629999999975, total_time=1.1238669000000012, memory=Memory(rss=199.13671875, vms=191.6171875), step_range=range(24, 33), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15918710000000047, solving_time=0.023768000000000455, total_time=0.18295510000000093, memory=Memory(rss=199.13671875, vms=191.6171875), step_range=range(32, 33), clingo_stats={'problem': {'lp': {'atoms': 31274.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 187561.0, 'bodies_tr': 187561.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1676.0, 'count_bodies_tr': 1676.0, 'sccs': 158.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2589.0, 'rules': 359784.0, 'rules_normal': 357868.0, 'rules_choice': 1908.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 359784.0, 'rules_tr_normal': 357868.0, 'rules_tr_choice': 1908.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 79237.0, 'eqs_atom': 15822.0, 'eqs_body': 4327.0, 'eqs_other': 59088.0}, 'lpStep': {'atoms': 3314.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24062.0, 'bodies_tr': 24062.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 45303.0, 'rules_normal': 45107.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45303.0, 'rules_tr_normal': 45107.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11933.0, 'eqs_atom': 1736.0, 'eqs_body': 183.0, 'eqs_other': 10014.0}, 'generator': {'vars': 10481.0, 'vars_eliminated': 0.0, 'vars_frozen': 6362.0, 'constraints': 1738.0, 'constraints_binary': 62659.0, 'constraints_ternary': 7912.0, 'acyc_edges': 0.0, 'complexity': 72701.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 889.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.18550491333007812, 'cpu': 0.1875, 'solve': 0.0049533843994140625, 'unsat': 0.0049533843994140625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.1721172332763672, 'cpu': 1.21875, 'solve': 0.06302452087402344, 'unsat': 0.010883331298828125, 'sat': 0.017902374267578125}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1285.0, 'conflicts': 172.0, 'conflicts_analyzed': 152.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 425.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 175.0, 'distributed_sum_lbd': 285.0, 'integrated': 568.0, 'lemmas': 1001.0, 'lits_learnt': 6705.0, 'lemmas_binary': 112.0, 'lemmas_ternary': 116.0, 'cpu_time': 0.109375, 'integrated_imps': 177.0, 'integrated_jumps': 268.0, 'guiding_paths_lits': 4305.0, 'guiding_paths': 63.0, 'splits': 0.0, 'lemmas_conflict': 149.0, 'lemmas_loop': 362.0, 'lemmas_other': 490.0, 'lits_conflict': 783.0, 'lits_loop': 2486.0, 'lits_other': 3436.0, 'jumps': {'jumps': 152.0, 'jumps_bounded': 11.0, 'levels': 501.0, 'levels_bounded': 291.0, 'max': 104.0, 'max_executed': 104.0, 'max_bounded': 99.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Reaction at search length 32:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(33), Number(24)]), ('plan_module', [Number(33), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.136009s.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044271s with result Satisfiable.

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.18027969999999982, Incremental time limit = None
Running cumulative time = 1.304146600000001, Cumulative time limit = 1800
Used memory = (RSS = 202.476562Mb, VMS = 193.347656Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.110489s, Solving = 0.193657s, Total = 1.304147s, Memory = (RSS = 202.476562Mb, VMS = 193.347656Mb), Step range = [24-33]), Calls = 9
Final Model :: Total atoms = 7159, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=32, end_step=33, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.110489300000003, solving_time=0.19365729999999814, total_time=1.304146600000001, memory=Memory(rss=202.4765625, vms=193.34765625), step_range=range(24, 34), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13600870000000143, solving_time=0.044270999999998395, total_time=0.18027969999999982, memory=Memory(rss=202.4765625, vms=193.34765625), step_range=range(33, 34), clingo_stats={'problem': {'lp': {'atoms': 34615.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 211971.0, 'bodies_tr': 211971.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1878.0, 'count_bodies_tr': 1878.0, 'sccs': 183.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3183.0, 'rules': 405502.0, 'rules_normal': 403390.0, 'rules_choice': 2103.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 405502.0, 'rules_tr_normal': 403390.0, 'rules_tr_choice': 2103.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 86470.0, 'eqs_atom': 17525.0, 'eqs_body': 4400.0, 'eqs_other': 64545.0}, 'lpStep': {'atoms': 3341.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24410.0, 'bodies_tr': 24410.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45718.0, 'rules_normal': 45522.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45718.0, 'rules_tr_normal': 45522.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7233.0, 'eqs_atom': 1703.0, 'eqs_body': 73.0, 'eqs_other': 5457.0}, 'generator': {'vars': 12862.0, 'vars_eliminated': 0.0, 'vars_frozen': 7745.0, 'constraints': 2359.0, 'constraints_binary': 88561.0, 'constraints_ternary': 11135.0, 'acyc_edges': 0.0, 'complexity': 102533.0}}, 'solving': {'solvers': {'choices': 751.0, 'conflicts': 80.0, 'conflicts_analyzed': 80.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 202.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 69.0, 'distributed_sum_lbd': 175.0, 'integrated': 402.0, 'lemmas': 838.0, 'lits_learnt': 12595.0, 'lemmas_binary': 68.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.03125, 'integrated_imps': 137.0, 'integrated_jumps': 145.0, 'guiding_paths_lits': 987.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 80.0, 'lemmas_loop': 370.0, 'lemmas_other': 388.0, 'lits_conflict': 1774.0, 'lits_loop': 2924.0, 'lits_other': 7897.0, 'jumps': {'jumps': 80.0, 'jumps_bounded': 5.0, 'levels': 598.0, 'levels_bounded': 425.0, 'max': 144.0, 'max_executed': 144.0, 'max_bounded': 141.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.18151473999023438, 'cpu': 0.203125, 'solve': 0.01795196533203125, 'unsat': 0.0, 'sat': 0.008977890014648438}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.3536319732666016, 'cpu': 1.421875, 'solve': 0.08097648620605469, 'unsat': 0.010883331298828125, 'sat': 0.026880264282226562}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2036.0, 'conflicts': 252.0, 'conflicts_analyzed': 232.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 0.0, 'models': 6.0, 'models_level': 627.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 244.0, 'distributed_sum_lbd': 460.0, 'integrated': 970.0, 'lemmas': 1839.0, 'lits_learnt': 19300.0, 'lemmas_binary': 180.0, 'lemmas_ternary': 130.0, 'cpu_time': 0.140625, 'integrated_imps': 314.0, 'integrated_jumps': 413.0, 'guiding_paths_lits': 5292.0, 'guiding_paths': 70.0, 'splits': 0.0, 'lemmas_conflict': 229.0, 'lemmas_loop': 732.0, 'lemmas_other': 878.0, 'lits_conflict': 2557.0, 'lits_loop': 5410.0, 'lits_other': 11333.0, 'jumps': {'jumps': 232.0, 'jumps_bounded': 16.0, 'levels': 1099.0, 'levels_bounded': 716.0, 'max': 144.0, 'max_executed': 144.0, 'max_bounded': 141.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{13: 25, 14: 27, 15: 30, 16: 31, 17: 33}

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 18 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 6 ( 50.00% solved)

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(18, 33)', truth=True, inc_range=None)

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 18, step = 33]:
sub_goal(2, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 18)

[03-01-2022_17-11-19] DEBUG :: ASH Planner Main #1 >> Reaction at search length 33:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(34), Number(24)]), ('plan_module', [Number(34), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.101802s.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 34: original = External(symbol='current_last_sgoals(18, 33)', truth=True, inc_range=None), conversion = current_last_sgoals(18,33).

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043289s with result Satisfiable.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1450913000000007, Incremental time limit = None
Running cumulative time = 1.4492379000000017, Cumulative time limit = 1800
Used memory = (RSS = 211.265625Mb, VMS = 203.695312Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.212291s, Solving = 0.236946s, Total = 1.449238s, Memory = (RSS = 211.265625Mb, VMS = 203.695312Mb), Step range = [24-34]), Calls = 10
Final Model :: Total atoms = 7536, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=33, end_step=34, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.2122914000000033, solving_time=0.2369464999999984, total_time=1.4492379000000017, memory=Memory(rss=211.265625, vms=203.6953125), step_range=range(24, 35), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10180210000000045, solving_time=0.04328920000000025, total_time=0.1450913000000007, memory=Memory(rss=211.265625, vms=203.6953125), step_range=range(34, 35), clingo_stats={'problem': {'lp': {'atoms': 38090.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 236530.0, 'bodies_tr': 236530.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2080.0, 'count_bodies_tr': 2080.0, 'sccs': 208.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3777.0, 'rules': 451436.0, 'rules_normal': 449128.0, 'rules_choice': 2298.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 451436.0, 'rules_tr_normal': 449128.0, 'rules_tr_choice': 2298.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 93855.0, 'eqs_atom': 19244.0, 'eqs_body': 4480.0, 'eqs_other': 70131.0}, 'lpStep': {'atoms': 3475.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24559.0, 'bodies_tr': 24559.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45934.0, 'rules_normal': 45738.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45934.0, 'rules_tr_normal': 45738.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7385.0, 'eqs_atom': 1719.0, 'eqs_body': 80.0, 'eqs_other': 5586.0}, 'generator': {'vars': 15250.0, 'vars_eliminated': 0.0, 'vars_frozen': 9132.0, 'constraints': 2571.0, 'constraints_binary': 96274.0, 'constraints_ternary': 12715.0, 'acyc_edges': 0.0, 'complexity': 112100.0}}, 'solving': {'solvers': {'choices': 476.0, 'conflicts': 10.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 222.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 10.0, 'distributed_sum_lbd': 10.0, 'integrated': 0.0, 'lemmas': 96.0, 'lits_learnt': 751.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1085.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 86.0, 'lemmas_other': 0.0, 'lits_conflict': 10.0, 'lits_loop': 741.0, 'lits_other': 0.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 0.0, 'levels': 10.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 10.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.15042495727539062, 'cpu': 0.15625, 'solve': 0.026727676391601562, 'unsat': 0.0, 'sat': 0.0079498291015625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.5040569305419922, 'cpu': 1.578125, 'solve': 0.10770416259765625, 'unsat': 0.010883331298828125, 'sat': 0.03483009338378906}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2512.0, 'conflicts': 262.0, 'conflicts_analyzed': 242.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 0.0, 'models': 7.0, 'models_level': 849.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 254.0, 'distributed_sum_lbd': 470.0, 'integrated': 970.0, 'lemmas': 1935.0, 'lits_learnt': 20051.0, 'lemmas_binary': 180.0, 'lemmas_ternary': 130.0, 'cpu_time': 0.171875, 'integrated_imps': 314.0, 'integrated_jumps': 413.0, 'guiding_paths_lits': 6377.0, 'guiding_paths': 77.0, 'splits': 0.0, 'lemmas_conflict': 239.0, 'lemmas_loop': 818.0, 'lemmas_other': 878.0, 'lits_conflict': 2567.0, 'lits_loop': 6151.0, 'lits_other': 11333.0, 'jumps': {'jumps': 242.0, 'jumps_bounded': 16.0, 'levels': 1109.0, 'levels_bounded': 716.0, 'max': 144.0, 'max_executed': 144.0, 'max_bounded': 141.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{13: 25, 14: 27, 15: 30, 16: 31, 17: 33, 18: 34}

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 19 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 7 ( 58.33% solved)

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(19, 34)', truth=True, inc_range=None)

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 19, step = 34]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 19)

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 34:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(24)]), ('plan_module', [Number(35), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.139358s.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 35: original = External(symbol='current_last_sgoals(19, 34)', truth=True, inc_range=None), conversion = current_last_sgoals(19,34).

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032509s with result Unsatisfiable.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1718668000000001, Incremental time limit = None
Running cumulative time = 1.6211047000000018, Cumulative time limit = 1800
Used memory = (RSS = 213.996094Mb, VMS = 205.144531Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=34, end_step=35, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.3516492000000024, solving_time=0.2694554999999994, total_time=1.6211047000000018, memory=Memory(rss=213.99609375, vms=205.14453125), step_range=range(24, 36), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1393577999999991, solving_time=0.03250900000000101, total_time=0.1718668000000001, memory=Memory(rss=213.99609375, vms=205.14453125), step_range=range(35, 36), clingo_stats={'problem': {'lp': {'atoms': 41580.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 261224.0, 'bodies_tr': 261224.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2282.0, 'count_bodies_tr': 2282.0, 'sccs': 233.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4371.0, 'rules': 497659.0, 'rules_normal': 495155.0, 'rules_choice': 2493.0, 'rules_minimize': 11.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 497659.0, 'rules_tr_normal': 495155.0, 'rules_tr_choice': 2493.0, 'rules_tr_minimize': 11.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 101522.0, 'eqs_atom': 21070.0, 'eqs_body': 4555.0, 'eqs_other': 75897.0}, 'lpStep': {'atoms': 3490.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24694.0, 'bodies_tr': 24694.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46223.0, 'rules_normal': 46027.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46223.0, 'rules_tr_normal': 46027.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7667.0, 'eqs_atom': 1826.0, 'eqs_body': 75.0, 'eqs_other': 5766.0}, 'generator': {'vars': 17679.0, 'vars_eliminated': 0.0, 'vars_frozen': 10529.0, 'constraints': 3205.0, 'constraints_binary': 121605.0, 'constraints_ternary': 16237.0, 'acyc_edges': 0.0, 'complexity': 141673.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1183.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.1750621795654297, 'cpu': 0.171875, 'solve': 0.0049610137939453125, 'unsat': 0.0049610137939453125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.6791191101074219, 'cpu': 1.75, 'solve': 0.11266517639160156, 'unsat': 0.015844345092773438, 'sat': 0.03483009338378906}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2512.0, 'conflicts': 270.0, 'conflicts_analyzed': 242.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 0.0, 'models': 7.0, 'models_level': 849.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 254.0, 'distributed_sum_lbd': 470.0, 'integrated': 970.0, 'lemmas': 1935.0, 'lits_learnt': 20051.0, 'lemmas_binary': 180.0, 'lemmas_ternary': 130.0, 'cpu_time': 0.171875, 'integrated_imps': 314.0, 'integrated_jumps': 413.0, 'guiding_paths_lits': 7560.0, 'guiding_paths': 84.0, 'splits': 0.0, 'lemmas_conflict': 239.0, 'lemmas_loop': 818.0, 'lemmas_other': 878.0, 'lits_conflict': 2567.0, 'lits_loop': 6151.0, 'lits_other': 11333.0, 'jumps': {'jumps': 242.0, 'jumps_bounded': 16.0, 'levels': 1109.0, 'levels_bounded': 716.0, 'max': 144.0, 'max_executed': 144.0, 'max_bounded': 141.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 35:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(24)]), ('plan_module', [Number(36), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.110297s.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045122s with result Satisfiable.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1554183999999985, Incremental time limit = None
Running cumulative time = 1.7765231000000004, Cumulative time limit = 1800
Used memory = (RSS = 223.769531Mb, VMS = 218.281250Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.461946s, Solving = 0.314577s, Total = 1.776523s, Memory = (RSS = 223.769531Mb, VMS = 218.281250Mb), Step range = [24-36]), Calls = 12
Final Model :: Total atoms = 8291, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=35, end_step=36, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.4619459000000017, solving_time=0.31457719999999867, total_time=1.7765231000000004, memory=Memory(rss=223.76953125, vms=218.28125), step_range=range(24, 37), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11029669999999925, solving_time=0.045121699999999265, total_time=0.1554183999999985, memory=Memory(rss=223.76953125, vms=218.28125), step_range=range(36, 37), clingo_stats={'problem': {'lp': {'atoms': 45086.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 285949.0, 'bodies_tr': 285949.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2484.0, 'count_bodies_tr': 2484.0, 'sccs': 258.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4965.0, 'rules': 543980.0, 'rules_normal': 541280.0, 'rules_choice': 2688.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 543980.0, 'rules_tr_normal': 541280.0, 'rules_tr_choice': 2688.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 109257.0, 'eqs_atom': 22908.0, 'eqs_body': 4631.0, 'eqs_other': 81718.0}, 'lpStep': {'atoms': 3506.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24725.0, 'bodies_tr': 24725.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46321.0, 'rules_normal': 46125.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46321.0, 'rules_tr_normal': 46125.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7735.0, 'eqs_atom': 1838.0, 'eqs_body': 76.0, 'eqs_other': 5821.0}, 'generator': {'vars': 20115.0, 'vars_eliminated': 0.0, 'vars_frozen': 11930.0, 'constraints': 3840.0, 'constraints_binary': 147837.0, 'constraints_ternary': 19721.0, 'acyc_edges': 0.0, 'complexity': 172110.0}}, 'solving': {'solvers': {'choices': 1008.0, 'conflicts': 105.0, 'conflicts_analyzed': 105.0, 'restarts': 0.0, 'restarts_last': 30.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 262.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 102.0, 'distributed_sum_lbd': 247.0, 'integrated': 581.0, 'lemmas': 1194.0, 'lits_learnt': 18574.0, 'lemmas_binary': 28.0, 'lemmas_ternary': 33.0, 'cpu_time': 0.15625, 'integrated_imps': 221.0, 'integrated_jumps': 351.0, 'guiding_paths_lits': 1281.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 104.0, 'lemmas_loop': 525.0, 'lemmas_other': 565.0, 'lits_conflict': 2115.0, 'lits_loop': 4686.0, 'lits_other': 11773.0, 'jumps': {'jumps': 105.0, 'jumps_bounded': 4.0, 'levels': 492.0, 'levels_bounded': 368.0, 'max': 186.0, 'max_executed': 186.0, 'max_bounded': 183.0}}}}, 'summary': {'call': 12.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.15721893310546875, 'cpu': 0.28125, 'solve': 0.029560089111328125, 'unsat': 0.0, 'sat': 0.019586563110351562}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.8363380432128906, 'cpu': 2.03125, 'solve': 0.1422252655029297, 'unsat': 0.015844345092773438, 'sat': 0.054416656494140625}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3520.0, 'conflicts': 375.0, 'conflicts_analyzed': 347.0, 'restarts': 0.0, 'restarts_last': 30.0, 'extra': {'domain_choices': 0.0, 'models': 8.0, 'models_level': 1111.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 356.0, 'distributed_sum_lbd': 717.0, 'integrated': 1551.0, 'lemmas': 3129.0, 'lits_learnt': 38625.0, 'lemmas_binary': 208.0, 'lemmas_ternary': 163.0, 'cpu_time': 0.328125, 'integrated_imps': 535.0, 'integrated_jumps': 764.0, 'guiding_paths_lits': 8841.0, 'guiding_paths': 91.0, 'splits': 0.0, 'lemmas_conflict': 343.0, 'lemmas_loop': 1343.0, 'lemmas_other': 1443.0, 'lits_conflict': 4682.0, 'lits_loop': 10837.0, 'lits_other': 23106.0, 'jumps': {'jumps': 347.0, 'jumps_bounded': 20.0, 'levels': 1601.0, 'levels_bounded': 1084.0, 'max': 186.0, 'max_executed': 186.0, 'max_bounded': 183.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{13: 25, 14: 27, 15: 30, 16: 31, 17: 33, 18: 34, 19: 36}

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 20 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 8 ( 66.67% solved)

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(20, 36)', truth=True, inc_range=None)

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 20, step = 36]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 20)

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 36:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(37), Number(24)]), ('plan_module', [Number(37), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.106925s.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 37: original = External(symbol='current_last_sgoals(20, 36)', truth=True, inc_range=None), conversion = current_last_sgoals(20,36).

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030673s with result Satisfiable.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13759790000000294, Incremental time limit = None
Running cumulative time = 1.9141210000000033, Cumulative time limit = 1800
Used memory = (RSS = 225.785156Mb, VMS = 218.792969Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.568871s, Solving = 0.345250s, Total = 1.914121s, Memory = (RSS = 225.785156Mb, VMS = 218.792969Mb), Step range = [24-37]), Calls = 13
Final Model :: Total atoms = 8670, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=36, end_step=37, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.5688708000000045, solving_time=0.34525019999999884, total_time=1.9141210000000033, memory=Memory(rss=225.78515625, vms=218.79296875), step_range=range(24, 38), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10692490000000276, solving_time=0.030673000000000172, total_time=0.13759790000000294, memory=Memory(rss=225.78515625, vms=218.79296875), step_range=range(37, 38), clingo_stats={'problem': {'lp': {'atoms': 48609.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 310695.0, 'bodies_tr': 310695.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2686.0, 'count_bodies_tr': 2686.0, 'sccs': 283.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5559.0, 'rules': 590389.0, 'rules_normal': 587493.0, 'rules_choice': 2883.0, 'rules_minimize': 13.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 590389.0, 'rules_tr_normal': 587493.0, 'rules_tr_choice': 2883.0, 'rules_tr_minimize': 13.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 117027.0, 'eqs_atom': 24749.0, 'eqs_body': 4707.0, 'eqs_other': 87571.0}, 'lpStep': {'atoms': 3523.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24746.0, 'bodies_tr': 24746.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46409.0, 'rules_normal': 46213.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46409.0, 'rules_tr_normal': 46213.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7770.0, 'eqs_atom': 1841.0, 'eqs_body': 76.0, 'eqs_other': 5853.0}, 'generator': {'vars': 22551.0, 'vars_eliminated': 0.0, 'vars_frozen': 13331.0, 'constraints': 4004.0, 'constraints_binary': 154402.0, 'constraints_ternary': 20473.0, 'acyc_edges': 0.0, 'complexity': 179641.0}}, 'solving': {'solvers': {'choices': 634.0, 'conflicts': 4.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 282.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 8.0, 'integrated': 18.0, 'lemmas': 81.0, 'lits_learnt': 1296.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 14.0, 'integrated_jumps': 35.0, 'guiding_paths_lits': 1379.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 4.0, 'lemmas_loop': 59.0, 'lemmas_other': 18.0, 'lits_conflict': 110.0, 'lits_loop': 532.0, 'lits_other': 654.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 2.0, 'levels': 7.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 13.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.14367103576660156, 'cpu': 0.171875, 'solve': 0.01422119140625, 'unsat': 0.0, 'sat': 0.0052471160888671875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.9800090789794922, 'cpu': 2.203125, 'solve': 0.1564464569091797, 'unsat': 0.015844345092773438, 'sat': 0.05966377258300781}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4154.0, 'conflicts': 379.0, 'conflicts_analyzed': 351.0, 'restarts': 0.0, 'restarts_last': 30.0, 'extra': {'domain_choices': 0.0, 'models': 9.0, 'models_level': 1393.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 360.0, 'distributed_sum_lbd': 725.0, 'integrated': 1569.0, 'lemmas': 3210.0, 'lits_learnt': 39921.0, 'lemmas_binary': 215.0, 'lemmas_ternary': 163.0, 'cpu_time': 0.359375, 'integrated_imps': 549.0, 'integrated_jumps': 799.0, 'guiding_paths_lits': 10220.0, 'guiding_paths': 98.0, 'splits': 0.0, 'lemmas_conflict': 347.0, 'lemmas_loop': 1402.0, 'lemmas_other': 1461.0, 'lits_conflict': 4792.0, 'lits_loop': 11369.0, 'lits_other': 23760.0, 'jumps': {'jumps': 351.0, 'jumps_bounded': 22.0, 'levels': 1608.0, 'levels_bounded': 1086.0, 'max': 186.0, 'max_executed': 186.0, 'max_bounded': 183.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{13: 25, 14: 27, 15: 30, 16: 31, 17: 33, 18: 34, 19: 36, 20: 37}

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 21 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 9 ( 75.00% solved)

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(21, 37)', truth=True, inc_range=None)

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 21, step = 37]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 21)

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 37:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(24)]), ('plan_module', [Number(38), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.163208s.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 38: original = External(symbol='current_last_sgoals(21, 37)', truth=True, inc_range=None), conversion = current_last_sgoals(21,37).

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025062s with result Unsatisfiable.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.18827080000000151, Incremental time limit = None
Running cumulative time = 2.102391800000005, Cumulative time limit = 1800
Used memory = (RSS = 227.558594Mb, VMS = 219.058594Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=37, end_step=38, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.732079300000004, solving_time=0.3703125000000007, total_time=2.102391800000005, memory=Memory(rss=227.55859375, vms=219.05859375), step_range=range(24, 39), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16320849999999965, solving_time=0.02506230000000187, total_time=0.18827080000000151, memory=Memory(rss=227.55859375, vms=219.05859375), step_range=range(38, 39), clingo_stats={'problem': {'lp': {'atoms': 52135.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 335467.0, 'bodies_tr': 335467.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2888.0, 'count_bodies_tr': 2888.0, 'sccs': 308.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6153.0, 'rules': 636890.0, 'rules_normal': 633798.0, 'rules_choice': 3078.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 636890.0, 'rules_tr_normal': 633798.0, 'rules_tr_choice': 3078.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 124868.0, 'eqs_atom': 26603.0, 'eqs_body': 4784.0, 'eqs_other': 93481.0}, 'lpStep': {'atoms': 3526.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24772.0, 'bodies_tr': 24772.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46501.0, 'rules_normal': 46305.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46501.0, 'rules_tr_normal': 46305.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7841.0, 'eqs_atom': 1854.0, 'eqs_body': 77.0, 'eqs_other': 5910.0}, 'generator': {'vars': 24993.0, 'vars_eliminated': 0.0, 'vars_frozen': 14736.0, 'constraints': 4640.0, 'constraints_binary': 180709.0, 'constraints_ternary': 23990.0, 'acyc_edges': 0.0, 'complexity': 210187.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1477.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 14.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.19046592712402344, 'cpu': 0.1875, 'solve': 0.0079803466796875, 'unsat': 0.0079803466796875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.1704750061035156, 'cpu': 2.390625, 'solve': 0.1644268035888672, 'unsat': 0.023824691772460938, 'sat': 0.05966377258300781}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4154.0, 'conflicts': 387.0, 'conflicts_analyzed': 351.0, 'restarts': 0.0, 'restarts_last': 30.0, 'extra': {'domain_choices': 0.0, 'models': 9.0, 'models_level': 1393.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 360.0, 'distributed_sum_lbd': 725.0, 'integrated': 1569.0, 'lemmas': 3210.0, 'lits_learnt': 39921.0, 'lemmas_binary': 215.0, 'lemmas_ternary': 163.0, 'cpu_time': 0.359375, 'integrated_imps': 549.0, 'integrated_jumps': 799.0, 'guiding_paths_lits': 11697.0, 'guiding_paths': 105.0, 'splits': 0.0, 'lemmas_conflict': 347.0, 'lemmas_loop': 1402.0, 'lemmas_other': 1461.0, 'lits_conflict': 4792.0, 'lits_loop': 11369.0, 'lits_other': 23760.0, 'jumps': {'jumps': 351.0, 'jumps_bounded': 22.0, 'levels': 1608.0, 'levels_bounded': 1086.0, 'max': 186.0, 'max_executed': 186.0, 'max_bounded': 183.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 38:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(24)]), ('plan_module', [Number(39), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.142410s.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055710s with result Satisfiable.

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.19811950000000067, Incremental time limit = None
Running cumulative time = 2.3005113000000055, Cumulative time limit = 1800
Used memory = (RSS = 232.527344Mb, VMS = 224.359375Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.874489s, Solving = 0.426022s, Total = 2.300511s, Memory = (RSS = 232.527344Mb, VMS = 224.359375Mb), Step range = [24-39]), Calls = 15
Final Model :: Total atoms = 9427, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=38, end_step=39, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.8744893000000022, solving_time=0.42602200000000323, total_time=2.3005113000000055, memory=Memory(rss=232.52734375, vms=224.359375), step_range=range(24, 40), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14240999999999815, solving_time=0.05570950000000252, total_time=0.19811950000000067, memory=Memory(rss=232.52734375, vms=224.359375), step_range=range(39, 40), clingo_stats={'problem': {'lp': {'atoms': 55673.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 360265.0, 'bodies_tr': 360265.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3090.0, 'count_bodies_tr': 3090.0, 'sccs': 333.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6747.0, 'rules': 683483.0, 'rules_normal': 680195.0, 'rules_choice': 3273.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 683483.0, 'rules_tr_normal': 680195.0, 'rules_tr_choice': 3273.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 132769.0, 'eqs_atom': 28469.0, 'eqs_body': 4861.0, 'eqs_other': 99439.0}, 'lpStep': {'atoms': 3538.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24798.0, 'bodies_tr': 24798.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46593.0, 'rules_normal': 46397.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46593.0, 'rules_tr_normal': 46397.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7901.0, 'eqs_atom': 1866.0, 'eqs_body': 77.0, 'eqs_other': 5958.0}, 'generator': {'vars': 27437.0, 'vars_eliminated': 0.0, 'vars_frozen': 16141.0, 'constraints': 5276.0, 'constraints_binary': 207196.0, 'constraints_ternary': 27481.0, 'acyc_edges': 0.0, 'complexity': 240887.0}}, 'solving': {'solvers': {'choices': 990.0, 'conflicts': 81.0, 'conflicts_analyzed': 81.0, 'restarts': 0.0, 'restarts_last': 41.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 328.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 70.0, 'distributed_sum_lbd': 212.0, 'integrated': 210.0, 'lemmas': 818.0, 'lits_learnt': 11156.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.15625, 'integrated_imps': 19.0, 'integrated_jumps': 175.0, 'guiding_paths_lits': 1575.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 81.0, 'lemmas_loop': 527.0, 'lemmas_other': 210.0, 'lits_conflict': 2742.0, 'lits_loop': 4804.0, 'lits_other': 3610.0, 'jumps': {'jumps': 81.0, 'jumps_bounded': 1.0, 'levels': 183.0, 'levels_bounded': 1.0, 'max': 38.0, 'max_executed': 38.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.20046615600585938, 'cpu': 0.328125, 'solve': 0.03188133239746094, 'unsat': 0.0, 'sat': 0.017919540405273438}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.370941162109375, 'cpu': 2.71875, 'solve': 0.19630813598632812, 'unsat': 0.023824691772460938, 'sat': 0.07758331298828125}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 5144.0, 'conflicts': 468.0, 'conflicts_analyzed': 432.0, 'restarts': 0.0, 'restarts_last': 41.0, 'extra': {'domain_choices': 0.0, 'models': 10.0, 'models_level': 1721.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 430.0, 'distributed_sum_lbd': 937.0, 'integrated': 1779.0, 'lemmas': 4028.0, 'lits_learnt': 51077.0, 'lemmas_binary': 221.0, 'lemmas_ternary': 163.0, 'cpu_time': 0.515625, 'integrated_imps': 568.0, 'integrated_jumps': 974.0, 'guiding_paths_lits': 13272.0, 'guiding_paths': 112.0, 'splits': 0.0, 'lemmas_conflict': 428.0, 'lemmas_loop': 1929.0, 'lemmas_other': 1671.0, 'lits_conflict': 7534.0, 'lits_loop': 16173.0, 'lits_other': 27370.0, 'jumps': {'jumps': 432.0, 'jumps_bounded': 23.0, 'levels': 1791.0, 'levels_bounded': 1087.0, 'max': 186.0, 'max_executed': 186.0, 'max_bounded': 183.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{13: 25, 14: 27, 15: 30, 16: 31, 17: 33, 18: 34, 19: 36, 20: 37, 21: 39}

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 22 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 10 ( 83.33% solved)

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(22, 39)', truth=True, inc_range=None)

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 22, step = 39]:
sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 22)

[03-01-2022_17-11-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 39:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(24)]), ('plan_module', [Number(40), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122359s.

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 40: original = External(symbol='current_last_sgoals(22, 39)', truth=True, inc_range=None), conversion = current_last_sgoals(22,39).

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.086728s with result Satisfiable.

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.20908760000000015, Incremental time limit = None
Running cumulative time = 2.5095989000000056, Cumulative time limit = 1800
Used memory = (RSS = 236.398438Mb, VMS = 226.839844Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.996849s, Solving = 0.512750s, Total = 2.509599s, Memory = (RSS = 236.398438Mb, VMS = 226.839844Mb), Step range = [24-40]), Calls = 16
Final Model :: Total atoms = 9807, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-01-2022_17-11-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=39, end_step=40, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.9968486000000016, solving_time=0.512750300000004, total_time=2.5095989000000056, memory=Memory(rss=236.3984375, vms=226.83984375), step_range=range(24, 41), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1223592999999994, solving_time=0.08672830000000076, total_time=0.20908760000000015, memory=Memory(rss=236.3984375, vms=226.83984375), step_range=range(40, 41), clingo_stats={'problem': {'lp': {'atoms': 59223.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 385088.0, 'bodies_tr': 385088.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3292.0, 'count_bodies_tr': 3292.0, 'sccs': 358.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7341.0, 'rules': 730167.0, 'rules_normal': 726683.0, 'rules_choice': 3468.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 730167.0, 'rules_tr_normal': 726683.0, 'rules_tr_choice': 3468.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 140732.0, 'eqs_atom': 30347.0, 'eqs_body': 4938.0, 'eqs_other': 105447.0}, 'lpStep': {'atoms': 3550.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24823.0, 'bodies_tr': 24823.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46684.0, 'rules_normal': 46488.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46684.0, 'rules_tr_normal': 46488.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7963.0, 'eqs_atom': 1878.0, 'eqs_body': 77.0, 'eqs_other': 6008.0}, 'generator': {'vars': 29881.0, 'vars_eliminated': 0.0, 'vars_frozen': 17546.0, 'constraints': 5912.0, 'constraints_binary': 233762.0, 'constraints_ternary': 30972.0, 'acyc_edges': 0.0, 'complexity': 271666.0}}, 'solving': {'solvers': {'choices': 1311.0, 'conflicts': 53.0, 'conflicts_analyzed': 53.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 349.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 47.0, 'distributed_sum_lbd': 64.0, 'integrated': 48.0, 'lemmas': 269.0, 'lits_learnt': 3481.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 21.0, 'integrated_jumps': 452.0, 'guiding_paths_lits': 1673.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 53.0, 'lemmas_loop': 168.0, 'lemmas_other': 48.0, 'lits_conflict': 623.0, 'lits_loop': 1526.0, 'lits_other': 1332.0, 'jumps': {'jumps': 53.0, 'jumps_bounded': 0.0, 'levels': 81.0, 'levels_bounded': 0.0, 'max': 10.0, 'max_executed': 10.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.2134265899658203, 'cpu': 0.28125, 'solve': 0.06682205200195312, 'unsat': 0.0, 'sat': 0.0069828033447265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.5843677520751953, 'cpu': 3.0, 'solve': 0.26313018798828125, 'unsat': 0.023824691772460938, 'sat': 0.08456611633300781}, 'models': {'enumerated': 11.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6455.0, 'conflicts': 521.0, 'conflicts_analyzed': 485.0, 'restarts': 0.0, 'restarts_last': 41.0, 'extra': {'domain_choices': 0.0, 'models': 11.0, 'models_level': 2070.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 477.0, 'distributed_sum_lbd': 1001.0, 'integrated': 1827.0, 'lemmas': 4297.0, 'lits_learnt': 54558.0, 'lemmas_binary': 221.0, 'lemmas_ternary': 163.0, 'cpu_time': 0.640625, 'integrated_imps': 589.0, 'integrated_jumps': 1426.0, 'guiding_paths_lits': 14945.0, 'guiding_paths': 119.0, 'splits': 0.0, 'lemmas_conflict': 481.0, 'lemmas_loop': 2097.0, 'lemmas_other': 1719.0, 'lits_conflict': 8157.0, 'lits_loop': 17699.0, 'lits_other': 28702.0, 'jumps': {'jumps': 485.0, 'jumps_bounded': 23.0, 'levels': 1872.0, 'levels_bounded': 1087.0, 'max': 186.0, 'max_executed': 186.0, 'max_bounded': 183.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-21] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{13: 25, 14: 27, 15: 30, 16: 31, 17: 33, 18: 34, 19: 36, 20: 37, 21: 39, 22: 40}

[03-01-2022_17-11-21] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 23 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 11 ( 91.67% solved)

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(23, 40)', truth=True, inc_range=None)

[03-01-2022_17-11-21] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 23, step = 40]:
sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 23)

[03-01-2022_17-11-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 40:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(24)]), ('plan_module', [Number(41), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124169s.

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 41: original = External(symbol='current_last_sgoals(23, 40)', truth=True, inc_range=None), conversion = current_last_sgoals(23,40).

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039741s with result Satisfiable.

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.16391079999999647, Incremental time limit = None
Running cumulative time = 2.673509700000002, Cumulative time limit = 1800
Used memory = (RSS = 243.585938Mb, VMS = 239.199219Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 12
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.121018s, Solving = 0.552492s, Total = 2.673510s, Memory = (RSS = 243.585938Mb, VMS = 239.199219Mb), Step range = [24-41]), Calls = 17
Final Model :: Total atoms = 10188, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[03-01-2022_17-11-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=40, end_step=41, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.121018099999999, solving_time=0.5524916000000033, total_time=2.673509700000002, memory=Memory(rss=243.5859375, vms=239.19921875), step_range=range(24, 42), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12416949999999716, solving_time=0.03974129999999931, total_time=0.16391079999999647, memory=Memory(rss=243.5859375, vms=239.19921875), step_range=range(41, 42), clingo_stats={'problem': {'lp': {'atoms': 62785.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 409927.0, 'bodies_tr': 409927.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3494.0, 'count_bodies_tr': 3494.0, 'sccs': 383.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7935.0, 'rules': 776933.0, 'rules_normal': 773253.0, 'rules_choice': 3663.0, 'rules_minimize': 17.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 776933.0, 'rules_tr_normal': 773253.0, 'rules_tr_choice': 3663.0, 'rules_tr_minimize': 17.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 148730.0, 'eqs_atom': 32228.0, 'eqs_body': 5015.0, 'eqs_other': 111487.0}, 'lpStep': {'atoms': 3562.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24839.0, 'bodies_tr': 24839.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46766.0, 'rules_normal': 46570.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46766.0, 'rules_tr_normal': 46570.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7998.0, 'eqs_atom': 1881.0, 'eqs_body': 77.0, 'eqs_other': 6040.0}, 'generator': {'vars': 32325.0, 'vars_eliminated': 0.0, 'vars_frozen': 18951.0, 'constraints': 6188.0, 'constraints_binary': 242603.0, 'constraints_ternary': 31342.0, 'acyc_edges': 0.0, 'complexity': 281191.0}}, 'solving': {'solvers': {'choices': 1042.0, 'conflicts': 14.0, 'conflicts_analyzed': 14.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 392.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 13.0, 'distributed_sum_lbd': 35.0, 'integrated': 50.0, 'lemmas': 194.0, 'lits_learnt': 3535.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 10.0, 'integrated_jumps': 151.0, 'guiding_paths_lits': 1771.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 14.0, 'lemmas_loop': 130.0, 'lemmas_other': 50.0, 'lits_conflict': 507.0, 'lits_loop': 1146.0, 'lits_other': 1882.0, 'jumps': {'jumps': 14.0, 'jumps_bounded': 3.0, 'levels': 34.0, 'levels_bounded': 3.0, 'max': 8.0, 'max_executed': 8.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.168548583984375, 'cpu': 0.265625, 'solve': 0.019947052001953125, 'unsat': 0.0, 'sat': 0.008977890014648438}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.7529163360595703, 'cpu': 3.265625, 'solve': 0.2830772399902344, 'unsat': 0.023824691772460938, 'sat': 0.09354400634765625}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 7497.0, 'conflicts': 535.0, 'conflicts_analyzed': 499.0, 'restarts': 0.0, 'restarts_last': 41.0, 'extra': {'domain_choices': 0.0, 'models': 12.0, 'models_level': 2462.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 490.0, 'distributed_sum_lbd': 1036.0, 'integrated': 1877.0, 'lemmas': 4491.0, 'lits_learnt': 58093.0, 'lemmas_binary': 227.0, 'lemmas_ternary': 163.0, 'cpu_time': 0.765625, 'integrated_imps': 599.0, 'integrated_jumps': 1577.0, 'guiding_paths_lits': 16716.0, 'guiding_paths': 126.0, 'splits': 0.0, 'lemmas_conflict': 495.0, 'lemmas_loop': 2227.0, 'lemmas_other': 1769.0, 'lits_conflict': 8664.0, 'lits_loop': 18845.0, 'lits_other': 30584.0, 'jumps': {'jumps': 499.0, 'jumps_bounded': 26.0, 'levels': 1906.0, 'levels_bounded': 1090.0, 'max': 186.0, 'max_executed': 186.0, 'max_bounded': 183.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-21] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{13: 25, 14: 27, 15: 30, 16: 31, 17: 33, 18: 34, 19: 36, 20: 37, 21: 39, 22: 40, 23: 41}

[03-01-2022_17-11-21] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 24 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 12 (100.00% solved)

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(24, 41)', truth=True, inc_range=None)

[03-01-2022_17-11-21] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 24, step = 41]:
sub_goal(2, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 24)

[03-01-2022_17-11-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 41:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     36 : Maximum =    100

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(24)]), ('plan_module', [Number(42), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(24), Number(13), Number(24), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.134747s.

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 42: original = External(symbol='current_last_sgoals(24, 41)', truth=True, inc_range=None), conversion = current_last_sgoals(24,41).

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040470s with result Satisfiable.

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.17521690000000234, Incremental time limit = None
Running cumulative time = 2.8487266000000044, Cumulative time limit = 1800
Used memory = (RSS = 248.234375Mb, VMS = 242.605469Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 13
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.255765s, Solving = 0.592961s, Total = 2.848727s, Memory = (RSS = 248.234375Mb, VMS = 242.605469Mb), Step range = [24-42]), Calls = 18
Final Model :: Total atoms = 10571, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=41, end_step=42, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.255765200000001, solving_time=0.5929614000000036, total_time=2.8487266000000044, memory=Memory(rss=248.234375, vms=242.60546875), step_range=range(24, 43), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.134747100000002, solving_time=0.04046980000000033, total_time=0.17521690000000234, memory=Memory(rss=248.234375, vms=242.60546875), step_range=range(42, 43), clingo_stats={'problem': {'lp': {'atoms': 66350.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 434791.0, 'bodies_tr': 434791.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3696.0, 'count_bodies_tr': 3696.0, 'sccs': 408.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8529.0, 'rules': 823790.0, 'rules_normal': 819914.0, 'rules_choice': 3858.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 823790.0, 'rules_tr_normal': 819914.0, 'rules_tr_choice': 3858.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 156790.0, 'eqs_atom': 34121.0, 'eqs_body': 5092.0, 'eqs_other': 117577.0}, 'lpStep': {'atoms': 3565.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24864.0, 'bodies_tr': 24864.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46857.0, 'rules_normal': 46661.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46857.0, 'rules_tr_normal': 46661.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8060.0, 'eqs_atom': 1893.0, 'eqs_body': 77.0, 'eqs_other': 6090.0}, 'generator': {'vars': 34769.0, 'vars_eliminated': 0.0, 'vars_frozen': 20356.0, 'constraints': 6824.0, 'constraints_binary': 269351.0, 'constraints_ternary': 35301.0, 'acyc_edges': 0.0, 'complexity': 312620.0}}, 'solving': {'solvers': {'choices': 960.0, 'conflicts': 5.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 387.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 11.0, 'integrated': 24.0, 'lemmas': 63.0, 'lits_learnt': 2126.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 7.0, 'integrated_jumps': 62.0, 'guiding_paths_lits': 1869.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 34.0, 'lemmas_other': 24.0, 'lits_conflict': 320.0, 'lits_loop': 312.0, 'lits_other': 1494.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 1.0, 'levels': 9.0, 'levels_bounded': 1.0, 'max': 4.0, 'max_executed': 4.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1795215606689453, 'cpu': 0.28125, 'solve': 0.021942138671875, 'unsat': 0.0, 'sat': 0.009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.9324378967285156, 'cpu': 3.546875, 'solve': 0.3050193786621094, 'unsat': 0.023824691772460938, 'sat': 0.10351943969726562}, 'models': {'enumerated': 13.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 8457.0, 'conflicts': 540.0, 'conflicts_analyzed': 504.0, 'restarts': 0.0, 'restarts_last': 41.0, 'extra': {'domain_choices': 0.0, 'models': 13.0, 'models_level': 2849.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 494.0, 'distributed_sum_lbd': 1047.0, 'integrated': 1901.0, 'lemmas': 4554.0, 'lits_learnt': 60219.0, 'lemmas_binary': 227.0, 'lemmas_ternary': 163.0, 'cpu_time': 0.890625, 'integrated_imps': 606.0, 'integrated_jumps': 1639.0, 'guiding_paths_lits': 18585.0, 'guiding_paths': 133.0, 'splits': 0.0, 'lemmas_conflict': 500.0, 'lemmas_loop': 2261.0, 'lemmas_other': 1793.0, 'lits_conflict': 8984.0, 'lits_loop': 19157.0, 'lits_other': 32078.0, 'jumps': {'jumps': 504.0, 'jumps_bounded': 27.0, 'levels': 1915.0, 'levels_bounded': 1091.0, 'max': 186.0, 'max_executed': 186.0, 'max_bounded': 183.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-21] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{13: 25, 14: 27, 15: 30, 16: 31, 17: 33, 18: 34, 19: 36, 20: 37, 21: 39, 22: 40, 23: 41, 24: 42}

[03-01-2022_17-11-21] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 25 achieved :: Progression >> total requested sgoals = 12, current total achieved sgoals = 13 (108.33% solved)

[03-01-2022_17-11-21] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 24 was achieved successfully.

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.199065s, Solving = 0.019009s, Total = 0.218074s, Memory = (RSS = 174.074219Mb, VMS = 163.261719Mb), Step range = [24-25]
2 : Statistics :: Grounding = 0.082487s, Solving = 0.006396s, Total = 0.088883s, Memory = (RSS = 176.351562Mb, VMS = 166.371094Mb), Step range = [26-26]
3 : Statistics :: Grounding = 0.083922s, Solving = 0.020855s, Total = 0.104777s, Memory = (RSS = 178.082031Mb, VMS = 167.871094Mb), Step range = [27-27]
4 : Statistics :: Grounding = 0.132873s, Solving = 0.008438s, Total = 0.141311s, Memory = (RSS = 180.695312Mb, VMS = 171.726562Mb), Step range = [28-28]
5 : Statistics :: Grounding = 0.097180s, Solving = 0.012288s, Total = 0.109468s, Memory = (RSS = 182.386719Mb, VMS = 173.414062Mb), Step range = [29-29]
6 : Statistics :: Grounding = 0.121744s, Solving = 0.025858s, Total = 0.147602s, Memory = (RSS = 187.898438Mb, VMS = 180.031250Mb), Step range = [30-30]
7 : Statistics :: Grounding = 0.098023s, Solving = 0.032774s, Total = 0.130797s, Memory = (RSS = 191.007812Mb, VMS = 182.195312Mb), Step range = [31-31]
8 : Statistics :: Grounding = 0.159187s, Solving = 0.023768s, Total = 0.182955s, Memory = (RSS = 199.136719Mb, VMS = 191.617188Mb), Step range = [32-32]
9 : Statistics :: Grounding = 0.136009s, Solving = 0.044271s, Total = 0.180280s, Memory = (RSS = 202.476562Mb, VMS = 193.347656Mb), Step range = [33-33]
10 : Statistics :: Grounding = 0.101802s, Solving = 0.043289s, Total = 0.145091s, Memory = (RSS = 211.265625Mb, VMS = 203.695312Mb), Step range = [34-34]
11 : Statistics :: Grounding = 0.139358s, Solving = 0.032509s, Total = 0.171867s, Memory = (RSS = 213.996094Mb, VMS = 205.144531Mb), Step range = [35-35]
12 : Statistics :: Grounding = 0.110297s, Solving = 0.045122s, Total = 0.155418s, Memory = (RSS = 223.769531Mb, VMS = 218.281250Mb), Step range = [36-36]
13 : Statistics :: Grounding = 0.106925s, Solving = 0.030673s, Total = 0.137598s, Memory = (RSS = 225.785156Mb, VMS = 218.792969Mb), Step range = [37-37]
14 : Statistics :: Grounding = 0.163208s, Solving = 0.025062s, Total = 0.188271s, Memory = (RSS = 227.558594Mb, VMS = 219.058594Mb), Step range = [38-38]
15 : Statistics :: Grounding = 0.142410s, Solving = 0.055710s, Total = 0.198120s, Memory = (RSS = 232.527344Mb, VMS = 224.359375Mb), Step range = [39-39]
16 : Statistics :: Grounding = 0.122359s, Solving = 0.086728s, Total = 0.209088s, Memory = (RSS = 236.398438Mb, VMS = 226.839844Mb), Step range = [40-40]
17 : Statistics :: Grounding = 0.124169s, Solving = 0.039741s, Total = 0.163911s, Memory = (RSS = 243.585938Mb, VMS = 239.199219Mb), Step range = [41-41]
18 : Statistics :: Grounding = 0.134747s, Solving = 0.040470s, Total = 0.175217s, Memory = (RSS = 248.234375Mb, VMS = 242.605469Mb), Step range = [42-42]

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.848727s due to: External generator exit.

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-01-2022_17-11-21] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 18, 6: 19, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 15, 29: 15, 30: 15, 31: 16, 32: 16, 33: 17, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 27, 15: 30, 16: 32, 17: 33, 18: 34, 19: 36, 20: 37, 21: 39, 22: 40, 23: 41, 24: 42}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 18, 6: 19, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 24, Last requested goal index = 24, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.255765s, Solving = 0.592961s, Total = 2.848727s, Memory = (RSS = 248.234375Mb, VMS = 242.605469Mb), Step range = [24-42]), Calls = 18
Model :: Total atoms = 10571, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 18 :: Actions = 18                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 29:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 30:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 31:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 32:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 33:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 34:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 39:
    Current Sub-goals:
        [Index = 21] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 21] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 22] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 41:
    Current Sub-goals:
        [Index = 23] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 23] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 42:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 1 solved.

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Online planning increment 2 finished.

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 10 : Goals unachieved = 10 : Complete = False
Level = 1 : Solved problems = 2 : Total constraining sub-goal stages = 24 : Goals achieved = 24 : Goals unachieved = 0 : Complete = False

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 3 by method ground-first is [1-2].

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 2 at level 2:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 20, Sub-goal Stage Range = [1-20]
Division points [total=1] : [(Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [11-20]

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [11-20], problem number = 2, increment number = 3

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 11)
	('last_sgoals', 20)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000018B1F48BE80>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 100)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 11
last_sgoals = 20
start_step = 24
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 33

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
Level = 2
Concurrency = disabled
Problem Type = partial conformance refinement (sequential) with sgoals range [11-20]
Minimum search length bound = disabled with value 33

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[03-01-2022_17-11-22] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-01-2022_17-11-22] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 24 as problem start state.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 24})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 24})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 24})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 24})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 24})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 24})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 24})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'S': 24})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 24})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 24})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 24})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 24})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 24})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 24})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 24})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 24})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 24})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 24})

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 24).
holds(2, complete_tower(red,puzzle_room_table), false, 24).
holds(2, configuration(manipulator_arm_1), extended, 24).
holds(2, configuration(manipulator_arm_2), extended, 24).
holds(2, configuration(puzzle_room_door), open, 24).
holds(2, configuration(starting_room_door), closed, 24).
holds(2, configuration(store_room_door), open, 24).
holds(2, grasping(manipulator_arm_1), nothing, 24).
holds(2, grasping(manipulator_arm_2), (block,2), 24).
holds(2, in((block,1)), puzzle_room, 24).
holds(2, in((block,2)), puzzle_room, 24).
holds(2, in((block,3)), puzzle_room, 24).
holds(2, in((block,4)), store_room, 24).
holds(2, in((block,5)), store_room, 24).
holds(2, in((block,6)), puzzle_room, 24).
holds(2, in(manipulator_arm_1), puzzle_room, 24).
holds(2, in(manipulator_arm_2), puzzle_room, 24).
holds(2, in(puzzle_room_table), puzzle_room, 24).
holds(2, in(talos), puzzle_room, 24).
holds(2, in_tower((block,1),(block,1)), true, 24).
holds(2, in_tower((block,1),(block,2)), false, 24).
holds(2, in_tower((block,1),(block,3)), false, 24).
holds(2, in_tower((block,1),(block,4)), false, 24).
holds(2, in_tower((block,1),(block,5)), false, 24).
holds(2, in_tower((block,1),(block,6)), false, 24).
holds(2, in_tower((block,2),(block,1)), false, 24).
holds(2, in_tower((block,2),(block,2)), false, 24).
holds(2, in_tower((block,2),(block,3)), false, 24).
holds(2, in_tower((block,2),(block,4)), false, 24).
holds(2, in_tower((block,2),(block,5)), false, 24).
holds(2, in_tower((block,2),(block,6)), false, 24).
holds(2, in_tower((block,3),(block,1)), false, 24).
holds(2, in_tower((block,3),(block,2)), true, 24).
holds(2, in_tower((block,3),(block,3)), true, 24).
holds(2, in_tower((block,3),(block,4)), false, 24).
holds(2, in_tower((block,3),(block,5)), false, 24).
holds(2, in_tower((block,3),(block,6)), false, 24).
holds(2, in_tower((block,4),(block,1)), false, 24).
holds(2, in_tower((block,4),(block,2)), false, 24).
holds(2, in_tower((block,4),(block,3)), false, 24).
holds(2, in_tower((block,4),(block,4)), false, 24).
holds(2, in_tower((block,4),(block,5)), false, 24).
holds(2, in_tower((block,4),(block,6)), false, 24).
holds(2, in_tower((block,5),(block,1)), false, 24).
holds(2, in_tower((block,5),(block,2)), false, 24).
holds(2, in_tower((block,5),(block,3)), false, 24).
holds(2, in_tower((block,5),(block,4)), false, 24).
holds(2, in_tower((block,5),(block,5)), false, 24).
holds(2, in_tower((block,5),(block,6)), false, 24).
holds(2, in_tower((block,6),(block,1)), false, 24).
holds(2, in_tower((block,6),(block,2)), false, 24).
holds(2, in_tower((block,6),(block,3)), false, 24).
holds(2, in_tower((block,6),(block,4)), false, 24).
holds(2, in_tower((block,6),(block,5)), false, 24).
holds(2, in_tower((block,6),(block,6)), true, 24).
holds(2, on((block,1)), puzzle_room_table, 24).
holds(2, on((block,2)), (block,3), 24).
holds(2, on((block,3)), puzzle_room_table, 24).
holds(2, on((block,4)), nothing, 24).
holds(2, on((block,5)), nothing, 24).
holds(2, on((block,6)), puzzle_room_table, 24).
holds(2, tower_base((block,1),puzzle_room_table), true, 24).
holds(2, tower_base((block,2),puzzle_room_table), false, 24).
holds(2, tower_base((block,3),puzzle_room_table), true, 24).
holds(2, tower_base((block,4),puzzle_room_table), false, 24).
holds(2, tower_base((block,5),puzzle_room_table), false, 24).
holds(2, tower_base((block,6),puzzle_room_table), true, 24).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 24).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 24).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 24).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 24).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 24).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 24).
holds(3, complete_tower(blue,puzzle_room_table), false, 24).
holds(3, complete_tower(red,puzzle_room_table), false, 24).
holds(3, grasping(manipulator_arm_1), nothing, 24).
holds(3, grasping(manipulator_arm_2), (block,2), 24).
holds(3, in((block,1)), puzzle_room, 24).
holds(3, in((block,2)), puzzle_room, 24).
holds(3, in((block,3)), puzzle_room, 24).
holds(3, in((block,4)), store_room, 24).
holds(3, in((block,5)), store_room, 24).
holds(3, in((block,6)), puzzle_room, 24).
holds(3, in(manipulator_arm_1), puzzle_room, 24).
holds(3, in(manipulator_arm_2), puzzle_room, 24).
holds(3, in(puzzle_room_table), puzzle_room, 24).
holds(3, in(talos), puzzle_room, 24).
holds(3, in_tower((block,1),(block,1)), true, 24).
holds(3, in_tower((block,1),(block,2)), false, 24).
holds(3, in_tower((block,1),(block,3)), false, 24).
holds(3, in_tower((block,1),(block,4)), false, 24).
holds(3, in_tower((block,1),(block,5)), false, 24).
holds(3, in_tower((block,1),(block,6)), false, 24).
holds(3, in_tower((block,2),(block,1)), false, 24).
holds(3, in_tower((block,2),(block,2)), false, 24).
holds(3, in_tower((block,2),(block,3)), false, 24).
holds(3, in_tower((block,2),(block,4)), false, 24).
holds(3, in_tower((block,2),(block,5)), false, 24).
holds(3, in_tower((block,2),(block,6)), false, 24).
holds(3, in_tower((block,3),(block,1)), false, 24).
holds(3, in_tower((block,3),(block,2)), true, 24).
holds(3, in_tower((block,3),(block,3)), true, 24).
holds(3, in_tower((block,3),(block,4)), false, 24).
holds(3, in_tower((block,3),(block,5)), false, 24).
holds(3, in_tower((block,3),(block,6)), false, 24).
holds(3, in_tower((block,4),(block,1)), false, 24).
holds(3, in_tower((block,4),(block,2)), false, 24).
holds(3, in_tower((block,4),(block,3)), false, 24).
holds(3, in_tower((block,4),(block,4)), false, 24).
holds(3, in_tower((block,4),(block,5)), false, 24).
holds(3, in_tower((block,4),(block,6)), false, 24).
holds(3, in_tower((block,5),(block,1)), false, 24).
holds(3, in_tower((block,5),(block,2)), false, 24).
holds(3, in_tower((block,5),(block,3)), false, 24).
holds(3, in_tower((block,5),(block,4)), false, 24).
holds(3, in_tower((block,5),(block,5)), false, 24).
holds(3, in_tower((block,5),(block,6)), false, 24).
holds(3, in_tower((block,6),(block,1)), false, 24).
holds(3, in_tower((block,6),(block,2)), false, 24).
holds(3, in_tower((block,6),(block,3)), false, 24).
holds(3, in_tower((block,6),(block,4)), false, 24).
holds(3, in_tower((block,6),(block,5)), false, 24).
holds(3, in_tower((block,6),(block,6)), true, 24).
holds(3, on((block,1)), puzzle_room_table, 24).
holds(3, on((block,2)), (block,3), 24).
holds(3, on((block,3)), puzzle_room_table, 24).
holds(3, on((block,4)), nothing, 24).
holds(3, on((block,5)), nothing, 24).
holds(3, on((block,6)), puzzle_room_table, 24).
holds(3, tower_base((block,1),puzzle_room_table), true, 24).
holds(3, tower_base((block,2),puzzle_room_table), false, 24).
holds(3, tower_base((block,3),puzzle_room_table), true, 24).
holds(3, tower_base((block,4),puzzle_room_table), false, 24).
holds(3, tower_base((block,5),puzzle_room_table), false, 24).
holds(3, tower_base((block,6),puzzle_room_table), true, 24).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 24).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 24).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 24).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 24).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 24).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 24).

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 13})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 14})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 15})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 16})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 17})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 18})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 19})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 20})

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(3, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 11).
sub_goal(3, talos, move(store_room), in(talos), store_room, 12).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 13).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 14).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 15).
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 16).
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 17).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 18).
sub_goal(3, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 19).
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 20).

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000018B1F45FAF0>]
	incrementor = SolveIncrementor(step_start=24, step_increase=1, step_increase_initial=2, step_end_min=34, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 24), range_=None), IncPart(name='plan_module', args=('#inc', 24, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 24, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 24, 11, 20, 'sequential', 'true'), range_=None)]

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 796 rules

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004092599999999891s

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.023432s.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005581s with result Satisfiable.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000018B25479BD0>

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 24)
	('last_sgoals', 20)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000018B1F48BE80>)
	('first_sgoals', 11)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000018B25479BD0>)

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 25)', truth=True, inc_range=None)

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 24). %* None *%
#program plan_module(#inc, 24, false, false). %* None *%
#program optimisation_module(#inc, 24, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 24, 11, 20, sequential, true). %* None *%

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     23 : Current =     25
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(24), Number(24)]), ('plan_module', [Number(24), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(25), Number(24)]), ('plan_module', [Number(25), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.074256s.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(11, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(11,25).

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 25: original = External(symbol='current_last_sgoals(11, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(11,25).

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023250s with result Satisfiable.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09750659999999911, Incremental time limit = None
Running cumulative time = 0.09750659999999911, Cumulative time limit = 1800
Used memory = (RSS = 182.800781Mb, VMS = 172.445312Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.074256s, Solving = 0.023250s, Total = 0.097507s, Memory = (RSS = 182.800781Mb, VMS = 172.445312Mb), Step range = [24-25]), Calls = 1
Final Model :: Total atoms = 3623, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=23, end_step=25, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.07425639999999945, solving_time=0.023250199999999666, total_time=0.09750659999999911, memory=Memory(rss=182.80078125, vms=172.4453125), step_range=range(24, 26), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07425639999999945, solving_time=0.023250199999999666, total_time=0.09750659999999911, memory=Memory(rss=182.80078125, vms=172.4453125), step_range=range(24, 26), clingo_stats={'problem': {'lp': {'atoms': 8430.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16849.0, 'bodies_tr': 16849.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 227.0, 'count_bodies_tr': 227.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 358.0, 'rules': 34806.0, 'rules_normal': 34474.0, 'rules_choice': 331.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 34806.0, 'rules_tr_normal': 34474.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11416.0, 'eqs_atom': 3470.0, 'eqs_body': 1156.0, 'eqs_other': 6790.0}, 'lpStep': {'atoms': 3933.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15665.0, 'bodies_tr': 15665.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 227.0, 'count_bodies_tr': 227.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 358.0, 'rules': 29950.0, 'rules_normal': 29618.0, 'rules_choice': 331.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 29950.0, 'rules_tr_normal': 29618.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5254.0, 'eqs_atom': 1187.0, 'eqs_body': 383.0, 'eqs_other': 3684.0}, 'generator': {'vars': 1758.0, 'vars_eliminated': 0.0, 'vars_frozen': 1154.0, 'constraints': 33.0, 'constraints_binary': 1206.0, 'constraints_ternary': 141.0, 'acyc_edges': 0.0, 'complexity': 1394.0}}, 'solving': {'solvers': {'choices': 177.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 37.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 36.0, 'lemmas': 46.0, 'lits_learnt': 46.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 36.0, 'integrated_jumps': 81.0, 'guiding_paths_lits': 200.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 36.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 36.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.09674263000488281, 'cpu': 0.09375, 'solve': 0.009973526000976562, 'unsat': 0.0, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.13113021850585938, 'cpu': 0.125, 'solve': 0.013963699340820312, 'unsat': 0.0, 'sat': 0.0049915313720703125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 177.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 38.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 36.0, 'lemmas': 46.0, 'lits_learnt': 46.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 36.0, 'integrated_jumps': 81.0, 'guiding_paths_lits': 208.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 36.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 36.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{11: 25}

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 2 ( 20.00% solved)

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 25)', truth=True, inc_range=None)

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 25]:
sub_goal(3, talos, move(store_room), in(talos), store_room, 12)

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 25:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(24)]), ('plan_module', [Number(26), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082116s.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 26: original = External(symbol='current_last_sgoals(12, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(12,25).

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007002s with result Unsatisfiable.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.0891175000000004, Incremental time limit = None
Running cumulative time = 0.18662409999999952, Cumulative time limit = 1800
Used memory = (RSS = 184.695312Mb, VMS = 174.511719Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=25, end_step=26, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.1563718999999999, solving_time=0.03025219999999962, total_time=0.18662409999999952, memory=Memory(rss=184.6953125, vms=174.51171875), step_range=range(24, 27), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08211550000000045, solving_time=0.007001999999999953, total_time=0.0891175000000004, memory=Memory(rss=184.6953125, vms=174.51171875), step_range=range(26, 27), clingo_stats={'problem': {'lp': {'atoms': 10042.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 30297.0, 'bodies_tr': 30297.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 408.0, 'count_bodies_tr': 408.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 442.0, 'rules': 60274.0, 'rules_normal': 59789.0, 'rules_choice': 483.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 60274.0, 'rules_tr_normal': 59789.0, 'rules_tr_choice': 483.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 14359.0, 'eqs_atom': 3962.0, 'eqs_body': 1511.0, 'eqs_other': 8886.0}, 'lpStep': {'atoms': 1612.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13448.0, 'bodies_tr': 13448.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 11.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 84.0, 'rules': 25468.0, 'rules_normal': 25315.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 25468.0, 'rules_tr_normal': 25315.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2943.0, 'eqs_atom': 492.0, 'eqs_body': 355.0, 'eqs_other': 2096.0}, 'generator': {'vars': 2222.0, 'vars_eliminated': 0.0, 'vars_frozen': 1483.0, 'constraints': 118.0, 'constraints_binary': 3080.0, 'constraints_ternary': 318.0, 'acyc_edges': 0.0, 'complexity': 3552.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 148.0, 'guiding_paths': 4.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.08974456787109375, 'cpu': 0.0625, 'solve': 0.0019969940185546875, 'unsat': 0.0019969940185546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.22087478637695312, 'cpu': 0.1875, 'solve': 0.015960693359375, 'unsat': 0.0019969940185546875, 'sat': 0.0049915313720703125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 177.0, 'conflicts': 9.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 38.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 36.0, 'lemmas': 46.0, 'lits_learnt': 46.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 36.0, 'integrated_jumps': 81.0, 'guiding_paths_lits': 356.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 36.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 36.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(24)]), ('plan_module', [Number(27), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.073139s.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011872s with result Unsatisfiable.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08501120000000384, Incremental time limit = None
Running cumulative time = 0.27163530000000335, Cumulative time limit = 1800
Used memory = (RSS = 186.660156Mb, VMS = 176.984375Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=26, end_step=27, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.22951090000000107, solving_time=0.04212440000000228, total_time=0.27163530000000335, memory=Memory(rss=186.66015625, vms=176.984375), step_range=range(24, 28), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07313900000000118, solving_time=0.011872200000002664, total_time=0.08501120000000384, memory=Memory(rss=186.66015625, vms=176.984375), step_range=range(27, 28), clingo_stats={'problem': {'lp': {'atoms': 11822.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 44133.0, 'bodies_tr': 44133.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 589.0, 'count_bodies_tr': 589.0, 'sccs': 45.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 86284.0, 'rules_normal': 85646.0, 'rules_choice': 635.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 86284.0, 'rules_tr_normal': 85646.0, 'rules_tr_choice': 635.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 18309.0, 'eqs_atom': 4703.0, 'eqs_body': 1795.0, 'eqs_other': 11811.0}, 'lpStep': {'atoms': 1780.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13836.0, 'bodies_tr': 13836.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 14.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 148.0, 'rules': 26010.0, 'rules_normal': 25857.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 26010.0, 'rules_tr_normal': 25857.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3950.0, 'eqs_atom': 741.0, 'eqs_body': 284.0, 'eqs_other': 2925.0}, 'generator': {'vars': 3024.0, 'vars_eliminated': 0.0, 'vars_frozen': 2001.0, 'constraints': 345.0, 'constraints_binary': 8520.0, 'constraints_ternary': 1019.0, 'acyc_edges': 0.0, 'complexity': 9974.0}}, 'solving': {'solvers': {'choices': 10.0, 'conflicts': 11.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 14.0, 'integrated': 19.0, 'lemmas': 27.0, 'lits_learnt': 62.0, 'lemmas_binary': 20.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 3.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 294.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 4.0, 'lemmas_loop': 4.0, 'lemmas_other': 19.0, 'lits_conflict': 10.0, 'lits_loop': 8.0, 'lits_other': 44.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 4.0, 'levels': 109.0, 'levels_bounded': 100.0, 'max': 51.0, 'max_executed': 3.0, 'max_bounded': 49.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.08577346801757812, 'cpu': 0.078125, 'solve': 0.0039615631103515625, 'unsat': 0.0039615631103515625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.30664825439453125, 'cpu': 0.265625, 'solve': 0.019922256469726562, 'unsat': 0.00595855712890625, 'sat': 0.0049915313720703125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 187.0, 'conflicts': 20.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 38.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 15.0, 'distributed_sum_lbd': 21.0, 'integrated': 55.0, 'lemmas': 73.0, 'lits_learnt': 108.0, 'lemmas_binary': 20.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 39.0, 'integrated_jumps': 82.0, 'guiding_paths_lits': 650.0, 'guiding_paths': 26.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 7.0, 'lemmas_other': 55.0, 'lits_conflict': 17.0, 'lits_loop': 11.0, 'lits_other': 80.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 4.0, 'levels': 116.0, 'levels_bounded': 100.0, 'max': 51.0, 'max_executed': 3.0, 'max_bounded': 49.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 27:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(24)]), ('plan_module', [Number(28), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.094303s.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013085s with result Unsatisfiable.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10738760000000269, Incremental time limit = None
Running cumulative time = 0.37902290000000605, Cumulative time limit = 1800
Used memory = (RSS = 187.863281Mb, VMS = 177.832031Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=27, end_step=28, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.3238138000000035, solving_time=0.055209100000002564, total_time=0.37902290000000605, memory=Memory(rss=187.86328125, vms=177.83203125), step_range=range(24, 29), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09430290000000241, solving_time=0.013084700000000282, total_time=0.10738760000000269, memory=Memory(rss=187.86328125, vms=177.83203125), step_range=range(28, 29), clingo_stats={'problem': {'lp': {'atoms': 13932.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 58243.0, 'bodies_tr': 58243.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 770.0, 'count_bodies_tr': 770.0, 'sccs': 59.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 738.0, 'rules': 112625.0, 'rules_normal': 111834.0, 'rules_choice': 787.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 112625.0, 'rules_tr_normal': 111834.0, 'rules_tr_choice': 787.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 22604.0, 'eqs_atom': 5474.0, 'eqs_body': 2083.0, 'eqs_other': 15047.0}, 'lpStep': {'atoms': 2110.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14110.0, 'bodies_tr': 14110.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 14.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 148.0, 'rules': 26341.0, 'rules_normal': 26188.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 26341.0, 'rules_tr_normal': 26188.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4295.0, 'eqs_atom': 771.0, 'eqs_body': 288.0, 'eqs_other': 3236.0}, 'generator': {'vars': 3847.0, 'vars_eliminated': 0.0, 'vars_frozen': 2524.0, 'constraints': 543.0, 'constraints_binary': 13023.0, 'constraints_ternary': 1424.0, 'acyc_edges': 0.0, 'complexity': 15134.0}}, 'solving': {'solvers': {'choices': 211.0, 'conflicts': 21.0, 'conflicts_analyzed': 13.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 15.0, 'distributed_sum_lbd': 34.0, 'integrated': 79.0, 'lemmas': 95.0, 'lits_learnt': 347.0, 'lemmas_binary': 31.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.0, 'integrated_imps': 43.0, 'integrated_jumps': 135.0, 'guiding_paths_lits': 427.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 7.0, 'lemmas_other': 75.0, 'lits_conflict': 48.0, 'lits_loop': 29.0, 'lits_other': 270.0, 'jumps': {'jumps': 13.0, 'jumps_bounded': 5.0, 'levels': 81.0, 'levels_bounded': 5.0, 'max': 21.0, 'max_executed': 21.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.10871124267578125, 'cpu': 0.109375, 'solve': 0.0039920806884765625, 'unsat': 0.0039920806884765625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4153594970703125, 'cpu': 0.375, 'solve': 0.023914337158203125, 'unsat': 0.009950637817382812, 'sat': 0.0049915313720703125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 398.0, 'conflicts': 41.0, 'conflicts_analyzed': 24.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 38.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 30.0, 'distributed_sum_lbd': 55.0, 'integrated': 134.0, 'lemmas': 168.0, 'lits_learnt': 455.0, 'lemmas_binary': 51.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.015625, 'integrated_imps': 82.0, 'integrated_jumps': 217.0, 'guiding_paths_lits': 1077.0, 'guiding_paths': 33.0, 'splits': 0.0, 'lemmas_conflict': 24.0, 'lemmas_loop': 14.0, 'lemmas_other': 130.0, 'lits_conflict': 65.0, 'lits_loop': 40.0, 'lits_other': 350.0, 'jumps': {'jumps': 24.0, 'jumps_bounded': 9.0, 'levels': 197.0, 'levels_bounded': 105.0, 'max': 51.0, 'max_executed': 21.0, 'max_bounded': 49.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 28:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(24)]), ('plan_module', [Number(29), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.104838s.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013295s with result Satisfiable.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11813319999999905, Incremental time limit = None
Running cumulative time = 0.4971561000000051, Cumulative time limit = 1800
Used memory = (RSS = 191.511719Mb, VMS = 181.886719Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.428652s, Solving = 0.068504s, Total = 0.497156s, Memory = (RSS = 191.511719Mb, VMS = 181.886719Mb), Step range = [24-29]), Calls = 5
Final Model :: Total atoms = 4955, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=28, end_step=29, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.42865200000000314, solving_time=0.06850410000000196, total_time=0.4971561000000051, memory=Memory(rss=191.51171875, vms=181.88671875), step_range=range(24, 30), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10483819999999966, solving_time=0.01329499999999939, total_time=0.11813319999999905, memory=Memory(rss=191.51171875, vms=181.88671875), step_range=range(29, 30), clingo_stats={'problem': {'lp': {'atoms': 16053.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 72515.0, 'bodies_tr': 72515.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 951.0, 'count_bodies_tr': 951.0, 'sccs': 75.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 910.0, 'rules': 139428.0, 'rules_normal': 138484.0, 'rules_choice': 939.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139428.0, 'rules_tr_normal': 138484.0, 'rules_tr_choice': 939.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 26981.0, 'eqs_atom': 6532.0, 'eqs_body': 2389.0, 'eqs_other': 18060.0}, 'lpStep': {'atoms': 2121.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14272.0, 'bodies_tr': 14272.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 16.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 172.0, 'rules': 26803.0, 'rules_normal': 26650.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 26803.0, 'rules_tr_normal': 26650.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4377.0, 'eqs_atom': 1058.0, 'eqs_body': 306.0, 'eqs_other': 3013.0}, 'generator': {'vars': 4835.0, 'vars_eliminated': 0.0, 'vars_frozen': 3147.0, 'constraints': 799.0, 'constraints_binary': 20354.0, 'constraints_ternary': 2439.0, 'acyc_edges': 0.0, 'complexity': 23798.0}}, 'solving': {'solvers': {'choices': 598.0, 'conflicts': 40.0, 'conflicts_analyzed': 40.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 111.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 40.0, 'distributed_sum_lbd': 68.0, 'integrated': 151.0, 'lemmas': 210.0, 'lits_learnt': 781.0, 'lemmas_binary': 31.0, 'lemmas_ternary': 20.0, 'cpu_time': 0.03125, 'integrated_imps': 74.0, 'integrated_jumps': 284.0, 'guiding_paths_lits': 511.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 38.0, 'lemmas_loop': 52.0, 'lemmas_other': 120.0, 'lits_conflict': 126.0, 'lits_loop': 247.0, 'lits_other': 408.0, 'jumps': {'jumps': 40.0, 'jumps_bounded': 2.0, 'levels': 65.0, 'levels_bounded': 2.0, 'max': 7.0, 'max_executed': 7.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.11865234375, 'cpu': 0.140625, 'solve': 0.005985260009765625, 'unsat': 0.0, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5340118408203125, 'cpu': 0.515625, 'solve': 0.02989959716796875, 'unsat': 0.009950637817382812, 'sat': 0.007984161376953125}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 996.0, 'conflicts': 81.0, 'conflicts_analyzed': 64.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 149.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 70.0, 'distributed_sum_lbd': 123.0, 'integrated': 285.0, 'lemmas': 378.0, 'lits_learnt': 1236.0, 'lemmas_binary': 82.0, 'lemmas_ternary': 24.0, 'cpu_time': 0.046875, 'integrated_imps': 156.0, 'integrated_jumps': 501.0, 'guiding_paths_lits': 1588.0, 'guiding_paths': 40.0, 'splits': 0.0, 'lemmas_conflict': 62.0, 'lemmas_loop': 66.0, 'lemmas_other': 250.0, 'lits_conflict': 191.0, 'lits_loop': 287.0, 'lits_other': 758.0, 'jumps': {'jumps': 64.0, 'jumps_bounded': 11.0, 'levels': 262.0, 'levels_bounded': 107.0, 'max': 51.0, 'max_executed': 21.0, 'max_bounded': 49.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{11: 25, 12: 29}

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 3 ( 30.00% solved)

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 29)', truth=True, inc_range=None)

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 29]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 13)

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 29:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(24)]), ('plan_module', [Number(30), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102473s.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 30: original = External(symbol='current_last_sgoals(13, 29)', truth=True, inc_range=None), conversion = current_last_sgoals(13,29).

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010593s with result Unsatisfiable.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.11306590000000227, Incremental time limit = None
Running cumulative time = 0.6102220000000074, Cumulative time limit = 1800
Used memory = (RSS = 196.054688Mb, VMS = 187.757812Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=29, end_step=30, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5311251000000041, solving_time=0.07909690000000325, total_time=0.6102220000000074, memory=Memory(rss=196.0546875, vms=187.7578125), step_range=range(24, 31), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10247310000000098, solving_time=0.01059280000000129, total_time=0.11306590000000227, memory=Memory(rss=196.0546875, vms=187.7578125), step_range=range(30, 31), clingo_stats={'problem': {'lp': {'atoms': 18279.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 87179.0, 'bodies_tr': 87179.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1132.0, 'count_bodies_tr': 1132.0, 'sccs': 95.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1336.0, 'rules': 166733.0, 'rules_normal': 165636.0, 'rules_choice': 1091.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 166733.0, 'rules_tr_normal': 165636.0, 'rules_tr_choice': 1091.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 31679.0, 'eqs_atom': 7597.0, 'eqs_body': 2532.0, 'eqs_other': 21550.0}, 'lpStep': {'atoms': 2226.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14664.0, 'bodies_tr': 14664.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 426.0, 'rules': 27305.0, 'rules_normal': 27152.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27305.0, 'rules_tr_normal': 27152.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4698.0, 'eqs_atom': 1065.0, 'eqs_body': 143.0, 'eqs_other': 3490.0}, 'generator': {'vars': 6510.0, 'vars_eliminated': 0.0, 'vars_frozen': 4212.0, 'constraints': 1196.0, 'constraints_binary': 34434.0, 'constraints_ternary': 4254.0, 'acyc_edges': 0.0, 'complexity': 40160.0}}, 'solving': {'solvers': {'choices': 3.0, 'conflicts': 10.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 5.0, 'lemmas': 7.0, 'lits_learnt': 33.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 5.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 595.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 0.0, 'lemmas_other': 5.0, 'lits_conflict': 13.0, 'lits_loop': 0.0, 'lits_other': 20.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 2.0, 'levels': 4.0, 'levels_bounded': 2.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.11369514465332031, 'cpu': 0.09375, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6477069854736328, 'cpu': 0.609375, 'solve': 0.031894683837890625, 'unsat': 0.011945724487304688, 'sat': 0.007984161376953125}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 999.0, 'conflicts': 91.0, 'conflicts_analyzed': 66.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 149.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 72.0, 'distributed_sum_lbd': 127.0, 'integrated': 290.0, 'lemmas': 385.0, 'lits_learnt': 1269.0, 'lemmas_binary': 82.0, 'lemmas_ternary': 24.0, 'cpu_time': 0.046875, 'integrated_imps': 161.0, 'integrated_jumps': 502.0, 'guiding_paths_lits': 2183.0, 'guiding_paths': 47.0, 'splits': 0.0, 'lemmas_conflict': 64.0, 'lemmas_loop': 66.0, 'lemmas_other': 255.0, 'lits_conflict': 204.0, 'lits_loop': 287.0, 'lits_other': 778.0, 'jumps': {'jumps': 66.0, 'jumps_bounded': 13.0, 'levels': 266.0, 'levels_bounded': 109.0, 'max': 51.0, 'max_executed': 21.0, 'max_bounded': 49.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 30:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(24)]), ('plan_module', [Number(31), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.071944s.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017152s with result Satisfiable.

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.08909609999999901, Incremental time limit = None
Running cumulative time = 0.6993181000000064, Cumulative time limit = 1800
Used memory = (RSS = 198.535156Mb, VMS = 188.835938Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.603069s, Solving = 0.096249s, Total = 0.699318s, Memory = (RSS = 198.535156Mb, VMS = 188.835938Mb), Step range = [24-31]), Calls = 7
Final Model :: Total atoms = 5624, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=30, end_step=31, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.6030694000000025, solving_time=0.09624870000000385, total_time=0.6993181000000064, memory=Memory(rss=198.53515625, vms=188.8359375), step_range=range(24, 32), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.0719442999999984, solving_time=0.017151800000000605, total_time=0.08909609999999901, memory=Memory(rss=198.53515625, vms=188.8359375), step_range=range(31, 32), clingo_stats={'problem': {'lp': {'atoms': 20557.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 102164.0, 'bodies_tr': 102164.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1313.0, 'count_bodies_tr': 1313.0, 'sccs': 115.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1772.0, 'rules': 194405.0, 'rules_normal': 193155.0, 'rules_choice': 1243.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 194405.0, 'rules_tr_normal': 193155.0, 'rules_tr_choice': 1243.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 36530.0, 'eqs_atom': 8654.0, 'eqs_body': 2647.0, 'eqs_other': 25229.0}, 'lpStep': {'atoms': 2278.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14985.0, 'bodies_tr': 14985.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27672.0, 'rules_normal': 27519.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27672.0, 'rules_tr_normal': 27519.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4851.0, 'eqs_atom': 1057.0, 'eqs_body': 115.0, 'eqs_other': 3679.0}, 'generator': {'vars': 8262.0, 'vars_eliminated': 0.0, 'vars_frozen': 5309.0, 'constraints': 1680.0, 'constraints_binary': 50704.0, 'constraints_ternary': 6347.0, 'acyc_edges': 0.0, 'complexity': 59077.0}}, 'solving': {'solvers': {'choices': 429.0, 'conflicts': 23.0, 'conflicts_analyzed': 23.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 148.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 54.0, 'integrated': 126.0, 'lemmas': 430.0, 'lits_learnt': 3095.0, 'lemmas_binary': 28.0, 'lemmas_ternary': 42.0, 'cpu_time': 0.03125, 'integrated_imps': 52.0, 'integrated_jumps': 51.0, 'guiding_paths_lits': 679.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 23.0, 'lemmas_loop': 282.0, 'lemmas_other': 125.0, 'lits_conflict': 130.0, 'lits_loop': 2213.0, 'lits_other': 752.0, 'jumps': {'jumps': 23.0, 'jumps_bounded': 4.0, 'levels': 38.0, 'levels_bounded': 4.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.08979225158691406, 'cpu': 0.109375, 'solve': 0.0080108642578125, 'unsat': 0.0, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.7374992370605469, 'cpu': 0.71875, 'solve': 0.039905548095703125, 'unsat': 0.011945724487304688, 'sat': 0.010976791381835938}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1428.0, 'conflicts': 114.0, 'conflicts_analyzed': 89.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 297.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 95.0, 'distributed_sum_lbd': 181.0, 'integrated': 416.0, 'lemmas': 815.0, 'lits_learnt': 4364.0, 'lemmas_binary': 110.0, 'lemmas_ternary': 66.0, 'cpu_time': 0.078125, 'integrated_imps': 213.0, 'integrated_jumps': 553.0, 'guiding_paths_lits': 2862.0, 'guiding_paths': 54.0, 'splits': 0.0, 'lemmas_conflict': 87.0, 'lemmas_loop': 348.0, 'lemmas_other': 380.0, 'lits_conflict': 334.0, 'lits_loop': 2500.0, 'lits_other': 1530.0, 'jumps': {'jumps': 89.0, 'jumps_bounded': 17.0, 'levels': 304.0, 'levels_bounded': 113.0, 'max': 51.0, 'max_executed': 21.0, 'max_bounded': 49.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{11: 25, 12: 29, 13: 31}

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 4 ( 40.00% solved)

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 31)', truth=True, inc_range=None)

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 14, step = 31]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 14)

[03-01-2022_17-11-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 31:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(32), Number(24)]), ('plan_module', [Number(32), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.071884s.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 32: original = External(symbol='current_last_sgoals(14, 31)', truth=True, inc_range=None), conversion = current_last_sgoals(14,31).

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012567s with result Unsatisfiable.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08445189999999769, Incremental time limit = None
Running cumulative time = 0.7837700000000041, Cumulative time limit = 1800
Used memory = (RSS = 203.988281Mb, VMS = 195.582031Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=31, end_step=32, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.674953900000002, solving_time=0.10881610000000208, total_time=0.7837700000000041, memory=Memory(rss=203.98828125, vms=195.58203125), step_range=range(24, 33), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07188449999999946, solving_time=0.01256739999999823, total_time=0.08445189999999769, memory=Memory(rss=203.98828125, vms=195.58203125), step_range=range(32, 33), clingo_stats={'problem': {'lp': {'atoms': 22848.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 117175.0, 'bodies_tr': 117175.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1494.0, 'count_bodies_tr': 1494.0, 'sccs': 135.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2208.0, 'rules': 222149.0, 'rules_normal': 220746.0, 'rules_choice': 1395.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 222149.0, 'rules_tr_normal': 220746.0, 'rules_tr_choice': 1395.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 41435.0, 'eqs_atom': 9720.0, 'eqs_body': 2762.0, 'eqs_other': 28953.0}, 'lpStep': {'atoms': 2291.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15011.0, 'bodies_tr': 15011.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27744.0, 'rules_normal': 27591.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27744.0, 'rules_tr_normal': 27591.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4905.0, 'eqs_atom': 1066.0, 'eqs_body': 115.0, 'eqs_other': 3724.0}, 'generator': {'vars': 10021.0, 'vars_eliminated': 0.0, 'vars_frozen': 6410.0, 'constraints': 2165.0, 'constraints_binary': 66908.0, 'constraints_ternary': 8298.0, 'acyc_edges': 0.0, 'complexity': 77787.0}}, 'solving': {'solvers': {'choices': 2.0, 'conflicts': 8.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 2.0, 'lemmas': 3.0, 'lits_learnt': 6.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 2.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 654.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 2.0, 'lits_conflict': 2.0, 'lits_loop': 0.0, 'lits_other': 4.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 3.0, 'levels_bounded': 1.0, 'max': 3.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.08577156066894531, 'cpu': 0.09375, 'solve': 0.00399017333984375, 'unsat': 0.00399017333984375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8232707977294922, 'cpu': 0.8125, 'solve': 0.043895721435546875, 'unsat': 0.015935897827148438, 'sat': 0.010976791381835938}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1430.0, 'conflicts': 122.0, 'conflicts_analyzed': 90.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 297.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 96.0, 'distributed_sum_lbd': 183.0, 'integrated': 418.0, 'lemmas': 818.0, 'lits_learnt': 4370.0, 'lemmas_binary': 113.0, 'lemmas_ternary': 66.0, 'cpu_time': 0.078125, 'integrated_imps': 215.0, 'integrated_jumps': 553.0, 'guiding_paths_lits': 3516.0, 'guiding_paths': 60.0, 'splits': 0.0, 'lemmas_conflict': 88.0, 'lemmas_loop': 348.0, 'lemmas_other': 382.0, 'lits_conflict': 336.0, 'lits_loop': 2500.0, 'lits_other': 1534.0, 'jumps': {'jumps': 90.0, 'jumps_bounded': 18.0, 'levels': 307.0, 'levels_bounded': 114.0, 'max': 51.0, 'max_executed': 21.0, 'max_bounded': 49.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 32:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(33), Number(24)]), ('plan_module', [Number(33), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.084265s.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021027s with result Satisfiable.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10529229999999856, Incremental time limit = None
Running cumulative time = 0.8890623000000026, Cumulative time limit = 1800
Used memory = (RSS = 206.039062Mb, VMS = 196.636719Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.759219s, Solving = 0.129843s, Total = 0.889062s, Memory = (RSS = 206.039062Mb, VMS = 196.636719Mb), Step range = [24-33]), Calls = 9
Final Model :: Total atoms = 6295, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=32, end_step=33, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.7592193000000016, solving_time=0.12984300000000104, total_time=0.8890623000000026, memory=Memory(rss=206.0390625, vms=196.63671875), step_range=range(24, 34), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.0842653999999996, solving_time=0.02102689999999896, total_time=0.10529229999999856, memory=Memory(rss=206.0390625, vms=196.63671875), step_range=range(33, 34), clingo_stats={'problem': {'lp': {'atoms': 25153.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 132213.0, 'bodies_tr': 132213.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1675.0, 'count_bodies_tr': 1675.0, 'sccs': 155.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2644.0, 'rules': 249966.0, 'rules_normal': 248410.0, 'rules_choice': 1547.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 249966.0, 'rules_tr_normal': 248410.0, 'rules_tr_choice': 1547.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 46399.0, 'eqs_atom': 10796.0, 'eqs_body': 2879.0, 'eqs_other': 32724.0}, 'lpStep': {'atoms': 2305.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15038.0, 'bodies_tr': 15038.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27817.0, 'rules_normal': 27664.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27817.0, 'rules_tr_normal': 27664.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4964.0, 'eqs_atom': 1076.0, 'eqs_body': 117.0, 'eqs_other': 3771.0}, 'generator': {'vars': 11787.0, 'vars_eliminated': 0.0, 'vars_frozen': 7515.0, 'constraints': 2651.0, 'constraints_binary': 83300.0, 'constraints_ternary': 10271.0, 'acyc_edges': 0.0, 'complexity': 96708.0}}, 'solving': {'solvers': {'choices': 595.0, 'conflicts': 28.0, 'conflicts_analyzed': 28.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 185.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 27.0, 'distributed_sum_lbd': 85.0, 'integrated': 162.0, 'lemmas': 666.0, 'lits_learnt': 6343.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 47.0, 'integrated_jumps': 62.0, 'guiding_paths_lits': 847.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 476.0, 'lemmas_other': 162.0, 'lits_conflict': 395.0, 'lits_loop': 3668.0, 'lits_other': 2280.0, 'jumps': {'jumps': 28.0, 'jumps_bounded': 2.0, 'levels': 197.0, 'levels_bounded': 122.0, 'max': 122.0, 'max_executed': 122.0, 'max_bounded': 121.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.10671615600585938, 'cpu': 0.1875, 'solve': 0.011968612670898438, 'unsat': 0.0, 'sat': 0.0049877166748046875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.9299869537353516, 'cpu': 1.0, 'solve': 0.05586433410644531, 'unsat': 0.015935897827148438, 'sat': 0.015964508056640625}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2025.0, 'conflicts': 150.0, 'conflicts_analyzed': 118.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 482.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 123.0, 'distributed_sum_lbd': 268.0, 'integrated': 580.0, 'lemmas': 1484.0, 'lits_learnt': 10713.0, 'lemmas_binary': 113.0, 'lemmas_ternary': 66.0, 'cpu_time': 0.171875, 'integrated_imps': 262.0, 'integrated_jumps': 615.0, 'guiding_paths_lits': 4363.0, 'guiding_paths': 67.0, 'splits': 0.0, 'lemmas_conflict': 116.0, 'lemmas_loop': 824.0, 'lemmas_other': 544.0, 'lits_conflict': 731.0, 'lits_loop': 6168.0, 'lits_other': 3814.0, 'jumps': {'jumps': 118.0, 'jumps_bounded': 20.0, 'levels': 504.0, 'levels_bounded': 236.0, 'max': 122.0, 'max_executed': 122.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{11: 25, 12: 29, 13: 31, 14: 33}

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 5 ( 50.00% solved)

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(15, 33)', truth=True, inc_range=None)

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 15, step = 33]:
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 15)

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 33:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(34), Number(24)]), ('plan_module', [Number(34), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.078312s.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 34: original = External(symbol='current_last_sgoals(15, 33)', truth=True, inc_range=None), conversion = current_last_sgoals(15,33).

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017346s with result Unsatisfiable.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09565810000000141, Incremental time limit = None
Running cumulative time = 0.984720400000004, Cumulative time limit = 1800
Used memory = (RSS = 212.660156Mb, VMS = 207.265625Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=33, end_step=34, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.8375314000000031, solving_time=0.1471890000000009, total_time=0.984720400000004, memory=Memory(rss=212.66015625, vms=207.265625), step_range=range(24, 35), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07831210000000155, solving_time=0.01734599999999986, total_time=0.09565810000000141, memory=Memory(rss=212.66015625, vms=207.265625), step_range=range(34, 35), clingo_stats={'problem': {'lp': {'atoms': 27473.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 147278.0, 'bodies_tr': 147278.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1856.0, 'count_bodies_tr': 1856.0, 'sccs': 175.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3080.0, 'rules': 277856.0, 'rules_normal': 276147.0, 'rules_choice': 1699.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 277856.0, 'rules_tr_normal': 276147.0, 'rules_tr_choice': 1699.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 51423.0, 'eqs_atom': 11883.0, 'eqs_body': 2996.0, 'eqs_other': 36544.0}, 'lpStep': {'atoms': 2320.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15065.0, 'bodies_tr': 15065.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27890.0, 'rules_normal': 27737.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27890.0, 'rules_tr_normal': 27737.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5024.0, 'eqs_atom': 1087.0, 'eqs_body': 117.0, 'eqs_other': 3820.0}, 'generator': {'vars': 13559.0, 'vars_eliminated': 0.0, 'vars_frozen': 8624.0, 'constraints': 2887.0, 'constraints_binary': 90612.0, 'constraints_ternary': 11378.0, 'acyc_edges': 0.0, 'complexity': 105417.0}}, 'solving': {'solvers': {'choices': 62.0, 'conflicts': 14.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 17.0, 'integrated': 40.0, 'lemmas': 130.0, 'lits_learnt': 855.0, 'lemmas_binary': 10.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 29.0, 'integrated_jumps': 52.0, 'guiding_paths_lits': 931.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 82.0, 'lemmas_other': 40.0, 'lits_conflict': 51.0, 'lits_loop': 548.0, 'lits_other': 256.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 3.0, 'levels': 145.0, 'levels_bounded': 135.0, 'max': 135.0, 'max_executed': 135.0, 'max_bounded': 133.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.09817886352539062, 'cpu': 0.09375, 'solve': 0.004428863525390625, 'unsat': 0.004428863525390625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.0281658172607422, 'cpu': 1.09375, 'solve': 0.06029319763183594, 'unsat': 0.020364761352539062, 'sat': 0.015964508056640625}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2087.0, 'conflicts': 164.0, 'conflicts_analyzed': 126.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 482.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 131.0, 'distributed_sum_lbd': 285.0, 'integrated': 620.0, 'lemmas': 1614.0, 'lits_learnt': 11568.0, 'lemmas_binary': 123.0, 'lemmas_ternary': 66.0, 'cpu_time': 0.171875, 'integrated_imps': 291.0, 'integrated_jumps': 667.0, 'guiding_paths_lits': 5294.0, 'guiding_paths': 74.0, 'splits': 0.0, 'lemmas_conflict': 124.0, 'lemmas_loop': 906.0, 'lemmas_other': 584.0, 'lits_conflict': 782.0, 'lits_loop': 6716.0, 'lits_other': 4070.0, 'jumps': {'jumps': 126.0, 'jumps_bounded': 23.0, 'levels': 649.0, 'levels_bounded': 371.0, 'max': 135.0, 'max_executed': 135.0, 'max_bounded': 133.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 34:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(24)]), ('plan_module', [Number(35), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.099245s.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027845s with result Unsatisfiable.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1270907000000001, Incremental time limit = None
Running cumulative time = 1.1118111000000042, Cumulative time limit = 1800
Used memory = (RSS = 215.144531Mb, VMS = 208.621094Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=34, end_step=35, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.9367767000000029, solving_time=0.17503440000000126, total_time=1.1118111000000042, memory=Memory(rss=215.14453125, vms=208.62109375), step_range=range(24, 36), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09924529999999976, solving_time=0.027845400000000353, total_time=0.1270907000000001, memory=Memory(rss=215.14453125, vms=208.62109375), step_range=range(35, 36), clingo_stats={'problem': {'lp': {'atoms': 29803.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 162365.0, 'bodies_tr': 162365.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2037.0, 'count_bodies_tr': 2037.0, 'sccs': 195.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3516.0, 'rules': 305813.0, 'rules_normal': 303951.0, 'rules_choice': 1851.0, 'rules_minimize': 11.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 305813.0, 'rules_tr_normal': 303951.0, 'rules_tr_choice': 1851.0, 'rules_tr_minimize': 11.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 56498.0, 'eqs_atom': 12980.0, 'eqs_body': 3114.0, 'eqs_other': 40404.0}, 'lpStep': {'atoms': 2330.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15087.0, 'bodies_tr': 15087.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27957.0, 'rules_normal': 27804.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27957.0, 'rules_tr_normal': 27804.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5075.0, 'eqs_atom': 1097.0, 'eqs_body': 118.0, 'eqs_other': 3860.0}, 'generator': {'vars': 15333.0, 'vars_eliminated': 0.0, 'vars_frozen': 9733.0, 'constraints': 3370.0, 'constraints_binary': 105841.0, 'constraints_ternary': 13305.0, 'acyc_edges': 0.0, 'complexity': 123126.0}}, 'solving': {'solvers': {'choices': 234.0, 'conflicts': 102.0, 'conflicts_analyzed': 97.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 76.0, 'distributed_sum_lbd': 215.0, 'integrated': 371.0, 'lemmas': 757.0, 'lits_learnt': 8600.0, 'lemmas_binary': 80.0, 'lemmas_ternary': 44.0, 'cpu_time': 0.125, 'integrated_imps': 51.0, 'integrated_jumps': 94.0, 'guiding_paths_lits': 1015.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 96.0, 'lemmas_loop': 301.0, 'lemmas_other': 360.0, 'lits_conflict': 1490.0, 'lits_loop': 2381.0, 'lits_other': 4729.0, 'jumps': {'jumps': 97.0, 'jumps_bounded': 2.0, 'levels': 286.0, 'levels_bounded': 146.0, 'max': 146.0, 'max_executed': 146.0, 'max_bounded': 145.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.1296558380126953, 'cpu': 0.234375, 'solve': 0.009975433349609375, 'unsat': 0.009975433349609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.1578216552734375, 'cpu': 1.328125, 'solve': 0.07026863098144531, 'unsat': 0.030340194702148438, 'sat': 0.015964508056640625}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2321.0, 'conflicts': 266.0, 'conflicts_analyzed': 223.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 482.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 207.0, 'distributed_sum_lbd': 500.0, 'integrated': 991.0, 'lemmas': 2371.0, 'lits_learnt': 20168.0, 'lemmas_binary': 203.0, 'lemmas_ternary': 110.0, 'cpu_time': 0.296875, 'integrated_imps': 342.0, 'integrated_jumps': 761.0, 'guiding_paths_lits': 6309.0, 'guiding_paths': 81.0, 'splits': 0.0, 'lemmas_conflict': 220.0, 'lemmas_loop': 1207.0, 'lemmas_other': 944.0, 'lits_conflict': 2272.0, 'lits_loop': 9097.0, 'lits_other': 8799.0, 'jumps': {'jumps': 223.0, 'jumps_bounded': 25.0, 'levels': 935.0, 'levels_bounded': 517.0, 'max': 146.0, 'max_executed': 146.0, 'max_bounded': 145.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 35:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(24)]), ('plan_module', [Number(36), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.127553s.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021589s with result Unsatisfiable.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.14914260000000112, Incremental time limit = None
Running cumulative time = 1.2609537000000053, Cumulative time limit = 1800
Used memory = (RSS = 217.968750Mb, VMS = 210.402344Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=35, end_step=36, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.064330100000003, solving_time=0.19662360000000234, total_time=1.2609537000000053, memory=Memory(rss=217.96875, vms=210.40234375), step_range=range(24, 37), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12755340000000004, solving_time=0.021589200000001085, total_time=0.14914260000000112, memory=Memory(rss=217.96875, vms=210.40234375), step_range=range(36, 37), clingo_stats={'problem': {'lp': {'atoms': 32143.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 177473.0, 'bodies_tr': 177473.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2218.0, 'count_bodies_tr': 2218.0, 'sccs': 215.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3952.0, 'rules': 333836.0, 'rules_normal': 331821.0, 'rules_choice': 2003.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 333836.0, 'rules_tr_normal': 331821.0, 'rules_tr_choice': 2003.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 61624.0, 'eqs_atom': 14087.0, 'eqs_body': 3231.0, 'eqs_other': 44306.0}, 'lpStep': {'atoms': 2340.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15108.0, 'bodies_tr': 15108.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28023.0, 'rules_normal': 27870.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28023.0, 'rules_tr_normal': 27870.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5126.0, 'eqs_atom': 1107.0, 'eqs_body': 117.0, 'eqs_other': 3902.0}, 'generator': {'vars': 17107.0, 'vars_eliminated': 0.0, 'vars_frozen': 10842.0, 'constraints': 3853.0, 'constraints_binary': 121193.0, 'constraints_ternary': 15202.0, 'acyc_edges': 0.0, 'complexity': 140928.0}}, 'solving': {'solvers': {'choices': 298.0, 'conflicts': 151.0, 'conflicts_analyzed': 145.0, 'restarts': 0.0, 'restarts_last': 27.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 118.0, 'distributed_sum_lbd': 351.0, 'integrated': 664.0, 'lemmas': 1091.0, 'lits_learnt': 14992.0, 'lemmas_binary': 53.0, 'lemmas_ternary': 56.0, 'cpu_time': 0.109375, 'integrated_imps': 90.0, 'integrated_jumps': 100.0, 'guiding_paths_lits': 1099.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 145.0, 'lemmas_loop': 297.0, 'lemmas_other': 649.0, 'lits_conflict': 2609.0, 'lits_loop': 2158.0, 'lits_other': 10225.0, 'jumps': {'jumps': 145.0, 'jumps_bounded': 3.0, 'levels': 201.0, 'levels_bounded': 3.0, 'max': 7.0, 'max_executed': 7.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 12.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.1522388458251953, 'cpu': 0.25, 'solve': 0.010051727294921875, 'unsat': 0.010051727294921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.3100605010986328, 'cpu': 1.578125, 'solve': 0.08032035827636719, 'unsat': 0.04039192199707031, 'sat': 0.015964508056640625}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2619.0, 'conflicts': 417.0, 'conflicts_analyzed': 368.0, 'restarts': 0.0, 'restarts_last': 27.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 482.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 325.0, 'distributed_sum_lbd': 851.0, 'integrated': 1655.0, 'lemmas': 3462.0, 'lits_learnt': 35160.0, 'lemmas_binary': 256.0, 'lemmas_ternary': 166.0, 'cpu_time': 0.40625, 'integrated_imps': 432.0, 'integrated_jumps': 861.0, 'guiding_paths_lits': 7408.0, 'guiding_paths': 88.0, 'splits': 0.0, 'lemmas_conflict': 365.0, 'lemmas_loop': 1504.0, 'lemmas_other': 1593.0, 'lits_conflict': 4881.0, 'lits_loop': 11255.0, 'lits_other': 19024.0, 'jumps': {'jumps': 368.0, 'jumps_bounded': 28.0, 'levels': 1136.0, 'levels_bounded': 520.0, 'max': 146.0, 'max_executed': 146.0, 'max_bounded': 145.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 36:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(37), Number(24)]), ('plan_module', [Number(37), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.100664s.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034683s with result Satisfiable.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13534659999999832, Incremental time limit = None
Running cumulative time = 1.3963003000000036, Cumulative time limit = 1800
Used memory = (RSS = 219.695312Mb, VMS = 211.234375Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.164994s, Solving = 0.231306s, Total = 1.396300s, Memory = (RSS = 219.695312Mb, VMS = 211.234375Mb), Step range = [24-37]), Calls = 13
Final Model :: Total atoms = 7639, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=36, end_step=37, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.1649941000000013, solving_time=0.23130620000000235, total_time=1.3963003000000036, memory=Memory(rss=219.6953125, vms=211.234375), step_range=range(24, 38), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10066399999999831, solving_time=0.03468260000000001, total_time=0.13534659999999832, memory=Memory(rss=219.6953125, vms=211.234375), step_range=range(37, 38), clingo_stats={'problem': {'lp': {'atoms': 34493.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 192602.0, 'bodies_tr': 192602.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2399.0, 'count_bodies_tr': 2399.0, 'sccs': 235.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4388.0, 'rules': 361925.0, 'rules_normal': 359757.0, 'rules_choice': 2155.0, 'rules_minimize': 13.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 361925.0, 'rules_tr_normal': 359757.0, 'rules_tr_choice': 2155.0, 'rules_tr_minimize': 13.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 66803.0, 'eqs_atom': 15204.0, 'eqs_body': 3349.0, 'eqs_other': 48250.0}, 'lpStep': {'atoms': 2350.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15129.0, 'bodies_tr': 15129.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28089.0, 'rules_normal': 27936.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28089.0, 'rules_tr_normal': 27936.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5179.0, 'eqs_atom': 1117.0, 'eqs_body': 118.0, 'eqs_other': 3944.0}, 'generator': {'vars': 18881.0, 'vars_eliminated': 0.0, 'vars_frozen': 11951.0, 'constraints': 4340.0, 'constraints_binary': 137827.0, 'constraints_ternary': 17186.0, 'acyc_edges': 0.0, 'complexity': 160103.0}}, 'solving': {'solvers': {'choices': 968.0, 'conflicts': 341.0, 'conflicts_analyzed': 341.0, 'restarts': 0.0, 'restarts_last': 72.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 261.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 218.0, 'distributed_sum_lbd': 678.0, 'integrated': 1179.0, 'lemmas': 1937.0, 'lits_learnt': 32915.0, 'lemmas_binary': 107.0, 'lemmas_ternary': 120.0, 'cpu_time': 0.125, 'integrated_imps': 157.0, 'integrated_jumps': 405.0, 'guiding_paths_lits': 1183.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 341.0, 'lemmas_loop': 418.0, 'lemmas_other': 1178.0, 'lits_conflict': 7933.0, 'lits_loop': 3002.0, 'lits_other': 21980.0, 'jumps': {'jumps': 341.0, 'jumps_bounded': 4.0, 'levels': 1136.0, 'levels_bounded': 676.0, 'max': 178.0, 'max_executed': 178.0, 'max_bounded': 169.0}}}}, 'summary': {'call': 13.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.13666725158691406, 'cpu': 0.21875, 'solve': 0.021940231323242188, 'unsat': 0.0, 'sat': 0.008975982666015625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.4467277526855469, 'cpu': 1.796875, 'solve': 0.10226058959960938, 'unsat': 0.04039192199707031, 'sat': 0.02494049072265625}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3587.0, 'conflicts': 758.0, 'conflicts_analyzed': 709.0, 'restarts': 0.0, 'restarts_last': 72.0, 'extra': {'domain_choices': 0.0, 'models': 6.0, 'models_level': 743.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 543.0, 'distributed_sum_lbd': 1529.0, 'integrated': 2834.0, 'lemmas': 5399.0, 'lits_learnt': 68075.0, 'lemmas_binary': 363.0, 'lemmas_ternary': 286.0, 'cpu_time': 0.53125, 'integrated_imps': 589.0, 'integrated_jumps': 1266.0, 'guiding_paths_lits': 8591.0, 'guiding_paths': 95.0, 'splits': 0.0, 'lemmas_conflict': 706.0, 'lemmas_loop': 1922.0, 'lemmas_other': 2771.0, 'lits_conflict': 12814.0, 'lits_loop': 14257.0, 'lits_other': 41004.0, 'jumps': {'jumps': 709.0, 'jumps_bounded': 32.0, 'levels': 2272.0, 'levels_bounded': 1196.0, 'max': 178.0, 'max_executed': 178.0, 'max_bounded': 169.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{11: 25, 12: 29, 13: 31, 14: 33, 15: 37}

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 16 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 6 ( 60.00% solved)

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(16, 37)', truth=True, inc_range=None)

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 16, step = 37]:
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 16)

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 37:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(24)]), ('plan_module', [Number(38), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.105602s.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 38: original = External(symbol='current_last_sgoals(16, 37)', truth=True, inc_range=None), conversion = current_last_sgoals(16,37).

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.038006s with result Unsatisfiable.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.14360849999999914, Incremental time limit = None
Running cumulative time = 1.5399088000000027, Cumulative time limit = 1800
Used memory = (RSS = 228.000000Mb, VMS = 222.382812Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=37, end_step=38, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.2705963000000011, solving_time=0.2693125000000016, total_time=1.5399088000000027, memory=Memory(rss=228.0, vms=222.3828125), step_range=range(24, 39), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10560219999999987, solving_time=0.03800629999999927, total_time=0.14360849999999914, memory=Memory(rss=228.0, vms=222.3828125), step_range=range(38, 39), clingo_stats={'problem': {'lp': {'atoms': 36852.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 207744.0, 'bodies_tr': 207744.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2580.0, 'count_bodies_tr': 2580.0, 'sccs': 255.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4824.0, 'rules': 390072.0, 'rules_normal': 387751.0, 'rules_choice': 2307.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 390072.0, 'rules_tr_normal': 387751.0, 'rules_tr_choice': 2307.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 72009.0, 'eqs_atom': 16323.0, 'eqs_body': 3466.0, 'eqs_other': 52220.0}, 'lpStep': {'atoms': 2359.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15142.0, 'bodies_tr': 15142.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28147.0, 'rules_normal': 27994.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28147.0, 'rules_tr_normal': 27994.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5206.0, 'eqs_atom': 1119.0, 'eqs_body': 117.0, 'eqs_other': 3970.0}, 'generator': {'vars': 20655.0, 'vars_eliminated': 0.0, 'vars_frozen': 13060.0, 'constraints': 4581.0, 'constraints_binary': 147297.0, 'constraints_ternary': 18297.0, 'acyc_edges': 0.0, 'complexity': 170979.0}}, 'solving': {'solvers': {'choices': 114.0, 'conflicts': 58.0, 'conflicts_analyzed': 53.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 39.0, 'distributed_sum_lbd': 115.0, 'integrated': 169.0, 'lemmas': 444.0, 'lits_learnt': 8544.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 38.0, 'integrated_jumps': 45.0, 'guiding_paths_lits': 1267.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 52.0, 'lemmas_loop': 234.0, 'lemmas_other': 158.0, 'lits_conflict': 1983.0, 'lits_loop': 1999.0, 'lits_other': 4562.0, 'jumps': {'jumps': 53.0, 'jumps_bounded': 7.0, 'levels': 70.0, 'levels_bounded': 7.0, 'max': 4.0, 'max_executed': 4.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 14.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.14760971069335938, 'cpu': 0.1875, 'solve': 0.015890121459960938, 'unsat': 0.015890121459960938, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.5943374633789062, 'cpu': 1.984375, 'solve': 0.11815071105957031, 'unsat': 0.05628204345703125, 'sat': 0.02494049072265625}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3701.0, 'conflicts': 816.0, 'conflicts_analyzed': 762.0, 'restarts': 0.0, 'restarts_last': 72.0, 'extra': {'domain_choices': 0.0, 'models': 6.0, 'models_level': 743.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 582.0, 'distributed_sum_lbd': 1644.0, 'integrated': 3003.0, 'lemmas': 5843.0, 'lits_learnt': 76619.0, 'lemmas_binary': 374.0, 'lemmas_ternary': 286.0, 'cpu_time': 0.59375, 'integrated_imps': 627.0, 'integrated_jumps': 1311.0, 'guiding_paths_lits': 9858.0, 'guiding_paths': 102.0, 'splits': 0.0, 'lemmas_conflict': 758.0, 'lemmas_loop': 2156.0, 'lemmas_other': 2929.0, 'lits_conflict': 14797.0, 'lits_loop': 16256.0, 'lits_other': 45566.0, 'jumps': {'jumps': 762.0, 'jumps_bounded': 39.0, 'levels': 2342.0, 'levels_bounded': 1203.0, 'max': 178.0, 'max_executed': 178.0, 'max_bounded': 169.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 38:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(24)]), ('plan_module', [Number(39), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.121135s.

[03-01-2022_17-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040817s with result Satisfiable.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.16195180000000065, Incremental time limit = None
Running cumulative time = 1.7018606000000034, Cumulative time limit = 1800
Used memory = (RSS = 229.613281Mb, VMS = 222.703125Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.391731s, Solving = 0.310130s, Total = 1.701861s, Memory = (RSS = 229.613281Mb, VMS = 222.703125Mb), Step range = [24-39]), Calls = 15
Final Model :: Total atoms = 8314, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=38, end_step=39, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.3917311000000012, solving_time=0.31012950000000217, total_time=1.7018606000000034, memory=Memory(rss=229.61328125, vms=222.703125), step_range=range(24, 40), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1211348000000001, solving_time=0.04081700000000055, total_time=0.16195180000000065, memory=Memory(rss=229.61328125, vms=222.703125), step_range=range(39, 40), clingo_stats={'problem': {'lp': {'atoms': 39214.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 222907.0, 'bodies_tr': 222907.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2761.0, 'count_bodies_tr': 2761.0, 'sccs': 275.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5260.0, 'rules': 418285.0, 'rules_normal': 415811.0, 'rules_choice': 2459.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 418285.0, 'rules_tr_normal': 415811.0, 'rules_tr_choice': 2459.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 77268.0, 'eqs_atom': 17452.0, 'eqs_body': 3584.0, 'eqs_other': 56232.0}, 'lpStep': {'atoms': 2362.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15163.0, 'bodies_tr': 15163.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28213.0, 'rules_normal': 28060.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28213.0, 'rules_tr_normal': 28060.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5259.0, 'eqs_atom': 1129.0, 'eqs_body': 118.0, 'eqs_other': 4012.0}, 'generator': {'vars': 22429.0, 'vars_eliminated': 0.0, 'vars_frozen': 14169.0, 'constraints': 5068.0, 'constraints_binary': 164045.0, 'constraints_ternary': 20322.0, 'acyc_edges': 0.0, 'complexity': 190309.0}}, 'solving': {'solvers': {'choices': 1069.0, 'conflicts': 327.0, 'conflicts_analyzed': 327.0, 'restarts': 0.0, 'restarts_last': 79.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 304.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 176.0, 'distributed_sum_lbd': 553.0, 'integrated': 781.0, 'lemmas': 1771.0, 'lits_learnt': 31758.0, 'lemmas_binary': 132.0, 'lemmas_ternary': 99.0, 'cpu_time': 0.203125, 'integrated_imps': 35.0, 'integrated_jumps': 80.0, 'guiding_paths_lits': 1351.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 327.0, 'lemmas_loop': 663.0, 'lemmas_other': 781.0, 'lits_conflict': 11553.0, 'lits_loop': 5032.0, 'lits_other': 15173.0, 'jumps': {'jumps': 327.0, 'jumps_bounded': 0.0, 'levels': 550.0, 'levels_bounded': 0.0, 'max': 16.0, 'max_executed': 16.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.16454696655273438, 'cpu': 0.34375, 'solve': 0.026929855346679688, 'unsat': 0.0, 'sat': 0.012968063354492188}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.7588844299316406, 'cpu': 2.328125, 'solve': 0.14508056640625, 'unsat': 0.05628204345703125, 'sat': 0.03790855407714844}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4770.0, 'conflicts': 1143.0, 'conflicts_analyzed': 1089.0, 'restarts': 0.0, 'restarts_last': 79.0, 'extra': {'domain_choices': 0.0, 'models': 7.0, 'models_level': 1047.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 758.0, 'distributed_sum_lbd': 2197.0, 'integrated': 3784.0, 'lemmas': 7614.0, 'lits_learnt': 108377.0, 'lemmas_binary': 506.0, 'lemmas_ternary': 385.0, 'cpu_time': 0.796875, 'integrated_imps': 662.0, 'integrated_jumps': 1391.0, 'guiding_paths_lits': 11209.0, 'guiding_paths': 109.0, 'splits': 0.0, 'lemmas_conflict': 1085.0, 'lemmas_loop': 2819.0, 'lemmas_other': 3710.0, 'lits_conflict': 26350.0, 'lits_loop': 21288.0, 'lits_other': 60739.0, 'jumps': {'jumps': 1089.0, 'jumps_bounded': 39.0, 'levels': 2892.0, 'levels_bounded': 1203.0, 'max': 178.0, 'max_executed': 178.0, 'max_bounded': 169.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{11: 25, 12: 29, 13: 31, 14: 33, 15: 37, 16: 39}

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 17 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 7 ( 70.00% solved)

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(17, 39)', truth=True, inc_range=None)

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 17, step = 39]:
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 17)

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Reaction at search length 39:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(24)]), ('plan_module', [Number(40), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.085682s.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 40: original = External(symbol='current_last_sgoals(17, 39)', truth=True, inc_range=None), conversion = current_last_sgoals(17,39).

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032559s with result Satisfiable.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11824049999999886, Incremental time limit = None
Running cumulative time = 1.8201011000000022, Cumulative time limit = 1800
Used memory = (RSS = 232.429688Mb, VMS = 225.222656Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.477413s, Solving = 0.342688s, Total = 1.820101s, Memory = (RSS = 232.429688Mb, VMS = 225.222656Mb), Step range = [24-40]), Calls = 16
Final Model :: Total atoms = 8654, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=39, end_step=40, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.477412900000001, solving_time=0.34268820000000133, total_time=1.8201011000000022, memory=Memory(rss=232.4296875, vms=225.22265625), step_range=range(24, 41), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.0856817999999997, solving_time=0.03255869999999916, total_time=0.11824049999999886, memory=Memory(rss=232.4296875, vms=225.22265625), step_range=range(40, 41), clingo_stats={'problem': {'lp': {'atoms': 41586.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 238091.0, 'bodies_tr': 238091.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2942.0, 'count_bodies_tr': 2942.0, 'sccs': 295.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5696.0, 'rules': 446564.0, 'rules_normal': 443937.0, 'rules_choice': 2611.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 446564.0, 'rules_tr_normal': 443937.0, 'rules_tr_choice': 2611.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 82578.0, 'eqs_atom': 18591.0, 'eqs_body': 3701.0, 'eqs_other': 60286.0}, 'lpStep': {'atoms': 2372.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15184.0, 'bodies_tr': 15184.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28279.0, 'rules_normal': 28126.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28279.0, 'rules_tr_normal': 28126.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5310.0, 'eqs_atom': 1139.0, 'eqs_body': 117.0, 'eqs_other': 4054.0}, 'generator': {'vars': 24203.0, 'vars_eliminated': 0.0, 'vars_frozen': 15278.0, 'constraints': 5555.0, 'constraints_binary': 180682.0, 'constraints_ternary': 22299.0, 'acyc_edges': 0.0, 'complexity': 209480.0}}, 'solving': {'solvers': {'choices': 994.0, 'conflicts': 166.0, 'conflicts_analyzed': 166.0, 'restarts': 0.0, 'restarts_last': 80.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 314.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 131.0, 'distributed_sum_lbd': 401.0, 'integrated': 280.0, 'lemmas': 708.0, 'lits_learnt': 13291.0, 'lemmas_binary': 44.0, 'lemmas_ternary': 47.0, 'cpu_time': 0.125, 'integrated_imps': 29.0, 'integrated_jumps': 169.0, 'guiding_paths_lits': 1435.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 166.0, 'lemmas_loop': 262.0, 'lemmas_other': 280.0, 'lits_conflict': 5005.0, 'lits_loop': 2063.0, 'lits_other': 6223.0, 'jumps': {'jumps': 166.0, 'jumps_bounded': 3.0, 'levels': 457.0, 'levels_bounded': 207.0, 'max': 213.0, 'max_executed': 213.0, 'max_bounded': 205.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.12067985534667969, 'cpu': 0.21875, 'solve': 0.020917892456054688, 'unsat': 0.0, 'sat': 0.007955551147460938}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.8795642852783203, 'cpu': 2.546875, 'solve': 0.1659984588623047, 'unsat': 0.05628204345703125, 'sat': 0.045864105224609375}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 5764.0, 'conflicts': 1309.0, 'conflicts_analyzed': 1255.0, 'restarts': 0.0, 'restarts_last': 80.0, 'extra': {'domain_choices': 0.0, 'models': 8.0, 'models_level': 1361.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 889.0, 'distributed_sum_lbd': 2598.0, 'integrated': 4064.0, 'lemmas': 8322.0, 'lits_learnt': 121668.0, 'lemmas_binary': 550.0, 'lemmas_ternary': 432.0, 'cpu_time': 0.921875, 'integrated_imps': 691.0, 'integrated_jumps': 1560.0, 'guiding_paths_lits': 12644.0, 'guiding_paths': 116.0, 'splits': 0.0, 'lemmas_conflict': 1251.0, 'lemmas_loop': 3081.0, 'lemmas_other': 3990.0, 'lits_conflict': 31355.0, 'lits_loop': 23351.0, 'lits_other': 66962.0, 'jumps': {'jumps': 1255.0, 'jumps_bounded': 42.0, 'levels': 3349.0, 'levels_bounded': 1410.0, 'max': 213.0, 'max_executed': 213.0, 'max_bounded': 205.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{11: 25, 12: 29, 13: 31, 14: 33, 15: 37, 16: 39, 17: 40}

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 18 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 8 ( 80.00% solved)

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(18, 40)', truth=True, inc_range=None)

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 18, step = 40]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 18)

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Reaction at search length 40:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(24)]), ('plan_module', [Number(41), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.092535s.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 41: original = External(symbol='current_last_sgoals(18, 40)', truth=True, inc_range=None), conversion = current_last_sgoals(18,40).

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.064065s with result Satisfiable.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15659990000000334, Incremental time limit = None
Running cumulative time = 1.9767010000000056, Cumulative time limit = 1800
Used memory = (RSS = 235.445312Mb, VMS = 227.070312Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.569948s, Solving = 0.406753s, Total = 1.976701s, Memory = (RSS = 235.445312Mb, VMS = 227.070312Mb), Step range = [24-41]), Calls = 17
Final Model :: Total atoms = 8995, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=40, end_step=41, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.5699477000000037, solving_time=0.40675330000000187, total_time=1.9767010000000056, memory=Memory(rss=235.4453125, vms=227.0703125), step_range=range(24, 42), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.0925348000000028, solving_time=0.06406510000000054, total_time=0.15659990000000334, memory=Memory(rss=235.4453125, vms=227.0703125), step_range=range(41, 42), clingo_stats={'problem': {'lp': {'atoms': 43968.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 253273.0, 'bodies_tr': 253273.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3123.0, 'count_bodies_tr': 3123.0, 'sccs': 315.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6132.0, 'rules': 474886.0, 'rules_normal': 472106.0, 'rules_choice': 2763.0, 'rules_minimize': 17.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 474886.0, 'rules_tr_normal': 472106.0, 'rules_tr_choice': 2763.0, 'rules_tr_minimize': 17.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 87872.0, 'eqs_atom': 19717.0, 'eqs_body': 3819.0, 'eqs_other': 64336.0}, 'lpStep': {'atoms': 2382.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15182.0, 'bodies_tr': 15182.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28322.0, 'rules_normal': 28169.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28322.0, 'rules_tr_normal': 28169.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5294.0, 'eqs_atom': 1126.0, 'eqs_body': 118.0, 'eqs_other': 4050.0}, 'generator': {'vars': 25977.0, 'vars_eliminated': 0.0, 'vars_frozen': 16387.0, 'constraints': 6011.0, 'constraints_binary': 196367.0, 'constraints_ternary': 24132.0, 'acyc_edges': 0.0, 'complexity': 227524.0}}, 'solving': {'solvers': {'choices': 836.0, 'conflicts': 10.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 340.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 10.0, 'distributed_sum_lbd': 10.0, 'integrated': 0.0, 'lemmas': 285.0, 'lits_learnt': 2174.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.1875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1519.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 275.0, 'lemmas_other': 0.0, 'lits_conflict': 10.0, 'lits_loop': 2164.0, 'lits_other': 0.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 0.0, 'levels': 10.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.1595745086669922, 'cpu': 0.296875, 'solve': 0.05086517333984375, 'unsat': 0.0, 'sat': 0.0069828033447265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.0391387939453125, 'cpu': 2.84375, 'solve': 0.21686363220214844, 'unsat': 0.05628204345703125, 'sat': 0.05284690856933594}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6600.0, 'conflicts': 1319.0, 'conflicts_analyzed': 1265.0, 'restarts': 0.0, 'restarts_last': 80.0, 'extra': {'domain_choices': 0.0, 'models': 9.0, 'models_level': 1701.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 899.0, 'distributed_sum_lbd': 2608.0, 'integrated': 4064.0, 'lemmas': 8607.0, 'lits_learnt': 123842.0, 'lemmas_binary': 550.0, 'lemmas_ternary': 432.0, 'cpu_time': 1.109375, 'integrated_imps': 691.0, 'integrated_jumps': 1560.0, 'guiding_paths_lits': 14163.0, 'guiding_paths': 123.0, 'splits': 0.0, 'lemmas_conflict': 1261.0, 'lemmas_loop': 3356.0, 'lemmas_other': 3990.0, 'lits_conflict': 31365.0, 'lits_loop': 25515.0, 'lits_other': 66962.0, 'jumps': {'jumps': 1265.0, 'jumps_bounded': 42.0, 'levels': 3359.0, 'levels_bounded': 1410.0, 'max': 213.0, 'max_executed': 213.0, 'max_bounded': 205.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{11: 25, 12: 29, 13: 31, 14: 33, 15: 37, 16: 39, 17: 40, 18: 41}

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 19 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 9 ( 90.00% solved)

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(19, 41)', truth=True, inc_range=None)

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 19, step = 41]:
sub_goal(3, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 19)

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Reaction at search length 41:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(24)]), ('plan_module', [Number(42), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.097786s.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 42: original = External(symbol='current_last_sgoals(19, 41)', truth=True, inc_range=None), conversion = current_last_sgoals(19,41).

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027259s with result Unsatisfiable.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1250452000000024, Incremental time limit = None
Running cumulative time = 2.101746200000008, Cumulative time limit = 1800
Used memory = (RSS = 237.386719Mb, VMS = 228.109375Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=41, end_step=42, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.667734100000004, solving_time=0.4340121000000039, total_time=2.101746200000008, memory=Memory(rss=237.38671875, vms=228.109375), step_range=range(24, 43), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09778640000000038, solving_time=0.027258800000002026, total_time=0.1250452000000024, memory=Memory(rss=237.38671875, vms=228.109375), step_range=range(42, 43), clingo_stats={'problem': {'lp': {'atoms': 46337.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 268476.0, 'bodies_tr': 268476.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3304.0, 'count_bodies_tr': 3304.0, 'sccs': 335.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6568.0, 'rules': 503274.0, 'rules_normal': 500341.0, 'rules_choice': 2915.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 503274.0, 'rules_tr_normal': 500341.0, 'rules_tr_choice': 2915.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 93217.0, 'eqs_atom': 20853.0, 'eqs_body': 3936.0, 'eqs_other': 68428.0}, 'lpStep': {'atoms': 2369.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15203.0, 'bodies_tr': 15203.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28388.0, 'rules_normal': 28235.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28388.0, 'rules_tr_normal': 28235.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5345.0, 'eqs_atom': 1136.0, 'eqs_body': 117.0, 'eqs_other': 4092.0}, 'generator': {'vars': 27751.0, 'vars_eliminated': 0.0, 'vars_frozen': 17496.0, 'constraints': 6498.0, 'constraints_binary': 211691.0, 'constraints_ternary': 26122.0, 'acyc_edges': 0.0, 'complexity': 245395.0}}, 'solving': {'solvers': {'choices': 370.0, 'conflicts': 179.0, 'conflicts_analyzed': 176.0, 'restarts': 0.0, 'restarts_last': 38.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 80.0, 'distributed_sum_lbd': 249.0, 'integrated': 436.0, 'lemmas': 927.0, 'lits_learnt': 19351.0, 'lemmas_binary': 63.0, 'lemmas_ternary': 24.0, 'cpu_time': 0.125, 'integrated_imps': 38.0, 'integrated_jumps': 77.0, 'guiding_paths_lits': 1603.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 176.0, 'lemmas_loop': 352.0, 'lemmas_other': 399.0, 'lits_conflict': 5948.0, 'lits_loop': 2694.0, 'lits_other': 10709.0, 'jumps': {'jumps': 176.0, 'jumps_bounded': 3.0, 'levels': 271.0, 'levels_bounded': 3.0, 'max': 10.0, 'max_executed': 10.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 18.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.12868309020996094, 'cpu': 0.234375, 'solve': 0.013975143432617188, 'unsat': 0.013975143432617188, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.1678218841552734, 'cpu': 3.078125, 'solve': 0.23083877563476562, 'unsat': 0.07025718688964844, 'sat': 0.05284690856933594}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6970.0, 'conflicts': 1498.0, 'conflicts_analyzed': 1441.0, 'restarts': 0.0, 'restarts_last': 80.0, 'extra': {'domain_choices': 0.0, 'models': 9.0, 'models_level': 1701.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 979.0, 'distributed_sum_lbd': 2857.0, 'integrated': 4500.0, 'lemmas': 9534.0, 'lits_learnt': 143193.0, 'lemmas_binary': 613.0, 'lemmas_ternary': 456.0, 'cpu_time': 1.234375, 'integrated_imps': 729.0, 'integrated_jumps': 1637.0, 'guiding_paths_lits': 15766.0, 'guiding_paths': 130.0, 'splits': 0.0, 'lemmas_conflict': 1437.0, 'lemmas_loop': 3708.0, 'lemmas_other': 4389.0, 'lits_conflict': 37313.0, 'lits_loop': 28209.0, 'lits_other': 77671.0, 'jumps': {'jumps': 1441.0, 'jumps_bounded': 45.0, 'levels': 3630.0, 'levels_bounded': 1413.0, 'max': 213.0, 'max_executed': 213.0, 'max_bounded': 205.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Reaction at search length 42:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(24)]), ('plan_module', [Number(43), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.094200s.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.037768s with result Satisfiable.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13196710000000422, Incremental time limit = None
Running cumulative time = 2.2337133000000122, Cumulative time limit = 1800
Used memory = (RSS = 240.312500Mb, VMS = 230.054688Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.761934s, Solving = 0.471780s, Total = 2.233713s, Memory = (RSS = 240.312500Mb, VMS = 230.054688Mb), Step range = [24-43]), Calls = 19
Final Model :: Total atoms = 9676, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=42, end_step=43, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.761933600000006, solving_time=0.47177970000000613, total_time=2.2337133000000122, memory=Memory(rss=240.3125, vms=230.0546875), step_range=range(24, 44), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09419950000000199, solving_time=0.03776760000000223, total_time=0.13196710000000422, memory=Memory(rss=240.3125, vms=230.0546875), step_range=range(43, 44), clingo_stats={'problem': {'lp': {'atoms': 48716.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 283700.0, 'bodies_tr': 283700.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3485.0, 'count_bodies_tr': 3485.0, 'sccs': 355.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7004.0, 'rules': 531728.0, 'rules_normal': 528642.0, 'rules_choice': 3067.0, 'rules_minimize': 19.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 531728.0, 'rules_tr_normal': 528642.0, 'rules_tr_choice': 3067.0, 'rules_tr_minimize': 19.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 98615.0, 'eqs_atom': 21999.0, 'eqs_body': 4054.0, 'eqs_other': 72562.0}, 'lpStep': {'atoms': 2379.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15224.0, 'bodies_tr': 15224.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28454.0, 'rules_normal': 28301.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28454.0, 'rules_tr_normal': 28301.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5398.0, 'eqs_atom': 1146.0, 'eqs_body': 118.0, 'eqs_other': 4134.0}, 'generator': {'vars': 29525.0, 'vars_eliminated': 0.0, 'vars_frozen': 18605.0, 'constraints': 6985.0, 'constraints_binary': 228661.0, 'constraints_ternary': 28102.0, 'acyc_edges': 0.0, 'complexity': 264902.0}}, 'solving': {'solvers': {'choices': 1014.0, 'conflicts': 255.0, 'conflicts_analyzed': 255.0, 'restarts': 0.0, 'restarts_last': 71.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 380.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 106.0, 'distributed_sum_lbd': 334.0, 'integrated': 481.0, 'lemmas': 1321.0, 'lits_learnt': 23825.0, 'lemmas_binary': 85.0, 'lemmas_ternary': 66.0, 'cpu_time': 0.109375, 'integrated_imps': 15.0, 'integrated_jumps': 63.0, 'guiding_paths_lits': 1687.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 255.0, 'lemmas_loop': 585.0, 'lemmas_other': 481.0, 'lits_conflict': 9488.0, 'lits_loop': 4934.0, 'lits_other': 9403.0, 'jumps': {'jumps': 255.0, 'jumps_bounded': 1.0, 'levels': 607.0, 'levels_bounded': 241.0, 'max': 248.0, 'max_executed': 248.0, 'max_bounded': 241.0}}}}, 'summary': {'call': 19.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.13563919067382812, 'cpu': 0.21875, 'solve': 0.024904251098632812, 'unsat': 0.0, 'sat': 0.0079498291015625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.3034610748291016, 'cpu': 3.296875, 'solve': 0.25574302673339844, 'unsat': 0.07025718688964844, 'sat': 0.06079673767089844}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 7984.0, 'conflicts': 1753.0, 'conflicts_analyzed': 1696.0, 'restarts': 0.0, 'restarts_last': 80.0, 'extra': {'domain_choices': 0.0, 'models': 10.0, 'models_level': 2081.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1085.0, 'distributed_sum_lbd': 3191.0, 'integrated': 4981.0, 'lemmas': 10855.0, 'lits_learnt': 167018.0, 'lemmas_binary': 698.0, 'lemmas_ternary': 522.0, 'cpu_time': 1.34375, 'integrated_imps': 744.0, 'integrated_jumps': 1700.0, 'guiding_paths_lits': 17453.0, 'guiding_paths': 137.0, 'splits': 0.0, 'lemmas_conflict': 1692.0, 'lemmas_loop': 4293.0, 'lemmas_other': 4870.0, 'lits_conflict': 46801.0, 'lits_loop': 33143.0, 'lits_other': 87074.0, 'jumps': {'jumps': 1696.0, 'jumps_bounded': 46.0, 'levels': 4237.0, 'levels_bounded': 1654.0, 'max': 248.0, 'max_executed': 248.0, 'max_bounded': 241.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{11: 25, 12: 29, 13: 31, 14: 33, 15: 37, 16: 39, 17: 40, 18: 41, 19: 43}

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 20 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 10 (100.00% solved)

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(20, 43)', truth=True, inc_range=None)

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 20, step = 43]:
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 20)

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(43)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(2, complete_tower(blue,puzzle_room_table), false, false)
final_goal(2, complete_tower(blue,puzzle_room_table), true, true)
final_goal(2, complete_tower(red,puzzle_room_table), false, false)
final_goal(2, complete_tower(red,puzzle_room_table), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, tower_base((block,1),puzzle_room_table), false, true)
final_goal(2, tower_base((block,1),puzzle_room_table), true, false)
final_goal(2, tower_base((block,2),puzzle_room_table), false, true)
final_goal(2, tower_base((block,2),puzzle_room_table), true, false)
final_goal(2, tower_base((block,3),puzzle_room_table), false, false)
final_goal(2, tower_base((block,3),puzzle_room_table), true, true)
final_goal(2, tower_base((block,4),puzzle_room_table), false, true)
final_goal(2, tower_base((block,4),puzzle_room_table), true, false)
final_goal(2, tower_base((block,5),puzzle_room_table), false, true)
final_goal(2, tower_base((block,5),puzzle_room_table), true, false)
final_goal(2, tower_base((block,6),puzzle_room_table), false, false)
final_goal(2, tower_base((block,6),puzzle_room_table), true, true)
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false)

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =     34 : Maximum =    100

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(24)]), ('plan_module', [Number(44), Number(24), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096330s.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 44: original = External(symbol='current_last_sgoals(20, 43)', truth=True, inc_range=None), conversion = current_last_sgoals(20,43).

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 44: original = External(symbol='seq_achieve_fgoals(43)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(43).

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.037262s with result Satisfiable.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1335917000000002, Incremental time limit = None
Running cumulative time = 2.3673050000000124, Cumulative time limit = 1800
Used memory = (RSS = 246.324219Mb, VMS = 242.585938Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.858263s, Solving = 0.509042s, Total = 2.367305s, Memory = (RSS = 246.324219Mb, VMS = 242.585938Mb), Step range = [24-44]), Calls = 20
Final Model :: Total atoms = 10296, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=43, end_step=44, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.8582634000000091, solving_time=0.5090416000000033, total_time=2.3673050000000124, memory=Memory(rss=246.32421875, vms=242.5859375), step_range=range(24, 45), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09632980000000302, solving_time=0.03726189999999718, total_time=0.1335917000000002, memory=Memory(rss=246.32421875, vms=242.5859375), step_range=range(44, 45), clingo_stats={'problem': {'lp': {'atoms': 51105.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 298945.0, 'bodies_tr': 298945.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3666.0, 'count_bodies_tr': 3666.0, 'sccs': 375.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7440.0, 'rules': 560248.0, 'rules_normal': 557009.0, 'rules_choice': 3219.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 560248.0, 'rules_tr_normal': 557009.0, 'rules_tr_choice': 3219.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 104064.0, 'eqs_atom': 23155.0, 'eqs_body': 4171.0, 'eqs_other': 76738.0}, 'lpStep': {'atoms': 2389.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15245.0, 'bodies_tr': 15245.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28520.0, 'rules_normal': 28367.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 28520.0, 'rules_tr_normal': 28367.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5449.0, 'eqs_atom': 1156.0, 'eqs_body': 117.0, 'eqs_other': 4176.0}, 'generator': {'vars': 31299.0, 'vars_eliminated': 0.0, 'vars_frozen': 19714.0, 'constraints': 7469.0, 'constraints_binary': 245687.0, 'constraints_ternary': 30061.0, 'acyc_edges': 0.0, 'complexity': 284441.0}}, 'solving': {'solvers': {'choices': 1052.0, 'conflicts': 113.0, 'conflicts_analyzed': 113.0, 'restarts': 0.0, 'restarts_last': 41.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 398.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 59.0, 'distributed_sum_lbd': 184.0, 'integrated': 230.0, 'lemmas': 424.0, 'lits_learnt': 9330.0, 'lemmas_binary': 27.0, 'lemmas_ternary': 39.0, 'cpu_time': 0.078125, 'integrated_imps': 11.0, 'integrated_jumps': 25.0, 'guiding_paths_lits': 1771.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 113.0, 'lemmas_loop': 81.0, 'lemmas_other': 230.0, 'lits_conflict': 3850.0, 'lits_loop': 634.0, 'lits_other': 4846.0, 'jumps': {'jumps': 113.0, 'jumps_bounded': 0.0, 'levels': 157.0, 'levels_bounded': 0.0, 'max': 6.0, 'max_executed': 6.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 20.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.1372833251953125, 'cpu': 0.1875, 'solve': 0.023180007934570312, 'unsat': 0.0, 'sat': 0.009220123291015625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.440744400024414, 'cpu': 3.484375, 'solve': 0.27892303466796875, 'unsat': 0.07025718688964844, 'sat': 0.07001686096191406}, 'models': {'enumerated': 11.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 9036.0, 'conflicts': 1866.0, 'conflicts_analyzed': 1809.0, 'restarts': 0.0, 'restarts_last': 80.0, 'extra': {'domain_choices': 0.0, 'models': 11.0, 'models_level': 2479.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1144.0, 'distributed_sum_lbd': 3375.0, 'integrated': 5211.0, 'lemmas': 11279.0, 'lits_learnt': 176348.0, 'lemmas_binary': 725.0, 'lemmas_ternary': 561.0, 'cpu_time': 1.421875, 'integrated_imps': 755.0, 'integrated_jumps': 1725.0, 'guiding_paths_lits': 19224.0, 'guiding_paths': 144.0, 'splits': 0.0, 'lemmas_conflict': 1805.0, 'lemmas_loop': 4374.0, 'lemmas_other': 5100.0, 'lits_conflict': 50651.0, 'lits_loop': 33777.0, 'lits_other': 91920.0, 'jumps': {'jumps': 1809.0, 'jumps_bounded': 46.0, 'levels': 4394.0, 'levels_bounded': 1654.0, 'max': 248.0, 'max_executed': 248.0, 'max_bounded': 241.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{11: 25, 12: 29, 13: 31, 14: 33, 15: 37, 16: 39, 17: 40, 18: 41, 19: 43, 20: 44}

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 21 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 11 (110.00% solved)

[03-01-2022_17-11-24] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 20 was achieved successfully.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.074256s, Solving = 0.023250s, Total = 0.097507s, Memory = (RSS = 182.800781Mb, VMS = 172.445312Mb), Step range = [24-25]
2 : Statistics :: Grounding = 0.082116s, Solving = 0.007002s, Total = 0.089118s, Memory = (RSS = 184.695312Mb, VMS = 174.511719Mb), Step range = [26-26]
3 : Statistics :: Grounding = 0.073139s, Solving = 0.011872s, Total = 0.085011s, Memory = (RSS = 186.660156Mb, VMS = 176.984375Mb), Step range = [27-27]
4 : Statistics :: Grounding = 0.094303s, Solving = 0.013085s, Total = 0.107388s, Memory = (RSS = 187.863281Mb, VMS = 177.832031Mb), Step range = [28-28]
5 : Statistics :: Grounding = 0.104838s, Solving = 0.013295s, Total = 0.118133s, Memory = (RSS = 191.511719Mb, VMS = 181.886719Mb), Step range = [29-29]
6 : Statistics :: Grounding = 0.102473s, Solving = 0.010593s, Total = 0.113066s, Memory = (RSS = 196.054688Mb, VMS = 187.757812Mb), Step range = [30-30]
7 : Statistics :: Grounding = 0.071944s, Solving = 0.017152s, Total = 0.089096s, Memory = (RSS = 198.535156Mb, VMS = 188.835938Mb), Step range = [31-31]
8 : Statistics :: Grounding = 0.071884s, Solving = 0.012567s, Total = 0.084452s, Memory = (RSS = 203.988281Mb, VMS = 195.582031Mb), Step range = [32-32]
9 : Statistics :: Grounding = 0.084265s, Solving = 0.021027s, Total = 0.105292s, Memory = (RSS = 206.039062Mb, VMS = 196.636719Mb), Step range = [33-33]
10 : Statistics :: Grounding = 0.078312s, Solving = 0.017346s, Total = 0.095658s, Memory = (RSS = 212.660156Mb, VMS = 207.265625Mb), Step range = [34-34]
11 : Statistics :: Grounding = 0.099245s, Solving = 0.027845s, Total = 0.127091s, Memory = (RSS = 215.144531Mb, VMS = 208.621094Mb), Step range = [35-35]
12 : Statistics :: Grounding = 0.127553s, Solving = 0.021589s, Total = 0.149143s, Memory = (RSS = 217.968750Mb, VMS = 210.402344Mb), Step range = [36-36]
13 : Statistics :: Grounding = 0.100664s, Solving = 0.034683s, Total = 0.135347s, Memory = (RSS = 219.695312Mb, VMS = 211.234375Mb), Step range = [37-37]
14 : Statistics :: Grounding = 0.105602s, Solving = 0.038006s, Total = 0.143608s, Memory = (RSS = 228.000000Mb, VMS = 222.382812Mb), Step range = [38-38]
15 : Statistics :: Grounding = 0.121135s, Solving = 0.040817s, Total = 0.161952s, Memory = (RSS = 229.613281Mb, VMS = 222.703125Mb), Step range = [39-39]
16 : Statistics :: Grounding = 0.085682s, Solving = 0.032559s, Total = 0.118240s, Memory = (RSS = 232.429688Mb, VMS = 225.222656Mb), Step range = [40-40]
17 : Statistics :: Grounding = 0.092535s, Solving = 0.064065s, Total = 0.156600s, Memory = (RSS = 235.445312Mb, VMS = 227.070312Mb), Step range = [41-41]
18 : Statistics :: Grounding = 0.097786s, Solving = 0.027259s, Total = 0.125045s, Memory = (RSS = 237.386719Mb, VMS = 228.109375Mb), Step range = [42-42]
19 : Statistics :: Grounding = 0.094200s, Solving = 0.037768s, Total = 0.131967s, Memory = (RSS = 240.312500Mb, VMS = 230.054688Mb), Step range = [43-43]
20 : Statistics :: Grounding = 0.096330s, Solving = 0.037262s, Total = 0.133592s, Memory = (RSS = 246.324219Mb, VMS = 242.585938Mb), Step range = [44-44]

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.367305s due to: External generator exit.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 15, 29: 15, 30: 15, 31: 16, 32: 16, 33: 17, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 27, 15: 30, 16: 32, 17: 33, 18: 34, 19: 36, 20: 37, 21: 39, 22: 40, 23: 41, 24: 42}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 18, 6: 19, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 15, 29: 15, 30: 15, 31: 16, 32: 16, 33: 17, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 27, 15: 30, 16: 32, 17: 33, 18: 34, 19: 36, 20: 37, 21: 39, 22: 40, 23: 41, 24: 42}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 12, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 13, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 18, 6: 19, 7: 21, 8: 22, 9: 23, 10: 24, 11: 25, 12: 29, 13: 33, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 20, Last requested goal index = 20, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.858263s, Solving = 0.509042s, Total = 2.367305s, Memory = (RSS = 246.324219Mb, VMS = 242.585938Mb), Step range = [24-44]), Calls = 20
Model :: Total atoms = 10296, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 20 :: Actions = 20                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 18:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
Step 20:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 22:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 23:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 24:
    Current Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 25:
    Current Sub-goals:
        [Index = 11] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 11] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,2))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 27:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 29:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 30:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 31:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 32:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
Step 33:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 34:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 35:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 36:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 37:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 38:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 39:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 40:
    Current Sub-goals:
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 41:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
Step 42:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 43:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_1,(block,4),(block,5))
Step 44:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_2,(block,1),(block,2))

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=24, total_plan_length=44, step_range=range(24, 45)

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Tota actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 42, Tota actions = 42, Produced sub-goal stages = 0

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  20, AC =  20, CF = 1.0, GT =   4.02s, ST =   1.08s, OT = 0.03s, TT =   5.13s, EF = (LE = 2.0, AC = 2.0), ED = (LE = 1.2, AC = 1.2), EB = (LE = 0.6, AC = 0.6)

[03-01-2022_17-11-25] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=20, start_step=24, blend=Blend(left=0, right=0)

[03-01-2022_17-11-25] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=10, large_group_size=11

[03-01-2022_17-11-25] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=34, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 20, Sub-goal Stage Range = [25-44]
Division points [total=1] : [(Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 2 solved.

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 3 at level 1:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 20, Sub-goal Stage Range = [25-44]
Division points [total=1] : [(Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [25-34]

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [25-34], problem number = 3, increment number = 3

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 25)
	('last_sgoals', 34)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000018B1F48BE80>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 100)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 25
last_sgoals = 34
start_step = 42
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 51

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
Level = 1
Concurrency = disabled
Problem Type = partial conformance refinement (sequential) with sgoals range [25-34]
Minimum search length bound = disabled with value 51

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[03-01-2022_17-11-25] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-01-2022_17-11-25] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 42 as problem start state.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,2))', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 42})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'S': 42})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 42})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,2)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 42})

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 42).
holds(1, complete_tower(red,puzzle_room_table), false, 42).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 42).
holds(1, configuration(manipulator_end_2), aligned_with((block,2)), 42).
holds(1, configuration(manipulator_limb_1), extended, 42).
holds(1, configuration(manipulator_limb_2), extended, 42).
holds(1, configuration(puzzle_room_door), open, 42).
holds(1, configuration(starting_room_door), closed, 42).
holds(1, configuration(store_room_door), open, 42).
holds(1, grasping(manipulator_arm_1), nothing, 42).
holds(1, grasping(manipulator_arm_2), (block,2), 42).
holds(1, grasping(manipulator_end_1), nothing, 42).
holds(1, grasping(manipulator_end_2), (block,2), 42).
holds(1, in((block,1)), (puzzle_room,1), 42).
holds(1, in((block,2)), (puzzle_room,1), 42).
holds(1, in((block,3)), (puzzle_room,1), 42).
holds(1, in((block,4)), (store_room,0), 42).
holds(1, in((block,5)), (store_room,0), 42).
holds(1, in((block,6)), (puzzle_room,1), 42).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 42).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 42).
holds(1, in(manipulator_end_1), (puzzle_room,1), 42).
holds(1, in(manipulator_end_2), (puzzle_room,1), 42).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 42).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 42).
holds(1, in(puzzle_room_table), (puzzle_room,1), 42).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 42).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 42).
holds(1, in(talos), (puzzle_room,1), 42).
holds(1, in_tower((block,1),(block,1)), true, 42).
holds(1, in_tower((block,1),(block,2)), false, 42).
holds(1, in_tower((block,1),(block,3)), false, 42).
holds(1, in_tower((block,1),(block,4)), false, 42).
holds(1, in_tower((block,1),(block,5)), false, 42).
holds(1, in_tower((block,1),(block,6)), false, 42).
holds(1, in_tower((block,2),(block,1)), false, 42).
holds(1, in_tower((block,2),(block,2)), false, 42).
holds(1, in_tower((block,2),(block,3)), false, 42).
holds(1, in_tower((block,2),(block,4)), false, 42).
holds(1, in_tower((block,2),(block,5)), false, 42).
holds(1, in_tower((block,2),(block,6)), false, 42).
holds(1, in_tower((block,3),(block,1)), false, 42).
holds(1, in_tower((block,3),(block,2)), true, 42).
holds(1, in_tower((block,3),(block,3)), true, 42).
holds(1, in_tower((block,3),(block,4)), false, 42).
holds(1, in_tower((block,3),(block,5)), false, 42).
holds(1, in_tower((block,3),(block,6)), false, 42).
holds(1, in_tower((block,4),(block,1)), false, 42).
holds(1, in_tower((block,4),(block,2)), false, 42).
holds(1, in_tower((block,4),(block,3)), false, 42).
holds(1, in_tower((block,4),(block,4)), false, 42).
holds(1, in_tower((block,4),(block,5)), false, 42).
holds(1, in_tower((block,4),(block,6)), false, 42).
holds(1, in_tower((block,5),(block,1)), false, 42).
holds(1, in_tower((block,5),(block,2)), false, 42).
holds(1, in_tower((block,5),(block,3)), false, 42).
holds(1, in_tower((block,5),(block,4)), false, 42).
holds(1, in_tower((block,5),(block,5)), false, 42).
holds(1, in_tower((block,5),(block,6)), false, 42).
holds(1, in_tower((block,6),(block,1)), false, 42).
holds(1, in_tower((block,6),(block,2)), false, 42).
holds(1, in_tower((block,6),(block,3)), false, 42).
holds(1, in_tower((block,6),(block,4)), false, 42).
holds(1, in_tower((block,6),(block,5)), false, 42).
holds(1, in_tower((block,6),(block,6)), true, 42).
holds(1, on((block,1)), puzzle_room_table_left, 42).
holds(1, on((block,2)), (block,3), 42).
holds(1, on((block,3)), puzzle_room_table_left, 42).
holds(1, on((block,4)), nothing, 42).
holds(1, on((block,5)), nothing, 42).
holds(1, on((block,6)), puzzle_room_table_right, 42).
holds(1, tower_base((block,1),puzzle_room_table), true, 42).
holds(1, tower_base((block,2),puzzle_room_table), false, 42).
holds(1, tower_base((block,3),puzzle_room_table), true, 42).
holds(1, tower_base((block,4),puzzle_room_table), false, 42).
holds(1, tower_base((block,5),puzzle_room_table), false, 42).
holds(1, tower_base((block,6),puzzle_room_table), true, 42).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 42).
holds(2, complete_tower(blue,puzzle_room_table), false, 42).
holds(2, complete_tower(red,puzzle_room_table), false, 42).
holds(2, configuration(manipulator_arm_1), extended, 42).
holds(2, configuration(manipulator_arm_2), extended, 42).
holds(2, configuration(puzzle_room_door), open, 42).
holds(2, configuration(starting_room_door), closed, 42).
holds(2, configuration(store_room_door), open, 42).
holds(2, grasping(manipulator_arm_1), nothing, 42).
holds(2, grasping(manipulator_arm_2), (block,2), 42).
holds(2, in((block,1)), puzzle_room, 42).
holds(2, in((block,2)), puzzle_room, 42).
holds(2, in((block,3)), puzzle_room, 42).
holds(2, in((block,4)), store_room, 42).
holds(2, in((block,5)), store_room, 42).
holds(2, in((block,6)), puzzle_room, 42).
holds(2, in(manipulator_arm_1), puzzle_room, 42).
holds(2, in(manipulator_arm_2), puzzle_room, 42).
holds(2, in(puzzle_room_table), puzzle_room, 42).
holds(2, in(talos), puzzle_room, 42).
holds(2, in_tower((block,1),(block,1)), true, 42).
holds(2, in_tower((block,1),(block,2)), false, 42).
holds(2, in_tower((block,1),(block,3)), false, 42).
holds(2, in_tower((block,1),(block,4)), false, 42).
holds(2, in_tower((block,1),(block,5)), false, 42).
holds(2, in_tower((block,1),(block,6)), false, 42).
holds(2, in_tower((block,2),(block,1)), false, 42).
holds(2, in_tower((block,2),(block,2)), false, 42).
holds(2, in_tower((block,2),(block,3)), false, 42).
holds(2, in_tower((block,2),(block,4)), false, 42).
holds(2, in_tower((block,2),(block,5)), false, 42).
holds(2, in_tower((block,2),(block,6)), false, 42).
holds(2, in_tower((block,3),(block,1)), false, 42).
holds(2, in_tower((block,3),(block,2)), true, 42).
holds(2, in_tower((block,3),(block,3)), true, 42).
holds(2, in_tower((block,3),(block,4)), false, 42).
holds(2, in_tower((block,3),(block,5)), false, 42).
holds(2, in_tower((block,3),(block,6)), false, 42).
holds(2, in_tower((block,4),(block,1)), false, 42).
holds(2, in_tower((block,4),(block,2)), false, 42).
holds(2, in_tower((block,4),(block,3)), false, 42).
holds(2, in_tower((block,4),(block,4)), false, 42).
holds(2, in_tower((block,4),(block,5)), false, 42).
holds(2, in_tower((block,4),(block,6)), false, 42).
holds(2, in_tower((block,5),(block,1)), false, 42).
holds(2, in_tower((block,5),(block,2)), false, 42).
holds(2, in_tower((block,5),(block,3)), false, 42).
holds(2, in_tower((block,5),(block,4)), false, 42).
holds(2, in_tower((block,5),(block,5)), false, 42).
holds(2, in_tower((block,5),(block,6)), false, 42).
holds(2, in_tower((block,6),(block,1)), false, 42).
holds(2, in_tower((block,6),(block,2)), false, 42).
holds(2, in_tower((block,6),(block,3)), false, 42).
holds(2, in_tower((block,6),(block,4)), false, 42).
holds(2, in_tower((block,6),(block,5)), false, 42).
holds(2, in_tower((block,6),(block,6)), true, 42).
holds(2, on((block,1)), puzzle_room_table, 42).
holds(2, on((block,2)), (block,3), 42).
holds(2, on((block,3)), puzzle_room_table, 42).
holds(2, on((block,4)), nothing, 42).
holds(2, on((block,5)), nothing, 42).
holds(2, on((block,6)), puzzle_room_table, 42).
holds(2, tower_base((block,1),puzzle_room_table), true, 42).
holds(2, tower_base((block,2),puzzle_room_table), false, 42).
holds(2, tower_base((block,3),puzzle_room_table), true, 42).
holds(2, tower_base((block,4),puzzle_room_table), false, 42).
holds(2, tower_base((block,5),puzzle_room_table), false, 42).
holds(2, tower_base((block,6),puzzle_room_table), true, 42).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 42).

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 25})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 26})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 27})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 30})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 31})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 32})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 33})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 34})

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 25).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 26).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 27).
sub_goal(2, talos, move(hallway), in(talos), hallway, 28).
sub_goal(2, talos, move(store_room), in(talos), store_room, 29).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 30).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 31).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 32).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 33).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 34).

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000018B1F3B3280>]
	incrementor = SolveIncrementor(step_start=42, step_increase=1, step_increase_initial=2, step_end_min=52, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 42), range_=None), IncPart(name='plan_module', args=('#inc', 42, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 42, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 42, 25, 34, 'sequential', 'true'), range_=None)]

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 817 rules

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0042011999999971295s

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.030476s.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007072s with result Satisfiable.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000018B258AC0E0>

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 42)
	('last_sgoals', 34)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000018B1F48BE80>)
	('first_sgoals', 25)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000018B258AC0E0>)

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(25, 43)', truth=True, inc_range=None)

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 42). %* None *%
#program plan_module(#inc, 42, false, false). %* None *%
#program optimisation_module(#inc, 42, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 42, 25, 34, sequential, true). %* None *%

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     41 : Current =     43
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(42), Number(42)]), ('plan_module', [Number(42), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(43), Number(42)]), ('plan_module', [Number(43), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.117741s.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 42: original = External(symbol='current_last_sgoals(25, 43)', truth=True, inc_range=None), conversion = current_last_sgoals(25,43).

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 43: original = External(symbol='current_last_sgoals(25, 43)', truth=True, inc_range=None), conversion = current_last_sgoals(25,43).

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016409s with result Satisfiable.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13415009999999938, Incremental time limit = None
Running cumulative time = 0.13415009999999938, Cumulative time limit = 1800
Used memory = (RSS = 190.828125Mb, VMS = 180.347656Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.117741s, Solving = 0.016409s, Total = 0.134150s, Memory = (RSS = 190.828125Mb, VMS = 180.347656Mb), Step range = [42-43]), Calls = 1
Final Model :: Total atoms = 4168, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=41, end_step=43, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.11774099999999876, solving_time=0.01640910000000062, total_time=0.13415009999999938, memory=Memory(rss=190.828125, vms=180.34765625), step_range=range(42, 44), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11774099999999876, solving_time=0.01640910000000062, total_time=0.13415009999999938, memory=Memory(rss=190.828125, vms=180.34765625), step_range=range(42, 44), clingo_stats={'problem': {'lp': {'atoms': 12256.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28391.0, 'bodies_tr': 28391.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 57024.0, 'rules_normal': 56480.0, 'rules_choice': 543.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 57024.0, 'rules_tr_normal': 56480.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 21539.0, 'eqs_atom': 7059.0, 'eqs_body': 1911.0, 'eqs_other': 12569.0}, 'lpStep': {'atoms': 5731.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25772.0, 'bodies_tr': 25772.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 590.0, 'rules': 49589.0, 'rules_normal': 49045.0, 'rules_choice': 543.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 49589.0, 'rules_tr_normal': 49045.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8483.0, 'eqs_atom': 2149.0, 'eqs_body': 386.0, 'eqs_other': 5948.0}, 'generator': {'vars': 2638.0, 'vars_eliminated': 0.0, 'vars_frozen': 1597.0, 'constraints': 33.0, 'constraints_binary': 1406.0, 'constraints_ternary': 171.0, 'acyc_edges': 0.0, 'complexity': 1626.0}}, 'solving': {'solvers': {'choices': 140.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 37.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 19.0, 'lemmas': 35.0, 'lits_learnt': 35.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 19.0, 'integrated_jumps': 44.0, 'guiding_paths_lits': 200.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 19.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 19.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.1344127655029297, 'cpu': 0.140625, 'solve': 0.0049896240234375, 'unsat': 0.0, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.1768798828125, 'cpu': 0.1875, 'solve': 0.009542465209960938, 'unsat': 0.0, 'sat': 0.0025615692138671875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 140.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 38.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 19.0, 'lemmas': 35.0, 'lits_learnt': 35.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 19.0, 'integrated_jumps': 44.0, 'guiding_paths_lits': 208.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 19.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 19.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 43}

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 26 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 2 ( 20.00% solved)

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(26, 43)', truth=True, inc_range=None)

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 26, step = 43]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 26)

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Reaction at search length 43:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(42)]), ('plan_module', [Number(44), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.094217s.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 44: original = External(symbol='current_last_sgoals(26, 43)', truth=True, inc_range=None), conversion = current_last_sgoals(26,43).

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017914s with result Satisfiable.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11213030000000401, Incremental time limit = None
Running cumulative time = 0.2462804000000034, Cumulative time limit = 1800
Used memory = (RSS = 193.128906Mb, VMS = 183.277344Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.211958s, Solving = 0.034323s, Total = 0.246280s, Memory = (RSS = 193.128906Mb, VMS = 183.277344Mb), Step range = [42-44]), Calls = 2
Final Model :: Total atoms = 4542, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=43, end_step=44, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.21195750000000046, solving_time=0.03432290000000293, total_time=0.2462804000000034, memory=Memory(rss=193.12890625, vms=183.27734375), step_range=range(42, 45), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.0942165000000017, solving_time=0.01791380000000231, total_time=0.11213030000000401, memory=Memory(rss=193.12890625, vms=183.27734375), step_range=range(44, 45), clingo_stats={'problem': {'lp': {'atoms': 14012.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 50032.0, 'bodies_tr': 50032.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 464.0, 'count_bodies_tr': 464.0, 'sccs': 36.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 627.0, 'rules': 98252.0, 'rules_normal': 97512.0, 'rules_choice': 738.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 98252.0, 'rules_tr_normal': 97512.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 24675.0, 'eqs_atom': 7628.0, 'eqs_body': 2358.0, 'eqs_other': 14689.0}, 'lpStep': {'atoms': 1756.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21641.0, 'bodies_tr': 21641.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 41228.0, 'rules_normal': 41032.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41228.0, 'rules_tr_normal': 41032.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3136.0, 'eqs_atom': 569.0, 'eqs_body': 447.0, 'eqs_other': 2120.0}, 'generator': {'vars': 2917.0, 'vars_eliminated': 0.0, 'vars_frozen': 1819.0, 'constraints': 73.0, 'constraints_binary': 2905.0, 'constraints_ternary': 160.0, 'acyc_edges': 0.0, 'complexity': 3170.0}}, 'solving': {'solvers': {'choices': 126.0, 'conflicts': 27.0, 'conflicts_analyzed': 27.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 55.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 28.0, 'distributed_sum_lbd': 29.0, 'integrated': 7.0, 'lemmas': 28.0, 'lits_learnt': 29.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 296.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 27.0, 'lemmas_loop': 1.0, 'lemmas_other': 0.0, 'lits_conflict': 27.0, 'lits_loop': 2.0, 'lits_other': 0.0, 'jumps': {'jumps': 27.0, 'jumps_bounded': 0.0, 'levels': 27.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.11305427551269531, 'cpu': 0.109375, 'solve': 0.008981704711914062, 'unsat': 0.0, 'sat': 0.002994537353515625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2899341583251953, 'cpu': 0.296875, 'solve': 0.018524169921875, 'unsat': 0.0, 'sat': 0.0055561065673828125}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 266.0, 'conflicts': 35.0, 'conflicts_analyzed': 35.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 93.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 36.0, 'distributed_sum_lbd': 37.0, 'integrated': 26.0, 'lemmas': 63.0, 'lits_learnt': 64.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 19.0, 'integrated_jumps': 44.0, 'guiding_paths_lits': 504.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 35.0, 'lemmas_loop': 9.0, 'lemmas_other': 19.0, 'lits_conflict': 35.0, 'lits_loop': 10.0, 'lits_other': 19.0, 'jumps': {'jumps': 35.0, 'jumps_bounded': 0.0, 'levels': 35.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 43, 26: 44}

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 27 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 3 ( 30.00% solved)

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(27, 44)', truth=True, inc_range=None)

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 27, step = 44]:
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 27)

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Reaction at search length 44:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     44 : Current =     45
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(45), Number(42)]), ('plan_module', [Number(45), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153395s.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 45: original = External(symbol='current_last_sgoals(27, 44)', truth=True, inc_range=None), conversion = current_last_sgoals(27,44).

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011831s with result Satisfiable.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1652255000000018, Incremental time limit = None
Running cumulative time = 0.4115059000000052, Cumulative time limit = 1800
Used memory = (RSS = 198.015625Mb, VMS = 187.839844Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.365352s, Solving = 0.046154s, Total = 0.411506s, Memory = (RSS = 198.015625Mb, VMS = 187.839844Mb), Step range = [42-45]), Calls = 3
Final Model :: Total atoms = 4917, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=44, end_step=45, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.36535200000000145, solving_time=0.046153900000003745, total_time=0.4115059000000052, memory=Memory(rss=198.015625, vms=187.83984375), step_range=range(42, 46), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.153394500000001, solving_time=0.011831000000000813, total_time=0.1652255000000018, memory=Memory(rss=198.015625, vms=187.83984375), step_range=range(45, 46), clingo_stats={'problem': {'lp': {'atoms': 15924.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71846.0, 'bodies_tr': 71846.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 666.0, 'count_bodies_tr': 666.0, 'sccs': 46.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 722.0, 'rules': 139697.0, 'rules_normal': 138761.0, 'rules_choice': 933.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139697.0, 'rules_tr_normal': 138761.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 28233.0, 'eqs_atom': 8120.0, 'eqs_body': 2720.0, 'eqs_other': 17393.0}, 'lpStep': {'atoms': 1912.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21814.0, 'bodies_tr': 21814.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 95.0, 'rules': 41445.0, 'rules_normal': 41249.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41445.0, 'rules_tr_normal': 41249.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3558.0, 'eqs_atom': 492.0, 'eqs_body': 362.0, 'eqs_other': 2704.0}, 'generator': {'vars': 3490.0, 'vars_eliminated': 0.0, 'vars_frozen': 2228.0, 'constraints': 175.0, 'constraints_binary': 5924.0, 'constraints_ternary': 465.0, 'acyc_edges': 0.0, 'complexity': 6626.0}}, 'solving': {'solvers': {'choices': 168.0, 'conflicts': 30.0, 'conflicts_analyzed': 30.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 73.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 36.0, 'distributed_sum_lbd': 42.0, 'integrated': 14.0, 'lemmas': 38.0, 'lits_learnt': 46.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 392.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 30.0, 'lemmas_loop': 6.0, 'lemmas_other': 2.0, 'lits_conflict': 30.0, 'lits_loop': 12.0, 'lits_other': 4.0, 'jumps': {'jumps': 30.0, 'jumps_bounded': 0.0, 'levels': 30.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1661205291748047, 'cpu': 0.171875, 'solve': 0.0054798126220703125, 'unsat': 0.0, 'sat': 0.001491546630859375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4560546875, 'cpu': 0.46875, 'solve': 0.024003982543945312, 'unsat': 0.0, 'sat': 0.0070476531982421875}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 434.0, 'conflicts': 65.0, 'conflicts_analyzed': 65.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 166.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 72.0, 'distributed_sum_lbd': 79.0, 'integrated': 40.0, 'lemmas': 101.0, 'lits_learnt': 110.0, 'lemmas_binary': 9.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 19.0, 'integrated_jumps': 44.0, 'guiding_paths_lits': 896.0, 'guiding_paths': 32.0, 'splits': 0.0, 'lemmas_conflict': 65.0, 'lemmas_loop': 15.0, 'lemmas_other': 21.0, 'lits_conflict': 65.0, 'lits_loop': 22.0, 'lits_other': 23.0, 'jumps': {'jumps': 65.0, 'jumps_bounded': 0.0, 'levels': 65.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 43, 26: 44, 27: 45}

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 28 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 4 ( 40.00% solved)

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(28, 45)', truth=True, inc_range=None)

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 28, step = 45]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 28)

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Reaction at search length 45:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(42)]), ('plan_module', [Number(46), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.084190s.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 46: original = External(symbol='current_last_sgoals(28, 45)', truth=True, inc_range=None), conversion = current_last_sgoals(28,45).

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009394s with result Unsatisfiable.

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09358439999999746, Incremental time limit = None
Running cumulative time = 0.5050903000000027, Cumulative time limit = 1800
Used memory = (RSS = 200.804688Mb, VMS = 191.281250Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=45, end_step=46, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.44954210000000216, solving_time=0.05554820000000049, total_time=0.5050903000000027, memory=Memory(rss=200.8046875, vms=191.28125), step_range=range(42, 47), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08419010000000071, solving_time=0.009394299999996747, total_time=0.09358439999999746, memory=Memory(rss=200.8046875, vms=191.28125), step_range=range(46, 47), clingo_stats={'problem': {'lp': {'atoms': 17898.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 93937.0, 'bodies_tr': 93937.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 868.0, 'count_bodies_tr': 868.0, 'sccs': 67.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 994.0, 'rules': 181590.0, 'rules_normal': 180458.0, 'rules_choice': 1128.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 181590.0, 'rules_tr_normal': 180458.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 32876.0, 'eqs_atom': 8830.0, 'eqs_body': 3007.0, 'eqs_other': 21039.0}, 'lpStep': {'atoms': 1974.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22091.0, 'bodies_tr': 22091.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 21.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 272.0, 'rules': 41893.0, 'rules_normal': 41697.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41893.0, 'rules_tr_normal': 41697.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4643.0, 'eqs_atom': 710.0, 'eqs_body': 287.0, 'eqs_other': 3646.0}, 'generator': {'vars': 4588.0, 'vars_eliminated': 0.0, 'vars_frozen': 2890.0, 'constraints': 443.0, 'constraints_binary': 12248.0, 'constraints_ternary': 1441.0, 'acyc_edges': 0.0, 'complexity': 14264.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 3.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 8.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 427.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.09431266784667969, 'cpu': 0.109375, 'solve': 0.0025577545166015625, 'unsat': 0.0025577545166015625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5503673553466797, 'cpu': 0.578125, 'solve': 0.026561737060546875, 'unsat': 0.0025577545166015625, 'sat': 0.0070476531982421875}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 434.0, 'conflicts': 68.0, 'conflicts_analyzed': 65.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 166.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 76.0, 'distributed_sum_lbd': 87.0, 'integrated': 40.0, 'lemmas': 105.0, 'lits_learnt': 118.0, 'lemmas_binary': 13.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 19.0, 'integrated_jumps': 44.0, 'guiding_paths_lits': 1323.0, 'guiding_paths': 39.0, 'splits': 0.0, 'lemmas_conflict': 65.0, 'lemmas_loop': 19.0, 'lemmas_other': 21.0, 'lits_conflict': 65.0, 'lits_loop': 30.0, 'lits_other': 23.0, 'jumps': {'jumps': 65.0, 'jumps_bounded': 0.0, 'levels': 65.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-25] DEBUG :: ASH Planner Main #1 >> Reaction at search length 46:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(42)]), ('plan_module', [Number(47), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.134197s.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022346s with result Satisfiable.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15654340000000033, Incremental time limit = None
Running cumulative time = 0.661633700000003, Cumulative time limit = 1800
Used memory = (RSS = 205.410156Mb, VMS = 197.382812Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.583739s, Solving = 0.077895s, Total = 0.661634s, Memory = (RSS = 205.410156Mb, VMS = 197.382812Mb), Step range = [42-47]), Calls = 5
Final Model :: Total atoms = 5666, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=46, end_step=47, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.5837391000000025, solving_time=0.07789460000000048, total_time=0.661633700000003, memory=Memory(rss=205.41015625, vms=197.3828125), step_range=range(42, 48), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13419700000000034, solving_time=0.02234639999999999, total_time=0.15654340000000033, memory=Memory(rss=205.41015625, vms=197.3828125), step_range=range(47, 48), clingo_stats={'problem': {'lp': {'atoms': 21013.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 117326.0, 'bodies_tr': 117326.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1070.0, 'count_bodies_tr': 1070.0, 'sccs': 88.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1324.0, 'rules': 225807.0, 'rules_normal': 224479.0, 'rules_choice': 1323.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 225807.0, 'rules_tr_normal': 224479.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39535.0, 'eqs_atom': 10589.0, 'eqs_body': 3372.0, 'eqs_other': 25574.0}, 'lpStep': {'atoms': 3115.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23389.0, 'bodies_tr': 23389.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 21.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 330.0, 'rules': 44217.0, 'rules_normal': 44021.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 44217.0, 'rules_tr_normal': 44021.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6659.0, 'eqs_atom': 1759.0, 'eqs_body': 365.0, 'eqs_other': 4535.0}, 'generator': {'vars': 6060.0, 'vars_eliminated': 0.0, 'vars_frozen': 3737.0, 'constraints': 814.0, 'constraints_binary': 24554.0, 'constraints_ternary': 3369.0, 'acyc_edges': 0.0, 'complexity': 28947.0}}, 'solving': {'solvers': {'choices': 531.0, 'conflicts': 24.0, 'conflicts_analyzed': 24.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 111.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 42.0, 'integrated': 108.0, 'lemmas': 231.0, 'lits_learnt': 1678.0, 'lemmas_binary': 49.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.0, 'integrated_imps': 76.0, 'integrated_jumps': 60.0, 'guiding_paths_lits': 511.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 21.0, 'lemmas_loop': 118.0, 'lemmas_other': 92.0, 'lits_conflict': 247.0, 'lits_loop': 769.0, 'lits_other': 662.0, 'jumps': {'jumps': 24.0, 'jumps_bounded': 12.0, 'levels': 163.0, 'levels_bounded': 12.0, 'max': 17.0, 'max_executed': 17.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.15815162658691406, 'cpu': 0.15625, 'solve': 0.008974075317382812, 'unsat': 0.0, 'sat': 0.00299072265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.7085189819335938, 'cpu': 0.734375, 'solve': 0.03553581237792969, 'unsat': 0.0025577545166015625, 'sat': 0.010038375854492188}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 965.0, 'conflicts': 92.0, 'conflicts_analyzed': 89.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 277.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 96.0, 'distributed_sum_lbd': 129.0, 'integrated': 148.0, 'lemmas': 336.0, 'lits_learnt': 1796.0, 'lemmas_binary': 62.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.0625, 'integrated_imps': 95.0, 'integrated_jumps': 104.0, 'guiding_paths_lits': 1834.0, 'guiding_paths': 46.0, 'splits': 0.0, 'lemmas_conflict': 86.0, 'lemmas_loop': 137.0, 'lemmas_other': 113.0, 'lits_conflict': 312.0, 'lits_loop': 799.0, 'lits_other': 685.0, 'jumps': {'jumps': 89.0, 'jumps_bounded': 12.0, 'levels': 228.0, 'levels_bounded': 12.0, 'max': 17.0, 'max_executed': 17.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 43, 26: 44, 27: 45, 28: 47}

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 29 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 5 ( 50.00% solved)

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(29, 47)', truth=True, inc_range=None)

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 29, step = 47]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 29)

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 47:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(48), Number(42)]), ('plan_module', [Number(48), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108067s.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 48: original = External(symbol='current_last_sgoals(29, 47)', truth=True, inc_range=None), conversion = current_last_sgoals(29,47).

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014944s with result Unsatisfiable.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.12301119999999699, Incremental time limit = None
Running cumulative time = 0.7846449, Cumulative time limit = 1800
Used memory = (RSS = 208.503906Mb, VMS = 199.074219Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=47, end_step=48, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.6918064000000008, solving_time=0.09283849999999916, total_time=0.7846449, memory=Memory(rss=208.50390625, vms=199.07421875), step_range=range(42, 49), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10806729999999831, solving_time=0.014943899999998678, total_time=0.12301119999999699, memory=Memory(rss=208.50390625, vms=199.07421875), step_range=range(48, 49), clingo_stats={'problem': {'lp': {'atoms': 24401.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 141577.0, 'bodies_tr': 141577.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1272.0, 'count_bodies_tr': 1272.0, 'sccs': 113.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1918.0, 'rules': 271106.0, 'rules_normal': 269582.0, 'rules_choice': 1518.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 271106.0, 'rules_tr_normal': 269582.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 46782.0, 'eqs_atom': 12389.0, 'eqs_body': 3461.0, 'eqs_other': 30932.0}, 'lpStep': {'atoms': 3388.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24251.0, 'bodies_tr': 24251.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45299.0, 'rules_normal': 45103.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45299.0, 'rules_tr_normal': 45103.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7247.0, 'eqs_atom': 1800.0, 'eqs_body': 89.0, 'eqs_other': 5358.0}, 'generator': {'vars': 8395.0, 'vars_eliminated': 0.0, 'vars_frozen': 5098.0, 'constraints': 1416.0, 'constraints_binary': 49670.0, 'constraints_ternary': 6781.0, 'acyc_edges': 0.0, 'complexity': 58163.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 7.0, 'lits_learnt': 63.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 595.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 7.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 63.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.12328529357910156, 'cpu': 0.125, 'solve': 0.00301361083984375, 'unsat': 0.00301361083984375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8318042755126953, 'cpu': 0.859375, 'solve': 0.03854942321777344, 'unsat': 0.0055713653564453125, 'sat': 0.010038375854492188}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 965.0, 'conflicts': 98.0, 'conflicts_analyzed': 89.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 277.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 96.0, 'distributed_sum_lbd': 129.0, 'integrated': 148.0, 'lemmas': 343.0, 'lits_learnt': 1859.0, 'lemmas_binary': 62.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.0625, 'integrated_imps': 95.0, 'integrated_jumps': 104.0, 'guiding_paths_lits': 2429.0, 'guiding_paths': 53.0, 'splits': 0.0, 'lemmas_conflict': 86.0, 'lemmas_loop': 144.0, 'lemmas_other': 113.0, 'lits_conflict': 312.0, 'lits_loop': 862.0, 'lits_other': 685.0, 'jumps': {'jumps': 89.0, 'jumps_bounded': 12.0, 'levels': 228.0, 'levels_bounded': 12.0, 'max': 17.0, 'max_executed': 17.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 48:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     48 : Current =     49
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('state_module', [Number(49), Number(42)]), ('plan_module', [Number(49), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.113762s.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018511s with result Unsatisfiable.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1322734999999966, Incremental time limit = None
Running cumulative time = 0.9169183999999966, Cumulative time limit = 1800
Used memory = (RSS = 214.238281Mb, VMS = 205.792969Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=48, end_step=49, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.8055683999999985, solving_time=0.11134999999999806, total_time=0.9169183999999966, memory=Memory(rss=214.23828125, vms=205.79296875), step_range=range(42, 50), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1137619999999977, solving_time=0.018511499999998904, total_time=0.1322734999999966, memory=Memory(rss=214.23828125, vms=205.79296875), step_range=range(49, 50), clingo_stats={'problem': {'lp': {'atoms': 27843.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 166153.0, 'bodies_tr': 166153.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1474.0, 'count_bodies_tr': 1474.0, 'sccs': 138.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2512.0, 'rules': 316776.0, 'rules_normal': 315056.0, 'rules_choice': 1713.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 316776.0, 'rules_tr_normal': 315056.0, 'rules_tr_choice': 1713.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 54199.0, 'eqs_atom': 14183.0, 'eqs_body': 3533.0, 'eqs_other': 36483.0}, 'lpStep': {'atoms': 3442.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24576.0, 'bodies_tr': 24576.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45670.0, 'rules_normal': 45474.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45670.0, 'rules_tr_normal': 45474.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7417.0, 'eqs_atom': 1794.0, 'eqs_body': 72.0, 'eqs_other': 5551.0}, 'generator': {'vars': 10799.0, 'vars_eliminated': 0.0, 'vars_frozen': 6479.0, 'constraints': 2045.0, 'constraints_binary': 75255.0, 'constraints_ternary': 10241.0, 'acyc_edges': 0.0, 'complexity': 87923.0}}, 'solving': {'solvers': {'choices': 84.0, 'conflicts': 25.0, 'conflicts_analyzed': 19.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 19.0, 'distributed_sum_lbd': 51.0, 'integrated': 67.0, 'lemmas': 316.0, 'lits_learnt': 4176.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 5.0, 'cpu_time': 0.015625, 'integrated_imps': 21.0, 'integrated_jumps': 58.0, 'guiding_paths_lits': 582.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 19.0, 'lemmas_loop': 231.0, 'lemmas_other': 66.0, 'lits_conflict': 527.0, 'lits_loop': 2087.0, 'lits_other': 1562.0, 'jumps': {'jumps': 19.0, 'jumps_bounded': 1.0, 'levels': 27.0, 'levels_bounded': 1.0, 'max': 4.0, 'max_executed': 4.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 7.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.13312339782714844, 'cpu': 0.140625, 'solve': 0.004985809326171875, 'unsat': 0.004985809326171875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.9649276733398438, 'cpu': 1.0, 'solve': 0.04353523254394531, 'unsat': 0.010557174682617188, 'sat': 0.010038375854492188}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1049.0, 'conflicts': 123.0, 'conflicts_analyzed': 108.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 277.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 115.0, 'distributed_sum_lbd': 180.0, 'integrated': 215.0, 'lemmas': 659.0, 'lits_learnt': 6035.0, 'lemmas_binary': 62.0, 'lemmas_ternary': 13.0, 'cpu_time': 0.078125, 'integrated_imps': 116.0, 'integrated_jumps': 162.0, 'guiding_paths_lits': 3011.0, 'guiding_paths': 59.0, 'splits': 0.0, 'lemmas_conflict': 105.0, 'lemmas_loop': 375.0, 'lemmas_other': 179.0, 'lits_conflict': 839.0, 'lits_loop': 2949.0, 'lits_other': 2247.0, 'jumps': {'jumps': 108.0, 'jumps_bounded': 13.0, 'levels': 255.0, 'levels_bounded': 13.0, 'max': 17.0, 'max_executed': 17.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 49:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(50), Number(42)]), ('plan_module', [Number(50), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124777s.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028884s with result Satisfiable.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.153660900000002, Incremental time limit = None
Running cumulative time = 1.0705792999999986, Cumulative time limit = 1800
Used memory = (RSS = 217.300781Mb, VMS = 207.910156Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.930345s, Solving = 0.140234s, Total = 1.070579s, Memory = (RSS = 217.300781Mb, VMS = 207.910156Mb), Step range = [42-50]), Calls = 8
Final Model :: Total atoms = 6794, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=49, end_step=50, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.9303451999999979, solving_time=0.1402341000000007, total_time=1.0705792999999986, memory=Memory(rss=217.30078125, vms=207.91015625), step_range=range(42, 51), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12477679999999935, solving_time=0.028884100000002633, total_time=0.153660900000002, memory=Memory(rss=217.30078125, vms=207.91015625), step_range=range(50, 51), clingo_stats={'problem': {'lp': {'atoms': 31298.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 190755.0, 'bodies_tr': 190755.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1676.0, 'count_bodies_tr': 1676.0, 'sccs': 163.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3106.0, 'rules': 362518.0, 'rules_normal': 360602.0, 'rules_choice': 1908.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 362518.0, 'rules_tr_normal': 360602.0, 'rules_tr_choice': 1908.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 61671.0, 'eqs_atom': 15986.0, 'eqs_body': 3606.0, 'eqs_other': 42079.0}, 'lpStep': {'atoms': 3455.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24602.0, 'bodies_tr': 24602.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45742.0, 'rules_normal': 45546.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45742.0, 'rules_tr_normal': 45546.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7472.0, 'eqs_atom': 1803.0, 'eqs_body': 73.0, 'eqs_other': 5596.0}, 'generator': {'vars': 13210.0, 'vars_eliminated': 0.0, 'vars_frozen': 7864.0, 'constraints': 2675.0, 'constraints_binary': 100913.0, 'constraints_ternary': 13707.0, 'acyc_edges': 0.0, 'complexity': 117763.0}}, 'solving': {'solvers': {'choices': 711.0, 'conflicts': 56.0, 'conflicts_analyzed': 56.0, 'restarts': 0.0, 'restarts_last': 21.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 165.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 54.0, 'distributed_sum_lbd': 143.0, 'integrated': 324.0, 'lemmas': 710.0, 'lits_learnt': 8807.0, 'lemmas_binary': 53.0, 'lemmas_ternary': 7.0, 'cpu_time': 0.125, 'integrated_imps': 143.0, 'integrated_jumps': 193.0, 'guiding_paths_lits': 763.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 56.0, 'lemmas_loop': 347.0, 'lemmas_other': 307.0, 'lits_conflict': 901.0, 'lits_loop': 2858.0, 'lits_other': 5048.0, 'jumps': {'jumps': 56.0, 'jumps_bounded': 2.0, 'levels': 114.0, 'levels_bounded': 2.0, 'max': 6.0, 'max_executed': 6.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 8.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.15509414672851562, 'cpu': 0.265625, 'solve': 0.014932632446289062, 'unsat': 0.0, 'sat': 0.007951736450195312}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.1200218200683594, 'cpu': 1.265625, 'solve': 0.058467864990234375, 'unsat': 0.010557174682617188, 'sat': 0.0179901123046875}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1760.0, 'conflicts': 179.0, 'conflicts_analyzed': 164.0, 'restarts': 0.0, 'restarts_last': 21.0, 'extra': {'domain_choices': 0.0, 'models': 6.0, 'models_level': 442.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 169.0, 'distributed_sum_lbd': 323.0, 'integrated': 539.0, 'lemmas': 1369.0, 'lits_learnt': 14842.0, 'lemmas_binary': 115.0, 'lemmas_ternary': 20.0, 'cpu_time': 0.203125, 'integrated_imps': 259.0, 'integrated_jumps': 355.0, 'guiding_paths_lits': 3774.0, 'guiding_paths': 66.0, 'splits': 0.0, 'lemmas_conflict': 161.0, 'lemmas_loop': 722.0, 'lemmas_other': 486.0, 'lits_conflict': 1740.0, 'lits_loop': 5807.0, 'lits_other': 7295.0, 'jumps': {'jumps': 164.0, 'jumps_bounded': 15.0, 'levels': 369.0, 'levels_bounded': 15.0, 'max': 17.0, 'max_executed': 17.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 43, 26: 44, 27: 45, 28: 47, 29: 50}

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 30 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 6 ( 60.00% solved)

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(30, 50)', truth=True, inc_range=None)

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 30, step = 50]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 30)

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 50:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(42)]), ('plan_module', [Number(51), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.121983s.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 51: original = External(symbol='current_last_sgoals(30, 50)', truth=True, inc_range=None), conversion = current_last_sgoals(30,50).

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026242s with result Satisfiable.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14822459999999538, Incremental time limit = None
Running cumulative time = 1.218803899999994, Cumulative time limit = 1800
Used memory = (RSS = 227.246094Mb, VMS = 220.601562Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.052328s, Solving = 0.166476s, Total = 1.218804s, Memory = (RSS = 227.246094Mb, VMS = 220.601562Mb), Step range = [42-51]), Calls = 9
Final Model :: Total atoms = 7173, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=50, end_step=51, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.0523279999999957, solving_time=0.16647589999999823, total_time=1.218803899999994, memory=Memory(rss=227.24609375, vms=220.6015625), step_range=range(42, 52), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12198279999999784, solving_time=0.02624179999999754, total_time=0.14822459999999538, memory=Memory(rss=227.24609375, vms=220.6015625), step_range=range(51, 52), clingo_stats={'problem': {'lp': {'atoms': 34767.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 215384.0, 'bodies_tr': 215384.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1878.0, 'count_bodies_tr': 1878.0, 'sccs': 188.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3700.0, 'rules': 408333.0, 'rules_normal': 406221.0, 'rules_choice': 2103.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 408333.0, 'rules_tr_normal': 406221.0, 'rules_tr_choice': 2103.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 69201.0, 'eqs_atom': 17799.0, 'eqs_body': 3680.0, 'eqs_other': 47722.0}, 'lpStep': {'atoms': 3469.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24629.0, 'bodies_tr': 24629.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45815.0, 'rules_normal': 45619.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45815.0, 'rules_tr_normal': 45619.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7530.0, 'eqs_atom': 1813.0, 'eqs_body': 74.0, 'eqs_other': 5643.0}, 'generator': {'vars': 15628.0, 'vars_eliminated': 0.0, 'vars_frozen': 9253.0, 'constraints': 3306.0, 'constraints_binary': 126644.0, 'constraints_ternary': 17179.0, 'acyc_edges': 0.0, 'complexity': 147683.0}}, 'solving': {'solvers': {'choices': 460.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 183.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5.0, 'distributed_sum_lbd': 10.0, 'integrated': 30.0, 'lemmas': 147.0, 'lits_learnt': 3577.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 30.0, 'integrated_jumps': 5.0, 'guiding_paths_lits': 847.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 112.0, 'lemmas_other': 30.0, 'lits_conflict': 367.0, 'lits_loop': 1008.0, 'lits_other': 2202.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 7.0, 'levels': 14.0, 'levels_bounded': 7.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.14960098266601562, 'cpu': 0.140625, 'solve': 0.011966705322265625, 'unsat': 0.0, 'sat': 0.004985809326171875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.269622802734375, 'cpu': 1.40625, 'solve': 0.0704345703125, 'unsat': 0.010557174682617188, 'sat': 0.022975921630859375}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2220.0, 'conflicts': 186.0, 'conflicts_analyzed': 171.0, 'restarts': 0.0, 'restarts_last': 21.0, 'extra': {'domain_choices': 0.0, 'models': 7.0, 'models_level': 625.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 174.0, 'distributed_sum_lbd': 333.0, 'integrated': 569.0, 'lemmas': 1516.0, 'lits_learnt': 18419.0, 'lemmas_binary': 122.0, 'lemmas_ternary': 20.0, 'cpu_time': 0.203125, 'integrated_imps': 289.0, 'integrated_jumps': 360.0, 'guiding_paths_lits': 4621.0, 'guiding_paths': 73.0, 'splits': 0.0, 'lemmas_conflict': 166.0, 'lemmas_loop': 834.0, 'lemmas_other': 516.0, 'lits_conflict': 2107.0, 'lits_loop': 6815.0, 'lits_other': 9497.0, 'jumps': {'jumps': 171.0, 'jumps_bounded': 22.0, 'levels': 383.0, 'levels_bounded': 22.0, 'max': 17.0, 'max_executed': 17.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 43, 26: 44, 27: 45, 28: 47, 29: 50, 30: 51}

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 31 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 7 ( 70.00% solved)

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(31, 51)', truth=True, inc_range=None)

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 31, step = 51]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 31)

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 51:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(42)]), ('plan_module', [Number(52), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.170566s.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 52: original = External(symbol='current_last_sgoals(31, 51)', truth=True, inc_range=None), conversion = current_last_sgoals(31,51).

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054880s with result Satisfiable.

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.225446299999998, Incremental time limit = None
Running cumulative time = 1.444250199999992, Cumulative time limit = 1800
Used memory = (RSS = 230.253906Mb, VMS = 222.269531Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.222894s, Solving = 0.221356s, Total = 1.444250s, Memory = (RSS = 230.253906Mb, VMS = 222.269531Mb), Step range = [42-52]), Calls = 10
Final Model :: Total atoms = 7553, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=51, end_step=52, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.2228937999999943, solving_time=0.22135639999999768, total_time=1.444250199999992, memory=Memory(rss=230.25390625, vms=222.26953125), step_range=range(42, 53), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17056579999999855, solving_time=0.054880499999999444, total_time=0.225446299999998, memory=Memory(rss=230.25390625, vms=222.26953125), step_range=range(52, 53), clingo_stats={'problem': {'lp': {'atoms': 38250.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 240040.0, 'bodies_tr': 240040.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2080.0, 'count_bodies_tr': 2080.0, 'sccs': 213.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4294.0, 'rules': 454221.0, 'rules_normal': 451913.0, 'rules_choice': 2298.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 454221.0, 'rules_tr_normal': 451913.0, 'rules_tr_choice': 2298.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 76790.0, 'eqs_atom': 19621.0, 'eqs_body': 3755.0, 'eqs_other': 53414.0}, 'lpStep': {'atoms': 3483.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24656.0, 'bodies_tr': 24656.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45888.0, 'rules_normal': 45692.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45888.0, 'rules_tr_normal': 45692.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7589.0, 'eqs_atom': 1822.0, 'eqs_body': 75.0, 'eqs_other': 5692.0}, 'generator': {'vars': 18053.0, 'vars_eliminated': 0.0, 'vars_frozen': 10647.0, 'constraints': 3938.0, 'constraints_binary': 152447.0, 'constraints_ternary': 20657.0, 'acyc_edges': 0.0, 'complexity': 177682.0}}, 'solving': {'solvers': {'choices': 490.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 201.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 112.0, 'lits_learnt': 1008.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 931.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 112.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 1008.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 10.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.22739219665527344, 'cpu': 0.234375, 'solve': 0.024934768676757812, 'unsat': 0.0, 'sat': 0.0079803466796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.4970149993896484, 'cpu': 1.640625, 'solve': 0.09536933898925781, 'unsat': 0.010557174682617188, 'sat': 0.030956268310546875}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2710.0, 'conflicts': 186.0, 'conflicts_analyzed': 171.0, 'restarts': 0.0, 'restarts_last': 21.0, 'extra': {'domain_choices': 0.0, 'models': 8.0, 'models_level': 826.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 174.0, 'distributed_sum_lbd': 333.0, 'integrated': 569.0, 'lemmas': 1628.0, 'lits_learnt': 19427.0, 'lemmas_binary': 122.0, 'lemmas_ternary': 20.0, 'cpu_time': 0.234375, 'integrated_imps': 289.0, 'integrated_jumps': 360.0, 'guiding_paths_lits': 5552.0, 'guiding_paths': 80.0, 'splits': 0.0, 'lemmas_conflict': 166.0, 'lemmas_loop': 946.0, 'lemmas_other': 516.0, 'lits_conflict': 2107.0, 'lits_loop': 7823.0, 'lits_other': 9497.0, 'jumps': {'jumps': 171.0, 'jumps_bounded': 22.0, 'levels': 383.0, 'levels_bounded': 22.0, 'max': 17.0, 'max_executed': 17.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 43, 26: 44, 27: 45, 28: 47, 29: 50, 30: 51, 31: 52}

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 32 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 8 ( 80.00% solved)

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(32, 52)', truth=True, inc_range=None)

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 32, step = 52]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 32)

[03-01-2022_17-11-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 52:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(53), Number(42)]), ('plan_module', [Number(53), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.120485s.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 53: original = External(symbol='current_last_sgoals(32, 52)', truth=True, inc_range=None), conversion = current_last_sgoals(32,52).

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020237s with result Unsatisfiable.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.14072159999999911, Incremental time limit = None
Running cumulative time = 1.584971799999991, Cumulative time limit = 1800
Used memory = (RSS = 241.464844Mb, VMS = 236.664062Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=52, end_step=53, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.3433786999999953, solving_time=0.2415930999999958, total_time=1.584971799999991, memory=Memory(rss=241.46484375, vms=236.6640625), step_range=range(42, 54), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.120484900000001, solving_time=0.02023669999999811, total_time=0.14072159999999911, memory=Memory(rss=241.46484375, vms=236.6640625), step_range=range(53, 54), clingo_stats={'problem': {'lp': {'atoms': 41742.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 264717.0, 'bodies_tr': 264717.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2282.0, 'count_bodies_tr': 2282.0, 'sccs': 238.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4888.0, 'rules': 500175.0, 'rules_normal': 497671.0, 'rules_choice': 2493.0, 'rules_minimize': 11.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 500175.0, 'rules_tr_normal': 497671.0, 'rules_tr_choice': 2493.0, 'rules_tr_minimize': 11.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 84426.0, 'eqs_atom': 21452.0, 'eqs_body': 3830.0, 'eqs_other': 59144.0}, 'lpStep': {'atoms': 3492.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24677.0, 'bodies_tr': 24677.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45954.0, 'rules_normal': 45758.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45954.0, 'rules_tr_normal': 45758.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7636.0, 'eqs_atom': 1831.0, 'eqs_body': 75.0, 'eqs_other': 5730.0}, 'generator': {'vars': 20480.0, 'vars_eliminated': 0.0, 'vars_frozen': 12041.0, 'constraints': 4570.0, 'constraints_binary': 178310.0, 'constraints_ternary': 24137.0, 'acyc_edges': 0.0, 'complexity': 207743.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1015.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.14461326599121094, 'cpu': 0.140625, 'solve': 0.0049610137939453125, 'unsat': 0.0049610137939453125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.6416282653808594, 'cpu': 1.78125, 'solve': 0.10033035278320312, 'unsat': 0.0155181884765625, 'sat': 0.030956268310546875}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2710.0, 'conflicts': 194.0, 'conflicts_analyzed': 171.0, 'restarts': 0.0, 'restarts_last': 21.0, 'extra': {'domain_choices': 0.0, 'models': 8.0, 'models_level': 826.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 174.0, 'distributed_sum_lbd': 333.0, 'integrated': 569.0, 'lemmas': 1628.0, 'lits_learnt': 19427.0, 'lemmas_binary': 122.0, 'lemmas_ternary': 20.0, 'cpu_time': 0.234375, 'integrated_imps': 289.0, 'integrated_jumps': 360.0, 'guiding_paths_lits': 6567.0, 'guiding_paths': 87.0, 'splits': 0.0, 'lemmas_conflict': 166.0, 'lemmas_loop': 946.0, 'lemmas_other': 516.0, 'lits_conflict': 2107.0, 'lits_loop': 7823.0, 'lits_other': 9497.0, 'jumps': {'jumps': 171.0, 'jumps_bounded': 22.0, 'levels': 383.0, 'levels_bounded': 22.0, 'max': 17.0, 'max_executed': 17.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 53:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(42)]), ('plan_module', [Number(54), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.156799s.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.037760s with result Unsatisfiable.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.19455870000000175, Incremental time limit = None
Running cumulative time = 1.7795304999999928, Cumulative time limit = 1800
Used memory = (RSS = 242.726562Mb, VMS = 236.835938Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=53, end_step=54, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.500177799999996, solving_time=0.2793526999999969, total_time=1.7795304999999928, memory=Memory(rss=242.7265625, vms=236.8359375), step_range=range(42, 55), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15679910000000064, solving_time=0.037759600000001114, total_time=0.19455870000000175, memory=Memory(rss=242.7265625, vms=236.8359375), step_range=range(54, 55), clingo_stats={'problem': {'lp': {'atoms': 45243.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 289414.0, 'bodies_tr': 289414.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2484.0, 'count_bodies_tr': 2484.0, 'sccs': 263.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5482.0, 'rules': 546194.0, 'rules_normal': 543494.0, 'rules_choice': 2688.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 546194.0, 'rules_tr_normal': 543494.0, 'rules_tr_choice': 2688.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 92111.0, 'eqs_atom': 23292.0, 'eqs_body': 3905.0, 'eqs_other': 64914.0}, 'lpStep': {'atoms': 3501.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24697.0, 'bodies_tr': 24697.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46019.0, 'rules_normal': 45823.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46019.0, 'rules_tr_normal': 45823.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7685.0, 'eqs_atom': 1840.0, 'eqs_body': 75.0, 'eqs_other': 5770.0}, 'generator': {'vars': 22907.0, 'vars_eliminated': 0.0, 'vars_frozen': 13435.0, 'constraints': 5202.0, 'constraints_binary': 204229.0, 'constraints_ternary': 27617.0, 'acyc_edges': 0.0, 'complexity': 237860.0}}, 'solving': {'solvers': {'choices': 370.0, 'conflicts': 66.0, 'conflicts_analyzed': 64.0, 'restarts': 0.0, 'restarts_last': 20.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 58.0, 'distributed_sum_lbd': 152.0, 'integrated': 348.0, 'lemmas': 1173.0, 'lits_learnt': 17220.0, 'lemmas_binary': 49.0, 'lemmas_ternary': 42.0, 'cpu_time': 0.125, 'integrated_imps': 113.0, 'integrated_jumps': 243.0, 'guiding_paths_lits': 1099.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 63.0, 'lemmas_loop': 769.0, 'lemmas_other': 341.0, 'lits_conflict': 1776.0, 'lits_loop': 6443.0, 'lits_other': 9001.0, 'jumps': {'jumps': 64.0, 'jumps_bounded': 5.0, 'levels': 754.0, 'levels_bounded': 629.0, 'max': 162.0, 'max_executed': 162.0, 'max_bounded': 157.0}}}}, 'summary': {'call': 12.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.19647216796875, 'cpu': 0.3125, 'solve': 0.014959335327148438, 'unsat': 0.014959335327148438, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.8381004333496094, 'cpu': 2.09375, 'solve': 0.11528968811035156, 'unsat': 0.030477523803710938, 'sat': 0.030956268310546875}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3080.0, 'conflicts': 260.0, 'conflicts_analyzed': 235.0, 'restarts': 0.0, 'restarts_last': 21.0, 'extra': {'domain_choices': 0.0, 'models': 8.0, 'models_level': 826.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 232.0, 'distributed_sum_lbd': 485.0, 'integrated': 917.0, 'lemmas': 2801.0, 'lits_learnt': 36647.0, 'lemmas_binary': 171.0, 'lemmas_ternary': 62.0, 'cpu_time': 0.359375, 'integrated_imps': 402.0, 'integrated_jumps': 603.0, 'guiding_paths_lits': 7666.0, 'guiding_paths': 94.0, 'splits': 0.0, 'lemmas_conflict': 229.0, 'lemmas_loop': 1715.0, 'lemmas_other': 857.0, 'lits_conflict': 3883.0, 'lits_loop': 14266.0, 'lits_other': 18498.0, 'jumps': {'jumps': 235.0, 'jumps_bounded': 27.0, 'levels': 1137.0, 'levels_bounded': 651.0, 'max': 162.0, 'max_executed': 162.0, 'max_bounded': 157.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 54:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(42)]), ('plan_module', [Number(55), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.114371s.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055060s with result Satisfiable.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1694309999999959, Incremental time limit = None
Running cumulative time = 1.9489614999999887, Cumulative time limit = 1800
Used memory = (RSS = 244.605469Mb, VMS = 237.339844Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.614549s, Solving = 0.334412s, Total = 1.948961s, Memory = (RSS = 244.605469Mb, VMS = 237.339844Mb), Step range = [42-55]), Calls = 13
Final Model :: Total atoms = 8685, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=54, end_step=55, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.6145489999999931, solving_time=0.33441249999999556, total_time=1.9489614999999887, memory=Memory(rss=244.60546875, vms=237.33984375), step_range=range(42, 56), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11437119999999723, solving_time=0.05505979999999866, total_time=0.1694309999999959, memory=Memory(rss=244.60546875, vms=237.33984375), step_range=range(55, 56), clingo_stats={'problem': {'lp': {'atoms': 48753.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 314131.0, 'bodies_tr': 314131.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2686.0, 'count_bodies_tr': 2686.0, 'sccs': 288.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6076.0, 'rules': 592278.0, 'rules_normal': 589382.0, 'rules_choice': 2883.0, 'rules_minimize': 13.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 592278.0, 'rules_tr_normal': 589382.0, 'rules_tr_choice': 2883.0, 'rules_tr_minimize': 13.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 99845.0, 'eqs_atom': 25141.0, 'eqs_body': 3980.0, 'eqs_other': 70724.0}, 'lpStep': {'atoms': 3510.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24717.0, 'bodies_tr': 24717.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46084.0, 'rules_normal': 45888.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46084.0, 'rules_tr_normal': 45888.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7734.0, 'eqs_atom': 1849.0, 'eqs_body': 75.0, 'eqs_other': 5810.0}, 'generator': {'vars': 25334.0, 'vars_eliminated': 0.0, 'vars_frozen': 14829.0, 'constraints': 5791.0, 'constraints_binary': 227379.0, 'constraints_ternary': 30827.0, 'acyc_edges': 0.0, 'complexity': 264895.0}}, 'solving': {'solvers': {'choices': 1152.0, 'conflicts': 141.0, 'conflicts_analyzed': 141.0, 'restarts': 0.0, 'restarts_last': 27.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 257.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 128.0, 'distributed_sum_lbd': 297.0, 'integrated': 600.0, 'lemmas': 1263.0, 'lits_learnt': 22344.0, 'lemmas_binary': 84.0, 'lemmas_ternary': 28.0, 'cpu_time': 0.265625, 'integrated_imps': 172.0, 'integrated_jumps': 257.0, 'guiding_paths_lits': 1183.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 141.0, 'lemmas_loop': 539.0, 'lemmas_other': 583.0, 'lits_conflict': 3515.0, 'lits_loop': 4310.0, 'lits_other': 14519.0, 'jumps': {'jumps': 141.0, 'jumps_bounded': 11.0, 'levels': 1311.0, 'levels_bounded': 1019.0, 'max': 199.0, 'max_executed': 199.0, 'max_bounded': 169.0}}}}, 'summary': {'call': 13.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.17205047607421875, 'cpu': 0.390625, 'solve': 0.03889274597167969, 'unsat': 0.0, 'sat': 0.02393341064453125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.010150909423828, 'cpu': 2.484375, 'solve': 0.15418243408203125, 'unsat': 0.030477523803710938, 'sat': 0.054889678955078125}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4232.0, 'conflicts': 401.0, 'conflicts_analyzed': 376.0, 'restarts': 0.0, 'restarts_last': 27.0, 'extra': {'domain_choices': 0.0, 'models': 9.0, 'models_level': 1083.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 360.0, 'distributed_sum_lbd': 782.0, 'integrated': 1517.0, 'lemmas': 4064.0, 'lits_learnt': 58991.0, 'lemmas_binary': 255.0, 'lemmas_ternary': 90.0, 'cpu_time': 0.625, 'integrated_imps': 574.0, 'integrated_jumps': 860.0, 'guiding_paths_lits': 8849.0, 'guiding_paths': 101.0, 'splits': 0.0, 'lemmas_conflict': 370.0, 'lemmas_loop': 2254.0, 'lemmas_other': 1440.0, 'lits_conflict': 7398.0, 'lits_loop': 18576.0, 'lits_other': 33017.0, 'jumps': {'jumps': 376.0, 'jumps_bounded': 38.0, 'levels': 2448.0, 'levels_bounded': 1670.0, 'max': 199.0, 'max_executed': 199.0, 'max_bounded': 169.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 43, 26: 44, 27: 45, 28: 47, 29: 50, 30: 51, 31: 52, 32: 55}

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 33 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 9 ( 90.00% solved)

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(33, 55)', truth=True, inc_range=None)

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 33, step = 55]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 33)

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 55:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(42)]), ('plan_module', [Number(56), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.140130s.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 56: original = External(symbol='current_last_sgoals(33, 55)', truth=True, inc_range=None), conversion = current_last_sgoals(33,55).

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023620s with result Unsatisfiable.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16374950000000155, Incremental time limit = None
Running cumulative time = 2.1127109999999902, Cumulative time limit = 1800
Used memory = (RSS = 246.816406Mb, VMS = 237.605469Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=55, end_step=56, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.7546789999999923, solving_time=0.3580319999999979, total_time=2.1127109999999902, memory=Memory(rss=246.81640625, vms=237.60546875), step_range=range(42, 57), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1401299999999992, solving_time=0.023619500000002347, total_time=0.16374950000000155, memory=Memory(rss=246.81640625, vms=237.60546875), step_range=range(56, 57), clingo_stats={'problem': {'lp': {'atoms': 52272.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 338868.0, 'bodies_tr': 338868.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2888.0, 'count_bodies_tr': 2888.0, 'sccs': 313.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6670.0, 'rules': 638427.0, 'rules_normal': 635335.0, 'rules_choice': 3078.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 638427.0, 'rules_tr_normal': 635335.0, 'rules_tr_choice': 3078.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 107628.0, 'eqs_atom': 26999.0, 'eqs_body': 4055.0, 'eqs_other': 76574.0}, 'lpStep': {'atoms': 3519.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24737.0, 'bodies_tr': 24737.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46149.0, 'rules_normal': 45953.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46149.0, 'rules_tr_normal': 45953.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7783.0, 'eqs_atom': 1858.0, 'eqs_body': 75.0, 'eqs_other': 5850.0}, 'generator': {'vars': 27761.0, 'vars_eliminated': 0.0, 'vars_frozen': 16223.0, 'constraints': 5782.0, 'constraints_binary': 224160.0, 'constraints_ternary': 30507.0, 'acyc_edges': 0.0, 'complexity': 264895.0}}, 'solving': {'solvers': {'choices': 21.0, 'conflicts': 18.0, 'conflicts_analyzed': 12.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 12.0, 'distributed_sum_lbd': 29.0, 'integrated': 30.0, 'lemmas': 99.0, 'lits_learnt': 2653.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 22.0, 'integrated_jumps': 6.0, 'guiding_paths_lits': 1267.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 12.0, 'lemmas_loop': 58.0, 'lemmas_other': 29.0, 'lits_conflict': 745.0, 'lits_loop': 552.0, 'lits_other': 1356.0, 'jumps': {'jumps': 12.0, 'jumps_bounded': 2.0, 'levels': 16.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 14.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.1705493927001953, 'cpu': 0.15625, 'solve': 0.006954193115234375, 'unsat': 0.006954193115234375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.1807003021240234, 'cpu': 2.640625, 'solve': 0.16113662719726562, 'unsat': 0.03743171691894531, 'sat': 0.054889678955078125}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4253.0, 'conflicts': 419.0, 'conflicts_analyzed': 388.0, 'restarts': 0.0, 'restarts_last': 27.0, 'extra': {'domain_choices': 0.0, 'models': 9.0, 'models_level': 1083.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 372.0, 'distributed_sum_lbd': 811.0, 'integrated': 1547.0, 'lemmas': 4163.0, 'lits_learnt': 61644.0, 'lemmas_binary': 262.0, 'lemmas_ternary': 90.0, 'cpu_time': 0.625, 'integrated_imps': 596.0, 'integrated_jumps': 866.0, 'guiding_paths_lits': 10116.0, 'guiding_paths': 108.0, 'splits': 0.0, 'lemmas_conflict': 382.0, 'lemmas_loop': 2312.0, 'lemmas_other': 1469.0, 'lits_conflict': 8143.0, 'lits_loop': 19128.0, 'lits_other': 34373.0, 'jumps': {'jumps': 388.0, 'jumps_bounded': 40.0, 'levels': 2464.0, 'levels_bounded': 1672.0, 'max': 199.0, 'max_executed': 199.0, 'max_bounded': 169.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 56:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(42)]), ('plan_module', [Number(57), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.130471s.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.109185s with result Satisfiable.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2396560000000001, Incremental time limit = None
Running cumulative time = 2.3523669999999903, Cumulative time limit = 1800
Used memory = (RSS = 251.746094Mb, VMS = 248.027344Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.885150s, Solving = 0.467217s, Total = 2.352367s, Memory = (RSS = 251.746094Mb, VMS = 248.027344Mb), Step range = [42-57]), Calls = 15
Final Model :: Total atoms = 9442, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=56, end_step=57, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.8851503999999935, solving_time=0.4672165999999969, total_time=2.3523669999999903, memory=Memory(rss=251.74609375, vms=248.02734375), step_range=range(42, 58), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13047140000000113, solving_time=0.10918459999999897, total_time=0.2396560000000001, memory=Memory(rss=251.74609375, vms=248.02734375), step_range=range(57, 58), clingo_stats={'problem': {'lp': {'atoms': 55800.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 363625.0, 'bodies_tr': 363625.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3090.0, 'count_bodies_tr': 3090.0, 'sccs': 338.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7264.0, 'rules': 684641.0, 'rules_normal': 681353.0, 'rules_choice': 3273.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 684641.0, 'rules_tr_normal': 681353.0, 'rules_tr_choice': 3273.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 115460.0, 'eqs_atom': 28866.0, 'eqs_body': 4130.0, 'eqs_other': 82464.0}, 'lpStep': {'atoms': 3528.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24757.0, 'bodies_tr': 24757.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46214.0, 'rules_normal': 46018.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46214.0, 'rules_tr_normal': 46018.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7832.0, 'eqs_atom': 1867.0, 'eqs_body': 75.0, 'eqs_other': 5890.0}, 'generator': {'vars': 30188.0, 'vars_eliminated': 0.0, 'vars_frozen': 17617.0, 'constraints': 6414.0, 'constraints_binary': 250272.0, 'constraints_ternary': 34147.0, 'acyc_edges': 0.0, 'complexity': 291871.0}}, 'solving': {'solvers': {'choices': 1037.0, 'conflicts': 103.0, 'conflicts_analyzed': 103.0, 'restarts': 0.0, 'restarts_last': 33.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 303.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 93.0, 'distributed_sum_lbd': 192.0, 'integrated': 316.0, 'lemmas': 889.0, 'lits_learnt': 19166.0, 'lemmas_binary': 49.0, 'lemmas_ternary': 7.0, 'cpu_time': 0.28125, 'integrated_imps': 39.0, 'integrated_jumps': 198.0, 'guiding_paths_lits': 1351.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 103.0, 'lemmas_loop': 470.0, 'lemmas_other': 316.0, 'lits_conflict': 3242.0, 'lits_loop': 3794.0, 'lits_other': 12130.0, 'jumps': {'jumps': 103.0, 'jumps_bounded': 2.0, 'levels': 332.0, 'levels_bounded': 194.0, 'max': 195.0, 'max_executed': 195.0, 'max_bounded': 193.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.24235153198242188, 'cpu': 0.4375, 'solve': 0.07579421997070312, 'unsat': 0.0, 'sat': 0.020940780639648438}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.4230518341064453, 'cpu': 3.078125, 'solve': 0.23693084716796875, 'unsat': 0.03743171691894531, 'sat': 0.07583045959472656}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 5290.0, 'conflicts': 522.0, 'conflicts_analyzed': 491.0, 'restarts': 0.0, 'restarts_last': 33.0, 'extra': {'domain_choices': 0.0, 'models': 10.0, 'models_level': 1386.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 465.0, 'distributed_sum_lbd': 1003.0, 'integrated': 1863.0, 'lemmas': 5052.0, 'lits_learnt': 80810.0, 'lemmas_binary': 311.0, 'lemmas_ternary': 97.0, 'cpu_time': 0.90625, 'integrated_imps': 635.0, 'integrated_jumps': 1064.0, 'guiding_paths_lits': 11467.0, 'guiding_paths': 115.0, 'splits': 0.0, 'lemmas_conflict': 485.0, 'lemmas_loop': 2782.0, 'lemmas_other': 1785.0, 'lits_conflict': 11385.0, 'lits_loop': 22922.0, 'lits_other': 46503.0, 'jumps': {'jumps': 491.0, 'jumps_bounded': 42.0, 'levels': 2796.0, 'levels_bounded': 1866.0, 'max': 199.0, 'max_executed': 199.0, 'max_bounded': 193.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 43, 26: 44, 27: 45, 28: 47, 29: 50, 30: 51, 31: 52, 32: 55, 33: 57}

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 34 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 10 (100.00% solved)

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(34, 57)', truth=True, inc_range=None)

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 34, step = 57]:
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 34)

[03-01-2022_17-11-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 57:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     57 : Current =     58
Incrementor step ends | Minimum  =     52 : Maximum =    100

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('state_module', [Number(58), Number(42)]), ('plan_module', [Number(58), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(42), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(42), Number(25), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.118268s.

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 58: original = External(symbol='current_last_sgoals(34, 57)', truth=True, inc_range=None), conversion = current_last_sgoals(34,57).

[03-01-2022_17-11-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.057056s with result Satisfiable.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1753242999999962, Incremental time limit = None
Running cumulative time = 2.5276912999999865, Cumulative time limit = 1800
Used memory = (RSS = 257.195312Mb, VMS = 252.433594Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.003419s, Solving = 0.524272s, Total = 2.527691s, Memory = (RSS = 257.195312Mb, VMS = 252.433594Mb), Step range = [42-58]), Calls = 16
Final Model :: Total atoms = 9822, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=57, end_step=58, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.0034187999999915, solving_time=0.524272499999995, total_time=2.5276912999999865, memory=Memory(rss=257.1953125, vms=252.43359375), step_range=range(42, 59), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11826839999999805, solving_time=0.05705589999999816, total_time=0.1753242999999962, memory=Memory(rss=257.1953125, vms=252.43359375), step_range=range(58, 59), clingo_stats={'problem': {'lp': {'atoms': 59337.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 388397.0, 'bodies_tr': 388397.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3292.0, 'count_bodies_tr': 3292.0, 'sccs': 363.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7858.0, 'rules': 730915.0, 'rules_normal': 727431.0, 'rules_choice': 3468.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 730915.0, 'rules_tr_normal': 727431.0, 'rules_tr_choice': 3468.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 123326.0, 'eqs_atom': 30737.0, 'eqs_body': 4205.0, 'eqs_other': 88384.0}, 'lpStep': {'atoms': 3537.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24772.0, 'bodies_tr': 24772.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46274.0, 'rules_normal': 46078.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46274.0, 'rules_tr_normal': 46078.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7866.0, 'eqs_atom': 1871.0, 'eqs_body': 75.0, 'eqs_other': 5920.0}, 'generator': {'vars': 32615.0, 'vars_eliminated': 0.0, 'vars_frozen': 19011.0, 'constraints': 6723.0, 'constraints_binary': 257152.0, 'constraints_ternary': 35250.0, 'acyc_edges': 0.0, 'complexity': 300233.0}}, 'solving': {'solvers': {'choices': 814.0, 'conflicts': 2.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 312.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 6.0, 'integrated': 12.0, 'lemmas': 150.0, 'lits_learnt': 1328.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.15625, 'integrated_imps': 6.0, 'integrated_jumps': 35.0, 'guiding_paths_lits': 1435.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 136.0, 'lemmas_other': 12.0, 'lits_conflict': 20.0, 'lits_loop': 1188.0, 'lits_other': 120.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 1.0, 'levels': 7.0, 'levels_bounded': 1.0, 'max': 6.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.18081092834472656, 'cpu': 0.296875, 'solve': 0.038745880126953125, 'unsat': 0.0, 'sat': 0.017805099487304688}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.603862762451172, 'cpu': 3.375, 'solve': 0.2756767272949219, 'unsat': 0.03743171691894531, 'sat': 0.09363555908203125}, 'models': {'enumerated': 11.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6104.0, 'conflicts': 524.0, 'conflicts_analyzed': 493.0, 'restarts': 0.0, 'restarts_last': 33.0, 'extra': {'domain_choices': 0.0, 'models': 11.0, 'models_level': 1698.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 467.0, 'distributed_sum_lbd': 1009.0, 'integrated': 1875.0, 'lemmas': 5202.0, 'lits_learnt': 82138.0, 'lemmas_binary': 318.0, 'lemmas_ternary': 97.0, 'cpu_time': 1.0625, 'integrated_imps': 641.0, 'integrated_jumps': 1099.0, 'guiding_paths_lits': 12902.0, 'guiding_paths': 122.0, 'splits': 0.0, 'lemmas_conflict': 487.0, 'lemmas_loop': 2918.0, 'lemmas_other': 1797.0, 'lits_conflict': 11405.0, 'lits_loop': 24110.0, 'lits_other': 46623.0, 'jumps': {'jumps': 493.0, 'jumps_bounded': 43.0, 'levels': 2803.0, 'levels_bounded': 1867.0, 'max': 199.0, 'max_executed': 199.0, 'max_bounded': 193.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 43, 26: 44, 27: 45, 28: 47, 29: 50, 30: 51, 31: 52, 32: 55, 33: 57, 34: 58}

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 35 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 11 (110.00% solved)

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 34 was achieved successfully.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.117741s, Solving = 0.016409s, Total = 0.134150s, Memory = (RSS = 190.828125Mb, VMS = 180.347656Mb), Step range = [42-43]
2 : Statistics :: Grounding = 0.094217s, Solving = 0.017914s, Total = 0.112130s, Memory = (RSS = 193.128906Mb, VMS = 183.277344Mb), Step range = [44-44]
3 : Statistics :: Grounding = 0.153395s, Solving = 0.011831s, Total = 0.165226s, Memory = (RSS = 198.015625Mb, VMS = 187.839844Mb), Step range = [45-45]
4 : Statistics :: Grounding = 0.084190s, Solving = 0.009394s, Total = 0.093584s, Memory = (RSS = 200.804688Mb, VMS = 191.281250Mb), Step range = [46-46]
5 : Statistics :: Grounding = 0.134197s, Solving = 0.022346s, Total = 0.156543s, Memory = (RSS = 205.410156Mb, VMS = 197.382812Mb), Step range = [47-47]
6 : Statistics :: Grounding = 0.108067s, Solving = 0.014944s, Total = 0.123011s, Memory = (RSS = 208.503906Mb, VMS = 199.074219Mb), Step range = [48-48]
7 : Statistics :: Grounding = 0.113762s, Solving = 0.018511s, Total = 0.132273s, Memory = (RSS = 214.238281Mb, VMS = 205.792969Mb), Step range = [49-49]
8 : Statistics :: Grounding = 0.124777s, Solving = 0.028884s, Total = 0.153661s, Memory = (RSS = 217.300781Mb, VMS = 207.910156Mb), Step range = [50-50]
9 : Statistics :: Grounding = 0.121983s, Solving = 0.026242s, Total = 0.148225s, Memory = (RSS = 227.246094Mb, VMS = 220.601562Mb), Step range = [51-51]
10 : Statistics :: Grounding = 0.170566s, Solving = 0.054880s, Total = 0.225446s, Memory = (RSS = 230.253906Mb, VMS = 222.269531Mb), Step range = [52-52]
11 : Statistics :: Grounding = 0.120485s, Solving = 0.020237s, Total = 0.140722s, Memory = (RSS = 241.464844Mb, VMS = 236.664062Mb), Step range = [53-53]
12 : Statistics :: Grounding = 0.156799s, Solving = 0.037760s, Total = 0.194559s, Memory = (RSS = 242.726562Mb, VMS = 236.835938Mb), Step range = [54-54]
13 : Statistics :: Grounding = 0.114371s, Solving = 0.055060s, Total = 0.169431s, Memory = (RSS = 244.605469Mb, VMS = 237.339844Mb), Step range = [55-55]
14 : Statistics :: Grounding = 0.140130s, Solving = 0.023620s, Total = 0.163750s, Memory = (RSS = 246.816406Mb, VMS = 237.605469Mb), Step range = [56-56]
15 : Statistics :: Grounding = 0.130471s, Solving = 0.109185s, Total = 0.239656s, Memory = (RSS = 251.746094Mb, VMS = 248.027344Mb), Step range = [57-57]
16 : Statistics :: Grounding = 0.118268s, Solving = 0.057056s, Total = 0.175324s, Memory = (RSS = 257.195312Mb, VMS = 252.433594Mb), Step range = [58-58]

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.527691s due to: External generator exit.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 15, 29: 15, 30: 15, 31: 16, 32: 16, 33: 17, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 27, 15: 30, 16: 32, 17: 33, 18: 34, 19: 36, 20: 37, 21: 39, 22: 40, 23: 41, 24: 42}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 12, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 13, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 18, 6: 19, 7: 21, 8: 22, 9: 23, 10: 24, 11: 25, 12: 29, 13: 33, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 15, 29: 15, 30: 15, 31: 16, 32: 16, 33: 17, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 29, 51: 30, 52: 30, 53: 30, 54: 31, 55: 32, 56: 33, 57: 33, 58: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 27, 15: 30, 16: 32, 17: 33, 18: 34, 19: 36, 20: 37, 21: 39, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 50, 30: 53, 31: 54, 32: 55, 33: 57, 34: 58}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 12, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 13, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 18, 6: 19, 7: 21, 8: 22, 9: 23, 10: 24, 11: 25, 12: 29, 13: 33, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 34, Last requested goal index = 34, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.003419s, Solving = 0.524272s, Total = 2.527691s, Memory = (RSS = 257.195312Mb, VMS = 252.433594Mb), Step range = [42-58]), Calls = 16
Model :: Total atoms = 9822, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 16 :: Actions = 16                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 29:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 30:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 31:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 32:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 33:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 34:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 39:
    Current Sub-goals:
        [Index = 21] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 21] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 22] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 41:
    Current Sub-goals:
        [Index = 23] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 23] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 42:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 44:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 45:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((puzzle_room,0))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 48:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 51:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 52:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 53:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 54:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 55:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 56:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 58:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Monolevel problem 3 at level 1 solved.

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Online planning increment 3 finished.

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 3 : Total constraining sub-goal stages = 44 : Goals achieved = 34 : Goals unachieved = 10 : Complete = False

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 4 by method ground-first is [1-1].

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 4 at level 1:
Total Templated Partial Problems = 2, Problem Range = [3-4], Size = 20, Sub-goal Stage Range = [25-44]
Division points [total=1] : [(Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [35-44]

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [35-44], problem number = 4, increment number = 4

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 35)
	('last_sgoals', 44)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000018B1F48BE80>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 100)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 35
last_sgoals = 44
start_step = 58
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 67

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
Level = 1
Concurrency = disabled
Problem Type = partial conformance refinement (sequential) with sgoals range [35-44]
Minimum search length bound = disabled with value 67

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[03-01-2022_17-11-28] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-01-2022_17-11-28] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 58 as problem start state.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 58})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 58})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 58})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 58})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 58})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 58})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 58})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 58})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 58})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 58})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 58})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 58})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 58})

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 58).
holds(1, complete_tower(red,puzzle_room_table), false, 58).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 58).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 58).
holds(1, configuration(manipulator_limb_1), extended, 58).
holds(1, configuration(manipulator_limb_2), retracted, 58).
holds(1, configuration(puzzle_room_door), open, 58).
holds(1, configuration(starting_room_door), closed, 58).
holds(1, configuration(store_room_door), open, 58).
holds(1, grasping(manipulator_arm_1), (block,4), 58).
holds(1, grasping(manipulator_arm_2), (block,5), 58).
holds(1, grasping(manipulator_end_1), (block,4), 58).
holds(1, grasping(manipulator_end_2), (block,5), 58).
holds(1, in((block,1)), (puzzle_room,1), 58).
holds(1, in((block,2)), (puzzle_room,1), 58).
holds(1, in((block,3)), (puzzle_room,1), 58).
holds(1, in((block,4)), (store_room,0), 58).
holds(1, in((block,5)), (store_room,0), 58).
holds(1, in((block,6)), (puzzle_room,1), 58).
holds(1, in(manipulator_arm_1), (store_room,0), 58).
holds(1, in(manipulator_arm_2), (store_room,0), 58).
holds(1, in(manipulator_end_1), (store_room,0), 58).
holds(1, in(manipulator_end_2), (store_room,0), 58).
holds(1, in(manipulator_limb_1), (store_room,0), 58).
holds(1, in(manipulator_limb_2), (store_room,0), 58).
holds(1, in(puzzle_room_table), (puzzle_room,1), 58).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 58).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 58).
holds(1, in(talos), (store_room,0), 58).
holds(1, in_tower((block,1),(block,1)), true, 58).
holds(1, in_tower((block,1),(block,2)), false, 58).
holds(1, in_tower((block,1),(block,3)), false, 58).
holds(1, in_tower((block,1),(block,4)), false, 58).
holds(1, in_tower((block,1),(block,5)), false, 58).
holds(1, in_tower((block,1),(block,6)), false, 58).
holds(1, in_tower((block,2),(block,1)), false, 58).
holds(1, in_tower((block,2),(block,2)), false, 58).
holds(1, in_tower((block,2),(block,3)), false, 58).
holds(1, in_tower((block,2),(block,4)), false, 58).
holds(1, in_tower((block,2),(block,5)), false, 58).
holds(1, in_tower((block,2),(block,6)), false, 58).
holds(1, in_tower((block,3),(block,1)), false, 58).
holds(1, in_tower((block,3),(block,2)), true, 58).
holds(1, in_tower((block,3),(block,3)), true, 58).
holds(1, in_tower((block,3),(block,4)), false, 58).
holds(1, in_tower((block,3),(block,5)), false, 58).
holds(1, in_tower((block,3),(block,6)), false, 58).
holds(1, in_tower((block,4),(block,1)), false, 58).
holds(1, in_tower((block,4),(block,2)), false, 58).
holds(1, in_tower((block,4),(block,3)), false, 58).
holds(1, in_tower((block,4),(block,4)), false, 58).
holds(1, in_tower((block,4),(block,5)), false, 58).
holds(1, in_tower((block,4),(block,6)), false, 58).
holds(1, in_tower((block,5),(block,1)), false, 58).
holds(1, in_tower((block,5),(block,2)), false, 58).
holds(1, in_tower((block,5),(block,3)), false, 58).
holds(1, in_tower((block,5),(block,4)), false, 58).
holds(1, in_tower((block,5),(block,5)), false, 58).
holds(1, in_tower((block,5),(block,6)), false, 58).
holds(1, in_tower((block,6),(block,1)), false, 58).
holds(1, in_tower((block,6),(block,2)), false, 58).
holds(1, in_tower((block,6),(block,3)), false, 58).
holds(1, in_tower((block,6),(block,4)), false, 58).
holds(1, in_tower((block,6),(block,5)), false, 58).
holds(1, in_tower((block,6),(block,6)), true, 58).
holds(1, on((block,1)), puzzle_room_table_left, 58).
holds(1, on((block,2)), (block,3), 58).
holds(1, on((block,3)), puzzle_room_table_left, 58).
holds(1, on((block,4)), nothing, 58).
holds(1, on((block,5)), nothing, 58).
holds(1, on((block,6)), puzzle_room_table_right, 58).
holds(1, tower_base((block,1),puzzle_room_table), true, 58).
holds(1, tower_base((block,2),puzzle_room_table), false, 58).
holds(1, tower_base((block,3),puzzle_room_table), true, 58).
holds(1, tower_base((block,4),puzzle_room_table), false, 58).
holds(1, tower_base((block,5),puzzle_room_table), false, 58).
holds(1, tower_base((block,6),puzzle_room_table), true, 58).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 58).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 58).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 58).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 58).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 58).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 58).
holds(2, complete_tower(blue,puzzle_room_table), false, 58).
holds(2, complete_tower(red,puzzle_room_table), false, 58).
holds(2, configuration(manipulator_arm_1), extended, 58).
holds(2, configuration(manipulator_arm_2), retracted, 58).
holds(2, configuration(puzzle_room_door), open, 58).
holds(2, configuration(starting_room_door), closed, 58).
holds(2, configuration(store_room_door), open, 58).
holds(2, grasping(manipulator_arm_1), (block,4), 58).
holds(2, grasping(manipulator_arm_2), (block,5), 58).
holds(2, in((block,1)), puzzle_room, 58).
holds(2, in((block,2)), puzzle_room, 58).
holds(2, in((block,3)), puzzle_room, 58).
holds(2, in((block,4)), store_room, 58).
holds(2, in((block,5)), store_room, 58).
holds(2, in((block,6)), puzzle_room, 58).
holds(2, in(manipulator_arm_1), store_room, 58).
holds(2, in(manipulator_arm_2), store_room, 58).
holds(2, in(puzzle_room_table), puzzle_room, 58).
holds(2, in(talos), store_room, 58).
holds(2, in_tower((block,1),(block,1)), true, 58).
holds(2, in_tower((block,1),(block,2)), false, 58).
holds(2, in_tower((block,1),(block,3)), false, 58).
holds(2, in_tower((block,1),(block,4)), false, 58).
holds(2, in_tower((block,1),(block,5)), false, 58).
holds(2, in_tower((block,1),(block,6)), false, 58).
holds(2, in_tower((block,2),(block,1)), false, 58).
holds(2, in_tower((block,2),(block,2)), false, 58).
holds(2, in_tower((block,2),(block,3)), false, 58).
holds(2, in_tower((block,2),(block,4)), false, 58).
holds(2, in_tower((block,2),(block,5)), false, 58).
holds(2, in_tower((block,2),(block,6)), false, 58).
holds(2, in_tower((block,3),(block,1)), false, 58).
holds(2, in_tower((block,3),(block,2)), true, 58).
holds(2, in_tower((block,3),(block,3)), true, 58).
holds(2, in_tower((block,3),(block,4)), false, 58).
holds(2, in_tower((block,3),(block,5)), false, 58).
holds(2, in_tower((block,3),(block,6)), false, 58).
holds(2, in_tower((block,4),(block,1)), false, 58).
holds(2, in_tower((block,4),(block,2)), false, 58).
holds(2, in_tower((block,4),(block,3)), false, 58).
holds(2, in_tower((block,4),(block,4)), false, 58).
holds(2, in_tower((block,4),(block,5)), false, 58).
holds(2, in_tower((block,4),(block,6)), false, 58).
holds(2, in_tower((block,5),(block,1)), false, 58).
holds(2, in_tower((block,5),(block,2)), false, 58).
holds(2, in_tower((block,5),(block,3)), false, 58).
holds(2, in_tower((block,5),(block,4)), false, 58).
holds(2, in_tower((block,5),(block,5)), false, 58).
holds(2, in_tower((block,5),(block,6)), false, 58).
holds(2, in_tower((block,6),(block,1)), false, 58).
holds(2, in_tower((block,6),(block,2)), false, 58).
holds(2, in_tower((block,6),(block,3)), false, 58).
holds(2, in_tower((block,6),(block,4)), false, 58).
holds(2, in_tower((block,6),(block,5)), false, 58).
holds(2, in_tower((block,6),(block,6)), true, 58).
holds(2, on((block,1)), puzzle_room_table, 58).
holds(2, on((block,2)), (block,3), 58).
holds(2, on((block,3)), puzzle_room_table, 58).
holds(2, on((block,4)), nothing, 58).
holds(2, on((block,5)), nothing, 58).
holds(2, on((block,6)), puzzle_room_table, 58).
holds(2, tower_base((block,1),puzzle_room_table), true, 58).
holds(2, tower_base((block,2),puzzle_room_table), false, 58).
holds(2, tower_base((block,3),puzzle_room_table), true, 58).
holds(2, tower_base((block,4),puzzle_room_table), false, 58).
holds(2, tower_base((block,5),puzzle_room_table), false, 58).
holds(2, tower_base((block,6),puzzle_room_table), true, 58).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 58).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 58).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 58).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 58).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 58).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 58).

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 35})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 36})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 37})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 38})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 39})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 40})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 41})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 42})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 44})

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 35).
sub_goal(2, talos, move(hallway), in(talos), hallway, 36).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 37).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 38).
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 39).
sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 40).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 41).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 42).
sub_goal(2, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 43).
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 44).

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000018B1F45FAF0>]
	incrementor = SolveIncrementor(step_start=58, step_increase=1, step_increase_initial=2, step_end_min=68, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 58), range_=None), IncPart(name='plan_module', args=('#inc', 58, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 58, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 58, 35, 44, 'sequential', 'true'), range_=None)]

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 817 rules

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004062499999999858s

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026808s.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006739s with result Satisfiable.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000018B255E0C70>

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 58)
	('last_sgoals', 44)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000018B1F48BE80>)
	('first_sgoals', 35)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000018B255E0C70>)

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(35, 59)', truth=True, inc_range=None)

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 58). %* None *%
#program plan_module(#inc, 58, false, false). %* None *%
#program optimisation_module(#inc, 58, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 58, 35, 44, sequential, true). %* None *%

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     57 : Current =     59
Incrementor step ends | Minimum  =     68 : Maximum =    100

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(59)]), ('state_module', [Number(58), Number(58)]), ('plan_module', [Number(58), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(59), Number(58)]), ('plan_module', [Number(59), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.119597s.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 58: original = External(symbol='current_last_sgoals(35, 59)', truth=True, inc_range=None), conversion = current_last_sgoals(35,59).

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 59: original = External(symbol='current_last_sgoals(35, 59)', truth=True, inc_range=None), conversion = current_last_sgoals(35,59).

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017214s with result Satisfiable.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1368114000000027, Incremental time limit = None
Running cumulative time = 0.1368114000000027, Cumulative time limit = 1800
Used memory = (RSS = 204.421875Mb, VMS = 195.269531Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.119597s, Solving = 0.017214s, Total = 0.136811s, Memory = (RSS = 204.421875Mb, VMS = 195.269531Mb), Step range = [58-59]), Calls = 1
Final Model :: Total atoms = 4167, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=57, end_step=59, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.1195970000000024, solving_time=0.017214400000000296, total_time=0.1368114000000027, memory=Memory(rss=204.421875, vms=195.26953125), step_range=range(58, 60), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1195970000000024, solving_time=0.017214400000000296, total_time=0.1368114000000027, memory=Memory(rss=204.421875, vms=195.26953125), step_range=range(58, 60), clingo_stats={'problem': {'lp': {'atoms': 12256.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28571.0, 'bodies_tr': 28571.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 57236.0, 'rules_normal': 56692.0, 'rules_choice': 543.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 57236.0, 'rules_tr_normal': 56692.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 21560.0, 'eqs_atom': 7033.0, 'eqs_body': 1886.0, 'eqs_other': 12641.0}, 'lpStep': {'atoms': 5731.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25952.0, 'bodies_tr': 25952.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 598.0, 'rules': 49801.0, 'rules_normal': 49257.0, 'rules_choice': 543.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 49801.0, 'rules_tr_normal': 49257.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8504.0, 'eqs_atom': 2123.0, 'eqs_body': 361.0, 'eqs_other': 6020.0}, 'generator': {'vars': 2821.0, 'vars_eliminated': 0.0, 'vars_frozen': 1664.0, 'constraints': 27.0, 'constraints_binary': 1254.0, 'constraints_ternary': 168.0, 'acyc_edges': 0.0, 'complexity': 1459.0}}, 'solving': {'solvers': {'choices': 117.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 37.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 35.0, 'lemmas': 51.0, 'lits_learnt': 51.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 35.0, 'integrated_jumps': 21.0, 'guiding_paths_lits': 200.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 35.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 35.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.13663482666015625, 'cpu': 0.171875, 'solve': 0.0049610137939453125, 'unsat': 0.0, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.17453384399414062, 'cpu': 0.21875, 'solve': 0.00891876220703125, 'unsat': 0.0, 'sat': 0.00394439697265625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 117.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 38.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 35.0, 'lemmas': 51.0, 'lits_learnt': 51.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 35.0, 'integrated_jumps': 21.0, 'guiding_paths_lits': 208.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 35.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 35.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 59}

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 36 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 2 ( 20.00% solved)

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(36, 59)', truth=True, inc_range=None)

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 36, step = 59]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 36)

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 59:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     59 : Current =     60
Incrementor step ends | Minimum  =     68 : Maximum =    100

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(60)]), ('state_module', [Number(60), Number(58)]), ('plan_module', [Number(60), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.112098s.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 60: original = External(symbol='current_last_sgoals(36, 59)', truth=True, inc_range=None), conversion = current_last_sgoals(36,59).

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006995s with result Unsatisfiable.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.11909200000000197, Incremental time limit = None
Running cumulative time = 0.25590340000000467, Cumulative time limit = 1800
Used memory = (RSS = 206.390625Mb, VMS = 197.703125Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=59, end_step=60, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.23169450000000325, solving_time=0.02420890000000142, total_time=0.25590340000000467, memory=Memory(rss=206.390625, vms=197.703125), step_range=range(58, 61), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11209750000000085, solving_time=0.006994500000001125, total_time=0.11909200000000197, memory=Memory(rss=206.390625, vms=197.703125), step_range=range(60, 61), clingo_stats={'problem': {'lp': {'atoms': 13998.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 50116.0, 'bodies_tr': 50116.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 464.0, 'count_bodies_tr': 464.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 635.0, 'rules': 98366.0, 'rules_normal': 97626.0, 'rules_choice': 738.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 98366.0, 'rules_tr_normal': 97626.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 24464.0, 'eqs_atom': 7599.0, 'eqs_body': 2311.0, 'eqs_other': 14554.0}, 'lpStep': {'atoms': 1742.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21545.0, 'bodies_tr': 21545.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 41130.0, 'rules_normal': 40934.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41130.0, 'rules_tr_normal': 40934.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2904.0, 'eqs_atom': 566.0, 'eqs_body': 425.0, 'eqs_other': 1913.0}, 'generator': {'vars': 3021.0, 'vars_eliminated': 0.0, 'vars_frozen': 1831.0, 'constraints': 55.0, 'constraints_binary': 1810.0, 'constraints_ternary': 73.0, 'acyc_edges': 0.0, 'complexity': 1952.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 3.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 1.0, 'lits_learnt': 2.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 259.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 1.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 2.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.12071418762207031, 'cpu': 0.125, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.29524803161621094, 'cpu': 0.34375, 'solve': 0.010911941528320312, 'unsat': 0.0019931793212890625, 'sat': 0.00394439697265625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 117.0, 'conflicts': 11.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 38.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 10.0, 'integrated': 35.0, 'lemmas': 52.0, 'lits_learnt': 53.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 35.0, 'integrated_jumps': 21.0, 'guiding_paths_lits': 467.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 9.0, 'lemmas_other': 35.0, 'lits_conflict': 8.0, 'lits_loop': 10.0, 'lits_other': 35.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 60:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     60 : Current =     61
Incrementor step ends | Minimum  =     68 : Maximum =    100

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(61)]), ('state_module', [Number(61), Number(58)]), ('plan_module', [Number(61), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.079087s.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011748s with result Satisfiable.

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09083550000000074, Incremental time limit = None
Running cumulative time = 0.3467389000000054, Cumulative time limit = 1800
Used memory = (RSS = 207.601562Mb, VMS = 198.753906Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.310782s, Solving = 0.035957s, Total = 0.346739s, Memory = (RSS = 207.601562Mb, VMS = 198.753906Mb), Step range = [58-61]), Calls = 3
Final Model :: Total atoms = 4909, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=60, end_step=61, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.31078180000000444, solving_time=0.03595710000000096, total_time=0.3467389000000054, memory=Memory(rss=207.6015625, vms=198.75390625), step_range=range(58, 62), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07908730000000119, solving_time=0.011748199999999542, total_time=0.09083550000000074, memory=Memory(rss=207.6015625, vms=198.75390625), step_range=range(61, 62), clingo_stats={'problem': {'lp': {'atoms': 15895.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71880.0, 'bodies_tr': 71880.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 666.0, 'count_bodies_tr': 666.0, 'sccs': 57.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 811.0, 'rules': 139870.0, 'rules_normal': 138934.0, 'rules_choice': 933.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139870.0, 'rules_tr_normal': 138934.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 28391.0, 'eqs_atom': 8407.0, 'eqs_body': 2731.0, 'eqs_other': 17253.0}, 'lpStep': {'atoms': 1897.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21764.0, 'bodies_tr': 21764.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176.0, 'rules': 41504.0, 'rules_normal': 41308.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41504.0, 'rules_tr_normal': 41308.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3927.0, 'eqs_atom': 808.0, 'eqs_body': 420.0, 'eqs_other': 2699.0}, 'generator': {'vars': 3488.0, 'vars_eliminated': 0.0, 'vars_frozen': 2150.0, 'constraints': 191.0, 'constraints_binary': 4748.0, 'constraints_ternary': 434.0, 'acyc_edges': 0.0, 'complexity': 5427.0}}, 'solving': {'solvers': {'choices': 175.0, 'conflicts': 36.0, 'conflicts_analyzed': 36.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 74.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 43.0, 'distributed_sum_lbd': 50.0, 'integrated': 49.0, 'lemmas': 96.0, 'lits_learnt': 181.0, 'lemmas_binary': 56.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 8.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 392.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 36.0, 'lemmas_loop': 11.0, 'lemmas_other': 49.0, 'lits_conflict': 36.0, 'lits_loop': 47.0, 'lits_other': 98.0, 'jumps': {'jumps': 36.0, 'jumps_bounded': 0.0, 'levels': 36.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.09075546264648438, 'cpu': 0.09375, 'solve': 0.0059833526611328125, 'unsat': 0.0, 'sat': 0.0019931793212890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3860034942626953, 'cpu': 0.4375, 'solve': 0.016895294189453125, 'unsat': 0.0019931793212890625, 'sat': 0.0059375762939453125}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 292.0, 'conflicts': 47.0, 'conflicts_analyzed': 44.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 112.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 52.0, 'distributed_sum_lbd': 60.0, 'integrated': 84.0, 'lemmas': 148.0, 'lits_learnt': 234.0, 'lemmas_binary': 57.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 43.0, 'integrated_jumps': 21.0, 'guiding_paths_lits': 859.0, 'guiding_paths': 31.0, 'splits': 0.0, 'lemmas_conflict': 44.0, 'lemmas_loop': 20.0, 'lemmas_other': 84.0, 'lits_conflict': 44.0, 'lits_loop': 57.0, 'lits_other': 133.0, 'jumps': {'jumps': 44.0, 'jumps_bounded': 0.0, 'levels': 44.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 59, 36: 61}

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 37 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 3 ( 30.00% solved)

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(37, 61)', truth=True, inc_range=None)

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 37, step = 61]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 37)

[03-01-2022_17-11-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 61:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     61 : Current =     62
Incrementor step ends | Minimum  =     68 : Maximum =    100

[03-01-2022_17-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('state_module', [Number(62), Number(58)]), ('plan_module', [Number(62), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.094047s.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 62: original = External(symbol='current_last_sgoals(37, 61)', truth=True, inc_range=None), conversion = current_last_sgoals(37,61).

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014527s with result Unsatisfiable.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10857419999999962, Incremental time limit = None
Running cumulative time = 0.455313100000005, Cumulative time limit = 1800
Used memory = (RSS = 208.753906Mb, VMS = 199.714844Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=61, end_step=62, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.4048289000000054, solving_time=0.050484199999999646, total_time=0.455313100000005, memory=Memory(rss=208.75390625, vms=199.71484375), step_range=range(58, 63), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09404710000000094, solving_time=0.014527099999998683, total_time=0.10857419999999962, memory=Memory(rss=208.75390625, vms=199.71484375), step_range=range(62, 63), clingo_stats={'problem': {'lp': {'atoms': 18742.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 93859.0, 'bodies_tr': 93859.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 868.0, 'count_bodies_tr': 868.0, 'sccs': 70.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 997.0, 'rules': 181759.0, 'rules_normal': 180627.0, 'rules_choice': 1128.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 181759.0, 'rules_tr_normal': 180627.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 33176.0, 'eqs_atom': 9343.0, 'eqs_body': 3159.0, 'eqs_other': 20674.0}, 'lpStep': {'atoms': 2847.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21979.0, 'bodies_tr': 21979.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 41889.0, 'rules_normal': 41693.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41889.0, 'rules_tr_normal': 41693.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4785.0, 'eqs_atom': 936.0, 'eqs_body': 428.0, 'eqs_other': 3421.0}, 'generator': {'vars': 3974.0, 'vars_eliminated': 0.0, 'vars_frozen': 2479.0, 'constraints': 265.0, 'constraints_binary': 5481.0, 'constraints_ternary': 650.0, 'acyc_edges': 0.0, 'complexity': 6496.0}}, 'solving': {'solvers': {'choices': 1.0, 'conflicts': 3.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 5.0, 'lemmas': 8.0, 'lits_learnt': 30.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 5.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 366.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 2.0, 'lemmas_other': 5.0, 'lits_conflict': 4.0, 'lits_loop': 6.0, 'lits_other': 20.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 2.0, 'levels_bounded': 1.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.10925102233886719, 'cpu': 0.09375, 'solve': 0.00299072265625, 'unsat': 0.00299072265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4952545166015625, 'cpu': 0.53125, 'solve': 0.019886016845703125, 'unsat': 0.0049839019775390625, 'sat': 0.0059375762939453125}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 293.0, 'conflicts': 50.0, 'conflicts_analyzed': 45.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 112.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 54.0, 'distributed_sum_lbd': 64.0, 'integrated': 89.0, 'lemmas': 156.0, 'lits_learnt': 264.0, 'lemmas_binary': 58.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 48.0, 'integrated_jumps': 21.0, 'guiding_paths_lits': 1225.0, 'guiding_paths': 37.0, 'splits': 0.0, 'lemmas_conflict': 45.0, 'lemmas_loop': 22.0, 'lemmas_other': 89.0, 'lits_conflict': 48.0, 'lits_loop': 63.0, 'lits_other': 153.0, 'jumps': {'jumps': 45.0, 'jumps_bounded': 1.0, 'levels': 46.0, 'levels_bounded': 1.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 62:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =     68 : Maximum =    100

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('state_module', [Number(63), Number(58)]), ('plan_module', [Number(63), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.158872s.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013126s with result Unsatisfiable.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.17199719999999985, Incremental time limit = None
Running cumulative time = 0.6273103000000049, Cumulative time limit = 1800
Used memory = (RSS = 211.667969Mb, VMS = 202.953125Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=62, end_step=63, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5637004000000054, solving_time=0.06360989999999944, total_time=0.6273103000000049, memory=Memory(rss=211.66796875, vms=202.953125), step_range=range(58, 64), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15887150000000005, solving_time=0.013125699999999796, total_time=0.17199719999999985, memory=Memory(rss=211.66796875, vms=202.953125), step_range=range(63, 64), clingo_stats={'problem': {'lp': {'atoms': 21594.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 116379.0, 'bodies_tr': 116379.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1070.0, 'count_bodies_tr': 1070.0, 'sccs': 89.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1261.0, 'rules': 224932.0, 'rules_normal': 223604.0, 'rules_choice': 1323.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 224932.0, 'rules_tr_normal': 223604.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 41778.0, 'eqs_atom': 10942.0, 'eqs_body': 3619.0, 'eqs_other': 27217.0}, 'lpStep': {'atoms': 2852.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22520.0, 'bodies_tr': 22520.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 19.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 264.0, 'rules': 43173.0, 'rules_normal': 42977.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 43173.0, 'rules_tr_normal': 42977.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8602.0, 'eqs_atom': 1599.0, 'eqs_body': 460.0, 'eqs_other': 6543.0}, 'generator': {'vars': 4965.0, 'vars_eliminated': 0.0, 'vars_frozen': 3099.0, 'constraints': 472.0, 'constraints_binary': 13664.0, 'constraints_ternary': 1562.0, 'acyc_edges': 0.0, 'complexity': 15852.0}}, 'solving': {'solvers': {'choices': 103.0, 'conflicts': 17.0, 'conflicts_analyzed': 13.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 46.0, 'integrated': 66.0, 'lemmas': 105.0, 'lits_learnt': 451.0, 'lemmas_binary': 24.0, 'lemmas_ternary': 30.0, 'cpu_time': 0.0, 'integrated_imps': 30.0, 'integrated_jumps': 30.0, 'guiding_paths_lits': 365.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 29.0, 'lemmas_other': 63.0, 'lits_conflict': 72.0, 'lits_loop': 178.0, 'lits_other': 201.0, 'jumps': {'jumps': 13.0, 'jumps_bounded': 5.0, 'levels': 291.0, 'levels_bounded': 221.0, 'max': 91.0, 'max_executed': 91.0, 'max_bounded': 73.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.17363357543945312, 'cpu': 0.171875, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6688880920410156, 'cpu': 0.703125, 'solve': 0.021881103515625, 'unsat': 0.0069789886474609375, 'sat': 0.0059375762939453125}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 396.0, 'conflicts': 67.0, 'conflicts_analyzed': 58.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 112.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 78.0, 'distributed_sum_lbd': 110.0, 'integrated': 155.0, 'lemmas': 261.0, 'lits_learnt': 715.0, 'lemmas_binary': 82.0, 'lemmas_ternary': 30.0, 'cpu_time': 0.0625, 'integrated_imps': 78.0, 'integrated_jumps': 51.0, 'guiding_paths_lits': 1590.0, 'guiding_paths': 42.0, 'splits': 0.0, 'lemmas_conflict': 58.0, 'lemmas_loop': 51.0, 'lemmas_other': 152.0, 'lits_conflict': 120.0, 'lits_loop': 241.0, 'lits_other': 354.0, 'jumps': {'jumps': 58.0, 'jumps_bounded': 6.0, 'levels': 337.0, 'levels_bounded': 222.0, 'max': 91.0, 'max_executed': 91.0, 'max_bounded': 73.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 63:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     63 : Current =     64
Incrementor step ends | Minimum  =     68 : Maximum =    100

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(64)]), ('state_module', [Number(64), Number(58)]), ('plan_module', [Number(64), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.115971s.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020118s with result Satisfiable.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13608969999999943, Incremental time limit = None
Running cumulative time = 0.7634000000000043, Cumulative time limit = 1800
Used memory = (RSS = 214.027344Mb, VMS = 204.445312Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.679672s, Solving = 0.083728s, Total = 0.763400s, Memory = (RSS = 214.027344Mb, VMS = 204.445312Mb), Step range = [58-64]), Calls = 6
Final Model :: Total atoms = 6024, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=63, end_step=64, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.679671600000006, solving_time=0.08372839999999826, total_time=0.7634000000000043, memory=Memory(rss=214.02734375, vms=204.4453125), step_range=range(58, 65), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11597120000000061, solving_time=0.020118499999998818, total_time=0.13608969999999943, memory=Memory(rss=214.02734375, vms=204.4453125), step_range=range(64, 65), clingo_stats={'problem': {'lp': {'atoms': 24525.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 139035.0, 'bodies_tr': 139035.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1272.0, 'count_bodies_tr': 1272.0, 'sccs': 108.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1525.0, 'rules': 268287.0, 'rules_normal': 266763.0, 'rules_choice': 1518.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 268287.0, 'rules_tr_normal': 266763.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 51103.0, 'eqs_atom': 12536.0, 'eqs_body': 4082.0, 'eqs_other': 34485.0}, 'lpStep': {'atoms': 2931.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22656.0, 'bodies_tr': 22656.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 19.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 264.0, 'rules': 43355.0, 'rules_normal': 43159.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 43355.0, 'rules_tr_normal': 43159.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 9325.0, 'eqs_atom': 1594.0, 'eqs_body': 463.0, 'eqs_other': 7268.0}, 'generator': {'vars': 6038.0, 'vars_eliminated': 0.0, 'vars_frozen': 3765.0, 'constraints': 662.0, 'constraints_binary': 20183.0, 'constraints_ternary': 2310.0, 'acyc_edges': 0.0, 'complexity': 23363.0}}, 'solving': {'solvers': {'choices': 457.0, 'conflicts': 78.0, 'conflicts_analyzed': 78.0, 'restarts': 0.0, 'restarts_last': 10.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 127.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 82.0, 'distributed_sum_lbd': 144.0, 'integrated': 252.0, 'lemmas': 418.0, 'lits_learnt': 4084.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 45.0, 'cpu_time': 0.03125, 'integrated_imps': 72.0, 'integrated_jumps': 58.0, 'guiding_paths_lits': 595.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 77.0, 'lemmas_loop': 106.0, 'lemmas_other': 235.0, 'lits_conflict': 524.0, 'lits_loop': 931.0, 'lits_other': 2629.0, 'jumps': {'jumps': 78.0, 'jumps_bounded': 7.0, 'levels': 404.0, 'levels_bounded': 259.0, 'max': 96.0, 'max_executed': 96.0, 'max_bounded': 85.0}}}}, 'summary': {'call': 6.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.13663673400878906, 'cpu': 0.15625, 'solve': 0.00698089599609375, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8055248260498047, 'cpu': 0.859375, 'solve': 0.02886199951171875, 'unsat': 0.0069789886474609375, 'sat': 0.007932662963867188}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 853.0, 'conflicts': 145.0, 'conflicts_analyzed': 136.0, 'restarts': 0.0, 'restarts_last': 10.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 239.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 160.0, 'distributed_sum_lbd': 254.0, 'integrated': 407.0, 'lemmas': 679.0, 'lits_learnt': 4799.0, 'lemmas_binary': 94.0, 'lemmas_ternary': 75.0, 'cpu_time': 0.09375, 'integrated_imps': 150.0, 'integrated_jumps': 109.0, 'guiding_paths_lits': 2185.0, 'guiding_paths': 49.0, 'splits': 0.0, 'lemmas_conflict': 135.0, 'lemmas_loop': 157.0, 'lemmas_other': 387.0, 'lits_conflict': 644.0, 'lits_loop': 1172.0, 'lits_other': 2983.0, 'jumps': {'jumps': 136.0, 'jumps_bounded': 13.0, 'levels': 741.0, 'levels_bounded': 481.0, 'max': 96.0, 'max_executed': 96.0, 'max_bounded': 85.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 59, 36: 61, 37: 64}

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 38 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 4 ( 40.00% solved)

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(38, 64)', truth=True, inc_range=None)

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 38, step = 64]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 38)

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 64:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     64 : Current =     65
Incrementor step ends | Minimum  =     68 : Maximum =    100

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(65)]), ('state_module', [Number(65), Number(58)]), ('plan_module', [Number(65), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.093930s.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 65: original = External(symbol='current_last_sgoals(38, 64)', truth=True, inc_range=None), conversion = current_last_sgoals(38,64).

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018505s with result Satisfiable.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11243520000000018, Incremental time limit = None
Running cumulative time = 0.8758352000000045, Cumulative time limit = 1800
Used memory = (RSS = 218.335938Mb, VMS = 209.535156Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.773601s, Solving = 0.102234s, Total = 0.875835s, Memory = (RSS = 218.335938Mb, VMS = 209.535156Mb), Step range = [58-65]), Calls = 7
Final Model :: Total atoms = 6399, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=64, end_step=65, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.773601400000004, solving_time=0.10223380000000049, total_time=0.8758352000000045, memory=Memory(rss=218.3359375, vms=209.53515625), step_range=range(58, 66), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09392979999999795, solving_time=0.018505400000002226, total_time=0.11243520000000018, memory=Memory(rss=218.3359375, vms=209.53515625), step_range=range(65, 66), clingo_stats={'problem': {'lp': {'atoms': 27467.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 161690.0, 'bodies_tr': 161690.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1474.0, 'count_bodies_tr': 1474.0, 'sccs': 127.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1789.0, 'rules': 311688.0, 'rules_normal': 309968.0, 'rules_choice': 1713.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 311688.0, 'rules_tr_normal': 309968.0, 'rules_tr_choice': 1713.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 60409.0, 'eqs_atom': 14167.0, 'eqs_body': 4570.0, 'eqs_other': 41672.0}, 'lpStep': {'atoms': 2942.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22655.0, 'bodies_tr': 22655.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 19.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 264.0, 'rules': 43401.0, 'rules_normal': 43205.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 43401.0, 'rules_tr_normal': 43205.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 9306.0, 'eqs_atom': 1631.0, 'eqs_body': 488.0, 'eqs_other': 7187.0}, 'generator': {'vars': 7075.0, 'vars_eliminated': 0.0, 'vars_frozen': 4411.0, 'constraints': 782.0, 'constraints_binary': 20867.0, 'constraints_ternary': 2649.0, 'acyc_edges': 0.0, 'complexity': 24560.0}}, 'solving': {'solvers': {'choices': 340.0, 'conflicts': 15.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 145.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 29.0, 'integrated': 12.0, 'lemmas': 93.0, 'lits_learnt': 697.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.03125, 'integrated_imps': 1.0, 'integrated_jumps': 2.0, 'guiding_paths_lits': 679.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 77.0, 'lemmas_other': 1.0, 'lits_conflict': 26.0, 'lits_loop': 660.0, 'lits_other': 11.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 2.0, 'levels': 17.0, 'levels_bounded': 2.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.11482620239257812, 'cpu': 0.140625, 'solve': 0.007978439331054688, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.9203510284423828, 'cpu': 1.0, 'solve': 0.03684043884277344, 'unsat': 0.0069789886474609375, 'sat': 0.009927749633789062}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1193.0, 'conflicts': 160.0, 'conflicts_analyzed': 151.0, 'restarts': 0.0, 'restarts_last': 10.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 384.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 181.0, 'distributed_sum_lbd': 283.0, 'integrated': 419.0, 'lemmas': 772.0, 'lits_learnt': 5496.0, 'lemmas_binary': 95.0, 'lemmas_ternary': 81.0, 'cpu_time': 0.125, 'integrated_imps': 151.0, 'integrated_jumps': 111.0, 'guiding_paths_lits': 2864.0, 'guiding_paths': 56.0, 'splits': 0.0, 'lemmas_conflict': 150.0, 'lemmas_loop': 234.0, 'lemmas_other': 388.0, 'lits_conflict': 670.0, 'lits_loop': 1832.0, 'lits_other': 2994.0, 'jumps': {'jumps': 151.0, 'jumps_bounded': 15.0, 'levels': 758.0, 'levels_bounded': 483.0, 'max': 96.0, 'max_executed': 96.0, 'max_bounded': 85.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 59, 36: 61, 37: 64, 38: 65}

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 39 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 5 ( 50.00% solved)

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(39, 65)', truth=True, inc_range=None)

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 39, step = 65]:
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 39)

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 65:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     65 : Current =     66
Incrementor step ends | Minimum  =     68 : Maximum =    100

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('state_module', [Number(66), Number(58)]), ('plan_module', [Number(66), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.099906s.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 66: original = External(symbol='current_last_sgoals(39, 65)', truth=True, inc_range=None), conversion = current_last_sgoals(39,65).

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014580s with result Unsatisfiable.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1144861999999982, Incremental time limit = None
Running cumulative time = 0.9903214000000027, Cumulative time limit = 1800
Used memory = (RSS = 220.109375Mb, VMS = 210.683594Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=65, end_step=66, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.8735076000000035, solving_time=0.11681379999999919, total_time=0.9903214000000027, memory=Memory(rss=220.109375, vms=210.68359375), step_range=range(58, 67), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.0999061999999995, solving_time=0.014579999999998705, total_time=0.1144861999999982, memory=Memory(rss=220.109375, vms=210.68359375), step_range=range(66, 67), clingo_stats={'problem': {'lp': {'atoms': 30421.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 184477.0, 'bodies_tr': 184477.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1676.0, 'count_bodies_tr': 1676.0, 'sccs': 146.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2059.0, 'rules': 355266.0, 'rules_normal': 353350.0, 'rules_choice': 1908.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 355266.0, 'rules_tr_normal': 353350.0, 'rules_tr_choice': 1908.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 69920.0, 'eqs_atom': 15774.0, 'eqs_body': 5022.0, 'eqs_other': 49124.0}, 'lpStep': {'atoms': 2954.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22787.0, 'bodies_tr': 22787.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 19.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 270.0, 'rules': 43578.0, 'rules_normal': 43382.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 43578.0, 'rules_tr_normal': 43382.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 9511.0, 'eqs_atom': 1607.0, 'eqs_body': 452.0, 'eqs_other': 7452.0}, 'generator': {'vars': 8172.0, 'vars_eliminated': 0.0, 'vars_frozen': 5083.0, 'constraints': 973.0, 'constraints_binary': 28205.0, 'constraints_ternary': 3366.0, 'acyc_edges': 0.0, 'complexity': 32852.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 763.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.11585426330566406, 'cpu': 0.109375, 'solve': 0.0022525787353515625, 'unsat': 0.0022525787353515625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.0362052917480469, 'cpu': 1.109375, 'solve': 0.039093017578125, 'unsat': 0.0092315673828125, 'sat': 0.009927749633789062}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1193.0, 'conflicts': 168.0, 'conflicts_analyzed': 151.0, 'restarts': 0.0, 'restarts_last': 10.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 384.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 181.0, 'distributed_sum_lbd': 283.0, 'integrated': 419.0, 'lemmas': 772.0, 'lits_learnt': 5496.0, 'lemmas_binary': 95.0, 'lemmas_ternary': 81.0, 'cpu_time': 0.125, 'integrated_imps': 151.0, 'integrated_jumps': 111.0, 'guiding_paths_lits': 3627.0, 'guiding_paths': 63.0, 'splits': 0.0, 'lemmas_conflict': 150.0, 'lemmas_loop': 234.0, 'lemmas_other': 388.0, 'lits_conflict': 670.0, 'lits_loop': 1832.0, 'lits_other': 2994.0, 'jumps': {'jumps': 151.0, 'jumps_bounded': 15.0, 'levels': 758.0, 'levels_bounded': 483.0, 'max': 96.0, 'max_executed': 96.0, 'max_bounded': 85.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 66:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     66 : Current =     67
Incrementor step ends | Minimum  =     68 : Maximum =    100

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(67)]), ('state_module', [Number(67), Number(58)]), ('plan_module', [Number(67), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.095454s.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027023s with result Satisfiable.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12247689999999878, Incremental time limit = None
Running cumulative time = 1.1127983000000015, Cumulative time limit = 1800
Used memory = (RSS = 224.699219Mb, VMS = 217.121094Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.968961s, Solving = 0.143837s, Total = 1.112798s, Memory = (RSS = 224.699219Mb, VMS = 217.121094Mb), Step range = [58-67]), Calls = 9
Final Model :: Total atoms = 7146, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=66, end_step=67, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.9689612000000025, solving_time=0.14383709999999894, total_time=1.1127983000000015, memory=Memory(rss=224.69921875, vms=217.12109375), step_range=range(58, 68), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09545359999999903, solving_time=0.02702329999999975, total_time=0.12247689999999878, memory=Memory(rss=224.69921875, vms=217.12109375), step_range=range(67, 68), clingo_stats={'problem': {'lp': {'atoms': 33388.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 207846.0, 'bodies_tr': 207846.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1878.0, 'count_bodies_tr': 1878.0, 'sccs': 171.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2545.0, 'rules': 399472.0, 'rules_normal': 397360.0, 'rules_choice': 2103.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 399472.0, 'rules_tr_normal': 397360.0, 'rules_tr_choice': 2103.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 77519.0, 'eqs_atom': 17209.0, 'eqs_body': 5162.0, 'eqs_other': 55148.0}, 'lpStep': {'atoms': 2967.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23369.0, 'bodies_tr': 23369.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 44206.0, 'rules_normal': 44010.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 44206.0, 'rules_tr_normal': 44010.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7599.0, 'eqs_atom': 1435.0, 'eqs_body': 140.0, 'eqs_other': 6024.0}, 'generator': {'vars': 10069.0, 'vars_eliminated': 0.0, 'vars_frozen': 6228.0, 'constraints': 1452.0, 'constraints_binary': 47413.0, 'constraints_ternary': 5497.0, 'acyc_edges': 0.0, 'complexity': 54748.0}}, 'solving': {'solvers': {'choices': 635.0, 'conflicts': 45.0, 'conflicts_analyzed': 45.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 181.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 50.0, 'distributed_sum_lbd': 92.0, 'integrated': 192.0, 'lemmas': 354.0, 'lits_learnt': 3563.0, 'lemmas_binary': 23.0, 'lemmas_ternary': 46.0, 'cpu_time': 0.03125, 'integrated_imps': 77.0, 'integrated_jumps': 174.0, 'guiding_paths_lits': 847.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 45.0, 'lemmas_loop': 143.0, 'lemmas_other': 166.0, 'lits_conflict': 434.0, 'lits_loop': 1213.0, 'lits_other': 1916.0, 'jumps': {'jumps': 45.0, 'jumps_bounded': 6.0, 'levels': 185.0, 'levels_bounded': 126.0, 'max': 123.0, 'max_executed': 6.0, 'max_bounded': 121.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.12365913391113281, 'cpu': 0.125, 'solve': 0.013225555419921875, 'unsat': 0.0, 'sat': 0.00424957275390625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.1598644256591797, 'cpu': 1.234375, 'solve': 0.052318572998046875, 'unsat': 0.0092315673828125, 'sat': 0.014177322387695312}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1828.0, 'conflicts': 213.0, 'conflicts_analyzed': 196.0, 'restarts': 0.0, 'restarts_last': 10.0, 'extra': {'domain_choices': 0.0, 'models': 6.0, 'models_level': 565.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 231.0, 'distributed_sum_lbd': 375.0, 'integrated': 611.0, 'lemmas': 1126.0, 'lits_learnt': 9059.0, 'lemmas_binary': 118.0, 'lemmas_ternary': 127.0, 'cpu_time': 0.15625, 'integrated_imps': 228.0, 'integrated_jumps': 285.0, 'guiding_paths_lits': 4474.0, 'guiding_paths': 70.0, 'splits': 0.0, 'lemmas_conflict': 195.0, 'lemmas_loop': 377.0, 'lemmas_other': 554.0, 'lits_conflict': 1104.0, 'lits_loop': 3045.0, 'lits_other': 4910.0, 'jumps': {'jumps': 196.0, 'jumps_bounded': 21.0, 'levels': 943.0, 'levels_bounded': 609.0, 'max': 123.0, 'max_executed': 96.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 59, 36: 61, 37: 64, 38: 65, 39: 67}

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 40 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 6 ( 60.00% solved)

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(40, 67)', truth=True, inc_range=None)

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 40, step = 67]:
sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 40)

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 67:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     67 : Current =     68
Incrementor step ends | Minimum  =     68 : Maximum =    100

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(68)]), ('state_module', [Number(68), Number(58)]), ('plan_module', [Number(68), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.100781s.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 68: original = External(symbol='current_last_sgoals(40, 67)', truth=True, inc_range=None), conversion = current_last_sgoals(40,67).

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025952s with result Satisfiable.

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12673320000000388, Incremental time limit = None
Running cumulative time = 1.2395315000000053, Cumulative time limit = 1800
Used memory = (RSS = 226.105469Mb, VMS = 217.707031Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.069742s, Solving = 0.169790s, Total = 1.239532s, Memory = (RSS = 226.105469Mb, VMS = 217.707031Mb), Step range = [58-68]), Calls = 10
Final Model :: Total atoms = 7522, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=67, end_step=68, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.069742000000005, solving_time=0.16978950000000026, total_time=1.2395315000000053, memory=Memory(rss=226.10546875, vms=217.70703125), step_range=range(58, 69), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10078080000000256, solving_time=0.02595240000000132, total_time=0.12673320000000388, memory=Memory(rss=226.10546875, vms=217.70703125), step_range=range(68, 69), clingo_stats={'problem': {'lp': {'atoms': 36725.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 231936.0, 'bodies_tr': 231936.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2080.0, 'count_bodies_tr': 2080.0, 'sccs': 196.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3035.0, 'rules': 444706.0, 'rules_normal': 442398.0, 'rules_choice': 2298.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 444706.0, 'rules_tr_normal': 442398.0, 'rules_tr_choice': 2298.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 89536.0, 'eqs_atom': 18964.0, 'eqs_body': 5346.0, 'eqs_other': 65226.0}, 'lpStep': {'atoms': 3337.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24090.0, 'bodies_tr': 24090.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 45234.0, 'rules_normal': 45038.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45234.0, 'rules_tr_normal': 45038.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 12017.0, 'eqs_atom': 1755.0, 'eqs_body': 184.0, 'eqs_other': 10078.0}, 'generator': {'vars': 12121.0, 'vars_eliminated': 0.0, 'vars_frozen': 7416.0, 'constraints': 1904.0, 'constraints_binary': 64739.0, 'constraints_ternary': 7848.0, 'acyc_edges': 0.0, 'complexity': 74947.0}}, 'solving': {'solvers': {'choices': 473.0, 'conflicts': 4.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 199.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 7.0, 'integrated': 18.0, 'lemmas': 71.0, 'lits_learnt': 575.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 5.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 931.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 60.0, 'lemmas_other': 8.0, 'lits_conflict': 15.0, 'lits_loop': 526.0, 'lits_other': 34.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 2.0, 'levels': 6.0, 'levels_bounded': 2.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 10.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1288585662841797, 'cpu': 0.140625, 'solve': 0.010150909423828125, 'unsat': 0.0, 'sat': 0.00273895263671875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.2887229919433594, 'cpu': 1.375, 'solve': 0.062469482421875, 'unsat': 0.0092315673828125, 'sat': 0.016916275024414062}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2301.0, 'conflicts': 217.0, 'conflicts_analyzed': 200.0, 'restarts': 0.0, 'restarts_last': 10.0, 'extra': {'domain_choices': 0.0, 'models': 7.0, 'models_level': 764.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 234.0, 'distributed_sum_lbd': 382.0, 'integrated': 629.0, 'lemmas': 1197.0, 'lits_learnt': 9634.0, 'lemmas_binary': 126.0, 'lemmas_ternary': 127.0, 'cpu_time': 0.1875, 'integrated_imps': 233.0, 'integrated_jumps': 292.0, 'guiding_paths_lits': 5405.0, 'guiding_paths': 77.0, 'splits': 0.0, 'lemmas_conflict': 198.0, 'lemmas_loop': 437.0, 'lemmas_other': 562.0, 'lits_conflict': 1119.0, 'lits_loop': 3571.0, 'lits_other': 4944.0, 'jumps': {'jumps': 200.0, 'jumps_bounded': 23.0, 'levels': 949.0, 'levels_bounded': 611.0, 'max': 123.0, 'max_executed': 96.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 59, 36: 61, 37: 64, 38: 65, 39: 67, 40: 68}

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 41 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 7 ( 70.00% solved)

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(41, 68)', truth=True, inc_range=None)

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 41, step = 68]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 41)

[03-01-2022_17-11-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 68:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     68 : Current =     69
Incrementor step ends | Minimum  =     68 : Maximum =    100

[03-01-2022_17-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('state_module', [Number(69), Number(58)]), ('plan_module', [Number(69), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(69), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.132575s.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 69: original = External(symbol='current_last_sgoals(41, 68)', truth=True, inc_range=None), conversion = current_last_sgoals(41,68).

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027748s with result Unsatisfiable.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16032309999999939, Incremental time limit = None
Running cumulative time = 1.3998546000000047, Cumulative time limit = 1800
Used memory = (RSS = 234.433594Mb, VMS = 228.792969Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=68, end_step=69, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.2023174000000054, solving_time=0.1975371999999993, total_time=1.3998546000000047, memory=Memory(rss=234.43359375, vms=228.79296875), step_range=range(58, 70), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13257540000000034, solving_time=0.027747699999999043, total_time=0.16032309999999939, memory=Memory(rss=234.43359375, vms=228.79296875), step_range=range(69, 70), clingo_stats={'problem': {'lp': {'atoms': 40079.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 256367.0, 'bodies_tr': 256367.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2282.0, 'count_bodies_tr': 2282.0, 'sccs': 221.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3629.0, 'rules': 490326.0, 'rules_normal': 487822.0, 'rules_choice': 2493.0, 'rules_minimize': 11.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 490326.0, 'rules_tr_normal': 487822.0, 'rules_tr_choice': 2493.0, 'rules_tr_minimize': 11.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 96818.0, 'eqs_atom': 20680.0, 'eqs_body': 5420.0, 'eqs_other': 70718.0}, 'lpStep': {'atoms': 3354.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24431.0, 'bodies_tr': 24431.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45620.0, 'rules_normal': 45424.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45620.0, 'rules_tr_normal': 45424.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7282.0, 'eqs_atom': 1716.0, 'eqs_body': 74.0, 'eqs_other': 5492.0}, 'generator': {'vars': 14505.0, 'vars_eliminated': 0.0, 'vars_frozen': 8799.0, 'constraints': 2524.0, 'constraints_binary': 90556.0, 'constraints_ternary': 11125.0, 'acyc_edges': 0.0, 'complexity': 104747.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1015.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.16267967224121094, 'cpu': 0.1875, 'solve': 0.008089065551757812, 'unsat': 0.008089065551757812, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.4514026641845703, 'cpu': 1.5625, 'solve': 0.07055854797363281, 'unsat': 0.017320632934570312, 'sat': 0.016916275024414062}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2301.0, 'conflicts': 225.0, 'conflicts_analyzed': 200.0, 'restarts': 0.0, 'restarts_last': 10.0, 'extra': {'domain_choices': 0.0, 'models': 7.0, 'models_level': 764.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 234.0, 'distributed_sum_lbd': 382.0, 'integrated': 629.0, 'lemmas': 1197.0, 'lits_learnt': 9634.0, 'lemmas_binary': 126.0, 'lemmas_ternary': 127.0, 'cpu_time': 0.1875, 'integrated_imps': 233.0, 'integrated_jumps': 292.0, 'guiding_paths_lits': 6420.0, 'guiding_paths': 84.0, 'splits': 0.0, 'lemmas_conflict': 198.0, 'lemmas_loop': 437.0, 'lemmas_other': 562.0, 'lits_conflict': 1119.0, 'lits_loop': 3571.0, 'lits_other': 4944.0, 'jumps': {'jumps': 200.0, 'jumps_bounded': 23.0, 'levels': 949.0, 'levels_bounded': 611.0, 'max': 123.0, 'max_executed': 96.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 69:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     69 : Current =     70
Incrementor step ends | Minimum  =     68 : Maximum =    100

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(70)]), ('state_module', [Number(70), Number(58)]), ('plan_module', [Number(70), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(70), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.134211s.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029102s with result Satisfiable.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.16331309999999988, Incremental time limit = None
Running cumulative time = 1.5631677000000046, Cumulative time limit = 1800
Used memory = (RSS = 237.832031Mb, VMS = 230.601562Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.336529s, Solving = 0.226639s, Total = 1.563168s, Memory = (RSS = 237.832031Mb, VMS = 230.601562Mb), Step range = [58-70]), Calls = 12
Final Model :: Total atoms = 8275, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=69, end_step=70, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.3365285000000071, solving_time=0.2266391999999975, total_time=1.5631677000000046, memory=Memory(rss=237.83203125, vms=230.6015625), step_range=range(58, 71), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1342111000000017, solving_time=0.029101999999998185, total_time=0.16331309999999988, memory=Memory(rss=237.83203125, vms=230.6015625), step_range=range(70, 71), clingo_stats={'problem': {'lp': {'atoms': 43568.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 281050.0, 'bodies_tr': 281050.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2484.0, 'count_bodies_tr': 2484.0, 'sccs': 246.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4223.0, 'rules': 536331.0, 'rules_normal': 533631.0, 'rules_choice': 2688.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 536331.0, 'rules_tr_normal': 533631.0, 'rules_tr_choice': 2688.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 104468.0, 'eqs_atom': 22509.0, 'eqs_body': 5495.0, 'eqs_other': 76464.0}, 'lpStep': {'atoms': 3489.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24683.0, 'bodies_tr': 24683.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46005.0, 'rules_normal': 45809.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46005.0, 'rules_tr_normal': 45809.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7650.0, 'eqs_atom': 1829.0, 'eqs_body': 75.0, 'eqs_other': 5746.0}, 'generator': {'vars': 16929.0, 'vars_eliminated': 0.0, 'vars_frozen': 10192.0, 'constraints': 3156.0, 'constraints_binary': 116469.0, 'constraints_ternary': 14602.0, 'acyc_edges': 0.0, 'complexity': 134855.0}}, 'solving': {'solvers': {'choices': 829.0, 'conflicts': 75.0, 'conflicts_analyzed': 75.0, 'restarts': 0.0, 'restarts_last': 32.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 239.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 60.0, 'distributed_sum_lbd': 157.0, 'integrated': 314.0, 'lemmas': 649.0, 'lits_learnt': 9068.0, 'lemmas_binary': 62.0, 'lemmas_ternary': 19.0, 'cpu_time': 0.125, 'integrated_imps': 48.0, 'integrated_jumps': 125.0, 'guiding_paths_lits': 1099.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 74.0, 'lemmas_loop': 280.0, 'lemmas_other': 295.0, 'lits_conflict': 1473.0, 'lits_loop': 2487.0, 'lits_other': 5108.0, 'jumps': {'jumps': 75.0, 'jumps_bounded': 3.0, 'levels': 141.0, 'levels_bounded': 3.0, 'max': 10.0, 'max_executed': 10.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 12.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.1645641326904297, 'cpu': 0.265625, 'solve': 0.014989852905273438, 'unsat': 0.0, 'sat': 0.0049896240234375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.615966796875, 'cpu': 1.828125, 'solve': 0.08554840087890625, 'unsat': 0.017320632934570312, 'sat': 0.021905899047851562}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3130.0, 'conflicts': 300.0, 'conflicts_analyzed': 275.0, 'restarts': 0.0, 'restarts_last': 32.0, 'extra': {'domain_choices': 0.0, 'models': 8.0, 'models_level': 1003.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 294.0, 'distributed_sum_lbd': 539.0, 'integrated': 943.0, 'lemmas': 1846.0, 'lits_learnt': 18702.0, 'lemmas_binary': 188.0, 'lemmas_ternary': 146.0, 'cpu_time': 0.3125, 'integrated_imps': 281.0, 'integrated_jumps': 417.0, 'guiding_paths_lits': 7519.0, 'guiding_paths': 91.0, 'splits': 0.0, 'lemmas_conflict': 272.0, 'lemmas_loop': 717.0, 'lemmas_other': 857.0, 'lits_conflict': 2592.0, 'lits_loop': 6058.0, 'lits_other': 10052.0, 'jumps': {'jumps': 275.0, 'jumps_bounded': 26.0, 'levels': 1090.0, 'levels_bounded': 614.0, 'max': 123.0, 'max_executed': 96.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 59, 36: 61, 37: 64, 38: 65, 39: 67, 40: 68, 41: 70}

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 42 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 8 ( 80.00% solved)

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(42, 70)', truth=True, inc_range=None)

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 42, step = 70]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 42)

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 70:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     70 : Current =     71
Incrementor step ends | Minimum  =     68 : Maximum =    100

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(71)]), ('state_module', [Number(71), Number(58)]), ('plan_module', [Number(71), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(71), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.155108s.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 71: original = External(symbol='current_last_sgoals(42, 70)', truth=True, inc_range=None), conversion = current_last_sgoals(42,70).

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.038904s with result Satisfiable.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1940125999999971, Incremental time limit = None
Running cumulative time = 1.7571803000000017, Cumulative time limit = 1800
Used memory = (RSS = 239.738281Mb, VMS = 231.164062Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.491637s, Solving = 0.265544s, Total = 1.757180s, Memory = (RSS = 239.738281Mb, VMS = 231.164062Mb), Step range = [58-71]), Calls = 13
Final Model :: Total atoms = 8653, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=70, end_step=71, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.4916366000000068, solving_time=0.26554369999999494, total_time=1.7571803000000017, memory=Memory(rss=239.73828125, vms=231.1640625), step_range=range(58, 72), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15510809999999964, solving_time=0.038904499999997455, total_time=0.1940125999999971, memory=Memory(rss=239.73828125, vms=231.1640625), step_range=range(71, 72), clingo_stats={'problem': {'lp': {'atoms': 47067.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 305755.0, 'bodies_tr': 305755.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2686.0, 'count_bodies_tr': 2686.0, 'sccs': 271.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4817.0, 'rules': 582403.0, 'rules_normal': 579507.0, 'rules_choice': 2883.0, 'rules_minimize': 13.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 582403.0, 'rules_tr_normal': 579507.0, 'rules_tr_choice': 2883.0, 'rules_tr_minimize': 13.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 112168.0, 'eqs_atom': 24348.0, 'eqs_body': 5570.0, 'eqs_other': 82250.0}, 'lpStep': {'atoms': 3499.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24705.0, 'bodies_tr': 24705.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46072.0, 'rules_normal': 45876.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46072.0, 'rules_tr_normal': 45876.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7700.0, 'eqs_atom': 1839.0, 'eqs_body': 75.0, 'eqs_other': 5786.0}, 'generator': {'vars': 19355.0, 'vars_eliminated': 0.0, 'vars_frozen': 11585.0, 'constraints': 3788.0, 'constraints_binary': 142442.0, 'constraints_ternary': 18081.0, 'acyc_edges': 0.0, 'complexity': 165025.0}}, 'solving': {'solvers': {'choices': 642.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 257.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 17.0, 'integrated': 42.0, 'lemmas': 63.0, 'lits_learnt': 928.0, 'lemmas_binary': 14.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.125, 'integrated_imps': 12.0, 'integrated_jumps': 28.0, 'guiding_paths_lits': 1183.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 19.0, 'lemmas_other': 37.0, 'lits_conflict': 114.0, 'lits_loop': 145.0, 'lits_other': 669.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 2.0, 'levels': 10.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 13.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.1964740753173828, 'cpu': 0.296875, 'solve': 0.01992034912109375, 'unsat': 0.0, 'sat': 0.007953643798828125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.8124408721923828, 'cpu': 2.125, 'solve': 0.10546875, 'unsat': 0.017320632934570312, 'sat': 0.029859542846679688}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3772.0, 'conflicts': 307.0, 'conflicts_analyzed': 282.0, 'restarts': 0.0, 'restarts_last': 32.0, 'extra': {'domain_choices': 0.0, 'models': 9.0, 'models_level': 1260.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 301.0, 'distributed_sum_lbd': 556.0, 'integrated': 985.0, 'lemmas': 1909.0, 'lits_learnt': 19630.0, 'lemmas_binary': 202.0, 'lemmas_ternary': 148.0, 'cpu_time': 0.4375, 'integrated_imps': 293.0, 'integrated_jumps': 445.0, 'guiding_paths_lits': 8702.0, 'guiding_paths': 98.0, 'splits': 0.0, 'lemmas_conflict': 279.0, 'lemmas_loop': 736.0, 'lemmas_other': 894.0, 'lits_conflict': 2706.0, 'lits_loop': 6203.0, 'lits_other': 10721.0, 'jumps': {'jumps': 282.0, 'jumps_bounded': 28.0, 'levels': 1100.0, 'levels_bounded': 616.0, 'max': 123.0, 'max_executed': 96.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 59, 36: 61, 37: 64, 38: 65, 39: 67, 40: 68, 41: 70, 42: 71}

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 43 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 9 ( 90.00% solved)

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(43, 71)', truth=True, inc_range=None)

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 43, step = 71]:
sub_goal(2, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 43)

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 71:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     71 : Current =     72
Incrementor step ends | Minimum  =     68 : Maximum =    100

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(72)]), ('state_module', [Number(72), Number(58)]), ('plan_module', [Number(72), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(72), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.129058s.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 72: original = External(symbol='current_last_sgoals(43, 71)', truth=True, inc_range=None), conversion = current_last_sgoals(43,71).

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039753s with result Satisfiable.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.16881139999999917, Incremental time limit = None
Running cumulative time = 1.9259917000000009, Cumulative time limit = 1800
Used memory = (RSS = 247.265625Mb, VMS = 242.199219Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.620695s, Solving = 0.305297s, Total = 1.925992s, Memory = (RSS = 247.265625Mb, VMS = 242.199219Mb), Step range = [58-72]), Calls = 14
Final Model :: Total atoms = 9032, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=71, end_step=72, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.6206945000000061, solving_time=0.3052971999999947, total_time=1.9259917000000009, memory=Memory(rss=247.265625, vms=242.19921875), step_range=range(58, 73), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1290578999999994, solving_time=0.039753499999999775, total_time=0.16881139999999917, memory=Memory(rss=247.265625, vms=242.19921875), step_range=range(72, 73), clingo_stats={'problem': {'lp': {'atoms': 50576.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 330481.0, 'bodies_tr': 330481.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2888.0, 'count_bodies_tr': 2888.0, 'sccs': 296.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5411.0, 'rules': 628541.0, 'rules_normal': 625449.0, 'rules_choice': 3078.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 628541.0, 'rules_tr_normal': 625449.0, 'rules_tr_choice': 3078.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 119920.0, 'eqs_atom': 26197.0, 'eqs_body': 5645.0, 'eqs_other': 88078.0}, 'lpStep': {'atoms': 3509.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24726.0, 'bodies_tr': 24726.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46138.0, 'rules_normal': 45942.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46138.0, 'rules_tr_normal': 45942.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7752.0, 'eqs_atom': 1849.0, 'eqs_body': 75.0, 'eqs_other': 5828.0}, 'generator': {'vars': 21781.0, 'vars_eliminated': 0.0, 'vars_frozen': 12978.0, 'constraints': 4420.0, 'constraints_binary': 168471.0, 'constraints_ternary': 21560.0, 'acyc_edges': 0.0, 'complexity': 195251.0}}, 'solving': {'solvers': {'choices': 648.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 273.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1267.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 14.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1725616455078125, 'cpu': 0.1875, 'solve': 0.015943527221679688, 'unsat': 0.0, 'sat': 0.0059719085693359375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.9850025177001953, 'cpu': 2.3125, 'solve': 0.12141227722167969, 'unsat': 0.017320632934570312, 'sat': 0.035831451416015625}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4420.0, 'conflicts': 307.0, 'conflicts_analyzed': 282.0, 'restarts': 0.0, 'restarts_last': 32.0, 'extra': {'domain_choices': 0.0, 'models': 10.0, 'models_level': 1533.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 301.0, 'distributed_sum_lbd': 556.0, 'integrated': 985.0, 'lemmas': 1909.0, 'lits_learnt': 19630.0, 'lemmas_binary': 202.0, 'lemmas_ternary': 148.0, 'cpu_time': 0.484375, 'integrated_imps': 293.0, 'integrated_jumps': 445.0, 'guiding_paths_lits': 9969.0, 'guiding_paths': 105.0, 'splits': 0.0, 'lemmas_conflict': 279.0, 'lemmas_loop': 736.0, 'lemmas_other': 894.0, 'lits_conflict': 2706.0, 'lits_loop': 6203.0, 'lits_other': 10721.0, 'jumps': {'jumps': 282.0, 'jumps_bounded': 28.0, 'levels': 1100.0, 'levels_bounded': 616.0, 'max': 123.0, 'max_executed': 96.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 59, 36: 61, 37: 64, 38: 65, 39: 67, 40: 68, 41: 70, 42: 71, 43: 72}

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 44 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 10 (100.00% solved)

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(44, 72)', truth=True, inc_range=None)

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 44, step = 72]:
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 44)

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(72)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(1, complete_tower(blue,puzzle_room_table), false, false)
final_goal(1, complete_tower(blue,puzzle_room_table), true, true)
final_goal(1, complete_tower(red,puzzle_room_table), false, false)
final_goal(1, complete_tower(red,puzzle_room_table), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1),puzzle_room_table), false, true)
final_goal(1, tower_base((block,1),puzzle_room_table), true, false)
final_goal(1, tower_base((block,2),puzzle_room_table), false, true)
final_goal(1, tower_base((block,2),puzzle_room_table), true, false)
final_goal(1, tower_base((block,3),puzzle_room_table), false, false)
final_goal(1, tower_base((block,3),puzzle_room_table), true, true)
final_goal(1, tower_base((block,4),puzzle_room_table), false, true)
final_goal(1, tower_base((block,4),puzzle_room_table), true, false)
final_goal(1, tower_base((block,5),puzzle_room_table), false, true)
final_goal(1, tower_base((block,5),puzzle_room_table), true, false)
final_goal(1, tower_base((block,6),puzzle_room_table), false, false)
final_goal(1, tower_base((block,6),puzzle_room_table), true, true)
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false)

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     72 : Current =     73
Incrementor step ends | Minimum  =     68 : Maximum =    100

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(73)]), ('state_module', [Number(73), Number(58)]), ('plan_module', [Number(73), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(73), Number(58), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(58), Number(35), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.115853s.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 73: original = External(symbol='current_last_sgoals(44, 72)', truth=True, inc_range=None), conversion = current_last_sgoals(44,72).

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 73: original = External(symbol='seq_achieve_fgoals(72)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(72).

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.091745s with result Satisfiable.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.20759869999999836, Incremental time limit = None
Running cumulative time = 2.133590399999999, Cumulative time limit = 1800
Used memory = (RSS = 249.347656Mb, VMS = 242.960938Mb), Total system virtual memory = 16324.18359375Mb

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.736548s, Solving = 0.397043s, Total = 2.133590s, Memory = (RSS = 249.347656Mb, VMS = 242.960938Mb), Step range = [58-73]), Calls = 15
Final Model :: Total atoms = 9701, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=72, end_step=73, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.7365478000000039, solving_time=0.39704259999999536, total_time=2.133590399999999, memory=Memory(rss=249.34765625, vms=242.9609375), step_range=range(58, 74), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11585329999999772, solving_time=0.09174540000000064, total_time=0.20759869999999836, memory=Memory(rss=249.34765625, vms=242.9609375), step_range=range(73, 74), clingo_stats={'problem': {'lp': {'atoms': 54095.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 355228.0, 'bodies_tr': 355228.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3090.0, 'count_bodies_tr': 3090.0, 'sccs': 321.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6005.0, 'rules': 674745.0, 'rules_normal': 671457.0, 'rules_choice': 3273.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 674745.0, 'rules_tr_normal': 671457.0, 'rules_tr_choice': 3273.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 127724.0, 'eqs_atom': 28056.0, 'eqs_body': 5720.0, 'eqs_other': 93948.0}, 'lpStep': {'atoms': 3519.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24747.0, 'bodies_tr': 24747.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 46204.0, 'rules_normal': 46008.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 46204.0, 'rules_tr_normal': 46008.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7804.0, 'eqs_atom': 1859.0, 'eqs_body': 75.0, 'eqs_other': 5870.0}, 'generator': {'vars': 24207.0, 'vars_eliminated': 0.0, 'vars_frozen': 14371.0, 'constraints': 5052.0, 'constraints_binary': 194556.0, 'constraints_ternary': 25039.0, 'acyc_edges': 0.0, 'complexity': 225533.0}}, 'solving': {'solvers': {'choices': 690.0, 'conflicts': 47.0, 'conflicts_analyzed': 47.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 293.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 47.0, 'distributed_sum_lbd': 47.0, 'integrated': 0.0, 'lemmas': 92.0, 'lits_learnt': 427.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.15625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1351.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 47.0, 'lemmas_loop': 45.0, 'lemmas_other': 0.0, 'lits_conflict': 47.0, 'lits_loop': 380.0, 'lits_other': 0.0, 'jumps': {'jumps': 47.0, 'jumps_bounded': 0.0, 'levels': 47.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.2102527618408203, 'cpu': 0.296875, 'solve': 0.061840057373046875, 'unsat': 0.0, 'sat': 0.0069866180419921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.1952552795410156, 'cpu': 2.609375, 'solve': 0.18325233459472656, 'unsat': 0.017320632934570312, 'sat': 0.04281806945800781}, 'models': {'enumerated': 11.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 5110.0, 'conflicts': 354.0, 'conflicts_analyzed': 329.0, 'restarts': 0.0, 'restarts_last': 32.0, 'extra': {'domain_choices': 0.0, 'models': 11.0, 'models_level': 1826.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 348.0, 'distributed_sum_lbd': 603.0, 'integrated': 985.0, 'lemmas': 2001.0, 'lits_learnt': 20057.0, 'lemmas_binary': 202.0, 'lemmas_ternary': 148.0, 'cpu_time': 0.640625, 'integrated_imps': 293.0, 'integrated_jumps': 445.0, 'guiding_paths_lits': 11320.0, 'guiding_paths': 112.0, 'splits': 0.0, 'lemmas_conflict': 326.0, 'lemmas_loop': 781.0, 'lemmas_other': 894.0, 'lits_conflict': 2753.0, 'lits_loop': 6583.0, 'lits_other': 10721.0, 'jumps': {'jumps': 329.0, 'jumps_bounded': 28.0, 'levels': 1147.0, 'levels_bounded': 616.0, 'max': 123.0, 'max_executed': 96.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 59, 36: 61, 37: 64, 38: 65, 39: 67, 40: 68, 41: 70, 42: 71, 43: 72, 44: 73}

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 45 achieved :: Progression >> total requested sgoals = 10, current total achieved sgoals = 11 (110.00% solved)

[03-01-2022_17-11-30] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 44 was achieved successfully.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.119597s, Solving = 0.017214s, Total = 0.136811s, Memory = (RSS = 204.421875Mb, VMS = 195.269531Mb), Step range = [58-59]
2 : Statistics :: Grounding = 0.112098s, Solving = 0.006995s, Total = 0.119092s, Memory = (RSS = 206.390625Mb, VMS = 197.703125Mb), Step range = [60-60]
3 : Statistics :: Grounding = 0.079087s, Solving = 0.011748s, Total = 0.090836s, Memory = (RSS = 207.601562Mb, VMS = 198.753906Mb), Step range = [61-61]
4 : Statistics :: Grounding = 0.094047s, Solving = 0.014527s, Total = 0.108574s, Memory = (RSS = 208.753906Mb, VMS = 199.714844Mb), Step range = [62-62]
5 : Statistics :: Grounding = 0.158872s, Solving = 0.013126s, Total = 0.171997s, Memory = (RSS = 211.667969Mb, VMS = 202.953125Mb), Step range = [63-63]
6 : Statistics :: Grounding = 0.115971s, Solving = 0.020118s, Total = 0.136090s, Memory = (RSS = 214.027344Mb, VMS = 204.445312Mb), Step range = [64-64]
7 : Statistics :: Grounding = 0.093930s, Solving = 0.018505s, Total = 0.112435s, Memory = (RSS = 218.335938Mb, VMS = 209.535156Mb), Step range = [65-65]
8 : Statistics :: Grounding = 0.099906s, Solving = 0.014580s, Total = 0.114486s, Memory = (RSS = 220.109375Mb, VMS = 210.683594Mb), Step range = [66-66]
9 : Statistics :: Grounding = 0.095454s, Solving = 0.027023s, Total = 0.122477s, Memory = (RSS = 224.699219Mb, VMS = 217.121094Mb), Step range = [67-67]
10 : Statistics :: Grounding = 0.100781s, Solving = 0.025952s, Total = 0.126733s, Memory = (RSS = 226.105469Mb, VMS = 217.707031Mb), Step range = [68-68]
11 : Statistics :: Grounding = 0.132575s, Solving = 0.027748s, Total = 0.160323s, Memory = (RSS = 234.433594Mb, VMS = 228.792969Mb), Step range = [69-69]
12 : Statistics :: Grounding = 0.134211s, Solving = 0.029102s, Total = 0.163313s, Memory = (RSS = 237.832031Mb, VMS = 230.601562Mb), Step range = [70-70]
13 : Statistics :: Grounding = 0.155108s, Solving = 0.038904s, Total = 0.194013s, Memory = (RSS = 239.738281Mb, VMS = 231.164062Mb), Step range = [71-71]
14 : Statistics :: Grounding = 0.129058s, Solving = 0.039753s, Total = 0.168811s, Memory = (RSS = 247.265625Mb, VMS = 242.199219Mb), Step range = [72-72]
15 : Statistics :: Grounding = 0.115853s, Solving = 0.091745s, Total = 0.207599s, Memory = (RSS = 249.347656Mb, VMS = 242.960938Mb), Step range = [73-73]

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.133590s due to: External generator exit.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-01-2022_17-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 15, 29: 15, 30: 15, 31: 16, 32: 16, 33: 17, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 29, 51: 30, 52: 30, 53: 30, 54: 31, 55: 32, 56: 33, 57: 33, 58: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 27, 15: 30, 16: 32, 17: 33, 18: 34, 19: 36, 20: 37, 21: 39, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 50, 30: 53, 31: 54, 32: 55, 33: 57, 34: 58}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 12, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 13, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 18, 6: 19, 7: 21, 8: 22, 9: 23, 10: 24, 11: 25, 12: 29, 13: 33, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 14, 28: 15, 29: 15, 30: 15, 31: 16, 32: 16, 33: 17, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 21, 40: 22, 41: 23, 42: 24, 43: 25, 44: 25, 45: 26, 46: 27, 47: 28, 48: 29, 49: 29, 50: 29, 51: 30, 52: 30, 53: 30, 54: 31, 55: 32, 56: 33, 57: 33, 58: 34, 59: 35, 60: 36, 61: 36, 62: 37, 63: 37, 64: 37, 65: 38, 66: 38, 67: 39, 68: 40, 69: 41, 70: 41, 71: 42, 72: 43, 73: 44}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 27, 15: 30, 16: 32, 17: 33, 18: 34, 19: 36, 20: 37, 21: 39, 22: 40, 23: 41, 24: 42, 25: 44, 26: 45, 27: 46, 28: 47, 29: 50, 30: 53, 31: 54, 32: 55, 33: 57, 34: 58, 35: 59, 36: 61, 37: 64, 38: 66, 39: 67, 40: 68, 41: 70, 42: 71, 43: 72, 44: 73}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 12, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 13, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 18, 6: 19, 7: 21, 8: 22, 9: 23, 10: 24, 11: 25, 12: 29, 13: 33, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 44, Last requested goal index = 44, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.736548s, Solving = 0.397043s, Total = 2.133590s, Memory = (RSS = 249.347656Mb, VMS = 242.960938Mb), Step range = [58-73]), Calls = 15
Model :: Total atoms = 9701, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 15 :: Actions = 15                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 29:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 30:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 31:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 32:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 33:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 34:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 39:
    Current Sub-goals:
        [Index = 21] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 21] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 22] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 41:
    Current Sub-goals:
        [Index = 23] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 23] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 42:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 44:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 45:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((puzzle_room,0))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 48:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 51:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 52:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 53:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 54:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 55:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 56:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 58:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 59:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 60:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 61:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 62:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 63:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 64:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 65:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 66:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 67:
    Current Sub-goals:
        [Index = 39] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 39] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 68:
    Current Sub-goals:
        [Index = 40] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 40] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 69:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 70:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
Step 71:
    Current Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 72:
    Current Sub-goals:
        [Index = 43] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 43] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,4),(block,5))
Step 73:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Monolevel problem 4 at level 1 solved.

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Online planning increment 4 finished.

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=73, step_range=range(0, 74)

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Tota actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 73, Tota actions = 73, Produced sub-goal stages = 0

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Tota actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 73, Tota actions = 73, Produced sub-goal stages = 0

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Tota actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 73, Tota actions = 73, Produced sub-goal stages = 0

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 73, Actions = 73

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 9.2714851, Average ground wait time = 4.837397199999995, Absolution time = 19.21663189999998)

     ========================================================================================================================================================================================================     
     |        Lvl = 3 (classic), LE =  20, AC =  20, CF = 1.0, GT =   1.27s, ST =   1.53s, OT = 0.00s, TT =   2.79s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 2 (com-ref), LE =  44, AC =  44, CF = 1.0, GT =   4.02s, ST =   1.08s, OT = 0.03s, TT =   5.13s, EF = (LE = 2.2, AC = 2.2), ED = (LE = 2.1, AC = 2.1), EB = (LE = 1.0, AC = 1.0)        |     
     |        Lvl = 1 (com-ref), LE =  73, AC =  73, CF = 1.0, GT =   8.94s, ST =   2.29s, OT = 0.07s, TT =  11.30s, EF = (LE = 1.7, AC = 1.7), ED = (LE = 1.0, AC = 1.0), EB = (LE = 0.6, AC = 0.6)        |     
     ========================================================================================================================================================================================================     

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=73, step_range=range(0, 74)

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Tota actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 73, Tota actions = 73, Produced sub-goal stages = 0

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Tota actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 73, Tota actions = 73, Produced sub-goal stages = 0

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-01-2022_17-11-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Tota actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 73, Tota actions = 73, Produced sub-goal stages = 0

[03-01-2022_17-11-31] DEBUG :: Experiment >> 

      ================================================      
            Experimental run 1 : Time 24.454662s            
      ================================================      

[03-01-2022_17-11-31] INFO :: Experiment >> 

  ################################################################################################  
           Completed 1 experimental runs : Real time 24.456423s, Proccess time 36.687500s           
  ################################################################################################  

[03-01-2022_17-11-31] DEBUG :: Experiment >> Refinement spread at run=0, level=2: rmse_mchild=4.9071376585541175, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[03-01-2022_17-11-31] DEBUG :: Experiment >> Refinement spread at run=0, level=1: rmse_mchild=2.8536532334639912, rmse_div_indices=1.0954451150103321, rmse_div_steps=3.843826218756514

[03-01-2022_17-11-31] INFO :: Experiment >> 

          ========================================          
                    Experimental Results                    
          ========================================          

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                     Concatenated Plans                     

 RU  AL       GT       ST       OT        TT       LT        CT       WT        RSS        VMS  LE  AC  CF  PSG
  0   3 1.266512 1.528247 0.000000  2.794759 2.794759  2.794759 2.794759 174.093750 163.726562  20  20 1.0   20
  0   2 4.016984 1.078492 0.031000  5.126476 5.536513  7.921236 3.975125 246.324219 242.585938  44  44 1.0   44
  0   1 8.936770 2.290760 0.067866 11.295396 9.271485 19.216632 4.837397 257.300781 252.433594  73  73 1.0    0

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                      Level-wise Means                      

 AL       GT       ST       OT        TT       LT        CT       WT        RSS        VMS  LE  AC  CF  PSG
  3 1.266512 1.528247 0.000000  2.794759 2.794759  2.794759 2.794759 174.093750 163.726562  20  20 1.0   20
  2 4.016984 1.078492 0.031000  5.126476 5.536513  7.921236 3.975125 246.324219 242.585938  44  44 1.0   44
  1 8.936770 2.290760 0.067866 11.295396 9.271485 19.216632 4.837397 257.300781 252.433594  73  73 1.0    0

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
               Level-wise Standard Deviation                

 AL  GT  ST  OT  TT  LT  CT  WT  RSS  VMS  LE  AC  CF  PSG
  3 NaN NaN NaN NaN NaN NaN NaN  NaN  NaN NaN NaN NaN  NaN
  2 NaN NaN NaN NaN NaN NaN NaN  NaN  NaN NaN NaN NaN  NaN
  1 NaN NaN NaN NaN NaN NaN NaN  NaN  NaN NaN NaN NaN  NaN

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                       Partial Plans                        

 RU  AL  IT  PN       GT       ST       OT       TT        YT       WT       ET        RSS        VMS  LE  AC  CF  PSG  START_S  END_S  SIZE  SGLITS_T  FIRST_I  LAST_I  TOT_CHOICES  PRE_CHOICES
  0   3   1   1 1.266512 1.528247 0.000000 2.794759  2.794759 2.794759 0.000000 174.093750 163.726562  20  20 1.0   20        1     20     0         0        1       1        81138            0
  0   2   1   1 2.158721 0.569450 0.013582 2.741753  5.536513 5.536513 2.413737 221.937500 215.917969  24  24 1.0   24        1     24    10        10        1      10        11857            0
  0   2   2   2 1.881696 0.514623 0.017418 2.413737  7.950249 2.413737 0.000000 246.324219 242.585938  20  20 1.0   20       25     44    10        10       11      20         9036            0
  0   1   1   1 2.941038 0.776484 0.017450 3.734972  9.271485 9.271485 5.314406 257.300781 249.218750  24  24 1.0    0        1     24    12        12        1      12        14403            0
  0   1   2   2 2.281711 0.599865 0.019094 2.900670 14.585892 5.314406 2.582926 248.234375 242.605469  18  18 1.0    0       25     42    12        12       13      24         8457            0
  0   1   3   3 2.033894 0.531344 0.017687 2.582926 17.168817 2.582926 2.180772 257.195312 252.433594  16  16 1.0    0       43     58    10        10       25      34         6104            0
  0   1   4   4 1.763356 0.403782 0.013634 2.180772 19.349589 2.180772 0.000000 249.347656 242.960938  15  15 1.0    0       59     73    10        10       35      44         5110            0

[03-01-2022_17-11-31] INFO :: __main__ >> Saving results to excel file: ./experiments/results/ASH_Excel_2022-01-03_17-11-05.xlsx

[03-01-2022_17-11-32] INFO :: __main__ >> Saving results to data file: ./experiments/results/ASH_Data_2022-01-03_17-11-05.dat

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Regular.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-It.otf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-CondIt.otf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Italic.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Italic.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Bold.otf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Futura Std' (FuturaStd-HeavyOblique.otf) oblique normal 650 normal>) = 11.2875

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Regular.otf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-SemiboldIt.otf) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Cond.otf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold Italic.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Cond.otf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Regular.otf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Regular.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Semibold.otf) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-It.otf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Semibold.otf) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Futura Std' (FuturaStd-HeavyOblique.otf) oblique normal 650 normal>) = 11.2875

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-SemiboldIt.otf) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-CondIt.otf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold Italic.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Bold.otf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-32] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\Ollie Kampo\\Anaconda3\\envs\\ASH_2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Regular.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-It.otf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-CondIt.otf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Italic.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Italic.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Bold.otf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Futura Std' (FuturaStd-HeavyOblique.otf) oblique normal 650 normal>) = 11.2875

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Regular.otf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-SemiboldIt.otf) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Cond.otf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold Italic.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Cond.otf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Regular.otf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Regular.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Semibold.otf) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-It.otf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Semibold.otf) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Futura Std' (FuturaStd-HeavyOblique.otf) oblique normal 650 normal>) = 11.2875

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-SemiboldIt.otf) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-CondIt.otf) italic normal 400 condensed>) = 11.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold Italic.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Bold.otf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[03-01-2022_17-11-33] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\Ollie Kampo\\Anaconda3\\envs\\ASH_2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[03-01-2022_17-24-29] INFO :: __main__ >> Overall time: Real = 803.3643865, Process = 40.890625

[03-01-2022_17-24-29] INFO :: __main__ >> Exiting with code 0

