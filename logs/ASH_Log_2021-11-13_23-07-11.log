[13-11-2021_23-07-11] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
          This program comes with ABSOLUTELY NO WARRANTY; for details use `--warranty'. This is free software,          
            and you are welcome to redistribute it under certain conditions; use `--conditions' for details.            
                    For help and usage instructions use `--help' and `--instructions' respectively.                     
                                                                                                                        
  ####################################################################################################################  

[13-11-2021_23-07-11] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[13-11-2021_23-07-11] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[13-11-2021_23-07-11] DEBUG :: __main__ >> Command line arguments:
'./test_problems/blocks_world_plus/BWP_system_laws.lp'
'./test_problems/blocks_world_plus/BWP_problem_small_1.lp'
'-conc'
'False'
'-ao'
'experiment'
'-strat'
'basic'
'-bound'
'2'
'-op'
'experiment'
'-ir'
'0'
'-er'
'10'
'-ll'
'3=50'
'2=100'
'1=150'
'-save'
'True'

[13-11-2021_23-07-11] DEBUG :: __main__ >> Parsed command line argumenys:
('files', ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'])
('display_loader', None)
('domain_rules', None)
('domain_structure', None)
('problem_specifics', None)
('load_schema', None)
('plan_file', './solutions/plans/ASH_Plan_2021-11-13_23-07-11.txt')
('log_file', './logs/ASH_Log_2021-11-13_23-07-11.log')
('excel_file', None)
('data_file', None)
('data_sep', ' ')
('data_end', '\n')
('save_schema', './solutions/schemas/ASH_Schema_2021-11-13_23-07-11.txt')
('schema_level', 1)
('warranty', False)
('conditions', False)
('instructions', False)
('ash_output', 'experiment')
('clingo_output', False)
('console_logging', 'INFO')
('disable_logging', False)
('disable_pause_on_start', False)
('display_graph', True)
('operation', 'experiment')
('experimental_runs', 10)
('initial_runs', 0)
('pause_on_run_completion', False)
('threads', 8)
('planning_time_limit', 3600)
('search_length_limit', {3: 50, 2: 100, 1: 150})
('planning_mode', 'hcr')
('conformance_type', 'sequential')
('enable_concurrency', False)
('minimise_actions', None)
('sequential_yielding', True)
('detect_interleaving', False)
('minimum_search_length_bound', True)
('make_observable', False)
('problem_space', None)
('pause_on_level_change', False)
('pause_on_increment_change', False)
('top_level', None)
('bottom_level', 1)
('online_method', 'ground-first')
('division_strategy', 'basic')
('division_strategy_bounds', 2)
('bound_type', 'incremental')
('backwards_horizon', 0)
('preemptive_division', False)
('interrupting_division', False)
('moving_average', 1)
('left_blend_quantities', 0)
('right_blend_quantities', 0)
('avoid_refining_sgoals_marked_for_blending', False)
('treat_tasks_as_independent', True)
('save_grounding', True)
('positive_final_goal_preemptive_achievement_heuristic', None)
('negative_final_goal_preemptive_achievement_heuristic', None)
('final_goal_intermediate_achievement_ordering_preferences', None)
('detect_dependencies', False)

[13-11-2021_23-07-12] DEBUG :: core.Planner >> Instantiating new planning domain:
Name = None
Domain files = [./test_problems/blocks_world_plus/BWP_system_laws.lp
                ./test_problems/blocks_world_plus/BWP_problem_small_1.lp]

[13-11-2021_23-07-12] DEBUG :: core.Planner >> The domain files ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'initial_state': True, 'entities': True, 'goal_state': True, 'static_state': True}.

[13-11-2021_23-07-12] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', None)
	('silent', True)
	('warnings', False)
	('message_limit', 20)
	('enable_tqdm', False)

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if:
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively.
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either:
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total number of actions in a plan, False to disable.
%%%%    preemptive_pos_fgoals: bool - A Boolean, True to
%%%%    preemptive_neg_fgoals: bool - A Boolean, True to
%%%%    pref_order_fgoals: bool - A Boolean, True to
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Minimise quanity of actions (level 2):
%%      - Eliminate any unnecessary, redundant or superfluous actions from the plan by minimising the total number of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), incomplete_plan(step - 1), pl(AL), step > start, minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final goal preemptive achievement heuristics:
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]

%% Final goal achievement ordering preferences:
%%      - The chosen ordering over the intermediate achievement of intermediate fgoals are then effectively encoded into the sgoals and maintained by the order over achievement of sgoals, resultantly it only makes sense to have an ordering preference over the achievement of fgoals at the top-level
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M). [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Keep incrementing until a complete plan is found
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
:- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Ensure plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%    achievement: {simultaneous, sequential} - A string defining the achievement type of subgoal stages.
%%%%    We are likely to see a greater restriction on the search space with simultaneous, but it is also not always possible to achieve subgoals in the same stage simultaneously, since the loss or generalisation of enabling constraints and
%%%%    state constraints (state constraints can be lost in tasking models) in the abstract model from which the sub-goals they were produced may mean that there is no original level state that maps to an abstract state in which all the abstract effects that form them hold simultaneously
%%%%    as the reintroduction or specialisation of those enabling and state constraints might make it no longer a reachable valid state pair.
%%%%    It thus may occur that no valid subgoal states that can achieve the effects of a set of concurrently planned actions.
%%%%    Sequential conformance is more flexible and relaxes this constraint significantly, and avoids this problem, at the cost of a weaker conformance constraint, and potentially less restriction on the search space.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint and the step it was first commited at during sequential yield progression through the goal seuence
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given explicitly and fixed iff this program grounding will not be saved,
%%      - The last is given by an external context function (allowing it to be modified) if this program grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first), %% TODO
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% These don't get updated because we would have to go back a step in the incrementation;
%%      - Although the new modules are added with start step = start_step, they are only grounded first at step start_step + 1,
%%      - incrementing starts at step start + 1 since actions lead current sub-goals by one step,
%%      - but the first sub-goal must be current at step start (which is the achievement step of the last sub-goal stage of the previous partial problem),
%%      - So although we get current sub-goals add to a saved grouning, they neither;
%%          - Appear as a sub-goal index,
%%          - Or set the plan as incomplete.
current_sub_goal_index(AL + 1, FI, SS) :- restart_from(FI, SS), pl(AL).

%% The current sub-goal sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 3.

%% Abstraction types
#const reduc = 3. % Classical
#const conde = 2. % Refine both
#const groun = 1. % Refine both

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(3, robot).
class(3, armed_robot).
class(3, location).
class(3, room).
class(3, object).
class(3, grounded).
class(3, graspable).
class(3, placeable).
class(3, block).
class(3, surface).
class(3, table).
class(3, colour).
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted in condensed model
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% End-effectors can grasp objects
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator limbs are extensible
override_class(manipulator_arm, manipulator_limb, extensible).

%% The cells of rooms are places
override_class(room, cell, location).

%% The sides of a table are surfaces
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE), B) :- insta_of(AL, block, BASE),
                                            sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE), B) :- insta_of(AL, block, BASE),
                                                 sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete(COLOUR), B) :- insta_of(AL, colour, COLOUR),
                                            sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, sequencing_type, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < reduc, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
%**% #program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either:
%%      - On a table
%%      - On a descenant surface of a table
holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, surface, SURFACE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

%% A block is in a tower if it is either:
%%      - The base of the tower
%%      - On a block that is in the tower
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE), true),
                                            insta_of(AL, block, BASE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                             holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                             holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                             holds(AL, tower_base(BASE), true, t),
                                             fluent(AL, defined, unordered_tower(BASE), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                             fluent(AL, defined, tower_base(BASE), true),
                                             fluent(AL, inertial, on(BLOCK_1), BLOCK_2),     
                                             BLOCK_1 = (block, N_1), block_number(N_1),
                                             BLOCK_2 = (block, N_2), block_number(N_2),
                                             BLOCK_1 != BLOCK_2, N_1 > N_2,
                                             insta_of(AL, block, BLOCK_1),
                                             insta_of(AL, block, BLOCK_2),
                                             insta_of(AL, block, BASE),
                                             sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete(COLOUR), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                             is(AL, colour_of(BLOCK, COLOUR)),
                                                             fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        N = #count { BLOCK : is(AL, colour_of(BLOCK, COLOUR)),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        holds(AL, unordered_tower(BASE), false, t),
                                        holds(AL, tower_base(BASE), true, t),
                                        fluent(AL, defined, unordered_tower(BASE), true),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        is(AL, colour_of(BASE, COLOUR)),
                                        static(AL, colour_of(BASE, COLOUR)),
                                        insta_of(AL, colour, COLOUR),
                                        insta_of(AL, block, BASE),
                                        sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
% is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
% is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the middle of the first hallway
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
holds(1, on((block, 4)), (block, 2), 0).

%% The other three blocks are on the floor in the store room
% holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
% holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete(COLOUR)) :- insta_of(AL, colour, COLOUR), al(AL).
goal_fluent(AL, unordered_tower(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete(COLOUR), true, true) :- insta_of(AL, colour, COLOUR), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Component Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are six blocks
block_number(1..6).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Logic program code parsed successfully.

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Logic program instantiated successfully.

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Entering new direct one-shot solve call.

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = ['--parallel-mode=1,compete']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Program building started :: Processing 346 rules

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Program building completed in 0.003120099999999848s

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Grounding program parts:
[('abstraction_levels', [Number(0), Function('hierarchical', [], True)]), ('domain_sorts', [])]

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:97:58-77: info: atom does not occur in any rule head:
  insta_of(#X0,#P1,#X2)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:600:50-78: info: atom does not occur in any rule head:
  insta_of(AL,graspable,OBJ)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:613:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:614:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:618:47-68: info: atom does not occur in any rule head:
  insta_of(AL,door,D)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:619:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:620:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:624:27-52: info: atom does not occur in any rule head:
  insta_of(AL,object,OBJ)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:625:27-54: info: atom does not occur in any rule head:
  insta_of(AL,grounded,OBJ)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:626:27-52: info: atom does not occur in any rule head:
  insta_of(AL,location,L)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:630:41-67: info: atom does not occur in any rule head:
  insta_of(AL,block,BLOCK)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:631:41-69: info: atom does not occur in any rule head:
  insta_of(AL,colour,COLOUR)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:643:39-66: info: atom does not occur in any rule head:
  insta_of(AL_1,location,L)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:644:39-66: info: atom does not occur in any rule head:
  insta_of(AL_2,object,OBJ)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:645:43-72: info: atom does not occur in any rule head:
  insta_of(AL_2,grounded,OBJ)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:651:45-77: info: atom does not occur in any rule head:
  insta_of(AL_1,surface,SURFACE)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:652:45-75: info: atom does not occur in any rule head:
  insta_of(AL_2,placeable,OBJ)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:657:48-78: info: atom does not occur in any rule head:
  insta_of(AL_1,graspable,OBJ)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:658:48-77: info: atom does not occur in any rule head:
  insta_of(AL_2,grasper,DESC)


[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Grounding completed in 0.009216s.

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Solving program.

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Solving completed in 0.001019s with result Satisfiable.

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Freeing held grounding...

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Held grounding freed successfully.

[13-11-2021_23-07-12] DEBUG :: Logic Program Anonymous #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding = 0.009216s, Solving = 0.001019s, Total = 0.010235s, Memory = (RSS = 102.718750Mb, VMS = 89.703125Mb)
Final Model :: Total atoms = 67, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-12] DEBUG :: core.Planner >> Planning Domain Anon #1 :: Abstraction range = [1-3] instantiated successfully

[13-11-2021_23-07-12] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'ASH')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-07-12] DEBUG :: Logic Program ASH #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if:
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively.
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either:
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total number of actions in a plan, False to disable.
%%%%    preemptive_pos_fgoals: bool - A Boolean, True to
%%%%    preemptive_neg_fgoals: bool - A Boolean, True to
%%%%    pref_order_fgoals: bool - A Boolean, True to
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Minimise quanity of actions (level 2):
%%      - Eliminate any unnecessary, redundant or superfluous actions from the plan by minimising the total number of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), incomplete_plan(step - 1), pl(AL), step > start, minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final goal preemptive achievement heuristics:
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]

%% Final goal achievement ordering preferences:
%%      - The chosen ordering over the intermediate achievement of intermediate fgoals are then effectively encoded into the sgoals and maintained by the order over achievement of sgoals, resultantly it only makes sense to have an ordering preference over the achievement of fgoals at the top-level
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M). [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Keep incrementing until a complete plan is found
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
:- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Ensure plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%    achievement: {simultaneous, sequential} - A string defining the achievement type of subgoal stages.
%%%%    We are likely to see a greater restriction on the search space with simultaneous, but it is also not always possible to achieve subgoals in the same stage simultaneously, since the loss or generalisation of enabling constraints and
%%%%    state constraints (state constraints can be lost in tasking models) in the abstract model from which the sub-goals they were produced may mean that there is no original level state that maps to an abstract state in which all the abstract effects that form them hold simultaneously
%%%%    as the reintroduction or specialisation of those enabling and state constraints might make it no longer a reachable valid state pair.
%%%%    It thus may occur that no valid subgoal states that can achieve the effects of a set of concurrently planned actions.
%%%%    Sequential conformance is more flexible and relaxes this constraint significantly, and avoids this problem, at the cost of a weaker conformance constraint, and potentially less restriction on the search space.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint and the step it was first commited at during sequential yield progression through the goal seuence
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given explicitly and fixed iff this program grounding will not be saved,
%%      - The last is given by an external context function (allowing it to be modified) if this program grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first), %% TODO
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% These don't get updated because we would have to go back a step in the incrementation;
%%      - Although the new modules are added with start step = start_step, they are only grounded first at step start_step + 1,
%%      - incrementing starts at step start + 1 since actions lead current sub-goals by one step,
%%      - but the first sub-goal must be current at step start (which is the achievement step of the last sub-goal stage of the previous partial problem),
%%      - So although we get current sub-goals add to a saved grouning, they neither;
%%          - Appear as a sub-goal index,
%%          - Or set the plan as incomplete.
current_sub_goal_index(AL + 1, FI, SS) :- restart_from(FI, SS), pl(AL).

%% The current sub-goal sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 3.

%% Abstraction types
#const reduc = 3. % Classical
#const conde = 2. % Refine both
#const groun = 1. % Refine both

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(3, robot).
class(3, armed_robot).
class(3, location).
class(3, room).
class(3, object).
class(3, grounded).
class(3, graspable).
class(3, placeable).
class(3, block).
class(3, surface).
class(3, table).
class(3, colour).
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted in condensed model
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% End-effectors can grasp objects
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator limbs are extensible
override_class(manipulator_arm, manipulator_limb, extensible).

%% The cells of rooms are places
override_class(room, cell, location).

%% The sides of a table are surfaces
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE), B) :- insta_of(AL, block, BASE),
                                            sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE), B) :- insta_of(AL, block, BASE),
                                                 sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete(COLOUR), B) :- insta_of(AL, colour, COLOUR),
                                            sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, sequencing_type, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < reduc, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
%**% #program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either:
%%      - On a table
%%      - On a descenant surface of a table
holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, surface, SURFACE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

%% A block is in a tower if it is either:
%%      - The base of the tower
%%      - On a block that is in the tower
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE), true),
                                            insta_of(AL, block, BASE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                             holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                             holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                             holds(AL, tower_base(BASE), true, t),
                                             fluent(AL, defined, unordered_tower(BASE), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                             fluent(AL, defined, tower_base(BASE), true),
                                             fluent(AL, inertial, on(BLOCK_1), BLOCK_2),     
                                             BLOCK_1 = (block, N_1), block_number(N_1),
                                             BLOCK_2 = (block, N_2), block_number(N_2),
                                             BLOCK_1 != BLOCK_2, N_1 > N_2,
                                             insta_of(AL, block, BLOCK_1),
                                             insta_of(AL, block, BLOCK_2),
                                             insta_of(AL, block, BASE),
                                             sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete(COLOUR), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                             is(AL, colour_of(BLOCK, COLOUR)),
                                                             fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        N = #count { BLOCK : is(AL, colour_of(BLOCK, COLOUR)),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        holds(AL, unordered_tower(BASE), false, t),
                                        holds(AL, tower_base(BASE), true, t),
                                        fluent(AL, defined, unordered_tower(BASE), true),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        is(AL, colour_of(BASE, COLOUR)),
                                        static(AL, colour_of(BASE, COLOUR)),
                                        insta_of(AL, colour, COLOUR),
                                        insta_of(AL, block, BASE),
                                        sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
% is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
% is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the middle of the first hallway
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
holds(1, on((block, 4)), (block, 2), 0).

%% The other three blocks are on the floor in the store room
% holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
% holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete(COLOUR)) :- insta_of(AL, colour, COLOUR), al(AL).
goal_fluent(AL, unordered_tower(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete(COLOUR), true, true) :- insta_of(AL, colour, COLOUR), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Component Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are six blocks
block_number(1..6).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[13-11-2021_23-07-12] DEBUG :: Logic Program ASH #1 >> Logic program code parsed successfully.

[13-11-2021_23-07-12] DEBUG :: Logic Program ASH #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-12] DEBUG :: Logic Program ASH #1 >> Input storing variables set.

[13-11-2021_23-07-12] DEBUG :: Logic Program ASH #1 >> Resetting output storing variables.

[13-11-2021_23-07-12] DEBUG :: Logic Program ASH #1 >> Output storing variables reset.

[13-11-2021_23-07-12] DEBUG :: Logic Program ASH #1 >> Logic program instantiated successfully.

[13-11-2021_23-07-12] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,_,ROBOT,A) } :- pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = true.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); incomplete_plan((step-1)); pl(AL); step > start; minimise_actions = true. [1@2,ROBOT,A,step]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
:~ goal_satisfied(AL,F,V,B,step); goal_order(AL,F,V,B,ORDER); final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); max_order(M). [(((M+1)-ORDER)*-step)@4,AL,F,V,B]
max_order(M) :- M = #max { ORDER: goal_order(AL,F,V,B,ORDER) }; final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B).
#program check(step).
:~ gen_search_space_at(step); incomplete_plan((step-1)); enforce_achieve_fgoals((step-1)). [1@1,step]
#external query(step). [false]
#external gen_search_space_at(step). [false]
#false :- incomplete_plan(step); not gen_search_space_at(step); query(step).
#const minimum_search_length_bound = -1.
#false :- step <= minimum_search_length_bound; query(step).
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; step >= S; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)) :- last != none.
sgoals_index((first..L)) :- last = none; L = @get_total_last_sgoals(PL); pl(PL).
current_sub_goal((AL+1),ROBOT,A,F,V,first,(start+1)) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); holds((AL+1),F,V,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); not unachieved_sgoals((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),FI,SS) :- restart_from(FI,SS); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); include_sgoals((I_SG+1),step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,true,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,false,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,false,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,true,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL_I,manipulator_end); AL <= AL_I; AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,sequential,locomotion,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,manipulation,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,manipulation,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,configuration,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,concurrent,manipulation,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,concurrent,manipulation,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < reduc; sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); action(AL,_,_,ROBO,actuate(DESC,D)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
#program action_preconditions(t).
precond(AL,ROBO,move(L_2),in(ROBO),L_1,false) :- not is(AL,connected(L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); block_number(N_1); BLOCK_2 = (block,N_2); block_number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK: is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2 = (X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,on((block,4)),(block,2),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,unordered_tower(BASE)) :- insta_of(AL,block,BASE); al(AL).
goal_fluent(AL,in_tower(BASE,BLOCK)) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); al(AL).
goal_fluent(AL,tower_base(BASE)) :- insta_of(AL,block,BASE); al(AL).
goal_fluent(AL,on(BLOCK)) :- insta_of(AL,block,BLOCK); al(AL).
final_goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
final_goal(1,on((block,3)),puzzle_room_table_left,true).
final_goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
block_number((1..6)).
entity(block,(block,N)) :- block_number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X < MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[13-11-2021_23-07-12] DEBUG :: ASH Planner Main #1 >> Attempting to initialise hierarchical planning problem...

[13-11-2021_23-07-12] DEBUG :: ASH Planner Main #1 >> Generating initial states...

[13-11-2021_23-07-12] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Initial States

[13-11-2021_23-07-12] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Initial States')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Parsing raw logic program code:


[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program code parsed successfully.

[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program instantiated successfully.

[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Entering new direct one-shot solve call.

[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=none']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building started :: Processing 346 rules

[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building completed in 0.0025393999999998584s

[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[13-11-2021_23-07-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('state_module', [Number(0), Number(0)]), ('entities', []), ('static_state', []), ('initial_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding completed in 0.114519s.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving program.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving completed in 0.026879s with result Satisfiable.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Freeing held grounding...

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Held grounding freed successfully.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.114519s, Solving = 0.026879s, Total = 0.141398s, Memory = (RSS = 112.246094Mb, VMS = 99.316406Mb)
Final Model :: Total atoms = 2723, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Initial states generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.114519s, Solving = 0.026879s, Total = 0.141398s, Memory = (RSS = 112.246094Mb, VMS = 99.316406Mb)
Final Model :: Total atoms = 2723, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 3            
      ================================================      

holds(3, complete(blue), false, 0)
holds(3, complete(red), false, 0)
holds(3, grasping(manipulator_arm_1), nothing, 0)
holds(3, grasping(manipulator_arm_2), nothing, 0)
holds(3, in((block,1)), puzzle_room, 0)
holds(3, in((block,2)), puzzle_room, 0)
holds(3, in((block,3)), puzzle_room, 0)
holds(3, in((block,4)), puzzle_room, 0)
holds(3, in((block,5)), store_room, 0)
holds(3, in((block,6)), store_room, 0)
holds(3, in(manipulator_arm_1), starting_room, 0)
holds(3, in(manipulator_arm_2), starting_room, 0)
holds(3, in(puzzle_room_table), puzzle_room, 0)
holds(3, in(talos), starting_room, 0)
holds(3, in_tower((block,1),(block,1)), true, 0)
holds(3, in_tower((block,1),(block,2)), false, 0)
holds(3, in_tower((block,1),(block,3)), true, 0)
holds(3, in_tower((block,1),(block,4)), false, 0)
holds(3, in_tower((block,1),(block,5)), false, 0)
holds(3, in_tower((block,1),(block,6)), false, 0)
holds(3, in_tower((block,2),(block,1)), false, 0)
holds(3, in_tower((block,2),(block,2)), true, 0)
holds(3, in_tower((block,2),(block,3)), false, 0)
holds(3, in_tower((block,2),(block,4)), true, 0)
holds(3, in_tower((block,2),(block,5)), false, 0)
holds(3, in_tower((block,2),(block,6)), false, 0)
holds(3, in_tower((block,3),(block,1)), false, 0)
holds(3, in_tower((block,3),(block,2)), false, 0)
holds(3, in_tower((block,3),(block,3)), false, 0)
holds(3, in_tower((block,3),(block,4)), false, 0)
holds(3, in_tower((block,3),(block,5)), false, 0)
holds(3, in_tower((block,3),(block,6)), false, 0)
holds(3, in_tower((block,4),(block,1)), false, 0)
holds(3, in_tower((block,4),(block,2)), false, 0)
holds(3, in_tower((block,4),(block,3)), false, 0)
holds(3, in_tower((block,4),(block,4)), false, 0)
holds(3, in_tower((block,4),(block,5)), false, 0)
holds(3, in_tower((block,4),(block,6)), false, 0)
holds(3, in_tower((block,5),(block,1)), false, 0)
holds(3, in_tower((block,5),(block,2)), false, 0)
holds(3, in_tower((block,5),(block,3)), false, 0)
holds(3, in_tower((block,5),(block,4)), false, 0)
holds(3, in_tower((block,5),(block,5)), false, 0)
holds(3, in_tower((block,5),(block,6)), false, 0)
holds(3, in_tower((block,6),(block,1)), false, 0)
holds(3, in_tower((block,6),(block,2)), false, 0)
holds(3, in_tower((block,6),(block,3)), false, 0)
holds(3, in_tower((block,6),(block,4)), false, 0)
holds(3, in_tower((block,6),(block,5)), false, 0)
holds(3, in_tower((block,6),(block,6)), false, 0)
holds(3, on((block,1)), puzzle_room_table, 0)
holds(3, on((block,2)), puzzle_room_table, 0)
holds(3, on((block,3)), (block,1), 0)
holds(3, on((block,4)), (block,2), 0)
holds(3, on((block,5)), nothing, 0)
holds(3, on((block,6)), nothing, 0)
holds(3, tower_base((block,1)), true, 0)
holds(3, tower_base((block,2)), true, 0)
holds(3, tower_base((block,3)), false, 0)
holds(3, tower_base((block,4)), false, 0)
holds(3, tower_base((block,5)), false, 0)
holds(3, tower_base((block,6)), false, 0)
holds(3, unordered_tower((block,1)), true, 0)
holds(3, unordered_tower((block,2)), true, 0)
holds(3, unordered_tower((block,3)), false, 0)
holds(3, unordered_tower((block,4)), false, 0)
holds(3, unordered_tower((block,5)), false, 0)
holds(3, unordered_tower((block,6)), false, 0)

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 2            
      ================================================      

holds(2, complete(blue), false, 0)
holds(2, complete(red), false, 0)
holds(2, configuration(manipulator_arm_1), retracted, 0)
holds(2, configuration(manipulator_arm_2), retracted, 0)
holds(2, configuration(puzzle_room_door), closed, 0)
holds(2, configuration(starting_room_door), closed, 0)
holds(2, configuration(store_room_door), closed, 0)
holds(2, grasping(manipulator_arm_1), nothing, 0)
holds(2, grasping(manipulator_arm_2), nothing, 0)
holds(2, in((block,1)), puzzle_room, 0)
holds(2, in((block,2)), puzzle_room, 0)
holds(2, in((block,3)), puzzle_room, 0)
holds(2, in((block,4)), puzzle_room, 0)
holds(2, in((block,5)), store_room, 0)
holds(2, in((block,6)), store_room, 0)
holds(2, in(manipulator_arm_1), starting_room, 0)
holds(2, in(manipulator_arm_2), starting_room, 0)
holds(2, in(puzzle_room_table), puzzle_room, 0)
holds(2, in(talos), starting_room, 0)
holds(2, in_tower((block,1),(block,1)), true, 0)
holds(2, in_tower((block,1),(block,2)), false, 0)
holds(2, in_tower((block,1),(block,3)), true, 0)
holds(2, in_tower((block,1),(block,4)), false, 0)
holds(2, in_tower((block,1),(block,5)), false, 0)
holds(2, in_tower((block,1),(block,6)), false, 0)
holds(2, in_tower((block,2),(block,1)), false, 0)
holds(2, in_tower((block,2),(block,2)), true, 0)
holds(2, in_tower((block,2),(block,3)), false, 0)
holds(2, in_tower((block,2),(block,4)), true, 0)
holds(2, in_tower((block,2),(block,5)), false, 0)
holds(2, in_tower((block,2),(block,6)), false, 0)
holds(2, in_tower((block,3),(block,1)), false, 0)
holds(2, in_tower((block,3),(block,2)), false, 0)
holds(2, in_tower((block,3),(block,3)), false, 0)
holds(2, in_tower((block,3),(block,4)), false, 0)
holds(2, in_tower((block,3),(block,5)), false, 0)
holds(2, in_tower((block,3),(block,6)), false, 0)
holds(2, in_tower((block,4),(block,1)), false, 0)
holds(2, in_tower((block,4),(block,2)), false, 0)
holds(2, in_tower((block,4),(block,3)), false, 0)
holds(2, in_tower((block,4),(block,4)), false, 0)
holds(2, in_tower((block,4),(block,5)), false, 0)
holds(2, in_tower((block,4),(block,6)), false, 0)
holds(2, in_tower((block,5),(block,1)), false, 0)
holds(2, in_tower((block,5),(block,2)), false, 0)
holds(2, in_tower((block,5),(block,3)), false, 0)
holds(2, in_tower((block,5),(block,4)), false, 0)
holds(2, in_tower((block,5),(block,5)), false, 0)
holds(2, in_tower((block,5),(block,6)), false, 0)
holds(2, in_tower((block,6),(block,1)), false, 0)
holds(2, in_tower((block,6),(block,2)), false, 0)
holds(2, in_tower((block,6),(block,3)), false, 0)
holds(2, in_tower((block,6),(block,4)), false, 0)
holds(2, in_tower((block,6),(block,5)), false, 0)
holds(2, in_tower((block,6),(block,6)), false, 0)
holds(2, on((block,1)), puzzle_room_table, 0)
holds(2, on((block,2)), puzzle_room_table, 0)
holds(2, on((block,3)), (block,1), 0)
holds(2, on((block,4)), (block,2), 0)
holds(2, on((block,5)), nothing, 0)
holds(2, on((block,6)), nothing, 0)
holds(2, tower_base((block,1)), true, 0)
holds(2, tower_base((block,2)), true, 0)
holds(2, tower_base((block,3)), false, 0)
holds(2, tower_base((block,4)), false, 0)
holds(2, tower_base((block,5)), false, 0)
holds(2, tower_base((block,6)), false, 0)
holds(2, unordered_tower((block,1)), true, 0)
holds(2, unordered_tower((block,2)), true, 0)
holds(2, unordered_tower((block,3)), false, 0)
holds(2, unordered_tower((block,4)), false, 0)
holds(2, unordered_tower((block,5)), false, 0)
holds(2, unordered_tower((block,6)), false, 0)

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 1            
      ================================================      

holds(1, complete(blue), false, 0)
holds(1, complete(red), false, 0)
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(1, configuration(manipulator_limb_1), retracted, 0)
holds(1, configuration(manipulator_limb_2), retracted, 0)
holds(1, configuration(puzzle_room_door), closed, 0)
holds(1, configuration(starting_room_door), closed, 0)
holds(1, configuration(store_room_door), closed, 0)
holds(1, grasping(manipulator_arm_1), nothing, 0)
holds(1, grasping(manipulator_arm_2), nothing, 0)
holds(1, grasping(manipulator_end_1), nothing, 0)
holds(1, grasping(manipulator_end_2), nothing, 0)
holds(1, in((block,1)), (puzzle_room,1), 0)
holds(1, in((block,2)), (puzzle_room,1), 0)
holds(1, in((block,3)), (puzzle_room,1), 0)
holds(1, in((block,4)), (puzzle_room,1), 0)
holds(1, in((block,5)), (store_room,0), 0)
holds(1, in((block,6)), (store_room,0), 0)
holds(1, in(manipulator_arm_1), (starting_room,0), 0)
holds(1, in(manipulator_arm_2), (starting_room,0), 0)
holds(1, in(manipulator_end_1), (starting_room,0), 0)
holds(1, in(manipulator_end_2), (starting_room,0), 0)
holds(1, in(manipulator_limb_1), (starting_room,0), 0)
holds(1, in(manipulator_limb_2), (starting_room,0), 0)
holds(1, in(puzzle_room_table), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)
holds(1, in(talos), (starting_room,0), 0)
holds(1, in_tower((block,1),(block,1)), true, 0)
holds(1, in_tower((block,1),(block,2)), false, 0)
holds(1, in_tower((block,1),(block,3)), true, 0)
holds(1, in_tower((block,1),(block,4)), false, 0)
holds(1, in_tower((block,1),(block,5)), false, 0)
holds(1, in_tower((block,1),(block,6)), false, 0)
holds(1, in_tower((block,2),(block,1)), false, 0)
holds(1, in_tower((block,2),(block,2)), true, 0)
holds(1, in_tower((block,2),(block,3)), false, 0)
holds(1, in_tower((block,2),(block,4)), true, 0)
holds(1, in_tower((block,2),(block,5)), false, 0)
holds(1, in_tower((block,2),(block,6)), false, 0)
holds(1, in_tower((block,3),(block,1)), false, 0)
holds(1, in_tower((block,3),(block,2)), false, 0)
holds(1, in_tower((block,3),(block,3)), false, 0)
holds(1, in_tower((block,3),(block,4)), false, 0)
holds(1, in_tower((block,3),(block,5)), false, 0)
holds(1, in_tower((block,3),(block,6)), false, 0)
holds(1, in_tower((block,4),(block,1)), false, 0)
holds(1, in_tower((block,4),(block,2)), false, 0)
holds(1, in_tower((block,4),(block,3)), false, 0)
holds(1, in_tower((block,4),(block,4)), false, 0)
holds(1, in_tower((block,4),(block,5)), false, 0)
holds(1, in_tower((block,4),(block,6)), false, 0)
holds(1, in_tower((block,5),(block,1)), false, 0)
holds(1, in_tower((block,5),(block,2)), false, 0)
holds(1, in_tower((block,5),(block,3)), false, 0)
holds(1, in_tower((block,5),(block,4)), false, 0)
holds(1, in_tower((block,5),(block,5)), false, 0)
holds(1, in_tower((block,5),(block,6)), false, 0)
holds(1, in_tower((block,6),(block,1)), false, 0)
holds(1, in_tower((block,6),(block,2)), false, 0)
holds(1, in_tower((block,6),(block,3)), false, 0)
holds(1, in_tower((block,6),(block,4)), false, 0)
holds(1, in_tower((block,6),(block,5)), false, 0)
holds(1, in_tower((block,6),(block,6)), false, 0)
holds(1, on((block,1)), puzzle_room_table_left, 0)
holds(1, on((block,2)), puzzle_room_table_right, 0)
holds(1, on((block,3)), (block,1), 0)
holds(1, on((block,4)), (block,2), 0)
holds(1, on((block,5)), nothing, 0)
holds(1, on((block,6)), nothing, 0)
holds(1, tower_base((block,1)), true, 0)
holds(1, tower_base((block,2)), true, 0)
holds(1, tower_base((block,3)), false, 0)
holds(1, tower_base((block,4)), false, 0)
holds(1, tower_base((block,5)), false, 0)
holds(1, tower_base((block,6)), false, 0)
holds(1, unordered_tower((block,1)), true, 0)
holds(1, unordered_tower((block,2)), true, 0)
holds(1, unordered_tower((block,3)), false, 0)
holds(1, unordered_tower((block,4)), false, 0)
holds(1, unordered_tower((block,5)), false, 0)
holds(1, unordered_tower((block,6)), false, 0)

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Generating final-goals...

[13-11-2021_23-07-13] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Final Goals

[13-11-2021_23-07-13] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Final Goals')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Parsing raw logic program code:


[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program code parsed successfully.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program instantiated successfully.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Entering new direct one-shot solve call.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=none']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building started :: Processing 346 rules

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building completed in 0.002898499999999693s

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('goal_abstraction_module', []), ('entities', []), ('static_state', []), ('goal_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding completed in 0.070589s.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving program.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving completed in 0.019801s with result Satisfiable.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Freeing held grounding...

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Held grounding freed successfully.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.070589s, Solving = 0.019801s, Total = 0.090390s, Memory = (RSS = 111.312500Mb, VMS = 98.421875Mb)
Final Model :: Total atoms = 3267, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Final-goals generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.070589s, Solving = 0.019801s, Total = 0.090390s, Memory = (RSS = 111.312500Mb, VMS = 98.421875Mb)
Final Model :: Total atoms = 3267, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 3         
      ================================================      

final_goal(3, complete(blue), true, true)
final_goal(3, complete(red), true, true)
final_goal(3, in_tower((block,1),(block,1)), false, true)
final_goal(3, in_tower((block,1),(block,2)), false, true)
final_goal(3, in_tower((block,1),(block,3)), false, true)
final_goal(3, in_tower((block,1),(block,4)), false, true)
final_goal(3, in_tower((block,1),(block,5)), false, true)
final_goal(3, in_tower((block,1),(block,6)), false, true)
final_goal(3, in_tower((block,2),(block,1)), false, true)
final_goal(3, in_tower((block,2),(block,2)), false, true)
final_goal(3, in_tower((block,2),(block,3)), false, true)
final_goal(3, in_tower((block,2),(block,4)), false, true)
final_goal(3, in_tower((block,2),(block,5)), false, true)
final_goal(3, in_tower((block,2),(block,6)), false, true)
final_goal(3, in_tower((block,3),(block,1)), true, true)
final_goal(3, in_tower((block,3),(block,2)), true, true)
final_goal(3, in_tower((block,3),(block,3)), true, true)
final_goal(3, in_tower((block,3),(block,4)), false, true)
final_goal(3, in_tower((block,3),(block,5)), false, true)
final_goal(3, in_tower((block,3),(block,6)), false, true)
final_goal(3, in_tower((block,4),(block,1)), false, true)
final_goal(3, in_tower((block,4),(block,2)), false, true)
final_goal(3, in_tower((block,4),(block,3)), false, true)
final_goal(3, in_tower((block,4),(block,4)), false, true)
final_goal(3, in_tower((block,4),(block,5)), false, true)
final_goal(3, in_tower((block,4),(block,6)), false, true)
final_goal(3, in_tower((block,5),(block,1)), false, true)
final_goal(3, in_tower((block,5),(block,2)), false, true)
final_goal(3, in_tower((block,5),(block,3)), false, true)
final_goal(3, in_tower((block,5),(block,4)), false, true)
final_goal(3, in_tower((block,5),(block,5)), false, true)
final_goal(3, in_tower((block,5),(block,6)), false, true)
final_goal(3, in_tower((block,6),(block,1)), false, true)
final_goal(3, in_tower((block,6),(block,2)), false, true)
final_goal(3, in_tower((block,6),(block,3)), false, true)
final_goal(3, in_tower((block,6),(block,4)), true, true)
final_goal(3, in_tower((block,6),(block,5)), true, true)
final_goal(3, in_tower((block,6),(block,6)), true, true)
final_goal(3, on((block,1)), (block,2), true)
final_goal(3, on((block,2)), (block,3), true)
final_goal(3, on((block,3)), puzzle_room_table, true)
final_goal(3, on((block,4)), (block,5), true)
final_goal(3, on((block,5)), (block,6), true)
final_goal(3, on((block,6)), puzzle_room_table, true)
final_goal(3, tower_base((block,1)), false, true)
final_goal(3, tower_base((block,2)), false, true)
final_goal(3, tower_base((block,3)), true, true)
final_goal(3, tower_base((block,4)), false, true)
final_goal(3, tower_base((block,5)), false, true)
final_goal(3, tower_base((block,6)), true, true)
final_goal(3, unordered_tower((block,1)), false, true)
final_goal(3, unordered_tower((block,2)), false, true)
final_goal(3, unordered_tower((block,3)), false, true)
final_goal(3, unordered_tower((block,4)), false, true)
final_goal(3, unordered_tower((block,5)), false, true)
final_goal(3, unordered_tower((block,6)), false, true)

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 3         
      ================================================      

final_goal(3, complete(blue), false, false)
final_goal(3, complete(red), false, false)
final_goal(3, in_tower((block,1),(block,1)), true, false)
final_goal(3, in_tower((block,1),(block,2)), true, false)
final_goal(3, in_tower((block,1),(block,3)), true, false)
final_goal(3, in_tower((block,1),(block,4)), true, false)
final_goal(3, in_tower((block,1),(block,5)), true, false)
final_goal(3, in_tower((block,1),(block,6)), true, false)
final_goal(3, in_tower((block,2),(block,1)), true, false)
final_goal(3, in_tower((block,2),(block,2)), true, false)
final_goal(3, in_tower((block,2),(block,3)), true, false)
final_goal(3, in_tower((block,2),(block,4)), true, false)
final_goal(3, in_tower((block,2),(block,5)), true, false)
final_goal(3, in_tower((block,2),(block,6)), true, false)
final_goal(3, in_tower((block,3),(block,1)), false, false)
final_goal(3, in_tower((block,3),(block,2)), false, false)
final_goal(3, in_tower((block,3),(block,3)), false, false)
final_goal(3, in_tower((block,3),(block,4)), true, false)
final_goal(3, in_tower((block,3),(block,5)), true, false)
final_goal(3, in_tower((block,3),(block,6)), true, false)
final_goal(3, in_tower((block,4),(block,1)), true, false)
final_goal(3, in_tower((block,4),(block,2)), true, false)
final_goal(3, in_tower((block,4),(block,3)), true, false)
final_goal(3, in_tower((block,4),(block,4)), true, false)
final_goal(3, in_tower((block,4),(block,5)), true, false)
final_goal(3, in_tower((block,4),(block,6)), true, false)
final_goal(3, in_tower((block,5),(block,1)), true, false)
final_goal(3, in_tower((block,5),(block,2)), true, false)
final_goal(3, in_tower((block,5),(block,3)), true, false)
final_goal(3, in_tower((block,5),(block,4)), true, false)
final_goal(3, in_tower((block,5),(block,5)), true, false)
final_goal(3, in_tower((block,5),(block,6)), true, false)
final_goal(3, in_tower((block,6),(block,1)), true, false)
final_goal(3, in_tower((block,6),(block,2)), true, false)
final_goal(3, in_tower((block,6),(block,3)), true, false)
final_goal(3, in_tower((block,6),(block,4)), false, false)
final_goal(3, in_tower((block,6),(block,5)), false, false)
final_goal(3, in_tower((block,6),(block,6)), false, false)
final_goal(3, on((block,1)), (block,3), false)
final_goal(3, on((block,1)), (block,4), false)
final_goal(3, on((block,1)), (block,5), false)
final_goal(3, on((block,1)), (block,6), false)
final_goal(3, on((block,1)), nothing, false)
final_goal(3, on((block,1)), puzzle_room_table, false)
final_goal(3, on((block,2)), (block,1), false)
final_goal(3, on((block,2)), (block,4), false)
final_goal(3, on((block,2)), (block,5), false)
final_goal(3, on((block,2)), (block,6), false)
final_goal(3, on((block,2)), nothing, false)
final_goal(3, on((block,2)), puzzle_room_table, false)
final_goal(3, on((block,3)), (block,1), false)
final_goal(3, on((block,3)), (block,2), false)
final_goal(3, on((block,3)), (block,4), false)
final_goal(3, on((block,3)), (block,5), false)
final_goal(3, on((block,3)), (block,6), false)
final_goal(3, on((block,3)), nothing, false)
final_goal(3, on((block,4)), (block,1), false)
final_goal(3, on((block,4)), (block,2), false)
final_goal(3, on((block,4)), (block,3), false)
final_goal(3, on((block,4)), (block,6), false)
final_goal(3, on((block,4)), nothing, false)
final_goal(3, on((block,4)), puzzle_room_table, false)
final_goal(3, on((block,5)), (block,1), false)
final_goal(3, on((block,5)), (block,2), false)
final_goal(3, on((block,5)), (block,3), false)
final_goal(3, on((block,5)), (block,4), false)
final_goal(3, on((block,5)), nothing, false)
final_goal(3, on((block,5)), puzzle_room_table, false)
final_goal(3, on((block,6)), (block,1), false)
final_goal(3, on((block,6)), (block,2), false)
final_goal(3, on((block,6)), (block,3), false)
final_goal(3, on((block,6)), (block,4), false)
final_goal(3, on((block,6)), (block,5), false)
final_goal(3, on((block,6)), nothing, false)
final_goal(3, tower_base((block,1)), true, false)
final_goal(3, tower_base((block,2)), true, false)
final_goal(3, tower_base((block,3)), false, false)
final_goal(3, tower_base((block,4)), true, false)
final_goal(3, tower_base((block,5)), true, false)
final_goal(3, tower_base((block,6)), false, false)
final_goal(3, unordered_tower((block,1)), true, false)
final_goal(3, unordered_tower((block,2)), true, false)
final_goal(3, unordered_tower((block,3)), true, false)
final_goal(3, unordered_tower((block,4)), true, false)
final_goal(3, unordered_tower((block,5)), true, false)
final_goal(3, unordered_tower((block,6)), true, false)

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 2         
      ================================================      

final_goal(2, complete(blue), true, true)
final_goal(2, complete(red), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, tower_base((block,1)), false, true)
final_goal(2, tower_base((block,2)), false, true)
final_goal(2, tower_base((block,3)), true, true)
final_goal(2, tower_base((block,4)), false, true)
final_goal(2, tower_base((block,5)), false, true)
final_goal(2, tower_base((block,6)), true, true)
final_goal(2, unordered_tower((block,1)), false, true)
final_goal(2, unordered_tower((block,2)), false, true)
final_goal(2, unordered_tower((block,3)), false, true)
final_goal(2, unordered_tower((block,4)), false, true)
final_goal(2, unordered_tower((block,5)), false, true)
final_goal(2, unordered_tower((block,6)), false, true)

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 2         
      ================================================      

final_goal(2, complete(blue), false, false)
final_goal(2, complete(red), false, false)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, tower_base((block,1)), true, false)
final_goal(2, tower_base((block,2)), true, false)
final_goal(2, tower_base((block,3)), false, false)
final_goal(2, tower_base((block,4)), true, false)
final_goal(2, tower_base((block,5)), true, false)
final_goal(2, tower_base((block,6)), false, false)
final_goal(2, unordered_tower((block,1)), true, false)
final_goal(2, unordered_tower((block,2)), true, false)
final_goal(2, unordered_tower((block,3)), true, false)
final_goal(2, unordered_tower((block,4)), true, false)
final_goal(2, unordered_tower((block,5)), true, false)
final_goal(2, unordered_tower((block,6)), true, false)

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 1         
      ================================================      

final_goal(1, complete(blue), true, true)
final_goal(1, complete(red), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1)), false, true)
final_goal(1, tower_base((block,2)), false, true)
final_goal(1, tower_base((block,3)), true, true)
final_goal(1, tower_base((block,4)), false, true)
final_goal(1, tower_base((block,5)), false, true)
final_goal(1, tower_base((block,6)), true, true)
final_goal(1, unordered_tower((block,1)), false, true)
final_goal(1, unordered_tower((block,2)), false, true)
final_goal(1, unordered_tower((block,3)), false, true)
final_goal(1, unordered_tower((block,4)), false, true)
final_goal(1, unordered_tower((block,5)), false, true)
final_goal(1, unordered_tower((block,6)), false, true)

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 1         
      ================================================      

final_goal(1, complete(blue), false, false)
final_goal(1, complete(red), false, false)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, tower_base((block,1)), true, false)
final_goal(1, tower_base((block,2)), true, false)
final_goal(1, tower_base((block,3)), false, false)
final_goal(1, tower_base((block,4)), true, false)
final_goal(1, tower_base((block,5)), true, false)
final_goal(1, tower_base((block,6)), false, false)
final_goal(1, unordered_tower((block,1)), true, false)
final_goal(1, unordered_tower((block,2)), true, false)
final_goal(1, unordered_tower((block,3)), true, false)
final_goal(1, unordered_tower((block,4)), true, false)
final_goal(1, unordered_tower((block,5)), true, false)
final_goal(1, unordered_tower((block,6)), true, false)

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Hierarchical planning problem successfully initialised:
Initial State is UNIQUE, Final-Goal is UNIQUE

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> The given problem specification has a unique interpretation (exactly one stable model exists).

[13-11-2021_23-07-13] INFO :: Experiment >> 

  ################################################################################################  
                  Running experiments : Initial runs = 0 : Experimental runs = 10                   
  ################################################################################################  

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', None)
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', True)
	('use_search_length_bound', True)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_actions', None)
	('detect_interleaving', False)
	('detect_dependencies', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', {1: 150, 2: 100, 3: 50})
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3] : ONLINE MODE

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 1 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Current valid planning level range: [3-3]

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Chosen level range for planning increment 1 by method ground-first: [1-3]

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 3

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 50)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = False
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [3] : Concurrency disabled : Problem type = classical : Minimum search length bound = disabled with value = 0

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = False
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = False, chosen = False

[13-11-2021_23-07-13] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-11-2021_23-07-13] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 68 rules into program part ash_initial_state:

holds(3, complete(blue), false, 0).
holds(3, complete(red), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), puzzle_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), true, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), (block,2), 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, tower_base((block,1)), true, 0).
holds(3, tower_base((block,2)), true, 0).
holds(3, tower_base((block,3)), false, 0).
holds(3, tower_base((block,4)), false, 0).
holds(3, tower_base((block,5)), false, 0).
holds(3, tower_base((block,6)), false, 0).
holds(3, unordered_tower((block,1)), true, 0).
holds(3, unordered_tower((block,2)), true, 0).
holds(3, unordered_tower((block,3)), false, 0).
holds(3, unordered_tower((block,4)), false, 0).
holds(3, unordered_tower((block,5)), false, 0).
holds(3, unordered_tower((block,6)), false, 0).

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 142 rules into program part ash_goal_state:

final_goal(3, complete(blue), false, false).
final_goal(3, complete(blue), true, true).
final_goal(3, complete(red), false, false).
final_goal(3, complete(red), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1)), false, true).
final_goal(3, tower_base((block,1)), true, false).
final_goal(3, tower_base((block,2)), false, true).
final_goal(3, tower_base((block,2)), true, false).
final_goal(3, tower_base((block,3)), false, false).
final_goal(3, tower_base((block,3)), true, true).
final_goal(3, tower_base((block,4)), false, true).
final_goal(3, tower_base((block,4)), true, false).
final_goal(3, tower_base((block,5)), false, true).
final_goal(3, tower_base((block,5)), true, false).
final_goal(3, tower_base((block,6)), false, false).
final_goal(3, tower_base((block,6)), true, true).
final_goal(3, unordered_tower((block,1)), false, true).
final_goal(3, unordered_tower((block,1)), true, false).
final_goal(3, unordered_tower((block,2)), false, true).
final_goal(3, unordered_tower((block,2)), true, false).
final_goal(3, unordered_tower((block,3)), false, true).
final_goal(3, unordered_tower((block,3)), true, false).
final_goal(3, unordered_tower((block,4)), false, true).
final_goal(3, unordered_tower((block,4)), true, false).
final_goal(3, unordered_tower((block,5)), false, true).
final_goal(3, unordered_tower((block,5)), true, false).
final_goal(3, unordered_tower((block,6)), false, true).
final_goal(3, unordered_tower((block,6)), true, false).

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x00000162C2F48DC0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=50, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 560 rules

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0038761999999996632s

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.021299s.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005606s with result Satisfiable.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000162C2F4E9F0>

[13-11-2021_23-07-13] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 3)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000162C2F4E9F0>)

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, true). %* None *%
#program optimisation_module(#inc, 0, false, false, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.056915s.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005957s with result Unsatisfiable.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06287140000000013, Incremental time limit = None
Running cumulative time = 0.06287140000000013, Cumulative time limit = 3600
Used memory = (RSS = 112.937500Mb, VMS = 99.988281Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.050696s.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003740s with result Unsatisfiable.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.05443540000000002, Incremental time limit = None
Running cumulative time = 0.11730680000000016, Cumulative time limit = 3600
Used memory = (RSS = 114.171875Mb, VMS = 101.292969Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.054567s.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004438s with result Unsatisfiable.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.059004600000000185, Incremental time limit = None
Running cumulative time = 0.17631140000000034, Cumulative time limit = 3600
Used memory = (RSS = 115.628906Mb, VMS = 102.777344Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.066400s.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005803s with result Unsatisfiable.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07220380000000004, Incremental time limit = None
Running cumulative time = 0.24851520000000038, Cumulative time limit = 3600
Used memory = (RSS = 117.078125Mb, VMS = 104.226562Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.056059s.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006759s with result Unsatisfiable.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06281860000000039, Incremental time limit = None
Running cumulative time = 0.31133380000000077, Cumulative time limit = 3600
Used memory = (RSS = 119.664062Mb, VMS = 107.117188Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.054467s.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006439s with result Unsatisfiable.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06090590000000029, Incremental time limit = None
Running cumulative time = 0.37223970000000106, Cumulative time limit = 3600
Used memory = (RSS = 122.300781Mb, VMS = 109.527344Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)])]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.060964s.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006828s with result Unsatisfiable.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06779239999999964, Incremental time limit = None
Running cumulative time = 0.4400321000000007, Cumulative time limit = 3600
Used memory = (RSS = 125.535156Mb, VMS = 112.917969Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)])]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.054795s.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008466s with result Unsatisfiable.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06326049999999972, Incremental time limit = None
Running cumulative time = 0.5032926000000004, Cumulative time limit = 3600
Used memory = (RSS = 127.257812Mb, VMS = 114.398438Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)])]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.062608s.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009327s with result Unsatisfiable.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07193490000000002, Incremental time limit = None
Running cumulative time = 0.5752275000000004, Cumulative time limit = 3600
Used memory = (RSS = 131.484375Mb, VMS = 119.015625Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)])]

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.064347s.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010629s with result Unsatisfiable.

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0749755000000003, Incremental time limit = None
Running cumulative time = 0.6502030000000008, Cumulative time limit = 3600
Used memory = (RSS = 133.730469Mb, VMS = 121.097656Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)])]

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.061643s.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010888s with result Unsatisfiable.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07253130000000008, Incremental time limit = None
Running cumulative time = 0.7227343000000008, Cumulative time limit = 3600
Used memory = (RSS = 135.710938Mb, VMS = 122.910156Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)])]

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.069607s.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014989s with result Unsatisfiable.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08459649999999996, Incremental time limit = None
Running cumulative time = 0.8073308000000008, Cumulative time limit = 3600
Used memory = (RSS = 141.347656Mb, VMS = 129.582031Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)])]

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.061897s.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024099s with result Unsatisfiable.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08599610000000046, Incremental time limit = None
Running cumulative time = 0.8933269000000013, Cumulative time limit = 3600
Used memory = (RSS = 142.519531Mb, VMS = 130.683594Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)])]

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.068869s.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040993s with result Unsatisfiable.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10986130000000038, Incremental time limit = None
Running cumulative time = 1.0031882000000016, Cumulative time limit = 3600
Used memory = (RSS = 144.558594Mb, VMS = 132.503906Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)])]

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.087492s.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.070648s with result Unsatisfiable.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.15814060000000074, Incremental time limit = None
Running cumulative time = 1.1613288000000024, Cumulative time limit = 3600
Used memory = (RSS = 146.980469Mb, VMS = 134.828125Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)])]

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.063251s.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.085567s with result Unsatisfiable.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1488176000000001, Incremental time limit = None
Running cumulative time = 1.3101464000000025, Cumulative time limit = 3600
Used memory = (RSS = 150.957031Mb, VMS = 138.496094Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)])]

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.065707s.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.162733s with result Unsatisfiable.

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2284398000000003, Incremental time limit = None
Running cumulative time = 1.5385862000000028, Cumulative time limit = 3600
Used memory = (RSS = 155.437500Mb, VMS = 144.703125Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)])]

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.078797s.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.062203s with result Satisfiable.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14099959999999978, Incremental time limit = None
Running cumulative time = 1.6795858000000026, Cumulative time limit = 3600
Used memory = (RSS = 159.023438Mb, VMS = 148.082031Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.139081s, Solving = 0.540505s, Total = 1.679586s, Memory = (RSS = 159.023438Mb, VMS = 148.082031Mb)), Calls = 18
Final Model :: Total atoms = 8949, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.056915s, Solving = 0.005957s, Total = 0.062871s, Memory = (RSS = 112.937500Mb, VMS = 99.988281Mb)
2 : Statistics :: Grounding = 0.050696s, Solving = 0.003740s, Total = 0.054435s, Memory = (RSS = 114.171875Mb, VMS = 101.292969Mb)
3 : Statistics :: Grounding = 0.054567s, Solving = 0.004438s, Total = 0.059005s, Memory = (RSS = 115.628906Mb, VMS = 102.777344Mb)
4 : Statistics :: Grounding = 0.066400s, Solving = 0.005803s, Total = 0.072204s, Memory = (RSS = 117.078125Mb, VMS = 104.226562Mb)
5 : Statistics :: Grounding = 0.056059s, Solving = 0.006759s, Total = 0.062819s, Memory = (RSS = 119.664062Mb, VMS = 107.117188Mb)
6 : Statistics :: Grounding = 0.054467s, Solving = 0.006439s, Total = 0.060906s, Memory = (RSS = 122.300781Mb, VMS = 109.527344Mb)
7 : Statistics :: Grounding = 0.060964s, Solving = 0.006828s, Total = 0.067792s, Memory = (RSS = 125.535156Mb, VMS = 112.917969Mb)
8 : Statistics :: Grounding = 0.054795s, Solving = 0.008466s, Total = 0.063260s, Memory = (RSS = 127.257812Mb, VMS = 114.398438Mb)
9 : Statistics :: Grounding = 0.062608s, Solving = 0.009327s, Total = 0.071935s, Memory = (RSS = 131.484375Mb, VMS = 119.015625Mb)
10 : Statistics :: Grounding = 0.064347s, Solving = 0.010629s, Total = 0.074976s, Memory = (RSS = 133.730469Mb, VMS = 121.097656Mb)
11 : Statistics :: Grounding = 0.061643s, Solving = 0.010888s, Total = 0.072531s, Memory = (RSS = 135.710938Mb, VMS = 122.910156Mb)
12 : Statistics :: Grounding = 0.069607s, Solving = 0.014989s, Total = 0.084596s, Memory = (RSS = 141.347656Mb, VMS = 129.582031Mb)
13 : Statistics :: Grounding = 0.061897s, Solving = 0.024099s, Total = 0.085996s, Memory = (RSS = 142.519531Mb, VMS = 130.683594Mb)
14 : Statistics :: Grounding = 0.068869s, Solving = 0.040993s, Total = 0.109861s, Memory = (RSS = 144.558594Mb, VMS = 132.503906Mb)
15 : Statistics :: Grounding = 0.087492s, Solving = 0.070648s, Total = 0.158141s, Memory = (RSS = 146.980469Mb, VMS = 134.828125Mb)
16 : Statistics :: Grounding = 0.063251s, Solving = 0.085567s, Total = 0.148818s, Memory = (RSS = 150.957031Mb, VMS = 138.496094Mb)
17 : Statistics :: Grounding = 0.065707s, Solving = 0.162733s, Total = 0.228440s, Memory = (RSS = 155.437500Mb, VMS = 144.703125Mb)
18 : Statistics :: Grounding = 0.078797s, Solving = 0.062203s, Total = 0.141000s, Memory = (RSS = 159.023438Mb, VMS = 148.082031Mb)

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.679586s due to: Stop condition reached.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.139081s, Solving = 0.540505s, Total = 1.679586s, Memory = (RSS = 159.023438Mb, VMS = 148.082031Mb)), Calls = 18
Model :: Total atoms = 8949, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 18 :: Actions = 18                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room)
Step 2:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 3:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 4:
    Planned actions:
        talos : move(puzzle_room)
Step 5:
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 6:
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 7:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 8:
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 9:
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 10:
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 11:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
Step 12:
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 13:
    Planned actions:
        talos : put(manipulator_arm_1,(block,4),(block,5))
Step 14:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
Step 15:
    Planned actions:
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 16:
    Planned actions:
        talos : release(manipulator_arm_2,(block,2))
Step 17:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
Step 18:
    Planned actions:
        talos : put(manipulator_arm_2,(block,1),(block,2))

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=18, step_range=range(0, 19)

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 0, Actions = 0
Level [2]: Length = 0, Actions = 0
Level [3]: Length = 18, Actions = 18

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  3 (classic), Length =  18, Actions =  18 (Com = 1.00), Sgs = 18, Time =   1.706s (Gro =   1.160s, Sea =   0.546s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))

[13-11-2021_23-07-15] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=18, start_step=0, blend=Blend(left=0, right=0)

[13-11-2021_23-07-15] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=9, large_group_size=10

[13-11-2021_23-07-15] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=9, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  3 (classic), Length =  18, Actions =  18 (Com = 1.00), Sgs = 18, Time =   1.706s (Gro =   1.160s, Sea =   0.546s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 9, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning at level 2 for problem 1:
Divided plan : Level =  3 (classic), Length =  18, Actions =  18 (Com = 1.00), Sgs = 18, Time =   1.706s (Gro =   1.160s, Sea =   0.546s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 9, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-9]

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [1-9], problem number = 1, increment number = 1

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 9)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 9
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 8

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [2] : Concurrency disabled : Problem type = partial conformance refinement (sequential) with sgoals range [1-9] : Minimum search length bound = disabled with value = 8

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = True, chosen = True

[13-11-2021_23-07-15] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-11-2021_23-07-15] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete(blue), false, 0).
holds(2, complete(red), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), puzzle_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), true, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), (block,2), 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1)), true, 0).
holds(2, tower_base((block,2)), true, 0).
holds(2, tower_base((block,3)), false, 0).
holds(2, tower_base((block,4)), false, 0).
holds(2, tower_base((block,5)), false, 0).
holds(2, tower_base((block,6)), false, 0).
holds(2, unordered_tower((block,1)), true, 0).
holds(2, unordered_tower((block,2)), true, 0).
holds(2, unordered_tower((block,3)), false, 0).
holds(2, unordered_tower((block,4)), false, 0).
holds(2, unordered_tower((block,5)), false, 0).
holds(2, unordered_tower((block,6)), false, 0).
holds(3, complete(blue), false, 0).
holds(3, complete(red), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), puzzle_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), true, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), (block,2), 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, tower_base((block,1)), true, 0).
holds(3, tower_base((block,2)), true, 0).
holds(3, tower_base((block,3)), false, 0).
holds(3, tower_base((block,4)), false, 0).
holds(3, tower_base((block,5)), false, 0).
holds(3, tower_base((block,6)), false, 0).
holds(3, unordered_tower((block,1)), true, 0).
holds(3, unordered_tower((block,2)), true, 0).
holds(3, unordered_tower((block,3)), false, 0).
holds(3, unordered_tower((block,4)), false, 0).
holds(3, unordered_tower((block,5)), false, 0).
holds(3, unordered_tower((block,6)), false, 0).

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).
final_goal(3, complete(blue), false, false).
final_goal(3, complete(blue), true, true).
final_goal(3, complete(red), false, false).
final_goal(3, complete(red), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1)), false, true).
final_goal(3, tower_base((block,1)), true, false).
final_goal(3, tower_base((block,2)), false, true).
final_goal(3, tower_base((block,2)), true, false).
final_goal(3, tower_base((block,3)), false, false).
final_goal(3, tower_base((block,3)), true, true).
final_goal(3, tower_base((block,4)), false, true).
final_goal(3, tower_base((block,4)), true, false).
final_goal(3, tower_base((block,5)), false, true).
final_goal(3, tower_base((block,5)), true, false).
final_goal(3, tower_base((block,6)), false, false).
final_goal(3, tower_base((block,6)), true, true).
final_goal(3, unordered_tower((block,1)), false, true).
final_goal(3, unordered_tower((block,1)), true, false).
final_goal(3, unordered_tower((block,2)), false, true).
final_goal(3, unordered_tower((block,2)), true, false).
final_goal(3, unordered_tower((block,3)), false, true).
final_goal(3, unordered_tower((block,3)), true, false).
final_goal(3, unordered_tower((block,4)), false, true).
final_goal(3, unordered_tower((block,4)), true, false).
final_goal(3, unordered_tower((block,5)), false, true).
final_goal(3, unordered_tower((block,5)), true, false).
final_goal(3, unordered_tower((block,6)), false, true).
final_goal(3, unordered_tower((block,6)), true, false).

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 3})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 4})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 5})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 9})

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 9 rules into program part base:

sub_goal(3, talos, move(store_room), in(talos), store_room, 1).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 2).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 3).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 4).
sub_goal(3, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 5).
sub_goal(3, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 6).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 7).
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 8).
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 9).

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x00000162C2F485E0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 'none', 'sequential', 'true'), range_=None)]

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 786 rules

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005398500000000084s

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.024331s.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005277s with result Satisfiable.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000162C600D4A0>

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 0)
	('last_sgoals', 9)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000162C600D4A0>)

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.083337s.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009690s with result Unsatisfiable.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.0930276000000001, Incremental time limit = None
Running cumulative time = 0.0930276000000001, Cumulative time limit = 3600
Used memory = (RSS = 128.449219Mb, VMS = 117.886719Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.08333730000000017, solving_time=0.00969029999999993, total_time=0.0930276000000001, memory=Memory(rss=128.44921875, vms=117.88671875), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08333730000000017, solving_time=0.00969029999999993, total_time=0.0930276000000001, memory=Memory(rss=128.44921875, vms=117.88671875), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 8375.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16636.0, 'bodies_tr': 16636.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 227.0, 'count_bodies_tr': 227.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 302.0, 'rules': 34554.0, 'rules_normal': 34210.0, 'rules_choice': 331.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 34550.0, 'rules_tr_normal': 34210.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 14398.0, 'eqs_atom': 3427.0, 'eqs_body': 1150.0, 'eqs_other': 9821.0}, 'lpStep': {'atoms': 3887.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15460.0, 'bodies_tr': 15460.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 227.0, 'count_bodies_tr': 227.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 302.0, 'rules': 29707.0, 'rules_normal': 29363.0, 'rules_choice': 331.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 29703.0, 'rules_tr_normal': 29363.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 8264.0, 'eqs_atom': 1146.0, 'eqs_body': 385.0, 'eqs_other': 6733.0}, 'generator': {'vars': 1562.0, 'vars_eliminated': 0.0, 'vars_frozen': 1076.0, 'constraints': 30.0, 'constraints_binary': 783.0, 'constraints_ternary': 98.0, 'acyc_edges': 0.0, 'complexity': 925.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 69.0, 'guiding_paths': 3.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.09375, 'cpu': 0.09375, 'solve': 0.0019683837890625, 'unsat': 0.0019683837890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.12962722778320312, 'cpu': 0.1875, 'solve': 0.0059566497802734375, 'unsat': 0.0019683837890625, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 77.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.070032s.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010892s with result Satisfiable.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.08092339999999965, Incremental time limit = None
Running cumulative time = 0.17395099999999974, Cumulative time limit = 3600
Used memory = (RSS = 131.464844Mb, VMS = 121.285156Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.153369s, Solving = 0.020582s, Total = 0.173951s, Memory = (RSS = 131.464844Mb, VMS = 121.285156Mb)), Calls = 2
Final Model :: Total atoms = 3939, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.15336890000000025, solving_time=0.020582099999999492, total_time=0.17395099999999974, memory=Memory(rss=131.46484375, vms=121.28515625), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07003160000000008, solving_time=0.010891799999999563, total_time=0.08092339999999965, memory=Memory(rss=131.46484375, vms=121.28515625), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 10058.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 29957.0, 'bodies_tr': 29957.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 408.0, 'count_bodies_tr': 408.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 354.0, 'rules': 59955.0, 'rules_normal': 59446.0, 'rules_choice': 483.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 59939.0, 'rules_tr_normal': 59446.0, 'rules_tr_choice': 483.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 17545.0, 'eqs_atom': 4143.0, 'eqs_body': 1594.0, 'eqs_other': 11808.0}, 'lpStep': {'atoms': 1683.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13321.0, 'bodies_tr': 13321.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 52.0, 'rules': 25401.0, 'rules_normal': 25236.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 25389.0, 'rules_tr_normal': 25236.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3147.0, 'eqs_atom': 716.0, 'eqs_body': 444.0, 'eqs_other': 1987.0}, 'generator': {'vars': 1705.0, 'vars_eliminated': 0.0, 'vars_frozen': 1209.0, 'constraints': 76.0, 'constraints_binary': 1398.0, 'constraints_ternary': 146.0, 'acyc_edges': 0.0, 'complexity': 1652.0}}, 'solving': {'solvers': {'choices': 217.0, 'conflicts': 17.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 52.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 23.0, 'integrated': 43.0, 'lemmas': 44.0, 'lits_learnt': 52.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 23.0, 'integrated_jumps': 73.0, 'guiding_paths_lits': 272.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 4.0, 'lemmas_other': 23.0, 'lits_conflict': 17.0, 'lits_loop': 11.0, 'lits_other': 24.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 0.0, 'levels': 17.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.08184814453125, 'cpu': 0.078125, 'solve': 0.004985809326171875, 'unsat': 0.0, 'sat': 0.000972747802734375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.21147537231445312, 'cpu': 0.265625, 'solve': 0.010942459106445312, 'unsat': 0.0019683837890625, 'sat': 0.0019702911376953125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 217.0, 'conflicts': 17.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 53.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 23.0, 'integrated': 43.0, 'lemmas': 48.0, 'lits_learnt': 56.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 23.0, 'integrated_jumps': 73.0, 'guiding_paths_lits': 349.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 8.0, 'lemmas_other': 23.0, 'lits_conflict': 17.0, 'lits_loop': 15.0, 'lits_other': 24.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 0.0, 'levels': 17.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2}

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 2 ( 22.22% solved)

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None)

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 2]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 2)

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 2:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.066464s.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 3: original = External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None), conversion = current_last_sgoals(2,2).

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005977s with result Unsatisfiable.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.07244039999999963, Incremental time limit = None
Running cumulative time = 0.24639139999999937, Cumulative time limit = 3600
Used memory = (RSS = 132.433594Mb, VMS = 122.277344Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.21983260000000016, solving_time=0.026558799999999216, total_time=0.24639139999999937, memory=Memory(rss=132.43359375, vms=122.27734375), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.0664636999999999, solving_time=0.005976699999999724, total_time=0.07244039999999963, memory=Memory(rss=132.43359375, vms=122.27734375), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 11928.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 43371.0, 'bodies_tr': 43371.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 589.0, 'count_bodies_tr': 589.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 430.0, 'rules': 85657.0, 'rules_normal': 84983.0, 'rules_choice': 635.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 85629.0, 'rules_tr_normal': 84983.0, 'rules_tr_choice': 635.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 21682.0, 'eqs_atom': 5033.0, 'eqs_body': 2044.0, 'eqs_other': 14605.0}, 'lpStep': {'atoms': 1870.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13414.0, 'bodies_tr': 13414.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 8.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 76.0, 'rules': 25702.0, 'rules_normal': 25537.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 25690.0, 'rules_tr_normal': 25537.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4137.0, 'eqs_atom': 890.0, 'eqs_body': 450.0, 'eqs_other': 2797.0}, 'generator': {'vars': 1969.0, 'vars_eliminated': 0.0, 'vars_frozen': 1407.0, 'constraints': 133.0, 'constraints_binary': 2297.0, 'constraints_ternary': 165.0, 'acyc_edges': 0.0, 'complexity': 2657.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 270.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.07281303405761719, 'cpu': 0.078125, 'solve': 0.001972198486328125, 'unsat': 0.001972198486328125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2842884063720703, 'cpu': 0.34375, 'solve': 0.012914657592773438, 'unsat': 0.003940582275390625, 'sat': 0.0019702911376953125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 217.0, 'conflicts': 23.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 53.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 23.0, 'integrated': 43.0, 'lemmas': 48.0, 'lits_learnt': 56.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 23.0, 'integrated_jumps': 73.0, 'guiding_paths_lits': 619.0, 'guiding_paths': 25.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 8.0, 'lemmas_other': 23.0, 'lits_conflict': 17.0, 'lits_loop': 15.0, 'lits_other': 24.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 0.0, 'levels': 17.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 3:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.067562s.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012283s with result Satisfiable.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.07984539999999907, Incremental time limit = None
Running cumulative time = 0.32623679999999844, Cumulative time limit = 3600
Used memory = (RSS = 134.851562Mb, VMS = 124.191406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.287395s, Solving = 0.038842s, Total = 0.326237s, Memory = (RSS = 134.851562Mb, VMS = 124.191406Mb)), Calls = 4
Final Model :: Total atoms = 4604, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.28739509999999946, solving_time=0.03884169999999898, total_time=0.32623679999999844, memory=Memory(rss=134.8515625, vms=124.19140625), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.0675624999999993, solving_time=0.012282899999999763, total_time=0.07984539999999907, memory=Memory(rss=134.8515625, vms=124.19140625), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 13910.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 57208.0, 'bodies_tr': 57208.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 770.0, 'count_bodies_tr': 770.0, 'sccs': 54.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 658.0, 'rules': 111877.0, 'rules_normal': 111038.0, 'rules_choice': 787.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 48.0, 'rules_tr': 111845.0, 'rules_tr_normal': 111038.0, 'rules_tr_choice': 787.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 26152.0, 'eqs_atom': 5910.0, 'eqs_body': 2283.0, 'eqs_other': 17959.0}, 'lpStep': {'atoms': 1982.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13837.0, 'bodies_tr': 13837.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 228.0, 'rules': 26220.0, 'rules_normal': 26055.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26216.0, 'rules_tr_normal': 26055.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 4470.0, 'eqs_atom': 877.0, 'eqs_body': 239.0, 'eqs_other': 3354.0}, 'generator': {'vars': 2945.0, 'vars_eliminated': 0.0, 'vars_frozen': 2062.0, 'constraints': 392.0, 'constraints_binary': 9795.0, 'constraints_ternary': 1002.0, 'acyc_edges': 0.0, 'complexity': 11305.0}}, 'solving': {'solvers': {'choices': 271.0, 'conflicts': 59.0, 'conflicts_analyzed': 59.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 33.0, 'models': 1.0, 'models_level': 86.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 52.0, 'distributed_sum_lbd': 67.0, 'integrated': 200.0, 'lemmas': 295.0, 'lits_learnt': 770.0, 'lemmas_binary': 20.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.0, 'integrated_imps': 151.0, 'integrated_jumps': 5.0, 'guiding_paths_lits': 448.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 50.0, 'lemmas_loop': 79.0, 'lemmas_other': 166.0, 'lits_conflict': 86.0, 'lits_loop': 379.0, 'lits_other': 305.0, 'jumps': {'jumps': 59.0, 'jumps_bounded': 33.0, 'levels': 1152.0, 'levels_bounded': 1078.0, 'max': 57.0, 'max_executed': 57.0, 'max_bounded': 56.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.08078575134277344, 'cpu': 0.078125, 'solve': 0.0069522857666015625, 'unsat': 0.0, 'sat': 0.0029621124267578125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.36507415771484375, 'cpu': 0.421875, 'solve': 0.019866943359375, 'unsat': 0.003940582275390625, 'sat': 0.004932403564453125}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 488.0, 'conflicts': 82.0, 'conflicts_analyzed': 76.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 33.0, 'models': 3.0, 'models_level': 139.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 72.0, 'distributed_sum_lbd': 90.0, 'integrated': 243.0, 'lemmas': 343.0, 'lits_learnt': 826.0, 'lemmas_binary': 24.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.015625, 'integrated_imps': 174.0, 'integrated_jumps': 78.0, 'guiding_paths_lits': 1067.0, 'guiding_paths': 33.0, 'splits': 0.0, 'lemmas_conflict': 67.0, 'lemmas_loop': 87.0, 'lemmas_other': 189.0, 'lits_conflict': 103.0, 'lits_loop': 394.0, 'lits_other': 329.0, 'jumps': {'jumps': 76.0, 'jumps_bounded': 33.0, 'levels': 1169.0, 'levels_bounded': 1078.0, 'max': 57.0, 'max_executed': 57.0, 'max_bounded': 56.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4}

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 3 ( 33.33% solved)

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 4)', truth=True, inc_range=None)

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 4]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 3)

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 4:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.067549s.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 5: original = External(symbol='current_last_sgoals(3, 4)', truth=True, inc_range=None), conversion = current_last_sgoals(3,4).

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008519s with result Unsatisfiable.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.07606730000000006, Incremental time limit = None
Running cumulative time = 0.4023040999999985, Cumulative time limit = 3600
Used memory = (RSS = 137.468750Mb, VMS = 127.238281Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.35494369999999975, solving_time=0.04736039999999875, total_time=0.4023040999999985, memory=Memory(rss=137.46875, vms=127.23828125), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.06754860000000029, solving_time=0.008518699999999768, total_time=0.07606730000000006, memory=Memory(rss=137.46875, vms=127.23828125), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 16021.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71159.0, 'bodies_tr': 71159.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 951.0, 'count_bodies_tr': 951.0, 'sccs': 74.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 886.0, 'rules': 138248.0, 'rules_normal': 137244.0, 'rules_choice': 939.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 60.0, 'rules_tr': 138212.0, 'rules_tr_normal': 137244.0, 'rules_tr_choice': 939.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 24.0, 'eqs': 30883.0, 'eqs_atom': 6817.0, 'eqs_body': 2557.0, 'eqs_other': 21509.0}, 'lpStep': {'atoms': 2111.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13951.0, 'bodies_tr': 13951.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 228.0, 'rules': 26371.0, 'rules_normal': 26206.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26367.0, 'rules_tr_normal': 26206.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 4731.0, 'eqs_atom': 907.0, 'eqs_body': 274.0, 'eqs_other': 3550.0}, 'generator': {'vars': 3913.0, 'vars_eliminated': 0.0, 'vars_frozen': 2711.0, 'constraints': 454.0, 'constraints_binary': 11296.0, 'constraints_ternary': 1161.0, 'acyc_edges': 0.0, 'complexity': 13045.0}}, 'solving': {'solvers': {'choices': 5.0, 'conflicts': 12.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 5.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5.0, 'distributed_sum_lbd': 10.0, 'integrated': 0.0, 'lemmas': 5.0, 'lits_learnt': 25.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 402.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 25.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 5.0, 'levels': 10.0, 'levels_bounded': 5.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.07779121398925781, 'cpu': 0.0625, 'solve': 0.00299072265625, 'unsat': 0.00299072265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.44286537170410156, 'cpu': 0.484375, 'solve': 0.022857666015625, 'unsat': 0.006931304931640625, 'sat': 0.004932403564453125}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 493.0, 'conflicts': 94.0, 'conflicts_analyzed': 81.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 38.0, 'models': 3.0, 'models_level': 139.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 77.0, 'distributed_sum_lbd': 100.0, 'integrated': 243.0, 'lemmas': 348.0, 'lits_learnt': 851.0, 'lemmas_binary': 24.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.015625, 'integrated_imps': 174.0, 'integrated_jumps': 78.0, 'guiding_paths_lits': 1469.0, 'guiding_paths': 39.0, 'splits': 0.0, 'lemmas_conflict': 72.0, 'lemmas_loop': 87.0, 'lemmas_other': 189.0, 'lits_conflict': 128.0, 'lits_loop': 394.0, 'lits_other': 329.0, 'jumps': {'jumps': 81.0, 'jumps_bounded': 38.0, 'levels': 1179.0, 'levels_bounded': 1083.0, 'max': 57.0, 'max_executed': 57.0, 'max_bounded': 56.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 5:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.076702s.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015721s with result Satisfiable.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09242340000000038, Incremental time limit = None
Running cumulative time = 0.4947274999999989, Cumulative time limit = 3600
Used memory = (RSS = 139.410156Mb, VMS = 128.785156Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.431646s, Solving = 0.063082s, Total = 0.494727s, Memory = (RSS = 139.410156Mb, VMS = 128.785156Mb)), Calls = 6
Final Model :: Total atoms = 5271, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.43164590000000036, solving_time=0.06308159999999852, total_time=0.4947274999999989, memory=Memory(rss=139.41015625, vms=128.78515625), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07670220000000061, solving_time=0.01572119999999977, total_time=0.09242340000000038, memory=Memory(rss=139.41015625, vms=128.78515625), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 18134.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 85465.0, 'bodies_tr': 85465.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1132.0, 'count_bodies_tr': 1132.0, 'sccs': 94.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1132.0, 'rules': 165074.0, 'rules_normal': 163905.0, 'rules_choice': 1091.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 165034.0, 'rules_tr_normal': 163905.0, 'rules_tr_choice': 1091.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 32.0, 'eqs': 36047.0, 'eqs_atom': 7805.0, 'eqs_body': 2813.0, 'eqs_other': 25429.0}, 'lpStep': {'atoms': 2113.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14306.0, 'bodies_tr': 14306.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 246.0, 'rules': 26826.0, 'rules_normal': 26661.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26822.0, 'rules_tr_normal': 26661.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 5164.0, 'eqs_atom': 988.0, 'eqs_body': 256.0, 'eqs_other': 3920.0}, 'generator': {'vars': 5076.0, 'vars_eliminated': 0.0, 'vars_frozen': 3442.0, 'constraints': 740.0, 'constraints_binary': 21186.0, 'constraints_ternary': 2260.0, 'acyc_edges': 0.0, 'complexity': 24374.0}}, 'solving': {'solvers': {'choices': 473.0, 'conflicts': 125.0, 'conflicts_analyzed': 125.0, 'restarts': 0.0, 'restarts_last': 24.0, 'extra': {'domain_choices': 91.0, 'models': 1.0, 'models_level': 124.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 115.0, 'distributed_sum_lbd': 219.0, 'integrated': 681.0, 'lemmas': 971.0, 'lits_learnt': 5852.0, 'lemmas_binary': 17.0, 'lemmas_ternary': 29.0, 'cpu_time': 0.03125, 'integrated_imps': 553.0, 'integrated_jumps': 24.0, 'guiding_paths_lits': 546.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 115.0, 'lemmas_loop': 193.0, 'lemmas_other': 663.0, 'lits_conflict': 716.0, 'lits_loop': 912.0, 'lits_other': 4224.0, 'jumps': {'jumps': 125.0, 'jumps_bounded': 90.0, 'levels': 2225.0, 'levels_bounded': 2092.0, 'max': 79.0, 'max_executed': 79.0, 'max_bounded': 78.0}}}}, 'summary': {'call': 6.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.09275436401367188, 'cpu': 0.109375, 'solve': 0.0079803466796875, 'unsat': 0.0, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5356197357177734, 'cpu': 0.59375, 'solve': 0.0308380126953125, 'unsat': 0.006931304931640625, 'sat': 0.007925033569335938}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 966.0, 'conflicts': 219.0, 'conflicts_analyzed': 206.0, 'restarts': 0.0, 'restarts_last': 24.0, 'extra': {'domain_choices': 129.0, 'models': 4.0, 'models_level': 263.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 192.0, 'distributed_sum_lbd': 319.0, 'integrated': 924.0, 'lemmas': 1319.0, 'lits_learnt': 6703.0, 'lemmas_binary': 41.0, 'lemmas_ternary': 31.0, 'cpu_time': 0.046875, 'integrated_imps': 727.0, 'integrated_jumps': 102.0, 'guiding_paths_lits': 2015.0, 'guiding_paths': 46.0, 'splits': 0.0, 'lemmas_conflict': 187.0, 'lemmas_loop': 280.0, 'lemmas_other': 852.0, 'lits_conflict': 844.0, 'lits_loop': 1306.0, 'lits_other': 4553.0, 'jumps': {'jumps': 206.0, 'jumps_bounded': 128.0, 'levels': 3404.0, 'levels_bounded': 3175.0, 'max': 79.0, 'max_executed': 79.0, 'max_bounded': 78.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 6}

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 4 ( 44.44% solved)

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 6)', truth=True, inc_range=None)

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 6]:
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 4)

[13-11-2021_23-07-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 6:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.072649s.

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 7: original = External(symbol='current_last_sgoals(4, 6)', truth=True, inc_range=None), conversion = current_last_sgoals(4,6).

[13-11-2021_23-07-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012010s with result Unsatisfiable.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08465830000000096, Incremental time limit = None
Running cumulative time = 0.5793857999999998, Cumulative time limit = 3600
Used memory = (RSS = 144.605469Mb, VMS = 133.652344Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5042945000000012, solving_time=0.07509129999999864, total_time=0.5793857999999998, memory=Memory(rss=144.60546875, vms=133.65234375), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07264860000000084, solving_time=0.012009700000000123, total_time=0.08465830000000096, memory=Memory(rss=144.60546875, vms=133.65234375), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 20277.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 100117.0, 'bodies_tr': 100117.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1313.0, 'count_bodies_tr': 1313.0, 'sccs': 114.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1568.0, 'rules': 192283.0, 'rules_normal': 190949.0, 'rules_choice': 1243.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 84.0, 'rules_tr': 192243.0, 'rules_tr_normal': 190949.0, 'rules_tr_choice': 1243.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 44.0, 'eqs': 40513.0, 'eqs_atom': 8761.0, 'eqs_body': 2932.0, 'eqs_other': 28820.0}, 'lpStep': {'atoms': 2143.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14652.0, 'bodies_tr': 14652.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27209.0, 'rules_normal': 27044.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27209.0, 'rules_tr_normal': 27044.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 4466.0, 'eqs_atom': 956.0, 'eqs_body': 119.0, 'eqs_other': 3391.0}, 'generator': {'vars': 6756.0, 'vars_eliminated': 0.0, 'vars_frozen': 4517.0, 'constraints': 1160.0, 'constraints_binary': 36314.0, 'constraints_ternary': 3990.0, 'acyc_edges': 0.0, 'complexity': 41722.0}}, 'solving': {'solvers': {'choices': 91.0, 'conflicts': 94.0, 'conflicts_analyzed': 86.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 60.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 80.0, 'distributed_sum_lbd': 176.0, 'integrated': 436.0, 'lemmas': 273.0, 'lits_learnt': 2382.0, 'lemmas_binary': 13.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.0, 'integrated_imps': 50.0, 'integrated_jumps': 4.0, 'guiding_paths_lits': 623.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 80.0, 'lemmas_loop': 52.0, 'lemmas_other': 141.0, 'lits_conflict': 781.0, 'lits_loop': 472.0, 'lits_other': 1129.0, 'jumps': {'jumps': 86.0, 'jumps_bounded': 12.0, 'levels': 99.0, 'levels_bounded': 12.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 7.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.08612823486328125, 'cpu': 0.09375, 'solve': 0.0043163299560546875, 'unsat': 0.0043163299560546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6217479705810547, 'cpu': 0.6875, 'solve': 0.03515434265136719, 'unsat': 0.011247634887695312, 'sat': 0.007925033569335938}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1057.0, 'conflicts': 313.0, 'conflicts_analyzed': 292.0, 'restarts': 0.0, 'restarts_last': 24.0, 'extra': {'domain_choices': 189.0, 'models': 4.0, 'models_level': 263.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 272.0, 'distributed_sum_lbd': 495.0, 'integrated': 1360.0, 'lemmas': 1592.0, 'lits_learnt': 9085.0, 'lemmas_binary': 54.0, 'lemmas_ternary': 52.0, 'cpu_time': 0.046875, 'integrated_imps': 777.0, 'integrated_jumps': 106.0, 'guiding_paths_lits': 2638.0, 'guiding_paths': 53.0, 'splits': 0.0, 'lemmas_conflict': 267.0, 'lemmas_loop': 332.0, 'lemmas_other': 993.0, 'lits_conflict': 1625.0, 'lits_loop': 1778.0, 'lits_other': 5682.0, 'jumps': {'jumps': 292.0, 'jumps_bounded': 140.0, 'levels': 3503.0, 'levels_bounded': 3187.0, 'max': 79.0, 'max_executed': 79.0, 'max_bounded': 78.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.073103s.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024707s with result Unsatisfiable.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09780980000000028, Incremental time limit = None
Running cumulative time = 0.6771956000000001, Cumulative time limit = 3600
Used memory = (RSS = 150.875000Mb, VMS = 140.390625Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5773977000000015, solving_time=0.09979789999999866, total_time=0.6771956000000001, memory=Memory(rss=150.875, vms=140.390625), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07310320000000026, solving_time=0.024706600000000023, total_time=0.09780980000000028, memory=Memory(rss=150.875, vms=140.390625), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 22539.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 115088.0, 'bodies_tr': 115088.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1494.0, 'count_bodies_tr': 1494.0, 'sccs': 134.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2004.0, 'rules': 219912.0, 'rules_normal': 218413.0, 'rules_choice': 1395.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 96.0, 'rules_tr': 219872.0, 'rules_tr_normal': 218413.0, 'rules_tr_choice': 1395.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 56.0, 'eqs': 45335.0, 'eqs_atom': 9808.0, 'eqs_body': 3045.0, 'eqs_other': 32482.0}, 'lpStep': {'atoms': 2262.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14971.0, 'bodies_tr': 14971.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27629.0, 'rules_normal': 27464.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27629.0, 'rules_tr_normal': 27464.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 4822.0, 'eqs_atom': 1047.0, 'eqs_body': 113.0, 'eqs_other': 3662.0}, 'generator': {'vars': 8499.0, 'vars_eliminated': 0.0, 'vars_frozen': 5608.0, 'constraints': 1642.0, 'constraints_binary': 52509.0, 'constraints_ternary': 5960.0, 'acyc_edges': 0.0, 'complexity': 60439.0}}, 'solving': {'solvers': {'choices': 451.0, 'conflicts': 276.0, 'conflicts_analyzed': 268.0, 'restarts': 0.0, 'restarts_last': 46.0, 'extra': {'domain_choices': 230.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 238.0, 'distributed_sum_lbd': 594.0, 'integrated': 1417.0, 'lemmas': 2208.0, 'lits_learnt': 20485.0, 'lemmas_binary': 120.0, 'lemmas_ternary': 111.0, 'cpu_time': 0.109375, 'integrated_imps': 635.0, 'integrated_jumps': 143.0, 'guiding_paths_lits': 700.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 245.0, 'lemmas_loop': 772.0, 'lemmas_other': 1191.0, 'lits_conflict': 2583.0, 'lits_loop': 6076.0, 'lits_other': 11826.0, 'jumps': {'jumps': 268.0, 'jumps_bounded': 80.0, 'levels': 388.0, 'levels_bounded': 80.0, 'max': 4.0, 'max_executed': 4.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.09873771667480469, 'cpu': 0.203125, 'solve': 0.01197052001953125, 'unsat': 0.01197052001953125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.7204856872558594, 'cpu': 0.890625, 'solve': 0.04712486267089844, 'unsat': 0.023218154907226562, 'sat': 0.007925033569335938}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1508.0, 'conflicts': 589.0, 'conflicts_analyzed': 560.0, 'restarts': 0.0, 'restarts_last': 46.0, 'extra': {'domain_choices': 419.0, 'models': 4.0, 'models_level': 263.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 510.0, 'distributed_sum_lbd': 1089.0, 'integrated': 2777.0, 'lemmas': 3800.0, 'lits_learnt': 29570.0, 'lemmas_binary': 174.0, 'lemmas_ternary': 163.0, 'cpu_time': 0.15625, 'integrated_imps': 1412.0, 'integrated_jumps': 249.0, 'guiding_paths_lits': 3338.0, 'guiding_paths': 60.0, 'splits': 0.0, 'lemmas_conflict': 512.0, 'lemmas_loop': 1104.0, 'lemmas_other': 2184.0, 'lits_conflict': 4208.0, 'lits_loop': 7854.0, 'lits_other': 17508.0, 'jumps': {'jumps': 560.0, 'jumps_bounded': 220.0, 'levels': 3891.0, 'levels_bounded': 3267.0, 'max': 79.0, 'max_executed': 79.0, 'max_bounded': 78.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.088455s.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023514s with result Unsatisfiable.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.11196910000000049, Incremental time limit = None
Running cumulative time = 0.7891647000000006, Cumulative time limit = 3600
Used memory = (RSS = 154.734375Mb, VMS = 143.066406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.6658528000000015, solving_time=0.12331189999999914, total_time=0.7891647000000006, memory=Memory(rss=154.734375, vms=143.06640625), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08845510000000001, solving_time=0.02351400000000048, total_time=0.11196910000000049, memory=Memory(rss=154.734375, vms=143.06640625), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 24813.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 130083.0, 'bodies_tr': 130083.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1675.0, 'count_bodies_tr': 1675.0, 'sccs': 154.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2440.0, 'rules': 247602.0, 'rules_normal': 245938.0, 'rules_choice': 1547.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 247562.0, 'rules_tr_normal': 245938.0, 'rules_tr_choice': 1547.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 68.0, 'eqs': 50208.0, 'eqs_atom': 10863.0, 'eqs_body': 3160.0, 'eqs_other': 36185.0}, 'lpStep': {'atoms': 2274.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14995.0, 'bodies_tr': 14995.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27690.0, 'rules_normal': 27525.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27690.0, 'rules_tr_normal': 27525.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 4873.0, 'eqs_atom': 1055.0, 'eqs_body': 115.0, 'eqs_other': 3703.0}, 'generator': {'vars': 10249.0, 'vars_eliminated': 0.0, 'vars_frozen': 6703.0, 'constraints': 2125.0, 'constraints_binary': 68767.0, 'constraints_ternary': 7917.0, 'acyc_edges': 0.0, 'complexity': 79207.0}}, 'solving': {'solvers': {'choices': 584.0, 'conflicts': 302.0, 'conflicts_analyzed': 296.0, 'restarts': 0.0, 'restarts_last': 52.0, 'extra': {'domain_choices': 299.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 273.0, 'distributed_sum_lbd': 674.0, 'integrated': 1578.0, 'lemmas': 2145.0, 'lits_learnt': 21489.0, 'lemmas_binary': 208.0, 'lemmas_ternary': 84.0, 'cpu_time': 0.015625, 'integrated_imps': 544.0, 'integrated_jumps': 232.0, 'guiding_paths_lits': 777.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 286.0, 'lemmas_loop': 457.0, 'lemmas_other': 1402.0, 'lits_conflict': 3355.0, 'lits_loop': 3418.0, 'lits_other': 14716.0, 'jumps': {'jumps': 296.0, 'jumps_bounded': 61.0, 'levels': 1073.0, 'levels_bounded': 721.0, 'max': 112.0, 'max_executed': 112.0, 'max_bounded': 111.0}}}}, 'summary': {'call': 9.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.11369895935058594, 'cpu': 0.109375, 'solve': 0.014963150024414062, 'unsat': 0.014963150024414062, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8341846466064453, 'cpu': 1.0, 'solve': 0.0620880126953125, 'unsat': 0.038181304931640625, 'sat': 0.007925033569335938}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2092.0, 'conflicts': 891.0, 'conflicts_analyzed': 856.0, 'restarts': 0.0, 'restarts_last': 52.0, 'extra': {'domain_choices': 718.0, 'models': 4.0, 'models_level': 263.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 783.0, 'distributed_sum_lbd': 1763.0, 'integrated': 4355.0, 'lemmas': 5945.0, 'lits_learnt': 51059.0, 'lemmas_binary': 382.0, 'lemmas_ternary': 247.0, 'cpu_time': 0.171875, 'integrated_imps': 1956.0, 'integrated_jumps': 481.0, 'guiding_paths_lits': 4115.0, 'guiding_paths': 67.0, 'splits': 0.0, 'lemmas_conflict': 798.0, 'lemmas_loop': 1561.0, 'lemmas_other': 3586.0, 'lits_conflict': 7563.0, 'lits_loop': 11272.0, 'lits_other': 32224.0, 'jumps': {'jumps': 856.0, 'jumps_bounded': 281.0, 'levels': 4964.0, 'levels_bounded': 3988.0, 'max': 112.0, 'max_executed': 112.0, 'max_bounded': 111.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.079947s.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040438s with result Satisfiable.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12038580000000021, Incremental time limit = None
Running cumulative time = 0.9095505000000008, Cumulative time limit = 3600
Used memory = (RSS = 160.808594Mb, VMS = 150.800781Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.745800s, Solving = 0.163750s, Total = 0.909551s, Memory = (RSS = 160.808594Mb, VMS = 150.800781Mb)), Calls = 10
Final Model :: Total atoms = 6606, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.7458002000000015, solving_time=0.16375029999999935, total_time=0.9095505000000008, memory=Memory(rss=160.80859375, vms=150.80078125), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.0799474, solving_time=0.04043840000000021, total_time=0.12038580000000021, memory=Memory(rss=160.80859375, vms=150.80078125), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 27100.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 145103.0, 'bodies_tr': 145103.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1856.0, 'count_bodies_tr': 1856.0, 'sccs': 174.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2876.0, 'rules': 275354.0, 'rules_normal': 273525.0, 'rules_choice': 1699.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 120.0, 'rules_tr': 275314.0, 'rules_tr_normal': 273525.0, 'rules_tr_choice': 1699.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 80.0, 'eqs': 55133.0, 'eqs_atom': 11927.0, 'eqs_body': 3275.0, 'eqs_other': 39931.0}, 'lpStep': {'atoms': 2287.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15020.0, 'bodies_tr': 15020.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27752.0, 'rules_normal': 27587.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27752.0, 'rules_tr_normal': 27587.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 4925.0, 'eqs_atom': 1064.0, 'eqs_body': 115.0, 'eqs_other': 3746.0}, 'generator': {'vars': 12006.0, 'vars_eliminated': 0.0, 'vars_frozen': 7802.0, 'constraints': 2606.0, 'constraints_binary': 84969.0, 'constraints_ternary': 9867.0, 'acyc_edges': 0.0, 'complexity': 97910.0}}, 'solving': {'solvers': {'choices': 1373.0, 'conflicts': 393.0, 'conflicts_analyzed': 393.0, 'restarts': 0.0, 'restarts_last': 75.0, 'extra': {'domain_choices': 421.0, 'models': 1.0, 'models_level': 195.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 365.0, 'distributed_sum_lbd': 935.0, 'integrated': 2167.0, 'lemmas': 2947.0, 'lits_learnt': 36985.0, 'lemmas_binary': 305.0, 'lemmas_ternary': 137.0, 'cpu_time': 0.15625, 'integrated_imps': 629.0, 'integrated_jumps': 391.0, 'guiding_paths_lits': 854.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 381.0, 'lemmas_loop': 605.0, 'lemmas_other': 1961.0, 'lits_conflict': 5562.0, 'lits_loop': 4689.0, 'lits_other': 26734.0, 'jumps': {'jumps': 393.0, 'jumps_bounded': 63.0, 'levels': 904.0, 'levels_bounded': 426.0, 'max': 124.0, 'max_executed': 124.0, 'max_bounded': 122.0}}}}, 'summary': {'call': 10.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.12267494201660156, 'cpu': 0.25, 'solve': 0.029920578002929688, 'unsat': 0.0, 'sat': 0.020944595336914062}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.9568595886230469, 'cpu': 1.25, 'solve': 0.09200859069824219, 'unsat': 0.038181304931640625, 'sat': 0.02886962890625}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3465.0, 'conflicts': 1284.0, 'conflicts_analyzed': 1249.0, 'restarts': 0.0, 'restarts_last': 75.0, 'extra': {'domain_choices': 1139.0, 'models': 5.0, 'models_level': 458.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1148.0, 'distributed_sum_lbd': 2698.0, 'integrated': 6522.0, 'lemmas': 8892.0, 'lits_learnt': 88044.0, 'lemmas_binary': 687.0, 'lemmas_ternary': 384.0, 'cpu_time': 0.328125, 'integrated_imps': 2585.0, 'integrated_jumps': 872.0, 'guiding_paths_lits': 4969.0, 'guiding_paths': 74.0, 'splits': 0.0, 'lemmas_conflict': 1179.0, 'lemmas_loop': 2166.0, 'lemmas_other': 5547.0, 'lits_conflict': 13125.0, 'lits_loop': 15961.0, 'lits_other': 58958.0, 'jumps': {'jumps': 1249.0, 'jumps_bounded': 344.0, 'levels': 5868.0, 'levels_bounded': 4414.0, 'max': 124.0, 'max_executed': 124.0, 'max_bounded': 122.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 6, 4: 10}

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 5 ( 55.56% solved)

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 10)', truth=True, inc_range=None)

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 10]:
sub_goal(3, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 5)

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.089736s.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 11: original = External(symbol='current_last_sgoals(5, 10)', truth=True, inc_range=None), conversion = current_last_sgoals(5,10).

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013429s with result Unsatisfiable.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10316430000000043, Incremental time limit = None
Running cumulative time = 1.0127148000000012, Cumulative time limit = 3600
Used memory = (RSS = 164.039062Mb, VMS = 153.152344Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.8355358000000015, solving_time=0.17717899999999975, total_time=1.0127148000000012, memory=Memory(rss=164.0390625, vms=153.15234375), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08973560000000003, solving_time=0.013428700000000404, total_time=0.10316430000000043, memory=Memory(rss=164.0390625, vms=153.15234375), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 29401.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 160148.0, 'bodies_tr': 160148.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2037.0, 'count_bodies_tr': 2037.0, 'sccs': 194.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3312.0, 'rules': 303168.0, 'rules_normal': 301174.0, 'rules_choice': 1851.0, 'rules_minimize': 11.0, 'rules_acyc': 0.0, 'rules_heuristic': 132.0, 'rules_tr': 303128.0, 'rules_tr_normal': 301174.0, 'rules_tr_choice': 1851.0, 'rules_tr_minimize': 11.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 92.0, 'eqs': 60115.0, 'eqs_atom': 13001.0, 'eqs_body': 3392.0, 'eqs_other': 43722.0}, 'lpStep': {'atoms': 2301.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15045.0, 'bodies_tr': 15045.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27814.0, 'rules_normal': 27649.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27814.0, 'rules_tr_normal': 27649.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 4982.0, 'eqs_atom': 1074.0, 'eqs_body': 117.0, 'eqs_other': 3791.0}, 'generator': {'vars': 13769.0, 'vars_eliminated': 0.0, 'vars_frozen': 8905.0, 'constraints': 2952.0, 'constraints_binary': 98629.0, 'constraints_ternary': 11363.0, 'acyc_edges': 0.0, 'complexity': 113474.0}}, 'solving': {'solvers': {'choices': 1.0, 'conflicts': 7.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 1.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 4.0, 'lemmas': 5.0, 'lits_learnt': 10.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 4.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 798.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 4.0, 'lits_conflict': 2.0, 'lits_loop': 0.0, 'lits_other': 8.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 2.0, 'levels_bounded': 1.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.10571670532226562, 'cpu': 0.109375, 'solve': 0.0029926300048828125, 'unsat': 0.0029926300048828125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.0625762939453125, 'cpu': 1.359375, 'solve': 0.095001220703125, 'unsat': 0.04117393493652344, 'sat': 0.02886962890625}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3466.0, 'conflicts': 1291.0, 'conflicts_analyzed': 1250.0, 'restarts': 0.0, 'restarts_last': 75.0, 'extra': {'domain_choices': 1140.0, 'models': 5.0, 'models_level': 458.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1149.0, 'distributed_sum_lbd': 2700.0, 'integrated': 6526.0, 'lemmas': 8897.0, 'lits_learnt': 88054.0, 'lemmas_binary': 692.0, 'lemmas_ternary': 384.0, 'cpu_time': 0.328125, 'integrated_imps': 2589.0, 'integrated_jumps': 872.0, 'guiding_paths_lits': 5767.0, 'guiding_paths': 80.0, 'splits': 0.0, 'lemmas_conflict': 1180.0, 'lemmas_loop': 2166.0, 'lemmas_other': 5551.0, 'lits_conflict': 13127.0, 'lits_loop': 15961.0, 'lits_other': 58966.0, 'jumps': {'jumps': 1250.0, 'jumps_bounded': 345.0, 'levels': 5870.0, 'levels_bounded': 4415.0, 'max': 124.0, 'max_executed': 124.0, 'max_bounded': 122.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.083739s.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.085959s with result Satisfiable.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1696977000000004, Incremental time limit = None
Running cumulative time = 1.1824125000000016, Cumulative time limit = 3600
Used memory = (RSS = 168.132812Mb, VMS = 156.894531Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.919274s, Solving = 0.263138s, Total = 1.182413s, Memory = (RSS = 168.132812Mb, VMS = 156.894531Mb)), Calls = 12
Final Model :: Total atoms = 7277, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.9192744000000017, solving_time=0.26313809999999993, total_time=1.1824125000000016, memory=Memory(rss=168.1328125, vms=156.89453125), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08373860000000022, solving_time=0.08595910000000018, total_time=0.1696977000000004, memory=Memory(rss=168.1328125, vms=156.89453125), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 31711.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 175213.0, 'bodies_tr': 175213.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2218.0, 'count_bodies_tr': 2218.0, 'sccs': 214.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3748.0, 'rules': 331038.0, 'rules_normal': 328879.0, 'rules_choice': 2003.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 330998.0, 'rules_tr_normal': 328879.0, 'rules_tr_choice': 2003.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 104.0, 'eqs': 65141.0, 'eqs_atom': 14084.0, 'eqs_body': 3508.0, 'eqs_other': 47549.0}, 'lpStep': {'atoms': 2310.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15065.0, 'bodies_tr': 15065.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27870.0, 'rules_normal': 27705.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27870.0, 'rules_tr_normal': 27705.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5026.0, 'eqs_atom': 1083.0, 'eqs_body': 116.0, 'eqs_other': 3827.0}, 'generator': {'vars': 15534.0, 'vars_eliminated': 0.0, 'vars_frozen': 10008.0, 'constraints': 3437.0, 'constraints_binary': 115108.0, 'constraints_ternary': 13456.0, 'acyc_edges': 0.0, 'complexity': 132601.0}}, 'solving': {'solvers': {'choices': 2071.0, 'conflicts': 455.0, 'conflicts_analyzed': 455.0, 'restarts': 1.0, 'restarts_last': 84.0, 'extra': {'domain_choices': 750.0, 'models': 1.0, 'models_level': 227.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 430.0, 'distributed_sum_lbd': 1093.0, 'integrated': 2406.0, 'lemmas': 3415.0, 'lits_learnt': 46830.0, 'lemmas_binary': 385.0, 'lemmas_ternary': 105.0, 'cpu_time': 0.25, 'integrated_imps': 759.0, 'integrated_jumps': 822.0, 'guiding_paths_lits': 1008.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 445.0, 'lemmas_loop': 687.0, 'lemmas_other': 2283.0, 'lits_conflict': 6547.0, 'lits_loop': 5512.0, 'lits_other': 34771.0, 'jumps': {'jumps': 455.0, 'jumps_bounded': 51.0, 'levels': 1141.0, 'levels_bounded': 480.0, 'max': 146.0, 'max_executed': 146.0, 'max_bounded': 144.0}}}}, 'summary': {'call': 12.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.17254066467285156, 'cpu': 0.359375, 'solve': 0.07480239868164062, 'unsat': 0.0, 'sat': 0.034908294677734375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.235116958618164, 'cpu': 1.71875, 'solve': 0.16980361938476562, 'unsat': 0.04117393493652344, 'sat': 0.06377792358398438}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 5537.0, 'conflicts': 1746.0, 'conflicts_analyzed': 1705.0, 'restarts': 1.0, 'restarts_last': 84.0, 'extra': {'domain_choices': 1890.0, 'models': 6.0, 'models_level': 685.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 1579.0, 'distributed_sum_lbd': 3793.0, 'integrated': 8932.0, 'lemmas': 12312.0, 'lits_learnt': 134884.0, 'lemmas_binary': 1077.0, 'lemmas_ternary': 489.0, 'cpu_time': 0.578125, 'integrated_imps': 3348.0, 'integrated_jumps': 1694.0, 'guiding_paths_lits': 6775.0, 'guiding_paths': 87.0, 'splits': 0.0, 'lemmas_conflict': 1625.0, 'lemmas_loop': 2853.0, 'lemmas_other': 7834.0, 'lits_conflict': 19674.0, 'lits_loop': 21473.0, 'lits_other': 93737.0, 'jumps': {'jumps': 1705.0, 'jumps_bounded': 396.0, 'levels': 7011.0, 'levels_bounded': 4895.0, 'max': 146.0, 'max_executed': 146.0, 'max_bounded': 144.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 6, 4: 10, 5: 12}

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 6 ( 66.67% solved)

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 12)', truth=True, inc_range=None)

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 12]:
sub_goal(3, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 6)

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.090930s.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 13: original = External(symbol='current_last_sgoals(6, 12)', truth=True, inc_range=None), conversion = current_last_sgoals(6,12).

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025122s with result Satisfiable.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11605169999999987, Incremental time limit = None
Running cumulative time = 1.2984642000000015, Cumulative time limit = 3600
Used memory = (RSS = 173.589844Mb, VMS = 161.992188Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.010205s, Solving = 0.288260s, Total = 1.298464s, Memory = (RSS = 173.589844Mb, VMS = 161.992188Mb)), Calls = 13
Final Model :: Total atoms = 7615, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.0102045000000013, solving_time=0.28825970000000023, total_time=1.2984642000000015, memory=Memory(rss=173.58984375, vms=161.9921875), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09093009999999957, solving_time=0.0251216000000003, total_time=0.11605169999999987, memory=Memory(rss=173.58984375, vms=161.9921875), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 34030.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 190291.0, 'bodies_tr': 190291.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2399.0, 'count_bodies_tr': 2399.0, 'sccs': 234.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4184.0, 'rules': 358957.0, 'rules_normal': 356633.0, 'rules_choice': 2155.0, 'rules_minimize': 13.0, 'rules_acyc': 0.0, 'rules_heuristic': 156.0, 'rules_tr': 358917.0, 'rules_tr_normal': 356633.0, 'rules_tr_choice': 2155.0, 'rules_tr_minimize': 13.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 116.0, 'eqs': 70197.0, 'eqs_atom': 15170.0, 'eqs_body': 3625.0, 'eqs_other': 51402.0}, 'lpStep': {'atoms': 2319.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15078.0, 'bodies_tr': 15078.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27919.0, 'rules_normal': 27754.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27919.0, 'rules_tr_normal': 27754.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5056.0, 'eqs_atom': 1086.0, 'eqs_body': 117.0, 'eqs_other': 3853.0}, 'generator': {'vars': 17299.0, 'vars_eliminated': 0.0, 'vars_frozen': 11111.0, 'constraints': 3823.0, 'constraints_binary': 128041.0, 'constraints_ternary': 14987.0, 'acyc_edges': 0.0, 'complexity': 147517.0}}, 'solving': {'solvers': {'choices': 659.0, 'conflicts': 2.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 9.0, 'models': 1.0, 'models_level': 244.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 5.0, 'integrated': 12.0, 'lemmas': 109.0, 'lits_learnt': 966.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 5.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1085.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 96.0, 'lemmas_other': 11.0, 'lits_conflict': 36.0, 'lits_loop': 716.0, 'lits_other': 214.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 1.0, 'levels': 3.0, 'levels_bounded': 1.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 13.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.11818885803222656, 'cpu': 0.109375, 'solve': 0.012966156005859375, 'unsat': 0.0, 'sat': 0.0049896240234375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.3533058166503906, 'cpu': 1.828125, 'solve': 0.182769775390625, 'unsat': 0.04117393493652344, 'sat': 0.06876754760742188}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6196.0, 'conflicts': 1748.0, 'conflicts_analyzed': 1707.0, 'restarts': 1.0, 'restarts_last': 84.0, 'extra': {'domain_choices': 1899.0, 'models': 7.0, 'models_level': 929.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 1581.0, 'distributed_sum_lbd': 3798.0, 'integrated': 8944.0, 'lemmas': 12421.0, 'lits_learnt': 135850.0, 'lemmas_binary': 1083.0, 'lemmas_ternary': 489.0, 'cpu_time': 0.578125, 'integrated_imps': 3353.0, 'integrated_jumps': 1694.0, 'guiding_paths_lits': 7860.0, 'guiding_paths': 94.0, 'splits': 0.0, 'lemmas_conflict': 1627.0, 'lemmas_loop': 2949.0, 'lemmas_other': 7845.0, 'lits_conflict': 19710.0, 'lits_loop': 22189.0, 'lits_other': 93951.0, 'jumps': {'jumps': 1707.0, 'jumps_bounded': 397.0, 'levels': 7014.0, 'levels_bounded': 4896.0, 'max': 146.0, 'max_executed': 146.0, 'max_bounded': 144.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 6, 4: 10, 5: 12, 6: 13}

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 7 ( 77.78% solved)

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 13)', truth=True, inc_range=None)

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 13]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 7)

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.092957s.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 14: original = External(symbol='current_last_sgoals(7, 13)', truth=True, inc_range=None), conversion = current_last_sgoals(7,13).

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029226s with result Satisfiable.

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12218359999999961, Incremental time limit = None
Running cumulative time = 1.4206478000000011, Cumulative time limit = 3600
Used memory = (RSS = 182.000000Mb, VMS = 172.695312Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.103162s, Solving = 0.317486s, Total = 1.420648s, Memory = (RSS = 182.000000Mb, VMS = 172.695312Mb)), Calls = 14
Final Model :: Total atoms = 7954, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.1031618000000014, solving_time=0.3174859999999997, total_time=1.4206478000000011, memory=Memory(rss=182.0, vms=172.6953125), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09295730000000013, solving_time=0.029226299999999483, total_time=0.12218359999999961, memory=Memory(rss=182.0, vms=172.6953125), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 36352.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 205388.0, 'bodies_tr': 205388.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2580.0, 'count_bodies_tr': 2580.0, 'sccs': 254.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4620.0, 'rules': 386931.0, 'rules_normal': 384442.0, 'rules_choice': 2307.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 168.0, 'rules_tr': 386891.0, 'rules_tr_normal': 384442.0, 'rules_tr_choice': 2307.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 128.0, 'eqs': 75299.0, 'eqs_atom': 16265.0, 'eqs_body': 3741.0, 'eqs_other': 55293.0}, 'lpStep': {'atoms': 2322.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15097.0, 'bodies_tr': 15097.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27974.0, 'rules_normal': 27809.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27974.0, 'rules_tr_normal': 27809.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5102.0, 'eqs_atom': 1095.0, 'eqs_body': 116.0, 'eqs_other': 3891.0}, 'generator': {'vars': 19064.0, 'vars_eliminated': 0.0, 'vars_frozen': 12214.0, 'constraints': 4308.0, 'constraints_binary': 144576.0, 'constraints_ternary': 17071.0, 'acyc_edges': 0.0, 'complexity': 166691.0}}, 'solving': {'solvers': {'choices': 699.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 7.0, 'models': 1.0, 'models_level': 274.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 103.0, 'lits_learnt': 898.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1162.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 103.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 898.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 14.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.12566375732421875, 'cpu': 0.140625, 'solve': 0.01795196533203125, 'unsat': 0.0, 'sat': 0.0059871673583984375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.4789695739746094, 'cpu': 1.96875, 'solve': 0.20072174072265625, 'unsat': 0.04117393493652344, 'sat': 0.07475471496582031}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6895.0, 'conflicts': 1748.0, 'conflicts_analyzed': 1707.0, 'restarts': 1.0, 'restarts_last': 84.0, 'extra': {'domain_choices': 1906.0, 'models': 8.0, 'models_level': 1203.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 1581.0, 'distributed_sum_lbd': 3798.0, 'integrated': 8944.0, 'lemmas': 12524.0, 'lits_learnt': 136748.0, 'lemmas_binary': 1083.0, 'lemmas_ternary': 489.0, 'cpu_time': 0.609375, 'integrated_imps': 3353.0, 'integrated_jumps': 1694.0, 'guiding_paths_lits': 9022.0, 'guiding_paths': 101.0, 'splits': 0.0, 'lemmas_conflict': 1627.0, 'lemmas_loop': 3052.0, 'lemmas_other': 7845.0, 'lits_conflict': 19710.0, 'lits_loop': 23087.0, 'lits_other': 93951.0, 'jumps': {'jumps': 1707.0, 'jumps_bounded': 397.0, 'levels': 7014.0, 'levels_bounded': 4896.0, 'max': 146.0, 'max_executed': 146.0, 'max_bounded': 144.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 6, 4: 10, 5: 12, 6: 13, 7: 14}

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 8 ( 88.89% solved)

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 14)', truth=True, inc_range=None)

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 14]:
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 8)

[13-11-2021_23-07-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.087977s.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 15: original = External(symbol='current_last_sgoals(8, 14)', truth=True, inc_range=None), conversion = current_last_sgoals(8,14).

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016805s with result Unsatisfiable.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10478260000000006, Incremental time limit = None
Running cumulative time = 1.5254304000000012, Cumulative time limit = 3600
Used memory = (RSS = 184.984375Mb, VMS = 175.074219Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.1911390000000015, solving_time=0.3342913999999997, total_time=1.5254304000000012, memory=Memory(rss=184.984375, vms=175.07421875), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08797720000000009, solving_time=0.01680539999999997, total_time=0.10478260000000006, memory=Memory(rss=184.984375, vms=175.07421875), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 38683.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 220504.0, 'bodies_tr': 220504.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2761.0, 'count_bodies_tr': 2761.0, 'sccs': 274.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5056.0, 'rules': 414960.0, 'rules_normal': 412306.0, 'rules_choice': 2459.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 414920.0, 'rules_tr_normal': 412306.0, 'rules_tr_choice': 2459.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 140.0, 'eqs': 80449.0, 'eqs_atom': 17369.0, 'eqs_body': 3858.0, 'eqs_other': 59222.0}, 'lpStep': {'atoms': 2331.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15116.0, 'bodies_tr': 15116.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28029.0, 'rules_normal': 27864.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28029.0, 'rules_tr_normal': 27864.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5150.0, 'eqs_atom': 1104.0, 'eqs_body': 117.0, 'eqs_other': 3929.0}, 'generator': {'vars': 20829.0, 'vars_eliminated': 0.0, 'vars_frozen': 13317.0, 'constraints': 4793.0, 'constraints_binary': 161145.0, 'constraints_ternary': 19041.0, 'acyc_edges': 0.0, 'complexity': 185785.0}}, 'solving': {'solvers': {'choices': 7.0, 'conflicts': 15.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 7.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 14.0, 'integrated': 0.0, 'lemmas': 7.0, 'lits_learnt': 252.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1239.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 252.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 7.0, 'levels': 14.0, 'levels_bounded': 7.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 15.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.10768890380859375, 'cpu': 0.109375, 'solve': 0.0049915313720703125, 'unsat': 0.0049915313720703125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.5866584777832031, 'cpu': 2.078125, 'solve': 0.20571327209472656, 'unsat': 0.04616546630859375, 'sat': 0.07475471496582031}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6902.0, 'conflicts': 1763.0, 'conflicts_analyzed': 1714.0, 'restarts': 1.0, 'restarts_last': 84.0, 'extra': {'domain_choices': 1913.0, 'models': 8.0, 'models_level': 1203.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 1588.0, 'distributed_sum_lbd': 3812.0, 'integrated': 8944.0, 'lemmas': 12531.0, 'lits_learnt': 137000.0, 'lemmas_binary': 1083.0, 'lemmas_ternary': 489.0, 'cpu_time': 0.609375, 'integrated_imps': 3353.0, 'integrated_jumps': 1694.0, 'guiding_paths_lits': 10261.0, 'guiding_paths': 108.0, 'splits': 0.0, 'lemmas_conflict': 1634.0, 'lemmas_loop': 3052.0, 'lemmas_other': 7845.0, 'lits_conflict': 19962.0, 'lits_loop': 23087.0, 'lits_other': 93951.0, 'jumps': {'jumps': 1714.0, 'jumps_bounded': 404.0, 'levels': 7028.0, 'levels_bounded': 4903.0, 'max': 146.0, 'max_executed': 146.0, 'max_bounded': 144.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.095861s.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.090050s with result Satisfiable.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.18591080000000026, Incremental time limit = None
Running cumulative time = 1.7113412000000015, Cumulative time limit = 3600
Used memory = (RSS = 189.554688Mb, VMS = 179.554688Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.287000s, Solving = 0.424341s, Total = 1.711341s, Memory = (RSS = 189.554688Mb, VMS = 179.554688Mb)), Calls = 16
Final Model :: Total atoms = 8631, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.2870002000000014, solving_time=0.4243410000000001, total_time=1.7113412000000015, memory=Memory(rss=189.5546875, vms=179.5546875), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09586119999999987, solving_time=0.0900496000000004, total_time=0.18591080000000026, memory=Memory(rss=189.5546875, vms=179.5546875), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 41023.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 235639.0, 'bodies_tr': 235639.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2942.0, 'count_bodies_tr': 2942.0, 'sccs': 294.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5492.0, 'rules': 443044.0, 'rules_normal': 440225.0, 'rules_choice': 2611.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 192.0, 'rules_tr': 443004.0, 'rules_tr_normal': 440225.0, 'rules_tr_choice': 2611.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 152.0, 'eqs': 85645.0, 'eqs_atom': 18482.0, 'eqs_body': 3974.0, 'eqs_other': 63189.0}, 'lpStep': {'atoms': 2340.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15135.0, 'bodies_tr': 15135.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28084.0, 'rules_normal': 27919.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28084.0, 'rules_tr_normal': 27919.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5196.0, 'eqs_atom': 1113.0, 'eqs_body': 116.0, 'eqs_other': 3967.0}, 'generator': {'vars': 22594.0, 'vars_eliminated': 0.0, 'vars_frozen': 14420.0, 'constraints': 5278.0, 'constraints_binary': 177760.0, 'constraints_ternary': 21011.0, 'acyc_edges': 0.0, 'complexity': 204925.0}}, 'solving': {'solvers': {'choices': 2308.0, 'conflicts': 629.0, 'conflicts_analyzed': 629.0, 'restarts': 3.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 1162.0, 'models': 1.0, 'models_level': 304.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 593.0, 'distributed_sum_lbd': 1709.0, 'integrated': 3558.0, 'lemmas': 4943.0, 'lits_learnt': 95152.0, 'lemmas_binary': 430.0, 'lemmas_ternary': 196.0, 'cpu_time': 0.46875, 'integrated_imps': 866.0, 'integrated_jumps': 693.0, 'guiding_paths_lits': 1316.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 623.0, 'lemmas_loop': 869.0, 'lemmas_other': 3451.0, 'lits_conflict': 13930.0, 'lits_loop': 7070.0, 'lits_other': 74152.0, 'jumps': {'jumps': 629.0, 'jumps_bounded': 25.0, 'levels': 1218.0, 'levels_bounded': 399.0, 'max': 189.0, 'max_executed': 189.0, 'max_bounded': 188.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.18849563598632812, 'cpu': 0.578125, 'solve': 0.07779312133789062, 'unsat': 0.0, 'sat': 0.06682586669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.7751541137695312, 'cpu': 2.65625, 'solve': 0.2835063934326172, 'unsat': 0.04616546630859375, 'sat': 0.14158058166503906}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 9210.0, 'conflicts': 2392.0, 'conflicts_analyzed': 2343.0, 'restarts': 4.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 3075.0, 'models': 9.0, 'models_level': 1507.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 2181.0, 'distributed_sum_lbd': 5521.0, 'integrated': 12502.0, 'lemmas': 17474.0, 'lits_learnt': 232152.0, 'lemmas_binary': 1513.0, 'lemmas_ternary': 685.0, 'cpu_time': 1.078125, 'integrated_imps': 4219.0, 'integrated_jumps': 2387.0, 'guiding_paths_lits': 11577.0, 'guiding_paths': 115.0, 'splits': 0.0, 'lemmas_conflict': 2257.0, 'lemmas_loop': 3921.0, 'lemmas_other': 11296.0, 'lits_conflict': 33892.0, 'lits_loop': 30157.0, 'lits_other': 168103.0, 'jumps': {'jumps': 2343.0, 'jumps_bounded': 429.0, 'levels': 8246.0, 'levels_bounded': 5302.0, 'max': 189.0, 'max_executed': 189.0, 'max_bounded': 188.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 6, 4: 10, 5: 12, 6: 13, 7: 14, 8: 16}

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 9 (100.00% solved)

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 16)', truth=True, inc_range=None)

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 16]:
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 9)

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.095238s.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 17: original = External(symbol='current_last_sgoals(9, 16)', truth=True, inc_range=None), conversion = current_last_sgoals(9,16).

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035837s with result Satisfiable.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1310753000000009, Incremental time limit = None
Running cumulative time = 1.8424165000000023, Cumulative time limit = 3600
Used memory = (RSS = 194.093750Mb, VMS = 183.597656Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.382238s, Solving = 0.460178s, Total = 1.842417s, Memory = (RSS = 194.093750Mb, VMS = 183.597656Mb)), Calls = 17
Final Model :: Total atoms = 8972, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.3822383000000018, solving_time=0.46017820000000054, total_time=1.8424165000000023, memory=Memory(rss=194.09375, vms=183.59765625), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09523810000000044, solving_time=0.03583720000000046, total_time=0.1310753000000009, memory=Memory(rss=194.09375, vms=183.59765625), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 43372.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 250793.0, 'bodies_tr': 250793.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3123.0, 'count_bodies_tr': 3123.0, 'sccs': 314.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5928.0, 'rules': 471183.0, 'rules_normal': 468199.0, 'rules_choice': 2763.0, 'rules_minimize': 17.0, 'rules_acyc': 0.0, 'rules_heuristic': 204.0, 'rules_tr': 471143.0, 'rules_tr_normal': 468199.0, 'rules_tr_choice': 2763.0, 'rules_tr_minimize': 17.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 164.0, 'eqs': 90889.0, 'eqs_atom': 19604.0, 'eqs_body': 4091.0, 'eqs_other': 67194.0}, 'lpStep': {'atoms': 2349.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15154.0, 'bodies_tr': 15154.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28139.0, 'rules_normal': 27974.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28139.0, 'rules_tr_normal': 27974.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5244.0, 'eqs_atom': 1122.0, 'eqs_body': 117.0, 'eqs_other': 4005.0}, 'generator': {'vars': 24359.0, 'vars_eliminated': 0.0, 'vars_frozen': 15523.0, 'constraints': 5762.0, 'constraints_binary': 194057.0, 'constraints_ternary': 22941.0, 'acyc_edges': 0.0, 'complexity': 223706.0}}, 'solving': {'solvers': {'choices': 843.0, 'conflicts': 3.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 15.0, 'models': 1.0, 'models_level': 322.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 8.0, 'integrated': 18.0, 'lemmas': 101.0, 'lits_learnt': 1338.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 5.0, 'integrated_jumps': 5.0, 'guiding_paths_lits': 1393.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 84.0, 'lemmas_other': 14.0, 'lits_conflict': 93.0, 'lits_loop': 826.0, 'lits_other': 419.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 1.0, 'levels': 4.0, 'levels_bounded': 1.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.1341571807861328, 'cpu': 0.15625, 'solve': 0.021453857421875, 'unsat': 0.0, 'sat': 0.006984710693359375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.909311294555664, 'cpu': 2.8125, 'solve': 0.3049602508544922, 'unsat': 0.04616546630859375, 'sat': 0.14856529235839844}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 10053.0, 'conflicts': 2395.0, 'conflicts_analyzed': 2346.0, 'restarts': 4.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 3090.0, 'models': 10.0, 'models_level': 1829.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 2184.0, 'distributed_sum_lbd': 5529.0, 'integrated': 12520.0, 'lemmas': 17575.0, 'lits_learnt': 233490.0, 'lemmas_binary': 1519.0, 'lemmas_ternary': 685.0, 'cpu_time': 1.109375, 'integrated_imps': 4224.0, 'integrated_jumps': 2392.0, 'guiding_paths_lits': 12970.0, 'guiding_paths': 122.0, 'splits': 0.0, 'lemmas_conflict': 2260.0, 'lemmas_loop': 4005.0, 'lemmas_other': 11310.0, 'lits_conflict': 33985.0, 'lits_loop': 30983.0, 'lits_other': 168522.0, 'jumps': {'jumps': 2346.0, 'jumps_bounded': 430.0, 'levels': 8250.0, 'levels_bounded': 5303.0, 'max': 189.0, 'max_executed': 189.0, 'max_bounded': 188.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 6, 4: 10, 5: 12, 6: 13, 7: 14, 8: 16, 9: 17}

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 10 (111.11% solved)

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 9 was achieved successfully.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.083337s, Solving = 0.009690s, Total = 0.093028s, Memory = (RSS = 128.449219Mb, VMS = 117.886719Mb)
2 : Statistics :: Grounding = 0.070032s, Solving = 0.010892s, Total = 0.080923s, Memory = (RSS = 131.464844Mb, VMS = 121.285156Mb)
3 : Statistics :: Grounding = 0.066464s, Solving = 0.005977s, Total = 0.072440s, Memory = (RSS = 132.433594Mb, VMS = 122.277344Mb)
4 : Statistics :: Grounding = 0.067562s, Solving = 0.012283s, Total = 0.079845s, Memory = (RSS = 134.851562Mb, VMS = 124.191406Mb)
5 : Statistics :: Grounding = 0.067549s, Solving = 0.008519s, Total = 0.076067s, Memory = (RSS = 137.468750Mb, VMS = 127.238281Mb)
6 : Statistics :: Grounding = 0.076702s, Solving = 0.015721s, Total = 0.092423s, Memory = (RSS = 139.410156Mb, VMS = 128.785156Mb)
7 : Statistics :: Grounding = 0.072649s, Solving = 0.012010s, Total = 0.084658s, Memory = (RSS = 144.605469Mb, VMS = 133.652344Mb)
8 : Statistics :: Grounding = 0.073103s, Solving = 0.024707s, Total = 0.097810s, Memory = (RSS = 150.875000Mb, VMS = 140.390625Mb)
9 : Statistics :: Grounding = 0.088455s, Solving = 0.023514s, Total = 0.111969s, Memory = (RSS = 154.734375Mb, VMS = 143.066406Mb)
10 : Statistics :: Grounding = 0.079947s, Solving = 0.040438s, Total = 0.120386s, Memory = (RSS = 160.808594Mb, VMS = 150.800781Mb)
11 : Statistics :: Grounding = 0.089736s, Solving = 0.013429s, Total = 0.103164s, Memory = (RSS = 164.039062Mb, VMS = 153.152344Mb)
12 : Statistics :: Grounding = 0.083739s, Solving = 0.085959s, Total = 0.169698s, Memory = (RSS = 168.132812Mb, VMS = 156.894531Mb)
13 : Statistics :: Grounding = 0.090930s, Solving = 0.025122s, Total = 0.116052s, Memory = (RSS = 173.589844Mb, VMS = 161.992188Mb)
14 : Statistics :: Grounding = 0.092957s, Solving = 0.029226s, Total = 0.122184s, Memory = (RSS = 182.000000Mb, VMS = 172.695312Mb)
15 : Statistics :: Grounding = 0.087977s, Solving = 0.016805s, Total = 0.104783s, Memory = (RSS = 184.984375Mb, VMS = 175.074219Mb)
16 : Statistics :: Grounding = 0.095861s, Solving = 0.090050s, Total = 0.185911s, Memory = (RSS = 189.554688Mb, VMS = 179.554688Mb)
17 : Statistics :: Grounding = 0.095238s, Solving = 0.035837s, Total = 0.131075s, Memory = (RSS = 194.093750Mb, VMS = 183.597656Mb)

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.842417s due to: External generator exit.

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 2.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 5, 12: 5, 13: 5, 14: 6, 15: 7, 16: 8, 17: 9}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 10, 5: 13, 6: 14, 7: 15, 8: 16, 9: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 9, Last requested goal index = 9 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.382238s, Solving = 0.460178s, Total = 1.842417s, Memory = (RSS = 194.093750Mb, VMS = 183.597656Mb)), Calls = 17
Model :: Total atoms = 8972, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 17 :: Actions = 17                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 3:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 4:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 7:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 8:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 9:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 10:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 11:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 14:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 15:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 16:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 17:
    Current Sub-goals:
        [Index = 9] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 9] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=17, step_range=range(0, 18)

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 0, Actions = 0
Level [2]: Length = 17, Actions = 17
Level [3]: Length = 18, Actions = 18

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  2 (par-ref), Length =  17, Actions =  17 (Com = 1.00), Sgs = 17, Time =   1.872s (Gro =   1.407s, Sea =   0.465s), Expan (1.89, 1.89) (Dev = (1.05, 1.05), Bal = (0.56, 0.56))

[13-11-2021_23-07-17] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=17, start_step=0, blend=Blend(left=0, right=0)

[13-11-2021_23-07-17] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=8, large_group_size=9

[13-11-2021_23-07-17] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=8, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  17 (Com = 1.00), Sgs = 17, Time =   1.872s (Gro =   1.407s, Sea =   0.465s), Expan (1.89, 1.89) (Dev = (1.05, 1.05), Bal = (0.56, 0.56))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 1:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  17 (Com = 1.00), Sgs = 17, Time =   1.872s (Gro =   1.407s, Sea =   0.465s), Expan (1.89, 1.89) (Dev = (1.05, 1.05), Bal = (0.56, 0.56))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-8]

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-8], problem number = 1, increment number = 1

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 8)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 8
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 7

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency disabled : Problem type = partial conformance refinement (sequential) with sgoals range [1-8] : Minimum search length bound = disabled with value = 7

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = True, chosen = True

[13-11-2021_23-07-17] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-11-2021_23-07-17] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete(blue), false, 0).
holds(1, complete(red), false, 0).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(1, configuration(manipulator_limb_1), retracted, 0).
holds(1, configuration(manipulator_limb_2), retracted, 0).
holds(1, configuration(puzzle_room_door), closed, 0).
holds(1, configuration(starting_room_door), closed, 0).
holds(1, configuration(store_room_door), closed, 0).
holds(1, grasping(manipulator_arm_1), nothing, 0).
holds(1, grasping(manipulator_arm_2), nothing, 0).
holds(1, grasping(manipulator_end_1), nothing, 0).
holds(1, grasping(manipulator_end_2), nothing, 0).
holds(1, in((block,1)), (puzzle_room,1), 0).
holds(1, in((block,2)), (puzzle_room,1), 0).
holds(1, in((block,3)), (puzzle_room,1), 0).
holds(1, in((block,4)), (puzzle_room,1), 0).
holds(1, in((block,5)), (store_room,0), 0).
holds(1, in((block,6)), (store_room,0), 0).
holds(1, in(manipulator_arm_1), (starting_room,0), 0).
holds(1, in(manipulator_arm_2), (starting_room,0), 0).
holds(1, in(manipulator_end_1), (starting_room,0), 0).
holds(1, in(manipulator_end_2), (starting_room,0), 0).
holds(1, in(manipulator_limb_1), (starting_room,0), 0).
holds(1, in(manipulator_limb_2), (starting_room,0), 0).
holds(1, in(puzzle_room_table), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0).
holds(1, in(talos), (starting_room,0), 0).
holds(1, in_tower((block,1),(block,1)), true, 0).
holds(1, in_tower((block,1),(block,2)), false, 0).
holds(1, in_tower((block,1),(block,3)), true, 0).
holds(1, in_tower((block,1),(block,4)), false, 0).
holds(1, in_tower((block,1),(block,5)), false, 0).
holds(1, in_tower((block,1),(block,6)), false, 0).
holds(1, in_tower((block,2),(block,1)), false, 0).
holds(1, in_tower((block,2),(block,2)), true, 0).
holds(1, in_tower((block,2),(block,3)), false, 0).
holds(1, in_tower((block,2),(block,4)), true, 0).
holds(1, in_tower((block,2),(block,5)), false, 0).
holds(1, in_tower((block,2),(block,6)), false, 0).
holds(1, in_tower((block,3),(block,1)), false, 0).
holds(1, in_tower((block,3),(block,2)), false, 0).
holds(1, in_tower((block,3),(block,3)), false, 0).
holds(1, in_tower((block,3),(block,4)), false, 0).
holds(1, in_tower((block,3),(block,5)), false, 0).
holds(1, in_tower((block,3),(block,6)), false, 0).
holds(1, in_tower((block,4),(block,1)), false, 0).
holds(1, in_tower((block,4),(block,2)), false, 0).
holds(1, in_tower((block,4),(block,3)), false, 0).
holds(1, in_tower((block,4),(block,4)), false, 0).
holds(1, in_tower((block,4),(block,5)), false, 0).
holds(1, in_tower((block,4),(block,6)), false, 0).
holds(1, in_tower((block,5),(block,1)), false, 0).
holds(1, in_tower((block,5),(block,2)), false, 0).
holds(1, in_tower((block,5),(block,3)), false, 0).
holds(1, in_tower((block,5),(block,4)), false, 0).
holds(1, in_tower((block,5),(block,5)), false, 0).
holds(1, in_tower((block,5),(block,6)), false, 0).
holds(1, in_tower((block,6),(block,1)), false, 0).
holds(1, in_tower((block,6),(block,2)), false, 0).
holds(1, in_tower((block,6),(block,3)), false, 0).
holds(1, in_tower((block,6),(block,4)), false, 0).
holds(1, in_tower((block,6),(block,5)), false, 0).
holds(1, in_tower((block,6),(block,6)), false, 0).
holds(1, on((block,1)), puzzle_room_table_left, 0).
holds(1, on((block,2)), puzzle_room_table_right, 0).
holds(1, on((block,3)), (block,1), 0).
holds(1, on((block,4)), (block,2), 0).
holds(1, on((block,5)), nothing, 0).
holds(1, on((block,6)), nothing, 0).
holds(1, tower_base((block,1)), true, 0).
holds(1, tower_base((block,2)), true, 0).
holds(1, tower_base((block,3)), false, 0).
holds(1, tower_base((block,4)), false, 0).
holds(1, tower_base((block,5)), false, 0).
holds(1, tower_base((block,6)), false, 0).
holds(1, unordered_tower((block,1)), true, 0).
holds(1, unordered_tower((block,2)), true, 0).
holds(1, unordered_tower((block,3)), false, 0).
holds(1, unordered_tower((block,4)), false, 0).
holds(1, unordered_tower((block,5)), false, 0).
holds(1, unordered_tower((block,6)), false, 0).
holds(2, complete(blue), false, 0).
holds(2, complete(red), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), puzzle_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), true, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), (block,2), 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1)), true, 0).
holds(2, tower_base((block,2)), true, 0).
holds(2, tower_base((block,3)), false, 0).
holds(2, tower_base((block,4)), false, 0).
holds(2, tower_base((block,5)), false, 0).
holds(2, tower_base((block,6)), false, 0).
holds(2, unordered_tower((block,1)), true, 0).
holds(2, unordered_tower((block,2)), true, 0).
holds(2, unordered_tower((block,3)), false, 0).
holds(2, unordered_tower((block,4)), false, 0).
holds(2, unordered_tower((block,5)), false, 0).
holds(2, unordered_tower((block,6)), false, 0).

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete(blue), false, false).
final_goal(1, complete(blue), true, true).
final_goal(1, complete(red), false, false).
final_goal(1, complete(red), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1)), false, true).
final_goal(1, tower_base((block,1)), true, false).
final_goal(1, tower_base((block,2)), false, true).
final_goal(1, tower_base((block,2)), true, false).
final_goal(1, tower_base((block,3)), false, false).
final_goal(1, tower_base((block,3)), true, true).
final_goal(1, tower_base((block,4)), false, true).
final_goal(1, tower_base((block,4)), true, false).
final_goal(1, tower_base((block,5)), false, true).
final_goal(1, tower_base((block,5)), true, false).
final_goal(1, tower_base((block,6)), false, false).
final_goal(1, tower_base((block,6)), true, true).
final_goal(1, unordered_tower((block,1)), false, true).
final_goal(1, unordered_tower((block,1)), true, false).
final_goal(1, unordered_tower((block,2)), false, true).
final_goal(1, unordered_tower((block,2)), true, false).
final_goal(1, unordered_tower((block,3)), false, true).
final_goal(1, unordered_tower((block,3)), true, false).
final_goal(1, unordered_tower((block,4)), false, true).
final_goal(1, unordered_tower((block,4)), true, false).
final_goal(1, unordered_tower((block,5)), false, true).
final_goal(1, unordered_tower((block,5)), true, false).
final_goal(1, unordered_tower((block,6)), false, true).
final_goal(1, unordered_tower((block,6)), true, false).
final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 1})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 7})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 8})

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 8 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 1).
sub_goal(2, talos, move(store_room), in(talos), store_room, 2).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 3).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 4).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 5).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 6).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 7).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 8).

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x00000162C2F48EE0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 'none', 'sequential', 'true'), range_=None)]

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 806 rules

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.007876500000000064s

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.036633s.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006654s with result Satisfiable.

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000162C79EC770>

[13-11-2021_23-07-17] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 0)
	('last_sgoals', 8)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000162C79EC770>)

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.136291s.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013925s with result Unsatisfiable.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.15021660000000026, Incremental time limit = None
Running cumulative time = 0.15021660000000026, Cumulative time limit = 3600
Used memory = (RSS = 203.917969Mb, VMS = 193.789062Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.1362912000000005, solving_time=0.013925399999999755, total_time=0.15021660000000026, memory=Memory(rss=203.91796875, vms=193.7890625), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1362912000000005, solving_time=0.013925399999999755, total_time=0.15021660000000026, memory=Memory(rss=203.91796875, vms=193.7890625), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 12195.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28207.0, 'bodies_tr': 28207.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 536.0, 'rules': 56766.0, 'rules_normal': 56210.0, 'rules_choice': 543.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 56754.0, 'rules_tr_normal': 56210.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 26325.0, 'eqs_atom': 7034.0, 'eqs_body': 1906.0, 'eqs_other': 17385.0}, 'lpStep': {'atoms': 5680.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25604.0, 'bodies_tr': 25604.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 536.0, 'rules': 49341.0, 'rules_normal': 48785.0, 'rules_choice': 543.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 49329.0, 'rules_tr_normal': 48785.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 13321.0, 'eqs_atom': 2126.0, 'eqs_body': 397.0, 'eqs_other': 10798.0}, 'generator': {'vars': 2367.0, 'vars_eliminated': 0.0, 'vars_frozen': 1514.0, 'constraints': 28.0, 'constraints_binary': 884.0, 'constraints_ternary': 120.0, 'acyc_edges': 0.0, 'complexity': 1048.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 11.0, 'lits_learnt': 12.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 126.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 11.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 12.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.14960098266601562, 'cpu': 0.15625, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2014636993408203, 'cpu': 0.203125, 'solve': 0.0059871673583984375, 'unsat': 0.001995086669921875, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 11.0, 'lits_learnt': 12.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 134.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 11.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 12.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108406s.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010814s with result Satisfiable.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11921930000000014, Incremental time limit = None
Running cumulative time = 0.2694359000000004, Cumulative time limit = 3600
Used memory = (RSS = 206.039062Mb, VMS = 195.734375Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.244697s, Solving = 0.024739s, Total = 0.269436s, Memory = (RSS = 206.039062Mb, VMS = 195.734375Mb)), Calls = 2
Final Model :: Total atoms = 4524, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.2446968000000007, solving_time=0.02473909999999968, total_time=0.2694359000000004, memory=Memory(rss=206.0390625, vms=195.734375), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10840560000000021, solving_time=0.010813699999999926, total_time=0.11921930000000014, memory=Memory(rss=206.0390625, vms=195.734375), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 14034.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49778.0, 'bodies_tr': 49778.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 464.0, 'count_bodies_tr': 464.0, 'sccs': 47.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 712.0, 'rules': 97975.0, 'rules_normal': 97211.0, 'rules_choice': 738.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 97951.0, 'rules_tr_normal': 97211.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 30046.0, 'eqs_atom': 7795.0, 'eqs_body': 2339.0, 'eqs_other': 19912.0}, 'lpStep': {'atoms': 1839.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21571.0, 'bodies_tr': 21571.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176.0, 'rules': 41209.0, 'rules_normal': 41001.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 41197.0, 'rules_tr_normal': 41001.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3721.0, 'eqs_atom': 761.0, 'eqs_body': 433.0, 'eqs_other': 2527.0}, 'generator': {'vars': 2619.0, 'vars_eliminated': 0.0, 'vars_frozen': 1734.0, 'constraints': 115.0, 'constraints_binary': 2715.0, 'constraints_ternary': 210.0, 'acyc_edges': 0.0, 'complexity': 3082.0}}, 'solving': {'solvers': {'choices': 271.0, 'conflicts': 32.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 49.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 39.0, 'distributed_sum_lbd': 46.0, 'integrated': 122.0, 'lemmas': 135.0, 'lits_learnt': 190.0, 'lemmas_binary': 26.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 73.0, 'integrated_jumps': 117.0, 'guiding_paths_lits': 248.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 32.0, 'lemmas_loop': 11.0, 'lemmas_other': 92.0, 'lits_conflict': 32.0, 'lits_loop': 47.0, 'lits_other': 111.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 6.0, 'levels': 222.0, 'levels_bounded': 186.0, 'max': 33.0, 'max_executed': 2.0, 'max_bounded': 31.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.11968231201171875, 'cpu': 0.125, 'solve': 0.005985260009765625, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.32114601135253906, 'cpu': 0.328125, 'solve': 0.011972427368164062, 'unsat': 0.001995086669921875, 'sat': 0.00399017333984375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 271.0, 'conflicts': 32.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 50.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 40.0, 'distributed_sum_lbd': 48.0, 'integrated': 122.0, 'lemmas': 146.0, 'lits_learnt': 202.0, 'lemmas_binary': 27.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 73.0, 'integrated_jumps': 117.0, 'guiding_paths_lits': 382.0, 'guiding_paths': 22.0, 'splits': 0.0, 'lemmas_conflict': 32.0, 'lemmas_loop': 22.0, 'lemmas_other': 92.0, 'lits_conflict': 32.0, 'lits_loop': 59.0, 'lits_other': 111.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 6.0, 'levels': 222.0, 'levels_bounded': 186.0, 'max': 33.0, 'max_executed': 2.0, 'max_bounded': 31.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2}

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 2 ( 25.00% solved)

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None)

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 2]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 2)

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 2:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.093286s.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 3: original = External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None), conversion = current_last_sgoals(2,2).

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007222s with result Unsatisfiable.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10050789999999932, Incremental time limit = None
Running cumulative time = 0.3699437999999997, Cumulative time limit = 3600
Used memory = (RSS = 207.398438Mb, VMS = 197.187500Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.3379828000000007, solving_time=0.03196099999999902, total_time=0.3699437999999997, memory=Memory(rss=207.3984375, vms=197.1875), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09328599999999998, solving_time=0.007221899999999337, total_time=0.10050789999999932, memory=Memory(rss=207.3984375, vms=197.1875), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 16626.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71438.0, 'bodies_tr': 71438.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 666.0, 'count_bodies_tr': 666.0, 'sccs': 60.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 898.0, 'rules': 139402.0, 'rules_normal': 138430.0, 'rules_choice': 933.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 139366.0, 'rules_tr_normal': 138430.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 34602.0, 'eqs_atom': 8644.0, 'eqs_body': 2776.0, 'eqs_other': 23182.0}, 'lpStep': {'atoms': 2592.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21660.0, 'bodies_tr': 21660.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 41427.0, 'rules_normal': 41219.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 41415.0, 'rules_tr_normal': 41219.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4556.0, 'eqs_atom': 849.0, 'eqs_body': 437.0, 'eqs_other': 3270.0}, 'generator': {'vars': 2869.0, 'vars_eliminated': 0.0, 'vars_frozen': 1974.0, 'constraints': 158.0, 'constraints_binary': 2859.0, 'constraints_ternary': 155.0, 'acyc_edges': 0.0, 'complexity': 3236.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 5.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 12.0, 'integrated': 0.0, 'lemmas': 10.0, 'lits_learnt': 48.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 246.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 10.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 48.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.10173225402832031, 'cpu': 0.109375, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4228782653808594, 'cpu': 0.4375, 'solve': 0.013965606689453125, 'unsat': 0.0039882659912109375, 'sat': 0.00399017333984375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 271.0, 'conflicts': 37.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 50.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 46.0, 'distributed_sum_lbd': 60.0, 'integrated': 122.0, 'lemmas': 156.0, 'lits_learnt': 250.0, 'lemmas_binary': 33.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 73.0, 'integrated_jumps': 117.0, 'guiding_paths_lits': 628.0, 'guiding_paths': 28.0, 'splits': 0.0, 'lemmas_conflict': 32.0, 'lemmas_loop': 32.0, 'lemmas_other': 92.0, 'lits_conflict': 32.0, 'lits_loop': 107.0, 'lits_other': 111.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 6.0, 'levels': 222.0, 'levels_bounded': 186.0, 'max': 33.0, 'max_executed': 2.0, 'max_bounded': 31.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 3:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.112117s.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016614s with result Satisfiable.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12873110000000132, Incremental time limit = None
Running cumulative time = 0.49867490000000103, Cumulative time limit = 3600
Used memory = (RSS = 209.386719Mb, VMS = 199.074219Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.450100s, Solving = 0.048575s, Total = 0.498675s, Memory = (RSS = 209.386719Mb, VMS = 199.074219Mb)), Calls = 4
Final Model :: Total atoms = 5269, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.45009980000000116, solving_time=0.04857509999999987, total_time=0.49867490000000103, memory=Memory(rss=209.38671875, vms=199.07421875), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11211700000000047, solving_time=0.016614100000000853, total_time=0.12873110000000132, memory=Memory(rss=209.38671875, vms=199.07421875), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 19226.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 93375.0, 'bodies_tr': 93375.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 868.0, 'count_bodies_tr': 868.0, 'sccs': 73.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1132.0, 'rules': 181699.0, 'rules_normal': 180519.0, 'rules_choice': 1128.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 48.0, 'rules_tr': 181651.0, 'rules_tr_normal': 180519.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 41494.0, 'eqs_atom': 10094.0, 'eqs_body': 3373.0, 'eqs_other': 28027.0}, 'lpStep': {'atoms': 2600.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21937.0, 'bodies_tr': 21937.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 42297.0, 'rules_normal': 42089.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 42285.0, 'rules_tr_normal': 42089.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6892.0, 'eqs_atom': 1450.0, 'eqs_body': 597.0, 'eqs_other': 4845.0}, 'generator': {'vars': 3433.0, 'vars_eliminated': 0.0, 'vars_frozen': 2379.0, 'constraints': 309.0, 'constraints_binary': 6786.0, 'constraints_ternary': 541.0, 'acyc_edges': 0.0, 'complexity': 7746.0}}, 'solving': {'solvers': {'choices': 256.0, 'conflicts': 75.0, 'conflicts_analyzed': 75.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 81.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 73.0, 'distributed_sum_lbd': 90.0, 'integrated': 119.0, 'lemmas': 232.0, 'lits_learnt': 2235.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 36.0, 'integrated_jumps': 26.0, 'guiding_paths_lits': 408.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 73.0, 'lemmas_loop': 61.0, 'lemmas_other': 98.0, 'lits_conflict': 300.0, 'lits_loop': 509.0, 'lits_other': 1426.0, 'jumps': {'jumps': 75.0, 'jumps_bounded': 5.0, 'levels': 81.0, 'levels_bounded': 5.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.13016128540039062, 'cpu': 0.15625, 'solve': 0.0059814453125, 'unsat': 0.0, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.55303955078125, 'cpu': 0.59375, 'solve': 0.019947052001953125, 'unsat': 0.0039882659912109375, 'sat': 0.004985809326171875}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 527.0, 'conflicts': 112.0, 'conflicts_analyzed': 107.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 119.0, 'distributed_sum_lbd': 150.0, 'integrated': 241.0, 'lemmas': 388.0, 'lits_learnt': 2485.0, 'lemmas_binary': 40.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 109.0, 'integrated_jumps': 143.0, 'guiding_paths_lits': 1036.0, 'guiding_paths': 36.0, 'splits': 0.0, 'lemmas_conflict': 105.0, 'lemmas_loop': 93.0, 'lemmas_other': 190.0, 'lits_conflict': 332.0, 'lits_loop': 616.0, 'lits_other': 1537.0, 'jumps': {'jumps': 107.0, 'jumps_bounded': 11.0, 'levels': 303.0, 'levels_bounded': 191.0, 'max': 33.0, 'max_executed': 2.0, 'max_bounded': 31.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4}

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 3 ( 37.50% solved)

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 4)', truth=True, inc_range=None)

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 4]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 3)

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 4:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.115869s.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 5: original = External(symbol='current_last_sgoals(3, 4)', truth=True, inc_range=None), conversion = current_last_sgoals(3,4).

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013917s with result Satisfiable.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12978539999999938, Incremental time limit = None
Running cumulative time = 0.6284603000000004, Cumulative time limit = 3600
Used memory = (RSS = 211.808594Mb, VMS = 201.949219Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.565968s, Solving = 0.062492s, Total = 0.628460s, Memory = (RSS = 211.808594Mb, VMS = 201.949219Mb)), Calls = 5
Final Model :: Total atoms = 5644, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.5659684, solving_time=0.06249190000000038, total_time=0.6284603000000004, memory=Memory(rss=211.80859375, vms=201.94921875), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11586859999999888, solving_time=0.013916800000000507, total_time=0.12978539999999938, memory=Memory(rss=211.80859375, vms=201.94921875), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 22109.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 115299.0, 'bodies_tr': 115299.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1070.0, 'count_bodies_tr': 1070.0, 'sccs': 86.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1352.0, 'rules': 223824.0, 'rules_normal': 222436.0, 'rules_choice': 1323.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 60.0, 'rules_tr': 223764.0, 'rules_tr_normal': 222436.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 47437.0, 'eqs_atom': 11392.0, 'eqs_body': 3870.0, 'eqs_other': 32175.0}, 'lpStep': {'atoms': 2883.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21924.0, 'bodies_tr': 21924.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 220.0, 'rules': 42125.0, 'rules_normal': 41917.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 42113.0, 'rules_tr_normal': 41917.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5943.0, 'eqs_atom': 1298.0, 'eqs_body': 497.0, 'eqs_other': 4148.0}, 'generator': {'vars': 3799.0, 'vars_eliminated': 0.0, 'vars_frozen': 2702.0, 'constraints': 362.0, 'constraints_binary': 5655.0, 'constraints_ternary': 451.0, 'acyc_edges': 0.0, 'complexity': 7746.0}}, 'solving': {'solvers': {'choices': 262.0, 'conflicts': 21.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 97.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 29.0, 'integrated': 42.0, 'lemmas': 110.0, 'lits_learnt': 679.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 25.0, 'integrated_jumps': 6.0, 'guiding_paths_lits': 488.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 21.0, 'lemmas_loop': 56.0, 'lemmas_other': 33.0, 'lits_conflict': 37.0, 'lits_loop': 492.0, 'lits_other': 150.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 4.0, 'levels': 25.0, 'levels_bounded': 4.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.13164901733398438, 'cpu': 0.125, 'solve': 0.0069789886474609375, 'unsat': 0.0, 'sat': 0.0009937286376953125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6846885681152344, 'cpu': 0.71875, 'solve': 0.026926040649414062, 'unsat': 0.0039882659912109375, 'sat': 0.0059795379638671875}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 789.0, 'conflicts': 133.0, 'conflicts_analyzed': 128.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 228.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 142.0, 'distributed_sum_lbd': 179.0, 'integrated': 283.0, 'lemmas': 498.0, 'lits_learnt': 3164.0, 'lemmas_binary': 47.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 134.0, 'integrated_jumps': 149.0, 'guiding_paths_lits': 1524.0, 'guiding_paths': 44.0, 'splits': 0.0, 'lemmas_conflict': 126.0, 'lemmas_loop': 149.0, 'lemmas_other': 223.0, 'lits_conflict': 369.0, 'lits_loop': 1108.0, 'lits_other': 1687.0, 'jumps': {'jumps': 128.0, 'jumps_bounded': 15.0, 'levels': 328.0, 'levels_bounded': 195.0, 'max': 33.0, 'max_executed': 2.0, 'max_bounded': 31.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 5}

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 4 ( 50.00% solved)

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 5)', truth=True, inc_range=None)

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 5]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 4)

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 5:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.099495s.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 6: original = External(symbol='current_last_sgoals(4, 5)', truth=True, inc_range=None), conversion = current_last_sgoals(4,5).

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009546s with result Unsatisfiable.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10904090000000011, Incremental time limit = None
Running cumulative time = 0.7375012000000005, Cumulative time limit = 3600
Used memory = (RSS = 213.589844Mb, VMS = 203.636719Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.6654631000000011, solving_time=0.07203809999999944, total_time=0.7375012000000005, memory=Memory(rss=213.58984375, vms=203.63671875), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09949470000000105, solving_time=0.009546199999999061, total_time=0.10904090000000011, memory=Memory(rss=213.58984375, vms=203.63671875), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 24744.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 137251.0, 'bodies_tr': 137251.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1272.0, 'count_bodies_tr': 1272.0, 'sccs': 99.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1586.0, 'rules': 266193.0, 'rules_normal': 264597.0, 'rules_choice': 1518.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 266121.0, 'rules_tr_normal': 264597.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 53702.0, 'eqs_atom': 12820.0, 'eqs_body': 4300.0, 'eqs_other': 36582.0}, 'lpStep': {'atoms': 2635.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21952.0, 'bodies_tr': 21952.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 42369.0, 'rules_normal': 42161.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 42357.0, 'rules_tr_normal': 42161.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6265.0, 'eqs_atom': 1428.0, 'eqs_body': 430.0, 'eqs_other': 4407.0}, 'generator': {'vars': 4229.0, 'vars_eliminated': 0.0, 'vars_frozen': 3062.0, 'constraints': 506.0, 'constraints_binary': 8440.0, 'constraints_ternary': 778.0, 'acyc_edges': 0.0, 'complexity': 9902.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 497.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.10970878601074219, 'cpu': 0.109375, 'solve': 0.0009975433349609375, 'unsat': 0.0009975433349609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.7943973541259766, 'cpu': 0.828125, 'solve': 0.027923583984375, 'unsat': 0.004985809326171875, 'sat': 0.0059795379638671875}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 789.0, 'conflicts': 135.0, 'conflicts_analyzed': 128.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 228.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 142.0, 'distributed_sum_lbd': 179.0, 'integrated': 283.0, 'lemmas': 498.0, 'lits_learnt': 3164.0, 'lemmas_binary': 47.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 134.0, 'integrated_jumps': 149.0, 'guiding_paths_lits': 2021.0, 'guiding_paths': 51.0, 'splits': 0.0, 'lemmas_conflict': 126.0, 'lemmas_loop': 149.0, 'lemmas_other': 223.0, 'lits_conflict': 369.0, 'lits_loop': 1108.0, 'lits_other': 1687.0, 'jumps': {'jumps': 128.0, 'jumps_bounded': 15.0, 'levels': 328.0, 'levels_bounded': 195.0, 'max': 33.0, 'max_executed': 2.0, 'max_bounded': 31.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 6:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.107534s.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011328s with result Unsatisfiable.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.11886240000000114, Incremental time limit = None
Running cumulative time = 0.8563636000000017, Cumulative time limit = 3600
Used memory = (RSS = 214.894531Mb, VMS = 204.972656Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.772997300000001, solving_time=0.08336630000000067, total_time=0.8563636000000017, memory=Memory(rss=214.89453125, vms=204.97265625), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10753419999999991, solving_time=0.011328200000001232, total_time=0.11886240000000114, memory=Memory(rss=214.89453125, vms=204.97265625), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 27402.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 159372.0, 'bodies_tr': 159372.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1474.0, 'count_bodies_tr': 1474.0, 'sccs': 112.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1820.0, 'rules': 308756.0, 'rules_normal': 306952.0, 'rules_choice': 1713.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 84.0, 'rules_tr': 308672.0, 'rules_tr_normal': 306952.0, 'rules_tr_choice': 1713.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 61248.0, 'eqs_atom': 14249.0, 'eqs_body': 4873.0, 'eqs_other': 42126.0}, 'lpStep': {'atoms': 2658.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22121.0, 'bodies_tr': 22121.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 42563.0, 'rules_normal': 42355.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 42551.0, 'rules_tr_normal': 42355.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7546.0, 'eqs_atom': 1429.0, 'eqs_body': 573.0, 'eqs_other': 5544.0}, 'generator': {'vars': 4894.0, 'vars_eliminated': 0.0, 'vars_frozen': 3519.0, 'constraints': 673.0, 'constraints_binary': 13596.0, 'constraints_ternary': 1213.0, 'acyc_edges': 0.0, 'complexity': 15706.0}}, 'solving': {'solvers': {'choices': 35.0, 'conflicts': 20.0, 'conflicts_analyzed': 13.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 13.0, 'distributed_sum_lbd': 28.0, 'integrated': 49.0, 'lemmas': 89.0, 'lits_learnt': 776.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.0, 'integrated_imps': 26.0, 'integrated_jumps': 15.0, 'guiding_paths_lits': 486.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 32.0, 'lemmas_other': 44.0, 'lits_conflict': 108.0, 'lits_loop': 296.0, 'lits_other': 372.0, 'jumps': {'jumps': 13.0, 'jumps_bounded': 6.0, 'levels': 26.0, 'levels_bounded': 6.0, 'max': 7.0, 'max_executed': 6.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 7.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.11968612670898438, 'cpu': 0.125, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.9140834808349609, 'cpu': 0.953125, 'solve': 0.029916763305664062, 'unsat': 0.0069789886474609375, 'sat': 0.0059795379638671875}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 824.0, 'conflicts': 155.0, 'conflicts_analyzed': 141.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 228.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 155.0, 'distributed_sum_lbd': 207.0, 'integrated': 332.0, 'lemmas': 587.0, 'lits_learnt': 3940.0, 'lemmas_binary': 51.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.046875, 'integrated_imps': 160.0, 'integrated_jumps': 164.0, 'guiding_paths_lits': 2507.0, 'guiding_paths': 57.0, 'splits': 0.0, 'lemmas_conflict': 139.0, 'lemmas_loop': 181.0, 'lemmas_other': 267.0, 'lits_conflict': 477.0, 'lits_loop': 1404.0, 'lits_other': 2059.0, 'jumps': {'jumps': 141.0, 'jumps_bounded': 21.0, 'levels': 354.0, 'levels_bounded': 201.0, 'max': 33.0, 'max_executed': 6.0, 'max_bounded': 31.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.110697s.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032135s with result Satisfiable.

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14283170000000034, Incremental time limit = None
Running cumulative time = 0.999195300000002, Cumulative time limit = 3600
Used memory = (RSS = 219.871094Mb, VMS = 210.261719Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.883694s, Solving = 0.115501s, Total = 0.999195s, Memory = (RSS = 219.871094Mb, VMS = 210.261719Mb)), Calls = 8
Final Model :: Total atoms = 6766, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.883694300000001, solving_time=0.11550100000000096, total_time=0.999195300000002, memory=Memory(rss=219.87109375, vms=210.26171875), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11069700000000005, solving_time=0.032134700000000294, total_time=0.14283170000000034, memory=Memory(rss=219.87109375, vms=210.26171875), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 30308.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 182265.0, 'bodies_tr': 182265.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1676.0, 'count_bodies_tr': 1676.0, 'sccs': 137.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2218.0, 'rules': 352294.0, 'rules_normal': 350282.0, 'rules_choice': 1908.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 96.0, 'rules_tr': 352206.0, 'rules_tr_normal': 350282.0, 'rules_tr_choice': 1908.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 68344.0, 'eqs_atom': 15695.0, 'eqs_body': 5065.0, 'eqs_other': 47584.0}, 'lpStep': {'atoms': 2906.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22893.0, 'bodies_tr': 22893.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 43538.0, 'rules_normal': 43330.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 43534.0, 'rules_tr_normal': 43330.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 7096.0, 'eqs_atom': 1446.0, 'eqs_body': 192.0, 'eqs_other': 5458.0}, 'generator': {'vars': 6415.0, 'vars_eliminated': 0.0, 'vars_frozen': 4456.0, 'constraints': 1053.0, 'constraints_binary': 27666.0, 'constraints_ternary': 2763.0, 'acyc_edges': 0.0, 'complexity': 31776.0}}, 'solving': {'solvers': {'choices': 569.0, 'conflicts': 64.0, 'conflicts_analyzed': 64.0, 'restarts': 0.0, 'restarts_last': 19.0, 'extra': {'domain_choices': 28.0, 'models': 1.0, 'models_level': 145.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 62.0, 'distributed_sum_lbd': 134.0, 'integrated': 372.0, 'lemmas': 541.0, 'lits_learnt': 5087.0, 'lemmas_binary': 48.0, 'lemmas_ternary': 20.0, 'cpu_time': 0.03125, 'integrated_imps': 207.0, 'integrated_jumps': 96.0, 'guiding_paths_lits': 637.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 62.0, 'lemmas_loop': 131.0, 'lemmas_other': 348.0, 'lits_conflict': 579.0, 'lits_loop': 1159.0, 'lits_other': 3349.0, 'jumps': {'jumps': 64.0, 'jumps_bounded': 27.0, 'levels': 1022.0, 'levels_bounded': 927.0, 'max': 92.0, 'max_executed': 92.0, 'max_bounded': 91.0}}}}, 'summary': {'call': 8.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1441211700439453, 'cpu': 0.171875, 'solve': 0.015956878662109375, 'unsat': 0.0, 'sat': 0.0049877166748046875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.0582046508789062, 'cpu': 1.125, 'solve': 0.04587364196777344, 'unsat': 0.0069789886474609375, 'sat': 0.010967254638671875}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1393.0, 'conflicts': 219.0, 'conflicts_analyzed': 205.0, 'restarts': 0.0, 'restarts_last': 19.0, 'extra': {'domain_choices': 28.0, 'models': 5.0, 'models_level': 373.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 217.0, 'distributed_sum_lbd': 341.0, 'integrated': 704.0, 'lemmas': 1128.0, 'lits_learnt': 9027.0, 'lemmas_binary': 99.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.078125, 'integrated_imps': 367.0, 'integrated_jumps': 260.0, 'guiding_paths_lits': 3144.0, 'guiding_paths': 64.0, 'splits': 0.0, 'lemmas_conflict': 201.0, 'lemmas_loop': 312.0, 'lemmas_other': 615.0, 'lits_conflict': 1056.0, 'lits_loop': 2563.0, 'lits_other': 5408.0, 'jumps': {'jumps': 205.0, 'jumps_bounded': 48.0, 'levels': 1376.0, 'levels_bounded': 1128.0, 'max': 92.0, 'max_executed': 92.0, 'max_bounded': 91.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 5, 4: 8}

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 5 ( 62.50% solved)

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 8)', truth=True, inc_range=None)

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 8]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 5)

[13-11-2021_23-07-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.163249s.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 9: original = External(symbol='current_last_sgoals(5, 8)', truth=True, inc_range=None), conversion = current_last_sgoals(5,8).

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035454s with result Satisfiable.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.19870290000000068, Incremental time limit = None
Running cumulative time = 1.1978982000000027, Cumulative time limit = 3600
Used memory = (RSS = 226.449219Mb, VMS = 217.539062Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.046943s, Solving = 0.150955s, Total = 1.197898s, Memory = (RSS = 226.449219Mb, VMS = 217.539062Mb)), Calls = 9
Final Model :: Total atoms = 7142, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.0469430000000015, solving_time=0.15095520000000118, total_time=1.1978982000000027, memory=Memory(rss=226.44921875, vms=217.5390625), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16324870000000047, solving_time=0.03545420000000021, total_time=0.19870290000000068, memory=Memory(rss=226.44921875, vms=217.5390625), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 33480.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 205790.0, 'bodies_tr': 205790.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1878.0, 'count_bodies_tr': 1878.0, 'sccs': 162.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2622.0, 'rules': 396667.0, 'rules_normal': 394447.0, 'rules_choice': 2103.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 396575.0, 'rules_tr_normal': 394447.0, 'rules_tr_choice': 2103.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 79280.0, 'eqs_atom': 17375.0, 'eqs_body': 5356.0, 'eqs_other': 56549.0}, 'lpStep': {'atoms': 3172.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23525.0, 'bodies_tr': 23525.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 404.0, 'rules': 44373.0, 'rules_normal': 44165.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 44369.0, 'rules_tr_normal': 44165.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 10936.0, 'eqs_atom': 1680.0, 'eqs_body': 291.0, 'eqs_other': 8965.0}, 'generator': {'vars': 8132.0, 'vars_eliminated': 0.0, 'vars_frozen': 5455.0, 'constraints': 1447.0, 'constraints_binary': 43789.0, 'constraints_ternary': 4696.0, 'acyc_edges': 0.0, 'complexity': 50296.0}}, 'solving': {'solvers': {'choices': 426.0, 'conflicts': 6.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 6.0, 'models': 1.0, 'models_level': 161.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 6.0, 'lemmas': 74.0, 'lits_learnt': 584.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 5.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 707.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 68.0, 'lemmas_other': 5.0, 'lits_conflict': 2.0, 'lits_loop': 572.0, 'lits_other': 10.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 6.0, 'levels': 12.0, 'levels_bounded': 6.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.20046234130859375, 'cpu': 0.21875, 'solve': 0.016927719116210938, 'unsat': 0.0, 'sat': 0.0029659271240234375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.2586669921875, 'cpu': 1.34375, 'solve': 0.06280136108398438, 'unsat': 0.0069789886474609375, 'sat': 0.013933181762695312}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1819.0, 'conflicts': 225.0, 'conflicts_analyzed': 211.0, 'restarts': 0.0, 'restarts_last': 19.0, 'extra': {'domain_choices': 34.0, 'models': 6.0, 'models_level': 534.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 218.0, 'distributed_sum_lbd': 343.0, 'integrated': 710.0, 'lemmas': 1202.0, 'lits_learnt': 9611.0, 'lemmas_binary': 105.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.109375, 'integrated_imps': 372.0, 'integrated_jumps': 260.0, 'guiding_paths_lits': 3851.0, 'guiding_paths': 71.0, 'splits': 0.0, 'lemmas_conflict': 202.0, 'lemmas_loop': 380.0, 'lemmas_other': 620.0, 'lits_conflict': 1058.0, 'lits_loop': 3135.0, 'lits_other': 5418.0, 'jumps': {'jumps': 211.0, 'jumps_bounded': 54.0, 'levels': 1388.0, 'levels_bounded': 1134.0, 'max': 92.0, 'max_executed': 92.0, 'max_bounded': 91.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 5, 4: 8, 5: 9}

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 6 ( 75.00% solved)

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 9)', truth=True, inc_range=None)

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 9]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 6)

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.112865s.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 10: original = External(symbol='current_last_sgoals(6, 9)', truth=True, inc_range=None), conversion = current_last_sgoals(6,9).

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018417s with result Unsatisfiable.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13128200000000056, Incremental time limit = None
Running cumulative time = 1.3291802000000033, Cumulative time limit = 3600
Used memory = (RSS = 231.164062Mb, VMS = 221.671875Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.1598076000000015, solving_time=0.16937260000000176, total_time=1.3291802000000033, memory=Memory(rss=231.1640625, vms=221.671875), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11286459999999998, solving_time=0.018417400000000583, total_time=0.13128200000000056, memory=Memory(rss=231.1640625, vms=221.671875), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 36689.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 229939.0, 'bodies_tr': 229939.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2080.0, 'count_bodies_tr': 2080.0, 'sccs': 187.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3216.0, 'rules': 441693.0, 'rules_normal': 439265.0, 'rules_choice': 2298.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 120.0, 'rules_tr': 441601.0, 'rules_tr_normal': 439265.0, 'rules_tr_choice': 2298.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 28.0, 'eqs': 86142.0, 'eqs_atom': 18972.0, 'eqs_body': 5435.0, 'eqs_other': 61735.0}, 'lpStep': {'atoms': 3209.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24149.0, 'bodies_tr': 24149.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45026.0, 'rules_normal': 44818.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 45026.0, 'rules_tr_normal': 44818.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 6862.0, 'eqs_atom': 1597.0, 'eqs_body': 79.0, 'eqs_other': 5186.0}, 'generator': {'vars': 10470.0, 'vars_eliminated': 0.0, 'vars_frozen': 6824.0, 'constraints': 2053.0, 'constraints_binary': 69257.0, 'constraints_ternary': 7689.0, 'acyc_edges': 0.0, 'complexity': 79449.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 555.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.1326446533203125, 'cpu': 0.125, 'solve': 0.0039882659912109375, 'unsat': 0.0039882659912109375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.3913116455078125, 'cpu': 1.46875, 'solve': 0.06678962707519531, 'unsat': 0.010967254638671875, 'sat': 0.013933181762695312}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1819.0, 'conflicts': 231.0, 'conflicts_analyzed': 211.0, 'restarts': 0.0, 'restarts_last': 19.0, 'extra': {'domain_choices': 34.0, 'models': 6.0, 'models_level': 534.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 218.0, 'distributed_sum_lbd': 343.0, 'integrated': 710.0, 'lemmas': 1202.0, 'lits_learnt': 9611.0, 'lemmas_binary': 105.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.109375, 'integrated_imps': 372.0, 'integrated_jumps': 260.0, 'guiding_paths_lits': 4406.0, 'guiding_paths': 76.0, 'splits': 0.0, 'lemmas_conflict': 202.0, 'lemmas_loop': 380.0, 'lemmas_other': 620.0, 'lits_conflict': 1058.0, 'lits_loop': 3135.0, 'lits_other': 5418.0, 'jumps': {'jumps': 211.0, 'jumps_bounded': 54.0, 'levels': 1388.0, 'levels_bounded': 1134.0, 'max': 92.0, 'max_executed': 92.0, 'max_bounded': 91.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.117987s.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041655s with result Satisfiable.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15964190000000045, Incremental time limit = None
Running cumulative time = 1.4888221000000037, Cumulative time limit = 3600
Used memory = (RSS = 238.906250Mb, VMS = 230.855469Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.277795s, Solving = 0.211028s, Total = 1.488822s, Memory = (RSS = 238.906250Mb, VMS = 230.855469Mb)), Calls = 11
Final Model :: Total atoms = 7893, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.2777945000000015, solving_time=0.2110276000000022, total_time=1.4888221000000037, memory=Memory(rss=238.90625, vms=230.85546875), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1179869, solving_time=0.04165500000000044, total_time=0.15964190000000045, memory=Memory(rss=238.90625, vms=230.85546875), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 40146.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 254556.0, 'bodies_tr': 254556.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2282.0, 'count_bodies_tr': 2282.0, 'sccs': 212.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3810.0, 'rules': 487389.0, 'rules_normal': 484753.0, 'rules_choice': 2493.0, 'rules_minimize': 11.0, 'rules_acyc': 0.0, 'rules_heuristic': 132.0, 'rules_tr': 487297.0, 'rules_tr_normal': 484753.0, 'rules_tr_choice': 2493.0, 'rules_tr_minimize': 11.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 40.0, 'eqs': 93652.0, 'eqs_atom': 20781.0, 'eqs_body': 5508.0, 'eqs_other': 67363.0}, 'lpStep': {'atoms': 3457.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24617.0, 'bodies_tr': 24617.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45696.0, 'rules_normal': 45488.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 45696.0, 'rules_tr_normal': 45488.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7510.0, 'eqs_atom': 1809.0, 'eqs_body': 73.0, 'eqs_other': 5628.0}, 'generator': {'vars': 12878.0, 'vars_eliminated': 0.0, 'vars_frozen': 8205.0, 'constraints': 2681.0, 'constraints_binary': 94856.0, 'constraints_ternary': 11152.0, 'acyc_edges': 0.0, 'complexity': 109225.0}}, 'solving': {'solvers': {'choices': 951.0, 'conflicts': 222.0, 'conflicts_analyzed': 222.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 235.0, 'models': 1.0, 'models_level': 194.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 215.0, 'distributed_sum_lbd': 503.0, 'integrated': 1218.0, 'lemmas': 1500.0, 'lits_learnt': 22656.0, 'lemmas_binary': 98.0, 'lemmas_ternary': 68.0, 'cpu_time': 0.109375, 'integrated_imps': 457.0, 'integrated_jumps': 129.0, 'guiding_paths_lits': 847.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 218.0, 'lemmas_loop': 430.0, 'lemmas_other': 852.0, 'lits_conflict': 4158.0, 'lits_loop': 3499.0, 'lits_other': 14999.0, 'jumps': {'jumps': 222.0, 'jumps_bounded': 59.0, 'levels': 955.0, 'levels_bounded': 659.0, 'max': 124.0, 'max_executed': 124.0, 'max_bounded': 121.0}}}}, 'summary': {'call': 11.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.16156959533691406, 'cpu': 0.234375, 'solve': 0.025930404663085938, 'unsat': 0.0, 'sat': 0.01496124267578125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.5528812408447266, 'cpu': 1.703125, 'solve': 0.09272003173828125, 'unsat': 0.010967254638671875, 'sat': 0.028894424438476562}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2770.0, 'conflicts': 453.0, 'conflicts_analyzed': 433.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 269.0, 'models': 7.0, 'models_level': 728.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 433.0, 'distributed_sum_lbd': 846.0, 'integrated': 1928.0, 'lemmas': 2702.0, 'lits_learnt': 32267.0, 'lemmas_binary': 203.0, 'lemmas_ternary': 89.0, 'cpu_time': 0.21875, 'integrated_imps': 829.0, 'integrated_jumps': 389.0, 'guiding_paths_lits': 5253.0, 'guiding_paths': 83.0, 'splits': 0.0, 'lemmas_conflict': 420.0, 'lemmas_loop': 810.0, 'lemmas_other': 1472.0, 'lits_conflict': 5216.0, 'lits_loop': 6634.0, 'lits_other': 20417.0, 'jumps': {'jumps': 433.0, 'jumps_bounded': 113.0, 'levels': 2343.0, 'levels_bounded': 1793.0, 'max': 124.0, 'max_executed': 124.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 5, 4: 8, 5: 9, 6: 11}

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 7 ( 87.50% solved)

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 11)', truth=True, inc_range=None)

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 11]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 7)

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.118920s.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 12: original = External(symbol='current_last_sgoals(7, 11)', truth=True, inc_range=None), conversion = current_last_sgoals(7,11).

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.077084s with result Satisfiable.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1960041999999973, Incremental time limit = None
Running cumulative time = 1.684826300000001, Cumulative time limit = 3600
Used memory = (RSS = 244.777344Mb, VMS = 236.523438Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.396715s, Solving = 0.288112s, Total = 1.684826s, Memory = (RSS = 244.777344Mb, VMS = 236.523438Mb)), Calls = 12
Final Model :: Total atoms = 8270, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.3967146000000001, solving_time=0.28811170000000086, total_time=1.684826300000001, memory=Memory(rss=244.77734375, vms=236.5234375), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11892009999999864, solving_time=0.07708409999999866, total_time=0.1960041999999973, memory=Memory(rss=244.77734375, vms=236.5234375), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 43611.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 279190.0, 'bodies_tr': 279190.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2484.0, 'count_bodies_tr': 2484.0, 'sccs': 237.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4404.0, 'rules': 533130.0, 'rules_normal': 530286.0, 'rules_choice': 2688.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 533038.0, 'rules_tr_normal': 530286.0, 'rules_tr_choice': 2688.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 52.0, 'eqs': 101204.0, 'eqs_atom': 22598.0, 'eqs_body': 5581.0, 'eqs_other': 73025.0}, 'lpStep': {'atoms': 3465.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24634.0, 'bodies_tr': 24634.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45741.0, 'rules_normal': 45533.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 45741.0, 'rules_tr_normal': 45533.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7552.0, 'eqs_atom': 1817.0, 'eqs_body': 73.0, 'eqs_other': 5662.0}, 'generator': {'vars': 15286.0, 'vars_eliminated': 0.0, 'vars_frozen': 9586.0, 'constraints': 3210.0, 'constraints_binary': 116465.0, 'constraints_ternary': 14077.0, 'acyc_edges': 0.0, 'complexity': 134366.0}}, 'solving': {'solvers': {'choices': 651.0, 'conflicts': 78.0, 'conflicts_analyzed': 78.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 62.0, 'models': 1.0, 'models_level': 210.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 75.0, 'distributed_sum_lbd': 160.0, 'integrated': 432.0, 'lemmas': 556.0, 'lits_learnt': 14573.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.203125, 'integrated_imps': 232.0, 'integrated_jumps': 2.0, 'guiding_paths_lits': 917.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 75.0, 'lemmas_loop': 195.0, 'lemmas_other': 286.0, 'lits_conflict': 3041.0, 'lits_loop': 1733.0, 'lits_other': 9799.0, 'jumps': {'jumps': 78.0, 'jumps_bounded': 44.0, 'levels': 122.0, 'levels_bounded': 44.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 12.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.1984710693359375, 'cpu': 0.34375, 'solve': 0.06081199645996094, 'unsat': 0.0, 'sat': 0.007955551147460938}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.751352310180664, 'cpu': 2.046875, 'solve': 0.1535320281982422, 'unsat': 0.010967254638671875, 'sat': 0.0368499755859375}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3421.0, 'conflicts': 531.0, 'conflicts_analyzed': 511.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 331.0, 'models': 8.0, 'models_level': 938.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 508.0, 'distributed_sum_lbd': 1006.0, 'integrated': 2360.0, 'lemmas': 3258.0, 'lits_learnt': 46840.0, 'lemmas_binary': 209.0, 'lemmas_ternary': 89.0, 'cpu_time': 0.421875, 'integrated_imps': 1061.0, 'integrated_jumps': 391.0, 'guiding_paths_lits': 6170.0, 'guiding_paths': 90.0, 'splits': 0.0, 'lemmas_conflict': 495.0, 'lemmas_loop': 1005.0, 'lemmas_other': 1758.0, 'lits_conflict': 8257.0, 'lits_loop': 8367.0, 'lits_other': 30216.0, 'jumps': {'jumps': 511.0, 'jumps_bounded': 157.0, 'levels': 2465.0, 'levels_bounded': 1837.0, 'max': 124.0, 'max_executed': 124.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 5, 4: 8, 5: 9, 6: 11, 7: 12}

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 8 (100.00% solved)

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 12)', truth=True, inc_range=None)

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 12]:
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 8)

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.117208s.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 13: original = External(symbol='current_last_sgoals(8, 12)', truth=True, inc_range=None), conversion = current_last_sgoals(8,12).

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032258s with result Satisfiable.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14946579999999976, Incremental time limit = None
Running cumulative time = 1.8342921000000008, Cumulative time limit = 3600
Used memory = (RSS = 250.976562Mb, VMS = 241.859375Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.513922s, Solving = 0.320370s, Total = 1.834292s, Memory = (RSS = 250.976562Mb, VMS = 241.859375Mb)), Calls = 13
Final Model :: Total atoms = 8649, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.5139223, solving_time=0.3203698000000008, total_time=1.8342921000000008, memory=Memory(rss=250.9765625, vms=241.859375), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1172076999999998, solving_time=0.032258099999999956, total_time=0.14946579999999976, memory=Memory(rss=250.9765625, vms=241.859375), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 47084.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 303841.0, 'bodies_tr': 303841.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2686.0, 'count_bodies_tr': 2686.0, 'sccs': 262.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4998.0, 'rules': 578916.0, 'rules_normal': 575864.0, 'rules_choice': 2883.0, 'rules_minimize': 13.0, 'rules_acyc': 0.0, 'rules_heuristic': 156.0, 'rules_tr': 578824.0, 'rules_tr_normal': 575864.0, 'rules_tr_choice': 2883.0, 'rules_tr_minimize': 13.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 64.0, 'eqs': 108798.0, 'eqs_atom': 24423.0, 'eqs_body': 5654.0, 'eqs_other': 78721.0}, 'lpStep': {'atoms': 3473.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24651.0, 'bodies_tr': 24651.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45786.0, 'rules_normal': 45578.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 45786.0, 'rules_tr_normal': 45578.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7594.0, 'eqs_atom': 1825.0, 'eqs_body': 73.0, 'eqs_other': 5696.0}, 'generator': {'vars': 17694.0, 'vars_eliminated': 0.0, 'vars_frozen': 10967.0, 'constraints': 3786.0, 'constraints_binary': 140638.0, 'constraints_ternary': 17327.0, 'acyc_edges': 0.0, 'complexity': 162443.0}}, 'solving': {'solvers': {'choices': 638.0, 'conflicts': 21.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 21.0, 'models': 1.0, 'models_level': 229.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 16.0, 'distributed_sum_lbd': 32.0, 'integrated': 96.0, 'lemmas': 242.0, 'lits_learnt': 2980.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 66.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 987.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 160.0, 'lemmas_other': 66.0, 'lits_conflict': 324.0, 'lits_loop': 1252.0, 'lits_other': 1404.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 17.0, 'levels': 38.0, 'levels_bounded': 17.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 13.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.15259170532226562, 'cpu': 0.234375, 'solve': 0.015956878662109375, 'unsat': 0.0, 'sat': 0.0059871673583984375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.9039440155029297, 'cpu': 2.28125, 'solve': 0.16948890686035156, 'unsat': 0.010967254638671875, 'sat': 0.04283714294433594}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4059.0, 'conflicts': 552.0, 'conflicts_analyzed': 532.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 352.0, 'models': 9.0, 'models_level': 1167.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 524.0, 'distributed_sum_lbd': 1038.0, 'integrated': 2456.0, 'lemmas': 3500.0, 'lits_learnt': 49820.0, 'lemmas_binary': 217.0, 'lemmas_ternary': 89.0, 'cpu_time': 0.53125, 'integrated_imps': 1127.0, 'integrated_jumps': 391.0, 'guiding_paths_lits': 7157.0, 'guiding_paths': 97.0, 'splits': 0.0, 'lemmas_conflict': 511.0, 'lemmas_loop': 1165.0, 'lemmas_other': 1824.0, 'lits_conflict': 8581.0, 'lits_loop': 9619.0, 'lits_other': 31620.0, 'jumps': {'jumps': 532.0, 'jumps_bounded': 174.0, 'levels': 2503.0, 'levels_bounded': 1854.0, 'max': 124.0, 'max_executed': 124.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 5, 4: 8, 5: 9, 6: 11, 7: 12, 8: 13}

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 9 (112.50% solved)

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 8 was achieved successfully.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.136291s, Solving = 0.013925s, Total = 0.150217s, Memory = (RSS = 203.917969Mb, VMS = 193.789062Mb)
2 : Statistics :: Grounding = 0.108406s, Solving = 0.010814s, Total = 0.119219s, Memory = (RSS = 206.039062Mb, VMS = 195.734375Mb)
3 : Statistics :: Grounding = 0.093286s, Solving = 0.007222s, Total = 0.100508s, Memory = (RSS = 207.398438Mb, VMS = 197.187500Mb)
4 : Statistics :: Grounding = 0.112117s, Solving = 0.016614s, Total = 0.128731s, Memory = (RSS = 209.386719Mb, VMS = 199.074219Mb)
5 : Statistics :: Grounding = 0.115869s, Solving = 0.013917s, Total = 0.129785s, Memory = (RSS = 211.808594Mb, VMS = 201.949219Mb)
6 : Statistics :: Grounding = 0.099495s, Solving = 0.009546s, Total = 0.109041s, Memory = (RSS = 213.589844Mb, VMS = 203.636719Mb)
7 : Statistics :: Grounding = 0.107534s, Solving = 0.011328s, Total = 0.118862s, Memory = (RSS = 214.894531Mb, VMS = 204.972656Mb)
8 : Statistics :: Grounding = 0.110697s, Solving = 0.032135s, Total = 0.142832s, Memory = (RSS = 219.871094Mb, VMS = 210.261719Mb)
9 : Statistics :: Grounding = 0.163249s, Solving = 0.035454s, Total = 0.198703s, Memory = (RSS = 226.449219Mb, VMS = 217.539062Mb)
10 : Statistics :: Grounding = 0.112865s, Solving = 0.018417s, Total = 0.131282s, Memory = (RSS = 231.164062Mb, VMS = 221.671875Mb)
11 : Statistics :: Grounding = 0.117987s, Solving = 0.041655s, Total = 0.159642s, Memory = (RSS = 238.906250Mb, VMS = 230.855469Mb)
12 : Statistics :: Grounding = 0.118920s, Solving = 0.077084s, Total = 0.196004s, Memory = (RSS = 244.777344Mb, VMS = 236.523438Mb)
13 : Statistics :: Grounding = 0.117208s, Solving = 0.032258s, Total = 0.149466s, Memory = (RSS = 250.976562Mb, VMS = 241.859375Mb)

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.834292s due to: External generator exit.

[13-11-2021_23-07-19] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[13-11-2021_23-07-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 5, 12: 5, 13: 5, 14: 6, 15: 7, 16: 8, 17: 9}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 10, 5: 13, 6: 14, 7: 15, 8: 16, 9: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 4, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 7, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13}
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 5, 12: 5, 13: 5, 14: 6, 15: 7, 16: 8, 17: 9}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 10, 5: 13, 6: 14, 7: 15, 8: 16, 9: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 8, Last requested goal index = 8 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.513922s, Solving = 0.320370s, Total = 1.834292s, Memory = (RSS = 250.976562Mb, VMS = 241.859375Mb)), Calls = 13
Model :: Total atoms = 8649, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 13 :: Actions = 13                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 2] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 5:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 8:
    Current Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 9:
    Current Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 10:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 12:
    Current Sub-goals:
        [Index = 7] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 7] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Online planning increment 1 finished.

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 1 : Total constraining sgoals = 18 : Achieved sgoals = 9 : Unachieved sgoals = 9
Level = 1 : Solved problems = 1 : Total constraining sgoals = 17 : Achieved sgoals = 8 : Unachieved sgoals = 9

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Current valid planning level range: [1-2]

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Chosen level range for planning increment 2 by method ground-first: [1-1]

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 2:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  17 (Com = 1.00), Sgs = 17, Time =   1.872s (Gro =   1.407s, Sea =   0.465s), Expan (1.89, 1.89) (Dev = (1.05, 1.05), Bal = (0.56, 0.56))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [9-17]

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [9-17], problem number = 2, increment number = 2

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 9)
	('last_sgoals', 17)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 9
last_sgoals = 17
start_step = 13
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 21

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency disabled : Problem type = partial conformance refinement (sequential) with sgoals range [9-17] : Minimum search length bound = disabled with value = 21

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = True, chosen = True

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 12})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 17})

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 9 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 9).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 10).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 11).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 12).
sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 13).
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 14).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 15).
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 16).
sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 17).

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000162CBB4A860>

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[13-11-2021_23-07-20] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000162CBB4A860> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,0)), 3)).
fix_action(occurs(1, talos, move((store_room,1)), 4)).
fix_action(occurs(1, talos, move((store_room,0)), 5)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 6)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 7)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,6))), 8)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,6)), 9)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,5))), 10)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,5)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 12)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 13)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[13-11-2021_23-07-20] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000162CBB4A860> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), (block,2), 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), (block,2), 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), (block,2), 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), (block,2), 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), (block,2), 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), (block,2), 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,0), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), (block,2), 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), (block,2), 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (store_room,1), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), (block,2), 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), store_room, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), (block,2), 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (store_room,0), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), (block,2), 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), store_room, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), (block,2), 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (store_room,0), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), (block,2), 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), store_room, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), (block,2), 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (store_room,0), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), (block,2), 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), store_room, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), (block,2), 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (store_room,0), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), (block,2), 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), store_room, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), (block,2), 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (store_room,0), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), (block,2), 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), store_room, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), (block,2), 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (store_room,0), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), (block,2), 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), store_room, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), (block,2), 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (store_room,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), (block,2), 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), store_room, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), (block,2), 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (store_room,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), (block,2), 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), store_room, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), (block,2), 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (store_room,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), (block,2), 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), store_room, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), (block,2), 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 13)
	('last_sgoals', 17)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('first_sgoals', 9)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000162CBB4A860>)

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 14)', truth=True, inc_range=None)

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153216s.

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 14: original = External(symbol='current_last_sgoals(9, 14)', truth=True, inc_range=None), conversion = current_last_sgoals(9,14).

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029288s with result Unsatisfiable.

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.18250339999999987, Incremental time limit = None
Running cumulative time = 2.0167955000000006, Cumulative time limit = 3600
Used memory = (RSS = 264.652344Mb, VMS = 257.855469Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.6671378999999993, solving_time=0.34965760000000135, total_time=2.0167955000000006, memory=Memory(rss=264.65234375, vms=257.85546875), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15321559999999934, solving_time=0.02928780000000053, total_time=0.18250339999999987, memory=Memory(rss=264.65234375, vms=257.85546875), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 52986.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 327777.0, 'bodies_tr': 327777.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2888.0, 'count_bodies_tr': 2888.0, 'sccs': 287.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5585.0, 'rules': 626853.0, 'rules_normal': 623593.0, 'rules_choice': 3078.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 168.0, 'rules_tr': 626753.0, 'rules_tr_normal': 623593.0, 'rules_tr_choice': 3078.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 68.0, 'eqs': 116340.0, 'eqs_atom': 26272.0, 'eqs_body': 5949.0, 'eqs_other': 84119.0}, 'lpStep': {'atoms': 5902.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23936.0, 'bodies_tr': 23936.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 587.0, 'rules': 47937.0, 'rules_normal': 47729.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 47929.0, 'rules_tr_normal': 47729.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 7542.0, 'eqs_atom': 1849.0, 'eqs_body': 295.0, 'eqs_other': 5398.0}, 'generator': {'vars': 20169.0, 'vars_eliminated': 0.0, 'vars_frozen': 12466.0, 'constraints': 226.0, 'constraints_binary': 10158.0, 'constraints_ternary': 859.0, 'acyc_edges': 0.0, 'complexity': 162443.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 10.0, 'lits_learnt': 10.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 160.0, 'guiding_paths': 1.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 10.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 10.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 14.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2463550567626953, 'cpu': 0.234375, 'solve': 0.0059871673583984375, 'unsat': 0.0059871673583984375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.150299072265625, 'cpu': 2.515625, 'solve': 0.17547607421875, 'unsat': 0.016954421997070312, 'sat': 0.04283714294433594}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4059.0, 'conflicts': 552.0, 'conflicts_analyzed': 532.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 352.0, 'models': 9.0, 'models_level': 1167.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 524.0, 'distributed_sum_lbd': 1038.0, 'integrated': 2456.0, 'lemmas': 3510.0, 'lits_learnt': 49830.0, 'lemmas_binary': 217.0, 'lemmas_ternary': 89.0, 'cpu_time': 0.53125, 'integrated_imps': 1127.0, 'integrated_jumps': 391.0, 'guiding_paths_lits': 7317.0, 'guiding_paths': 98.0, 'splits': 0.0, 'lemmas_conflict': 511.0, 'lemmas_loop': 1175.0, 'lemmas_other': 1824.0, 'lits_conflict': 8581.0, 'lits_loop': 9629.0, 'lits_other': 31620.0, 'jumps': {'jumps': 532.0, 'jumps_bounded': 174.0, 'levels': 2503.0, 'levels_bounded': 1854.0, 'max': 124.0, 'max_executed': 124.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096785s.

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027252s with result Satisfiable.

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12403729999999946, Incremental time limit = None
Running cumulative time = 2.1408328, Cumulative time limit = 3600
Used memory = (RSS = 265.722656Mb, VMS = 258.656250Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.763923s, Solving = 0.376909s, Total = 2.140833s, Memory = (RSS = 265.722656Mb, VMS = 258.656250Mb)), Calls = 15
Final Model :: Total atoms = 11617, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.7639233999999986, solving_time=0.3769094000000015, total_time=2.1408328, memory=Memory(rss=265.72265625, vms=258.65625), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.0967854999999993, solving_time=0.02725180000000016, total_time=0.12403729999999946, memory=Memory(rss=265.72265625, vms=258.65625), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 54967.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 349573.0, 'bodies_tr': 349573.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3090.0, 'count_bodies_tr': 3090.0, 'sccs': 300.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5761.0, 'rules': 668890.0, 'rules_normal': 665422.0, 'rules_choice': 3273.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 668778.0, 'rules_tr_normal': 665422.0, 'rules_tr_choice': 3273.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 68.0, 'eqs': 121011.0, 'eqs_atom': 27112.0, 'eqs_body': 6368.0, 'eqs_other': 87531.0}, 'lpStep': {'atoms': 1981.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21796.0, 'bodies_tr': 21796.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176.0, 'rules': 42037.0, 'rules_normal': 41829.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 42025.0, 'rules_tr_normal': 41829.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4671.0, 'eqs_atom': 840.0, 'eqs_body': 419.0, 'eqs_other': 3412.0}, 'generator': {'vars': 20597.0, 'vars_eliminated': 0.0, 'vars_frozen': 12774.0, 'constraints': 362.0, 'constraints_binary': 12188.0, 'constraints_ternary': 1119.0, 'acyc_edges': 0.0, 'complexity': 162443.0}}, 'solving': {'solvers': {'choices': 1553.0, 'conflicts': 45.0, 'conflicts_analyzed': 45.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 275.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 49.0, 'distributed_sum_lbd': 58.0, 'integrated': 74.0, 'lemmas': 126.0, 'lits_learnt': 195.0, 'lemmas_binary': 40.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 47.0, 'integrated_jumps': 175.0, 'guiding_paths_lits': 1432.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 43.0, 'lemmas_loop': 10.0, 'lemmas_other': 73.0, 'lits_conflict': 46.0, 'lits_loop': 45.0, 'lits_other': 104.0, 'jumps': {'jumps': 45.0, 'jumps_bounded': 7.0, 'levels': 1992.0, 'levels_bounded': 1253.0, 'max': 272.0, 'max_executed': 181.0, 'max_bounded': 179.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.12778854370117188, 'cpu': 0.140625, 'solve': 0.011533737182617188, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.278087615966797, 'cpu': 2.65625, 'solve': 0.1870098114013672, 'unsat': 0.016954421997070312, 'sat': 0.04483222961425781}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 5612.0, 'conflicts': 597.0, 'conflicts_analyzed': 577.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 352.0, 'models': 10.0, 'models_level': 1442.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 573.0, 'distributed_sum_lbd': 1096.0, 'integrated': 2530.0, 'lemmas': 3636.0, 'lits_learnt': 50025.0, 'lemmas_binary': 257.0, 'lemmas_ternary': 89.0, 'cpu_time': 0.5625, 'integrated_imps': 1174.0, 'integrated_jumps': 566.0, 'guiding_paths_lits': 8749.0, 'guiding_paths': 106.0, 'splits': 0.0, 'lemmas_conflict': 554.0, 'lemmas_loop': 1185.0, 'lemmas_other': 1897.0, 'lits_conflict': 8627.0, 'lits_loop': 9674.0, 'lits_other': 31724.0, 'jumps': {'jumps': 577.0, 'jumps_bounded': 181.0, 'levels': 4495.0, 'levels_bounded': 3107.0, 'max': 272.0, 'max_executed': 181.0, 'max_bounded': 179.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 15}

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 2 ( 22.22% solved)

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 15)', truth=True, inc_range=None)

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 10, step = 15]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 10)

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.105139s.

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(10, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(10,15).

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014130s with result Unsatisfiable.

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.11926899999999918, Incremental time limit = None
Running cumulative time = 2.2601017999999993, Cumulative time limit = 3600
Used memory = (RSS = 266.039062Mb, VMS = 258.703125Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.869062399999998, solving_time=0.39103940000000126, total_time=2.2601017999999993, memory=Memory(rss=266.0390625, vms=258.703125), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10513899999999943, solving_time=0.014129999999999754, total_time=0.11926899999999918, memory=Memory(rss=266.0390625, vms=258.703125), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 57889.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 371595.0, 'bodies_tr': 371595.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3292.0, 'count_bodies_tr': 3292.0, 'sccs': 313.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5947.0, 'rules': 711413.0, 'rules_normal': 707737.0, 'rules_choice': 3468.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 192.0, 'rules_tr': 711290.0, 'rules_tr_normal': 707737.0, 'rules_tr_choice': 3468.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 69.0, 'eqs': 126580.0, 'eqs_atom': 28020.0, 'eqs_body': 6768.0, 'eqs_other': 91792.0}, 'lpStep': {'atoms': 2922.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22022.0, 'bodies_tr': 22022.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 42523.0, 'rules_normal': 42315.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 42512.0, 'rules_tr_normal': 42315.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 5569.0, 'eqs_atom': 908.0, 'eqs_body': 400.0, 'eqs_other': 4261.0}, 'generator': {'vars': 21027.0, 'vars_eliminated': 0.0, 'vars_frozen': 13100.0, 'constraints': 381.0, 'constraints_binary': 12917.0, 'constraints_ternary': 565.0, 'acyc_edges': 0.0, 'complexity': 162443.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 1.0, 'lits_learnt': 2.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1188.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 1.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 2.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 16.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.12167549133300781, 'cpu': 0.125, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.3997631072998047, 'cpu': 2.78125, 'solve': 0.18900489807128906, 'unsat': 0.018949508666992188, 'sat': 0.04483222961425781}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 5612.0, 'conflicts': 599.0, 'conflicts_analyzed': 577.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 352.0, 'models': 10.0, 'models_level': 1442.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 574.0, 'distributed_sum_lbd': 1098.0, 'integrated': 2530.0, 'lemmas': 3637.0, 'lits_learnt': 50027.0, 'lemmas_binary': 258.0, 'lemmas_ternary': 89.0, 'cpu_time': 0.5625, 'integrated_imps': 1174.0, 'integrated_jumps': 566.0, 'guiding_paths_lits': 9937.0, 'guiding_paths': 112.0, 'splits': 0.0, 'lemmas_conflict': 554.0, 'lemmas_loop': 1186.0, 'lemmas_other': 1897.0, 'lits_conflict': 8627.0, 'lits_loop': 9676.0, 'lits_other': 31724.0, 'jumps': {'jumps': 577.0, 'jumps_bounded': 181.0, 'levels': 4495.0, 'levels_bounded': 3107.0, 'max': 272.0, 'max_executed': 181.0, 'max_bounded': 179.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102920s.

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018884s with result Unsatisfiable.

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1218041999999997, Incremental time limit = None
Running cumulative time = 2.381905999999999, Cumulative time limit = 3600
Used memory = (RSS = 266.656250Mb, VMS = 258.789062Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.9719822999999979, solving_time=0.4099237000000011, total_time=2.381905999999999, memory=Memory(rss=266.65625, vms=258.7890625), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10291989999999984, solving_time=0.018884299999999854, total_time=0.1218041999999997, memory=Memory(rss=266.65625, vms=258.7890625), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 60744.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 394020.0, 'bodies_tr': 394020.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3494.0, 'count_bodies_tr': 3494.0, 'sccs': 330.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6201.0, 'rules': 755164.0, 'rules_normal': 751280.0, 'rules_choice': 3663.0, 'rules_minimize': 17.0, 'rules_acyc': 0.0, 'rules_heuristic': 204.0, 'rules_tr': 755031.0, 'rules_tr_normal': 751280.0, 'rules_tr_choice': 3663.0, 'rules_tr_minimize': 17.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 71.0, 'eqs': 135395.0, 'eqs_atom': 29639.0, 'eqs_body': 7279.0, 'eqs_other': 98477.0}, 'lpStep': {'atoms': 2855.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22425.0, 'bodies_tr': 22425.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 254.0, 'rules': 43751.0, 'rules_normal': 43543.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 43741.0, 'rules_tr_normal': 43543.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 8815.0, 'eqs_atom': 1619.0, 'eqs_body': 511.0, 'eqs_other': 6685.0}, 'generator': {'vars': 21837.0, 'vars_eliminated': 0.0, 'vars_frozen': 13635.0, 'constraints': 575.0, 'constraints_binary': 19438.0, 'constraints_ternary': 1345.0, 'acyc_edges': 0.0, 'complexity': 162443.0}}, 'solving': {'solvers': {'choices': 54.0, 'conflicts': 40.0, 'conflicts_analyzed': 34.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 18.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 48.0, 'distributed_sum_lbd': 89.0, 'integrated': 214.0, 'lemmas': 246.0, 'lits_learnt': 1305.0, 'lemmas_binary': 54.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.0, 'integrated_imps': 97.0, 'integrated_jumps': 18.0, 'guiding_paths_lits': 1302.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 34.0, 'lemmas_loop': 35.0, 'lemmas_other': 177.0, 'lits_conflict': 224.0, 'lits_loop': 197.0, 'lits_other': 884.0, 'jumps': {'jumps': 34.0, 'jumps_bounded': 18.0, 'levels': 3510.0, 'levels_bounded': 3474.0, 'max': 219.0, 'max_executed': 219.0, 'max_bounded': 217.0}}}}, 'summary': {'call': 17.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.12339210510253906, 'cpu': 0.109375, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.5231552124023438, 'cpu': 2.890625, 'solve': 0.19099807739257812, 'unsat': 0.02094268798828125, 'sat': 0.04483222961425781}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 5666.0, 'conflicts': 639.0, 'conflicts_analyzed': 611.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 370.0, 'models': 10.0, 'models_level': 1442.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 622.0, 'distributed_sum_lbd': 1187.0, 'integrated': 2744.0, 'lemmas': 3883.0, 'lits_learnt': 51332.0, 'lemmas_binary': 312.0, 'lemmas_ternary': 97.0, 'cpu_time': 0.5625, 'integrated_imps': 1271.0, 'integrated_jumps': 584.0, 'guiding_paths_lits': 11239.0, 'guiding_paths': 118.0, 'splits': 0.0, 'lemmas_conflict': 588.0, 'lemmas_loop': 1221.0, 'lemmas_other': 2074.0, 'lits_conflict': 8851.0, 'lits_loop': 9873.0, 'lits_other': 32608.0, 'jumps': {'jumps': 611.0, 'jumps_bounded': 199.0, 'levels': 8005.0, 'levels_bounded': 6581.0, 'max': 272.0, 'max_executed': 219.0, 'max_bounded': 217.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.117919s.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036863s with result Satisfiable.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15478260000000077, Incremental time limit = None
Running cumulative time = 2.5366885999999997, Cumulative time limit = 3600
Used memory = (RSS = 269.281250Mb, VMS = 261.621094Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.089902s, Solving = 0.446787s, Total = 2.536689s, Memory = (RSS = 269.281250Mb, VMS = 261.621094Mb)), Calls = 18
Final Model :: Total atoms = 12751, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.0899016999999978, solving_time=0.446786900000002, total_time=2.5366885999999997, memory=Memory(rss=269.28125, vms=261.62109375), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1179193999999999, solving_time=0.03686320000000087, total_time=0.15478260000000077, memory=Memory(rss=269.28125, vms=261.62109375), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 63676.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 416692.0, 'bodies_tr': 416692.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3696.0, 'count_bodies_tr': 3696.0, 'sccs': 347.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6455.0, 'rules': 799299.0, 'rules_normal': 795207.0, 'rules_choice': 3858.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 216.0, 'rules_tr': 799158.0, 'rules_tr_normal': 795207.0, 'rules_tr_choice': 3858.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 75.0, 'eqs': 145004.0, 'eqs_atom': 31243.0, 'eqs_body': 7733.0, 'eqs_other': 106028.0}, 'lpStep': {'atoms': 2932.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22672.0, 'bodies_tr': 22672.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 254.0, 'rules': 44135.0, 'rules_normal': 43927.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 44127.0, 'rules_tr_normal': 43927.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 9609.0, 'eqs_atom': 1604.0, 'eqs_body': 454.0, 'eqs_other': 7551.0}, 'generator': {'vars': 22782.0, 'vars_eliminated': 0.0, 'vars_frozen': 14238.0, 'constraints': 750.0, 'constraints_binary': 26709.0, 'constraints_ternary': 1952.0, 'acyc_edges': 0.0, 'complexity': 162443.0}}, 'solving': {'solvers': {'choices': 920.0, 'conflicts': 138.0, 'conflicts_analyzed': 138.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 25.0, 'models': 1.0, 'models_level': 350.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 135.0, 'distributed_sum_lbd': 192.0, 'integrated': 342.0, 'lemmas': 516.0, 'lits_learnt': 3088.0, 'lemmas_binary': 19.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 202.0, 'integrated_jumps': 50.0, 'guiding_paths_lits': 1652.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 136.0, 'lemmas_loop': 75.0, 'lemmas_other': 305.0, 'lits_conflict': 452.0, 'lits_loop': 667.0, 'lits_other': 1969.0, 'jumps': {'jumps': 138.0, 'jumps_bounded': 28.0, 'levels': 5818.0, 'levels_bounded': 5668.0, 'max': 238.0, 'max_executed': 238.0, 'max_bounded': 236.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.15662002563476562, 'cpu': 0.171875, 'solve': 0.01898956298828125, 'unsat': 0.0, 'sat': 0.002994537353515625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.6797752380371094, 'cpu': 3.0625, 'solve': 0.20998764038085938, 'unsat': 0.02094268798828125, 'sat': 0.04782676696777344}, 'models': {'enumerated': 11.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6586.0, 'conflicts': 777.0, 'conflicts_analyzed': 749.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 395.0, 'models': 11.0, 'models_level': 1792.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 757.0, 'distributed_sum_lbd': 1379.0, 'integrated': 3086.0, 'lemmas': 4399.0, 'lits_learnt': 54420.0, 'lemmas_binary': 331.0, 'lemmas_ternary': 97.0, 'cpu_time': 0.59375, 'integrated_imps': 1473.0, 'integrated_jumps': 634.0, 'guiding_paths_lits': 12891.0, 'guiding_paths': 125.0, 'splits': 0.0, 'lemmas_conflict': 724.0, 'lemmas_loop': 1296.0, 'lemmas_other': 2379.0, 'lits_conflict': 9303.0, 'lits_loop': 10540.0, 'lits_other': 34577.0, 'jumps': {'jumps': 749.0, 'jumps_bounded': 227.0, 'levels': 13823.0, 'levels_bounded': 12249.0, 'max': 272.0, 'max_executed': 238.0, 'max_bounded': 236.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 15, 10: 18}

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 3 ( 33.33% solved)

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 18)', truth=True, inc_range=None)

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 11, step = 18]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 11)

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 18:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.138325s.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(11, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(11,18).

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029856s with result Satisfiable.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1681816000000005, Incremental time limit = None
Running cumulative time = 2.7048702000000002, Cumulative time limit = 3600
Used memory = (RSS = 271.710938Mb, VMS = 263.757812Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 12
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.228227s, Solving = 0.476643s, Total = 2.704870s, Memory = (RSS = 271.710938Mb, VMS = 263.757812Mb)), Calls = 19
Final Model :: Total atoms = 13132, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.228226799999999, solving_time=0.47664340000000127, total_time=2.7048702000000002, memory=Memory(rss=271.7109375, vms=263.7578125), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1383251000000012, solving_time=0.029856499999999286, total_time=0.1681816000000005, memory=Memory(rss=271.7109375, vms=263.7578125), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 66618.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 439124.0, 'bodies_tr': 439124.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3898.0, 'count_bodies_tr': 3898.0, 'sccs': 360.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6682.0, 'rules': 843220.0, 'rules_normal': 838920.0, 'rules_choice': 4053.0, 'rules_minimize': 19.0, 'rules_acyc': 0.0, 'rules_heuristic': 228.0, 'rules_tr': 843069.0, 'rules_tr_normal': 838920.0, 'rules_tr_choice': 4053.0, 'rules_tr_minimize': 19.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 77.0, 'eqs': 152774.0, 'eqs_atom': 32799.0, 'eqs_body': 8182.0, 'eqs_other': 111793.0}, 'lpStep': {'atoms': 2942.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22432.0, 'bodies_tr': 22432.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 227.0, 'rules': 43921.0, 'rules_normal': 43713.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 43911.0, 'rules_tr_normal': 43713.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 7770.0, 'eqs_atom': 1556.0, 'eqs_body': 449.0, 'eqs_other': 5765.0}, 'generator': {'vars': 23437.0, 'vars_eliminated': 0.0, 'vars_frozen': 14674.0, 'constraints': 799.0, 'constraints_binary': 23594.0, 'constraints_ternary': 1937.0, 'acyc_edges': 0.0, 'complexity': 162443.0}}, 'solving': {'solvers': {'choices': 850.0, 'conflicts': 17.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 2.0, 'models': 1.0, 'models_level': 375.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 19.0, 'integrated': 24.0, 'lemmas': 96.0, 'lits_learnt': 599.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 18.0, 'integrated_jumps': 5.0, 'guiding_paths_lits': 1785.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 62.0, 'lemmas_other': 18.0, 'lits_conflict': 17.0, 'lits_loop': 558.0, 'lits_other': 24.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 4.0, 'levels': 530.0, 'levels_bounded': 512.0, 'max': 256.0, 'max_executed': 2.0, 'max_bounded': 255.0}}}}, 'summary': {'call': 19.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.1713542938232422, 'cpu': 0.1875, 'solve': 0.01493072509765625, 'unsat': 0.0, 'sat': 0.002964019775390625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.8511295318603516, 'cpu': 3.25, 'solve': 0.22491836547851562, 'unsat': 0.02094268798828125, 'sat': 0.05079078674316406}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 7436.0, 'conflicts': 794.0, 'conflicts_analyzed': 766.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 397.0, 'models': 12.0, 'models_level': 2167.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 774.0, 'distributed_sum_lbd': 1398.0, 'integrated': 3110.0, 'lemmas': 4495.0, 'lits_learnt': 55019.0, 'lemmas_binary': 339.0, 'lemmas_ternary': 97.0, 'cpu_time': 0.625, 'integrated_imps': 1491.0, 'integrated_jumps': 639.0, 'guiding_paths_lits': 14676.0, 'guiding_paths': 132.0, 'splits': 0.0, 'lemmas_conflict': 740.0, 'lemmas_loop': 1358.0, 'lemmas_other': 2397.0, 'lits_conflict': 9320.0, 'lits_loop': 11098.0, 'lits_other': 34601.0, 'jumps': {'jumps': 766.0, 'jumps_bounded': 231.0, 'levels': 14353.0, 'levels_bounded': 12761.0, 'max': 272.0, 'max_executed': 238.0, 'max_bounded': 255.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 15, 10: 18, 11: 19}

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 4 ( 44.44% solved)

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 19)', truth=True, inc_range=None)

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 19]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 12)

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.118657s.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 20: original = External(symbol='current_last_sgoals(12, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(12,19).

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031890s with result Satisfiable.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15054700000000132, Incremental time limit = None
Running cumulative time = 2.8554172000000015, Cumulative time limit = 3600
Used memory = (RSS = 274.394531Mb, VMS = 266.324219Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 13
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.346884s, Solving = 0.508533s, Total = 2.855417s, Memory = (RSS = 274.394531Mb, VMS = 266.324219Mb)), Calls = 20
Final Model :: Total atoms = 13514, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.3468840999999996, solving_time=0.508533100000002, total_time=2.8554172000000015, memory=Memory(rss=274.39453125, vms=266.32421875), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11865730000000063, solving_time=0.03188970000000069, total_time=0.15054700000000132, memory=Memory(rss=274.39453125, vms=266.32421875), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 69522.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 461742.0, 'bodies_tr': 461742.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4100.0, 'count_bodies_tr': 4100.0, 'sccs': 377.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6936.0, 'rules': 887575.0, 'rules_normal': 883067.0, 'rules_choice': 4248.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 240.0, 'rules_tr': 887416.0, 'rules_tr_normal': 883067.0, 'rules_tr_choice': 4248.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 81.0, 'eqs': 161088.0, 'eqs_atom': 34381.0, 'eqs_body': 8524.0, 'eqs_other': 118183.0}, 'lpStep': {'atoms': 2904.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22618.0, 'bodies_tr': 22618.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 254.0, 'rules': 44355.0, 'rules_normal': 44147.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 44347.0, 'rules_tr_normal': 44147.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 8314.0, 'eqs_atom': 1582.0, 'eqs_body': 342.0, 'eqs_other': 6390.0}, 'generator': {'vars': 24289.0, 'vars_eliminated': 0.0, 'vars_frozen': 15244.0, 'constraints': 1006.0, 'constraints_binary': 31355.0, 'constraints_ternary': 2821.0, 'acyc_edges': 0.0, 'complexity': 162443.0}}, 'solving': {'solvers': {'choices': 882.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 400.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 73.0, 'lits_learnt': 640.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1918.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 73.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 640.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 20.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1525707244873047, 'cpu': 0.171875, 'solve': 0.015933990478515625, 'unsat': 0.0, 'sat': 0.00299072265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.0037002563476562, 'cpu': 3.421875, 'solve': 0.24085235595703125, 'unsat': 0.02094268798828125, 'sat': 0.05378150939941406}, 'models': {'enumerated': 13.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 8318.0, 'conflicts': 794.0, 'conflicts_analyzed': 766.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 397.0, 'models': 13.0, 'models_level': 2567.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 778.0, 'distributed_sum_lbd': 1406.0, 'integrated': 3110.0, 'lemmas': 4568.0, 'lits_learnt': 55659.0, 'lemmas_binary': 339.0, 'lemmas_ternary': 101.0, 'cpu_time': 0.65625, 'integrated_imps': 1491.0, 'integrated_jumps': 639.0, 'guiding_paths_lits': 16594.0, 'guiding_paths': 139.0, 'splits': 0.0, 'lemmas_conflict': 740.0, 'lemmas_loop': 1431.0, 'lemmas_other': 2397.0, 'lits_conflict': 9320.0, 'lits_loop': 11738.0, 'lits_other': 34601.0, 'jumps': {'jumps': 766.0, 'jumps_bounded': 231.0, 'levels': 14353.0, 'levels_bounded': 12761.0, 'max': 272.0, 'max_executed': 238.0, 'max_bounded': 255.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 15, 10: 18, 11: 19, 12: 20}

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 5 ( 55.56% solved)

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 20)', truth=True, inc_range=None)

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 20]:
sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 13)

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.125934s.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 21: original = External(symbol='current_last_sgoals(13, 20)', truth=True, inc_range=None), conversion = current_last_sgoals(13,20).

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023321s with result Unsatisfiable.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1492551000000013, Incremental time limit = None
Running cumulative time = 3.004672300000003, Cumulative time limit = 3600
Used memory = (RSS = 276.269531Mb, VMS = 267.906250Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=20, end_step=21, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.472818000000001, solving_time=0.5318543000000018, total_time=3.004672300000003, memory=Memory(rss=276.26953125, vms=267.90625), step_range=range(0, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1259339000000015, solving_time=0.02332119999999982, total_time=0.1492551000000013, memory=Memory(rss=276.26953125, vms=267.90625), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 72456.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 484570.0, 'bodies_tr': 484570.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4302.0, 'count_bodies_tr': 4302.0, 'sccs': 394.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7194.0, 'rules': 932275.0, 'rules_normal': 927559.0, 'rules_choice': 4443.0, 'rules_minimize': 21.0, 'rules_acyc': 0.0, 'rules_heuristic': 252.0, 'rules_tr': 932108.0, 'rules_tr_normal': 927559.0, 'rules_tr_choice': 4443.0, 'rules_tr_minimize': 21.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 85.0, 'eqs': 171002.0, 'eqs_atom': 35965.0, 'eqs_body': 8947.0, 'eqs_other': 126090.0}, 'lpStep': {'atoms': 2934.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22828.0, 'bodies_tr': 22828.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 258.0, 'rules': 44700.0, 'rules_normal': 44492.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 44692.0, 'rules_tr_normal': 44492.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 9914.0, 'eqs_atom': 1584.0, 'eqs_body': 423.0, 'eqs_other': 7907.0}, 'generator': {'vars': 25283.0, 'vars_eliminated': 0.0, 'vars_frozen': 15865.0, 'constraints': 1232.0, 'constraints_binary': 41435.0, 'constraints_ternary': 3645.0, 'acyc_edges': 0.0, 'complexity': 162443.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2051.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 21.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1515979766845703, 'cpu': 0.140625, 'solve': 0.002994537353515625, 'unsat': 0.002994537353515625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.1552982330322266, 'cpu': 3.5625, 'solve': 0.24384689331054688, 'unsat': 0.023937225341796875, 'sat': 0.05378150939941406}, 'models': {'enumerated': 13.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 8318.0, 'conflicts': 802.0, 'conflicts_analyzed': 766.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 397.0, 'models': 13.0, 'models_level': 2567.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 778.0, 'distributed_sum_lbd': 1406.0, 'integrated': 3110.0, 'lemmas': 4568.0, 'lits_learnt': 55659.0, 'lemmas_binary': 339.0, 'lemmas_ternary': 101.0, 'cpu_time': 0.65625, 'integrated_imps': 1491.0, 'integrated_jumps': 639.0, 'guiding_paths_lits': 18645.0, 'guiding_paths': 146.0, 'splits': 0.0, 'lemmas_conflict': 740.0, 'lemmas_loop': 1431.0, 'lemmas_other': 2397.0, 'lits_conflict': 9320.0, 'lits_loop': 11738.0, 'lits_other': 34601.0, 'jumps': {'jumps': 766.0, 'jumps_bounded': 231.0, 'levels': 14353.0, 'levels_bounded': 12761.0, 'max': 272.0, 'max_executed': 238.0, 'max_bounded': 255.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.114934s.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043443s with result Satisfiable.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15837710000000094, Incremental time limit = None
Running cumulative time = 3.163049400000004, Cumulative time limit = 3600
Used memory = (RSS = 279.074219Mb, VMS = 270.097656Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 14
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.587752s, Solving = 0.575297s, Total = 3.163049s, Memory = (RSS = 279.074219Mb, VMS = 270.097656Mb)), Calls = 22
Final Model :: Total atoms = 14277, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=21, end_step=22, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.5877521000000003, solving_time=0.5752973000000035, total_time=3.163049400000004, memory=Memory(rss=279.07421875, vms=270.09765625), step_range=range(0, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11493409999999926, solving_time=0.043443000000001675, total_time=0.15837710000000094, memory=Memory(rss=279.07421875, vms=270.09765625), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 75413.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 507793.0, 'bodies_tr': 507793.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4504.0, 'count_bodies_tr': 4504.0, 'sccs': 419.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7592.0, 'rules': 977507.0, 'rules_normal': 972583.0, 'rules_choice': 4638.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 264.0, 'rules_tr': 977336.0, 'rules_tr_normal': 972583.0, 'rules_tr_choice': 4638.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 93.0, 'eqs': 178840.0, 'eqs_atom': 37424.0, 'eqs_body': 9131.0, 'eqs_other': 132285.0}, 'lpStep': {'atoms': 2957.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23223.0, 'bodies_tr': 23223.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 45232.0, 'rules_normal': 45024.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 45228.0, 'rules_tr_normal': 45024.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 7838.0, 'eqs_atom': 1459.0, 'eqs_body': 184.0, 'eqs_other': 6195.0}, 'generator': {'vars': 26848.0, 'vars_eliminated': 0.0, 'vars_frozen': 16824.0, 'constraints': 1635.0, 'constraints_binary': 57210.0, 'constraints_ternary': 5213.0, 'acyc_edges': 0.0, 'complexity': 162443.0}}, 'solving': {'solvers': {'choices': 1149.0, 'conflicts': 62.0, 'conflicts_analyzed': 62.0, 'restarts': 0.0, 'restarts_last': 17.0, 'extra': {'domain_choices': 102.0, 'models': 1.0, 'models_level': 451.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 64.0, 'distributed_sum_lbd': 121.0, 'integrated': 360.0, 'lemmas': 523.0, 'lits_learnt': 2835.0, 'lemmas_binary': 51.0, 'lemmas_ternary': 25.0, 'cpu_time': 0.03125, 'integrated_imps': 257.0, 'integrated_jumps': 95.0, 'guiding_paths_lits': 2184.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 62.0, 'lemmas_loop': 113.0, 'lemmas_other': 348.0, 'lits_conflict': 300.0, 'lits_loop': 837.0, 'lits_other': 1698.0, 'jumps': {'jumps': 62.0, 'jumps_bounded': 32.0, 'levels': 6333.0, 'levels_bounded': 6252.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}, 'summary': {'call': 22.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.16124725341796875, 'cpu': 0.171875, 'solve': 0.024932861328125, 'unsat': 0.0, 'sat': 0.0059833526611328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.3165454864501953, 'cpu': 3.734375, 'solve': 0.2687797546386719, 'unsat': 0.023937225341796875, 'sat': 0.059764862060546875}, 'models': {'enumerated': 14.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 9467.0, 'conflicts': 864.0, 'conflicts_analyzed': 828.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 499.0, 'models': 14.0, 'models_level': 3018.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 842.0, 'distributed_sum_lbd': 1527.0, 'integrated': 3470.0, 'lemmas': 5091.0, 'lits_learnt': 58494.0, 'lemmas_binary': 390.0, 'lemmas_ternary': 126.0, 'cpu_time': 0.6875, 'integrated_imps': 1748.0, 'integrated_jumps': 734.0, 'guiding_paths_lits': 20829.0, 'guiding_paths': 153.0, 'splits': 0.0, 'lemmas_conflict': 802.0, 'lemmas_loop': 1544.0, 'lemmas_other': 2745.0, 'lits_conflict': 9620.0, 'lits_loop': 12575.0, 'lits_other': 36299.0, 'jumps': {'jumps': 828.0, 'jumps_bounded': 263.0, 'levels': 20686.0, 'levels_bounded': 19013.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 15, 10: 18, 11: 19, 12: 20, 13: 22}

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 6 ( 66.67% solved)

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 22)', truth=True, inc_range=None)

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 14, step = 22]:
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 14)

[13-11-2021_23-07-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 22:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.132278s.

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 23: original = External(symbol='current_last_sgoals(14, 22)', truth=True, inc_range=None), conversion = current_last_sgoals(14,22).

[13-11-2021_23-07-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.115496s with result Satisfiable.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.24777439999999906, Incremental time limit = None
Running cumulative time = 3.410823800000003, Cumulative time limit = 3600
Used memory = (RSS = 287.027344Mb, VMS = 283.910156Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 15
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.720030s, Solving = 0.690794s, Total = 3.410824s, Memory = (RSS = 287.027344Mb, VMS = 283.910156Mb)), Calls = 23
Final Model :: Total atoms = 14661, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=22, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.7200303000000003, solving_time=0.6907935000000025, total_time=3.410823800000003, memory=Memory(rss=287.02734375, vms=283.91015625), step_range=range(0, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1322782, solving_time=0.11549619999999905, total_time=0.24777439999999906, memory=Memory(rss=287.02734375, vms=283.91015625), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 78618.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 531399.0, 'bodies_tr': 531399.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4706.0, 'count_bodies_tr': 4706.0, 'sccs': 444.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7993.0, 'rules': 1023346.0, 'rules_normal': 1018214.0, 'rules_choice': 4833.0, 'rules_minimize': 23.0, 'rules_acyc': 0.0, 'rules_heuristic': 276.0, 'rules_tr': 1023171.0, 'rules_tr_normal': 1018214.0, 'rules_tr_choice': 4833.0, 'rules_tr_minimize': 23.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 101.0, 'eqs': 190503.0, 'eqs_atom': 39009.0, 'eqs_body': 9373.0, 'eqs_other': 142121.0}, 'lpStep': {'atoms': 3205.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23606.0, 'bodies_tr': 23606.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 401.0, 'rules': 45839.0, 'rules_normal': 45631.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 45835.0, 'rules_tr_normal': 45631.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 11663.0, 'eqs_atom': 1585.0, 'eqs_body': 242.0, 'eqs_other': 9836.0}, 'generator': {'vars': 28504.0, 'vars_eliminated': 0.0, 'vars_frozen': 17814.0, 'constraints': 1946.0, 'constraints_binary': 70919.0, 'constraints_ternary': 6691.0, 'acyc_edges': 0.0, 'complexity': 162443.0}}, 'solving': {'solvers': {'choices': 1177.0, 'conflicts': 59.0, 'conflicts_analyzed': 59.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 17.0, 'models': 1.0, 'models_level': 476.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 64.0, 'distributed_sum_lbd': 77.0, 'integrated': 48.0, 'lemmas': 207.0, 'lits_learnt': 1424.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.265625, 'integrated_imps': 6.0, 'integrated_jumps': 156.0, 'guiding_paths_lits': 2317.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 59.0, 'lemmas_loop': 100.0, 'lemmas_other': 48.0, 'lits_conflict': 124.0, 'lits_loop': 838.0, 'lits_other': 462.0, 'jumps': {'jumps': 59.0, 'jumps_bounded': 1.0, 'levels': 60.0, 'levels_bounded': 1.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 23.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2513294219970703, 'cpu': 0.421875, 'solve': 0.08876609802246094, 'unsat': 0.0, 'sat': 0.006984710693359375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.5678749084472656, 'cpu': 4.15625, 'solve': 0.3575458526611328, 'unsat': 0.023937225341796875, 'sat': 0.06674957275390625}, 'models': {'enumerated': 15.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 10644.0, 'conflicts': 923.0, 'conflicts_analyzed': 887.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 516.0, 'models': 15.0, 'models_level': 3494.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 906.0, 'distributed_sum_lbd': 1604.0, 'integrated': 3518.0, 'lemmas': 5298.0, 'lits_learnt': 59918.0, 'lemmas_binary': 397.0, 'lemmas_ternary': 140.0, 'cpu_time': 0.953125, 'integrated_imps': 1754.0, 'integrated_jumps': 890.0, 'guiding_paths_lits': 23146.0, 'guiding_paths': 160.0, 'splits': 0.0, 'lemmas_conflict': 861.0, 'lemmas_loop': 1644.0, 'lemmas_other': 2793.0, 'lits_conflict': 9744.0, 'lits_loop': 13413.0, 'lits_other': 36761.0, 'jumps': {'jumps': 887.0, 'jumps_bounded': 264.0, 'levels': 20746.0, 'levels_bounded': 19014.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 15, 10: 18, 11: 19, 12: 20, 13: 22, 14: 23}

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 7 ( 77.78% solved)

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(15, 23)', truth=True, inc_range=None)

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 15, step = 23]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 15)

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.123553s.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(15, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(15,23).

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030220s with result Unsatisfiable.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.15377249999999876, Incremental time limit = None
Running cumulative time = 3.5645963000000016, Cumulative time limit = 3600
Used memory = (RSS = 288.773438Mb, VMS = 284.984375Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=23, end_step=24, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.843583099999999, solving_time=0.7210132000000025, total_time=3.5645963000000016, memory=Memory(rss=288.7734375, vms=284.984375), step_range=range(0, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1235527999999988, solving_time=0.03021969999999996, total_time=0.15377249999999876, memory=Memory(rss=288.7734375, vms=284.984375), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 81848.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 554867.0, 'bodies_tr': 554867.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4908.0, 'count_bodies_tr': 4908.0, 'sccs': 469.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8391.0, 'rules': 1069097.0, 'rules_normal': 1063757.0, 'rules_choice': 5028.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 288.0, 'rules_tr': 1068918.0, 'rules_tr_normal': 1063757.0, 'rules_tr_choice': 5028.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 109.0, 'eqs': 198779.0, 'eqs_atom': 40505.0, 'eqs_body': 9584.0, 'eqs_other': 148690.0}, 'lpStep': {'atoms': 3230.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23468.0, 'bodies_tr': 23468.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 45751.0, 'rules_normal': 45543.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 45747.0, 'rules_tr_normal': 45543.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 8276.0, 'eqs_atom': 1496.0, 'eqs_body': 211.0, 'eqs_other': 6569.0}, 'generator': {'vars': 30074.0, 'vars_eliminated': 0.0, 'vars_frozen': 18775.0, 'constraints': 2063.0, 'constraints_binary': 72263.0, 'constraints_ternary': 6625.0, 'acyc_edges': 0.0, 'complexity': 162443.0}}, 'solving': {'solvers': {'choices': 55.0, 'conflicts': 42.0, 'conflicts_analyzed': 34.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 25.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 51.0, 'integrated': 109.0, 'lemmas': 163.0, 'lits_learnt': 2117.0, 'lemmas_binary': 22.0, 'lemmas_ternary': 12.0, 'cpu_time': 0.0, 'integrated_imps': 88.0, 'integrated_jumps': 9.0, 'guiding_paths_lits': 2450.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 24.0, 'lemmas_loop': 40.0, 'lemmas_other': 99.0, 'lits_conflict': 340.0, 'lits_loop': 384.0, 'lits_other': 1393.0, 'jumps': {'jumps': 34.0, 'jumps_bounded': 12.0, 'levels': 58.0, 'levels_bounded': 12.0, 'max': 8.0, 'max_executed': 8.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 24.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.15760231018066406, 'cpu': 0.15625, 'solve': 0.0049877166748046875, 'unsat': 0.0049877166748046875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.7254772186279297, 'cpu': 4.3125, 'solve': 0.3625335693359375, 'unsat': 0.028924942016601562, 'sat': 0.06674957275390625}, 'models': {'enumerated': 15.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 10699.0, 'conflicts': 965.0, 'conflicts_analyzed': 921.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 541.0, 'models': 15.0, 'models_level': 3494.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 930.0, 'distributed_sum_lbd': 1655.0, 'integrated': 3627.0, 'lemmas': 5461.0, 'lits_learnt': 62035.0, 'lemmas_binary': 419.0, 'lemmas_ternary': 152.0, 'cpu_time': 0.953125, 'integrated_imps': 1842.0, 'integrated_jumps': 899.0, 'guiding_paths_lits': 25596.0, 'guiding_paths': 167.0, 'splits': 0.0, 'lemmas_conflict': 885.0, 'lemmas_loop': 1684.0, 'lemmas_other': 2892.0, 'lits_conflict': 10084.0, 'lits_loop': 13797.0, 'lits_other': 38154.0, 'jumps': {'jumps': 921.0, 'jumps_bounded': 276.0, 'levels': 20804.0, 'levels_bounded': 19026.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 24:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.137916s.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051373s with result Satisfiable.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.18928939999999983, Incremental time limit = None
Running cumulative time = 3.7538857000000014, Cumulative time limit = 3600
Used memory = (RSS = 294.234375Mb, VMS = 289.839844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 16
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.981499s, Solving = 0.772386s, Total = 3.753886s, Memory = (RSS = 294.234375Mb, VMS = 289.839844Mb)), Calls = 25
Final Model :: Total atoms = 15430, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=25, start_step=24, end_step=25, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.981499499999999, solving_time=0.7723862000000024, total_time=3.7538857000000014, memory=Memory(rss=294.234375, vms=289.83984375), step_range=range(0, 26), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13791639999999994, solving_time=0.05137299999999989, total_time=0.18928939999999983, memory=Memory(rss=294.234375, vms=289.83984375), step_range=range(25, 26), clingo_stats={'problem': {'lp': {'atoms': 85071.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 578708.0, 'bodies_tr': 578708.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5110.0, 'count_bodies_tr': 5110.0, 'sccs': 494.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8795.0, 'rules': 1115531.0, 'rules_normal': 1109983.0, 'rules_choice': 5223.0, 'rules_minimize': 25.0, 'rules_acyc': 0.0, 'rules_heuristic': 300.0, 'rules_tr': 1115348.0, 'rules_tr_normal': 1109983.0, 'rules_tr_choice': 5223.0, 'rules_tr_minimize': 25.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 117.0, 'eqs': 211095.0, 'eqs_atom': 42210.0, 'eqs_body': 9874.0, 'eqs_other': 159011.0}, 'lpStep': {'atoms': 3223.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23841.0, 'bodies_tr': 23841.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 404.0, 'rules': 46434.0, 'rules_normal': 46226.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 46430.0, 'rules_tr_normal': 46226.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 12316.0, 'eqs_atom': 1705.0, 'eqs_body': 290.0, 'eqs_other': 10321.0}, 'generator': {'vars': 31823.0, 'vars_eliminated': 0.0, 'vars_frozen': 19798.0, 'constraints': 2488.0, 'constraints_binary': 91452.0, 'constraints_ternary': 8793.0, 'acyc_edges': 0.0, 'complexity': 162443.0}}, 'solving': {'solvers': {'choices': 1133.0, 'conflicts': 21.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 34.0, 'models': 1.0, 'models_level': 526.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 19.0, 'distributed_sum_lbd': 46.0, 'integrated': 66.0, 'lemmas': 117.0, 'lits_learnt': 1647.0, 'lemmas_binary': 14.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 36.0, 'integrated_jumps': 6.0, 'guiding_paths_lits': 2583.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 19.0, 'lemmas_loop': 32.0, 'lemmas_other': 66.0, 'lits_conflict': 315.0, 'lits_loop': 252.0, 'lits_other': 1080.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 6.0, 'levels': 31.0, 'levels_bounded': 6.0, 'max': 3.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 25.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.19248199462890625, 'cpu': 0.203125, 'solve': 0.021938323974609375, 'unsat': 0.0, 'sat': 0.0059833526611328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.917959213256836, 'cpu': 4.515625, 'solve': 0.3844718933105469, 'unsat': 0.028924942016601562, 'sat': 0.07273292541503906}, 'models': {'enumerated': 16.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 11832.0, 'conflicts': 986.0, 'conflicts_analyzed': 942.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 575.0, 'models': 16.0, 'models_level': 4020.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 949.0, 'distributed_sum_lbd': 1701.0, 'integrated': 3693.0, 'lemmas': 5578.0, 'lits_learnt': 63682.0, 'lemmas_binary': 433.0, 'lemmas_ternary': 152.0, 'cpu_time': 1.0, 'integrated_imps': 1878.0, 'integrated_jumps': 905.0, 'guiding_paths_lits': 28179.0, 'guiding_paths': 174.0, 'splits': 0.0, 'lemmas_conflict': 904.0, 'lemmas_loop': 1716.0, 'lemmas_other': 2958.0, 'lits_conflict': 10399.0, 'lits_loop': 14049.0, 'lits_other': 39234.0, 'jumps': {'jumps': 942.0, 'jumps_bounded': 282.0, 'levels': 20835.0, 'levels_bounded': 19032.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 15, 10: 18, 11: 19, 12: 20, 13: 22, 14: 23, 15: 25}

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 16 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 8 ( 88.89% solved)

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(16, 25)', truth=True, inc_range=None)

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 16, step = 25]:
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 16)

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 25:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.135744s.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 26: original = External(symbol='current_last_sgoals(16, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(16,25).

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042840s with result Satisfiable.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.17858419999999953, Incremental time limit = None
Running cumulative time = 3.932469900000001, Cumulative time limit = 3600
Used memory = (RSS = 298.332031Mb, VMS = 292.714844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 17
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.117243s, Solving = 0.815227s, Total = 3.932470s, Memory = (RSS = 298.332031Mb, VMS = 292.714844Mb)), Calls = 26
Final Model :: Total atoms = 15816, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=26, start_step=25, end_step=26, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.1172432999999993, solving_time=0.8152266000000017, total_time=3.932469900000001, memory=Memory(rss=298.33203125, vms=292.71484375), step_range=range(0, 27), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1357438000000002, solving_time=0.042840399999999335, total_time=0.17858419999999953, memory=Memory(rss=298.33203125, vms=292.71484375), step_range=range(26, 27), clingo_stats={'problem': {'lp': {'atoms': 88332.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 603154.0, 'bodies_tr': 603154.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5312.0, 'count_bodies_tr': 5312.0, 'sccs': 519.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9389.0, 'rules': 1162707.0, 'rules_normal': 1156951.0, 'rules_choice': 5418.0, 'rules_minimize': 26.0, 'rules_acyc': 0.0, 'rules_heuristic': 312.0, 'rules_tr': 1162524.0, 'rules_tr_normal': 1156951.0, 'rules_tr_choice': 5418.0, 'rules_tr_minimize': 26.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 129.0, 'eqs': 218575.0, 'eqs_atom': 43837.0, 'eqs_body': 9954.0, 'eqs_other': 164784.0}, 'lpStep': {'atoms': 3261.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24446.0, 'bodies_tr': 24446.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 47176.0, 'rules_normal': 46968.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 47176.0, 'rules_tr_normal': 46968.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7480.0, 'eqs_atom': 1627.0, 'eqs_body': 80.0, 'eqs_other': 5773.0}, 'generator': {'vars': 34186.0, 'vars_eliminated': 0.0, 'vars_frozen': 21189.0, 'constraints': 3104.0, 'constraints_binary': 119050.0, 'constraints_ternary': 11774.0, 'acyc_edges': 0.0, 'complexity': 162443.0}}, 'solving': {'solvers': {'choices': 1150.0, 'conflicts': 1.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 14.0, 'models': 1.0, 'models_level': 553.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 6.0, 'lemmas': 7.0, 'lits_learnt': 14.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.078125, 'integrated_imps': 6.0, 'integrated_jumps': 6.0, 'guiding_paths_lits': 2716.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 6.0, 'lits_conflict': 2.0, 'lits_loop': 0.0, 'lits_other': 12.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 2.0, 'levels_bounded': 1.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 26.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.1825103759765625, 'cpu': 0.234375, 'solve': 0.021940231323242188, 'unsat': 0.0, 'sat': 0.0059833526611328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.100469589233398, 'cpu': 4.75, 'solve': 0.40641212463378906, 'unsat': 0.028924942016601562, 'sat': 0.07871627807617188}, 'models': {'enumerated': 17.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 12982.0, 'conflicts': 987.0, 'conflicts_analyzed': 943.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 589.0, 'models': 17.0, 'models_level': 4573.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 950.0, 'distributed_sum_lbd': 1703.0, 'integrated': 3699.0, 'lemmas': 5585.0, 'lits_learnt': 63696.0, 'lemmas_binary': 440.0, 'lemmas_ternary': 152.0, 'cpu_time': 1.078125, 'integrated_imps': 1884.0, 'integrated_jumps': 911.0, 'guiding_paths_lits': 30895.0, 'guiding_paths': 181.0, 'splits': 0.0, 'lemmas_conflict': 905.0, 'lemmas_loop': 1716.0, 'lemmas_other': 2964.0, 'lits_conflict': 10401.0, 'lits_loop': 14049.0, 'lits_other': 39246.0, 'jumps': {'jumps': 943.0, 'jumps_bounded': 283.0, 'levels': 20837.0, 'levels_bounded': 19033.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 15, 10: 18, 11: 19, 12: 20, 13: 22, 14: 23, 15: 25, 16: 26}

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 17 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 9 (100.00% solved)

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(17, 26)', truth=True, inc_range=None)

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 17, step = 26]:
sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 17)

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.132180s.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 27: original = External(symbol='current_last_sgoals(17, 26)', truth=True, inc_range=None), conversion = current_last_sgoals(17,26).

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054418s with result Satisfiable.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.18659809999999943, Incremental time limit = None
Running cumulative time = 4.119068, Cumulative time limit = 3600
Used memory = (RSS = 304.597656Mb, VMS = 297.562500Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 18
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.249423s, Solving = 0.869645s, Total = 4.119068s, Memory = (RSS = 304.597656Mb, VMS = 297.562500Mb)), Calls = 27
Final Model :: Total atoms = 16203, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=27, start_step=26, end_step=27, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.2494233999999986, solving_time=0.8696446000000018, total_time=4.119068, memory=Memory(rss=304.59765625, vms=297.5625), step_range=range(0, 28), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13218009999999936, solving_time=0.05441800000000008, total_time=0.18659809999999943, memory=Memory(rss=304.59765625, vms=297.5625), step_range=range(27, 28), clingo_stats={'problem': {'lp': {'atoms': 91842.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 628078.0, 'bodies_tr': 628078.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5514.0, 'count_bodies_tr': 5514.0, 'sccs': 544.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9983.0, 'rules': 1210671.0, 'rules_normal': 1204707.0, 'rules_choice': 5613.0, 'rules_minimize': 27.0, 'rules_acyc': 0.0, 'rules_heuristic': 324.0, 'rules_tr': 1210488.0, 'rules_tr_normal': 1204707.0, 'rules_tr_choice': 5613.0, 'rules_tr_minimize': 27.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 141.0, 'eqs': 226724.0, 'eqs_atom': 45677.0, 'eqs_body': 10028.0, 'eqs_other': 171019.0}, 'lpStep': {'atoms': 3510.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24924.0, 'bodies_tr': 24924.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 47964.0, 'rules_normal': 47756.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 47964.0, 'rules_tr_normal': 47756.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8149.0, 'eqs_atom': 1840.0, 'eqs_body': 74.0, 'eqs_other': 6235.0}, 'generator': {'vars': 36619.0, 'vars_eliminated': 0.0, 'vars_frozen': 22592.0, 'constraints': 3742.0, 'constraints_binary': 146896.0, 'constraints_ternary': 15243.0, 'acyc_edges': 0.0, 'complexity': 166623.0}}, 'solving': {'solvers': {'choices': 1192.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 14.0, 'models': 1.0, 'models_level': 577.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 64.0, 'lits_learnt': 544.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2849.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 64.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 544.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 27.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1904926300048828, 'cpu': 0.203125, 'solve': 0.0299224853515625, 'unsat': 0.0, 'sat': 0.0049896240234375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.290962219238281, 'cpu': 4.953125, 'solve': 0.43633460998535156, 'unsat': 0.028924942016601562, 'sat': 0.08370590209960938}, 'models': {'enumerated': 18.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 14174.0, 'conflicts': 987.0, 'conflicts_analyzed': 943.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 603.0, 'models': 18.0, 'models_level': 5150.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 950.0, 'distributed_sum_lbd': 1703.0, 'integrated': 3699.0, 'lemmas': 5649.0, 'lits_learnt': 64240.0, 'lemmas_binary': 440.0, 'lemmas_ternary': 152.0, 'cpu_time': 1.109375, 'integrated_imps': 1884.0, 'integrated_jumps': 911.0, 'guiding_paths_lits': 33744.0, 'guiding_paths': 188.0, 'splits': 0.0, 'lemmas_conflict': 905.0, 'lemmas_loop': 1780.0, 'lemmas_other': 2964.0, 'lits_conflict': 10401.0, 'lits_loop': 14593.0, 'lits_other': 39246.0, 'jumps': {'jumps': 943.0, 'jumps_bounded': 283.0, 'levels': 20837.0, 'levels_bounded': 19033.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 15, 10: 18, 11: 19, 12: 20, 13: 22, 14: 23, 15: 25, 16: 26, 17: 27}

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 18 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 10 (111.11% solved)

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 17 was achieved successfully.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.136291s, Solving = 0.013925s, Total = 0.150217s, Memory = (RSS = 203.917969Mb, VMS = 193.789062Mb)
2 : Statistics :: Grounding = 0.108406s, Solving = 0.010814s, Total = 0.119219s, Memory = (RSS = 206.039062Mb, VMS = 195.734375Mb)
3 : Statistics :: Grounding = 0.093286s, Solving = 0.007222s, Total = 0.100508s, Memory = (RSS = 207.398438Mb, VMS = 197.187500Mb)
4 : Statistics :: Grounding = 0.112117s, Solving = 0.016614s, Total = 0.128731s, Memory = (RSS = 209.386719Mb, VMS = 199.074219Mb)
5 : Statistics :: Grounding = 0.115869s, Solving = 0.013917s, Total = 0.129785s, Memory = (RSS = 211.808594Mb, VMS = 201.949219Mb)
6 : Statistics :: Grounding = 0.099495s, Solving = 0.009546s, Total = 0.109041s, Memory = (RSS = 213.589844Mb, VMS = 203.636719Mb)
7 : Statistics :: Grounding = 0.107534s, Solving = 0.011328s, Total = 0.118862s, Memory = (RSS = 214.894531Mb, VMS = 204.972656Mb)
8 : Statistics :: Grounding = 0.110697s, Solving = 0.032135s, Total = 0.142832s, Memory = (RSS = 219.871094Mb, VMS = 210.261719Mb)
9 : Statistics :: Grounding = 0.163249s, Solving = 0.035454s, Total = 0.198703s, Memory = (RSS = 226.449219Mb, VMS = 217.539062Mb)
10 : Statistics :: Grounding = 0.112865s, Solving = 0.018417s, Total = 0.131282s, Memory = (RSS = 231.164062Mb, VMS = 221.671875Mb)
11 : Statistics :: Grounding = 0.117987s, Solving = 0.041655s, Total = 0.159642s, Memory = (RSS = 238.906250Mb, VMS = 230.855469Mb)
12 : Statistics :: Grounding = 0.118920s, Solving = 0.077084s, Total = 0.196004s, Memory = (RSS = 244.777344Mb, VMS = 236.523438Mb)
13 : Statistics :: Grounding = 0.117208s, Solving = 0.032258s, Total = 0.149466s, Memory = (RSS = 250.976562Mb, VMS = 241.859375Mb)
14 : Statistics :: Grounding = 0.153216s, Solving = 0.029288s, Total = 0.182503s, Memory = (RSS = 264.652344Mb, VMS = 257.855469Mb)
15 : Statistics :: Grounding = 0.096785s, Solving = 0.027252s, Total = 0.124037s, Memory = (RSS = 265.722656Mb, VMS = 258.656250Mb)
16 : Statistics :: Grounding = 0.105139s, Solving = 0.014130s, Total = 0.119269s, Memory = (RSS = 266.039062Mb, VMS = 258.703125Mb)
17 : Statistics :: Grounding = 0.102920s, Solving = 0.018884s, Total = 0.121804s, Memory = (RSS = 266.656250Mb, VMS = 258.789062Mb)
18 : Statistics :: Grounding = 0.117919s, Solving = 0.036863s, Total = 0.154783s, Memory = (RSS = 269.281250Mb, VMS = 261.621094Mb)
19 : Statistics :: Grounding = 0.138325s, Solving = 0.029856s, Total = 0.168182s, Memory = (RSS = 271.710938Mb, VMS = 263.757812Mb)
20 : Statistics :: Grounding = 0.118657s, Solving = 0.031890s, Total = 0.150547s, Memory = (RSS = 274.394531Mb, VMS = 266.324219Mb)
21 : Statistics :: Grounding = 0.125934s, Solving = 0.023321s, Total = 0.149255s, Memory = (RSS = 276.269531Mb, VMS = 267.906250Mb)
22 : Statistics :: Grounding = 0.114934s, Solving = 0.043443s, Total = 0.158377s, Memory = (RSS = 279.074219Mb, VMS = 270.097656Mb)
23 : Statistics :: Grounding = 0.132278s, Solving = 0.115496s, Total = 0.247774s, Memory = (RSS = 287.027344Mb, VMS = 283.910156Mb)
24 : Statistics :: Grounding = 0.123553s, Solving = 0.030220s, Total = 0.153772s, Memory = (RSS = 288.773438Mb, VMS = 284.984375Mb)
25 : Statistics :: Grounding = 0.137916s, Solving = 0.051373s, Total = 0.189289s, Memory = (RSS = 294.234375Mb, VMS = 289.839844Mb)
26 : Statistics :: Grounding = 0.135744s, Solving = 0.042840s, Total = 0.178584s, Memory = (RSS = 298.332031Mb, VMS = 292.714844Mb)
27 : Statistics :: Grounding = 0.132180s, Solving = 0.054418s, Total = 0.186598s, Memory = (RSS = 304.597656Mb, VMS = 297.562500Mb)

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 4.119068s due to: External generator exit.

[13-11-2021_23-07-22] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[13-11-2021_23-07-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 4, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 7, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13}
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 5, 12: 5, 13: 5, 14: 6, 15: 7, 16: 8, 17: 9}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 10, 5: 13, 6: 14, 7: 15, 8: 16, 9: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 4, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 9, 15: 9, 16: 10, 17: 10, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15, 26: 16, 27: 17}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 7, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 15, 10: 18, 11: 20, 12: 22, 13: 23, 14: 24, 15: 25, 16: 26, 17: 27}
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 5, 12: 5, 13: 5, 14: 6, 15: 7, 16: 8, 17: 9}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 10, 5: 13, 6: 14, 7: 15, 8: 16, 9: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 17, Last requested goal index = 17 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.249423s, Solving = 0.869645s, Total = 4.119068s, Memory = (RSS = 304.597656Mb, VMS = 297.562500Mb)), Calls = 27
Model :: Total atoms = 16203, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 27 :: Actions = 27                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 2] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 5:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 8:
    Current Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 9:
    Current Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 10:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 12:
    Current Sub-goals:
        [Index = 7] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 7] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 14:
    Current Sub-goals:
        [Index = 9] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 15:
    Current Sub-goals:
        [Index = 9] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 9] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 16:
    Current Sub-goals:
        [Index = 10] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 17:
    Current Sub-goals:
        [Index = 10] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 10] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 22:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 24:
    Current Sub-goals:
        [Index = 14] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 14] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 25:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 26:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 27:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Online planning increment 2 finished.

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 1 : Total constraining sgoals = 18 : Achieved sgoals = 9 : Unachieved sgoals = 9
Level = 1 : Solved problems = 2 : Total constraining sgoals = 17 : Achieved sgoals = 17 : Unachieved sgoals = 0

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Current valid planning level range: [2-2]

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Chosen level range for planning increment 3 by method ground-first: [1-2]

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning at level 2 for problem 2:
Divided plan : Level =  3 (classic), Length =  18, Actions =  18 (Com = 1.00), Sgs = 18, Time =   1.706s (Gro =   1.160s, Sea =   0.546s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 9, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [10-18]

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [10-18], problem number = 2, increment number = 3

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 10)
	('last_sgoals', 18)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 10
last_sgoals = 18
start_step = 17
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 25

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [2] : Concurrency disabled : Problem type = partial conformance refinement (sequential) with sgoals range [10-18] : Minimum search length bound = disabled with value = 25

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = False, chosen = False

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 13})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 14})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 15})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 16})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 17})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 18})

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 9 rules into program part base:

sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 10).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 11).
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 12).
sub_goal(3, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 13).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 14).
sub_goal(3, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 15).
sub_goal(3, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 16).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 17).
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 18).

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000162CDAFF630>

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[13-11-2021_23-07-23] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000162CDAFF630> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(2, talos, move(hallway), 1)).
fix_action(occurs(2, talos, move(store_room), 2)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,extended), 3)).
fix_action(occurs(2, talos, grasp(manipulator_arm_1,(block,6)), 4)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,extended), 5)).
fix_action(occurs(2, talos, grasp(manipulator_arm_2,(block,5)), 6)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,retracted), 7)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,retracted), 8)).
fix_action(occurs(2, talos, move(hallway), 9)).
fix_action(occurs(2, talos, move(puzzle_room), 10)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,extended), 11)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,extended), 12)).
fix_action(occurs(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), 13)).
fix_action(occurs(2, talos, release(manipulator_arm_1,(block,6)), 14)).
fix_action(occurs(2, talos, grasp(manipulator_arm_1,(block,3)), 15)).
fix_action(occurs(2, talos, put(manipulator_arm_2,(block,5),(block,6)), 16)).
fix_action(occurs(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), 17)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[13-11-2021_23-07-23] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000162CDAFF630> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), (block,2), 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(3, complete(blue), false, 0)).
fix_fluent(holds(3, complete(red), false, 0)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,5)), store_room, 0)).
fix_fluent(holds(3, in((block,6)), store_room, 0)).
fix_fluent(holds(3, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(3, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(3, in(talos), starting_room, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(3, on((block,3)), (block,1), 0)).
fix_fluent(holds(3, on((block,4)), (block,2), 0)).
fix_fluent(holds(3, on((block,5)), nothing, 0)).
fix_fluent(holds(3, on((block,6)), nothing, 0)).
fix_fluent(holds(3, tower_base((block,1)), true, 0)).
fix_fluent(holds(3, tower_base((block,2)), true, 0)).
fix_fluent(holds(3, tower_base((block,3)), false, 0)).
fix_fluent(holds(3, tower_base((block,4)), false, 0)).
fix_fluent(holds(3, tower_base((block,5)), false, 0)).
fix_fluent(holds(3, tower_base((block,6)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 0)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), hallway, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), (block,2), 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(3, complete(blue), false, 1)).
fix_fluent(holds(3, complete(red), false, 1)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,5)), store_room, 1)).
fix_fluent(holds(3, in((block,6)), store_room, 1)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 1)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 1)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(3, in(talos), hallway, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(3, on((block,3)), (block,1), 1)).
fix_fluent(holds(3, on((block,4)), (block,2), 1)).
fix_fluent(holds(3, on((block,5)), nothing, 1)).
fix_fluent(holds(3, on((block,6)), nothing, 1)).
fix_fluent(holds(3, tower_base((block,1)), true, 1)).
fix_fluent(holds(3, tower_base((block,2)), true, 1)).
fix_fluent(holds(3, tower_base((block,3)), false, 1)).
fix_fluent(holds(3, tower_base((block,4)), false, 1)).
fix_fluent(holds(3, tower_base((block,5)), false, 1)).
fix_fluent(holds(3, tower_base((block,6)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 1)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), store_room, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), (block,2), 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(3, complete(blue), false, 2)).
fix_fluent(holds(3, complete(red), false, 2)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,5)), store_room, 2)).
fix_fluent(holds(3, in((block,6)), store_room, 2)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 2)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 2)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(3, in(talos), store_room, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(3, on((block,3)), (block,1), 2)).
fix_fluent(holds(3, on((block,4)), (block,2), 2)).
fix_fluent(holds(3, on((block,5)), nothing, 2)).
fix_fluent(holds(3, on((block,6)), nothing, 2)).
fix_fluent(holds(3, tower_base((block,1)), true, 2)).
fix_fluent(holds(3, tower_base((block,2)), true, 2)).
fix_fluent(holds(3, tower_base((block,3)), false, 2)).
fix_fluent(holds(3, tower_base((block,4)), false, 2)).
fix_fluent(holds(3, tower_base((block,5)), false, 2)).
fix_fluent(holds(3, tower_base((block,6)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 2)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), store_room, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), (block,2), 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(3, complete(blue), false, 3)).
fix_fluent(holds(3, complete(red), false, 3)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,5)), store_room, 3)).
fix_fluent(holds(3, in((block,6)), store_room, 3)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 3)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 3)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(3, in(talos), store_room, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(3, on((block,3)), (block,1), 3)).
fix_fluent(holds(3, on((block,4)), (block,2), 3)).
fix_fluent(holds(3, on((block,5)), nothing, 3)).
fix_fluent(holds(3, on((block,6)), nothing, 3)).
fix_fluent(holds(3, tower_base((block,1)), true, 3)).
fix_fluent(holds(3, tower_base((block,2)), true, 3)).
fix_fluent(holds(3, tower_base((block,3)), false, 3)).
fix_fluent(holds(3, tower_base((block,4)), false, 3)).
fix_fluent(holds(3, tower_base((block,5)), false, 3)).
fix_fluent(holds(3, tower_base((block,6)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 3)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), store_room, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), (block,2), 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(3, complete(blue), false, 4)).
fix_fluent(holds(3, complete(red), false, 4)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 4)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,5)), store_room, 4)).
fix_fluent(holds(3, in((block,6)), store_room, 4)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 4)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 4)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(3, in(talos), store_room, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(3, on((block,3)), (block,1), 4)).
fix_fluent(holds(3, on((block,4)), (block,2), 4)).
fix_fluent(holds(3, on((block,5)), nothing, 4)).
fix_fluent(holds(3, on((block,6)), nothing, 4)).
fix_fluent(holds(3, tower_base((block,1)), true, 4)).
fix_fluent(holds(3, tower_base((block,2)), true, 4)).
fix_fluent(holds(3, tower_base((block,3)), false, 4)).
fix_fluent(holds(3, tower_base((block,4)), false, 4)).
fix_fluent(holds(3, tower_base((block,5)), false, 4)).
fix_fluent(holds(3, tower_base((block,6)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 4)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), store_room, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), (block,2), 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(3, complete(blue), false, 5)).
fix_fluent(holds(3, complete(red), false, 5)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 5)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,5)), store_room, 5)).
fix_fluent(holds(3, in((block,6)), store_room, 5)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 5)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 5)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(3, in(talos), store_room, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(3, on((block,3)), (block,1), 5)).
fix_fluent(holds(3, on((block,4)), (block,2), 5)).
fix_fluent(holds(3, on((block,5)), nothing, 5)).
fix_fluent(holds(3, on((block,6)), nothing, 5)).
fix_fluent(holds(3, tower_base((block,1)), true, 5)).
fix_fluent(holds(3, tower_base((block,2)), true, 5)).
fix_fluent(holds(3, tower_base((block,3)), false, 5)).
fix_fluent(holds(3, tower_base((block,4)), false, 5)).
fix_fluent(holds(3, tower_base((block,5)), false, 5)).
fix_fluent(holds(3, tower_base((block,6)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 5)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), store_room, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), (block,2), 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(3, complete(blue), false, 6)).
fix_fluent(holds(3, complete(red), false, 6)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 6)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 6)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,5)), store_room, 6)).
fix_fluent(holds(3, in((block,6)), store_room, 6)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 6)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 6)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(3, in(talos), store_room, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(3, on((block,3)), (block,1), 6)).
fix_fluent(holds(3, on((block,4)), (block,2), 6)).
fix_fluent(holds(3, on((block,5)), nothing, 6)).
fix_fluent(holds(3, on((block,6)), nothing, 6)).
fix_fluent(holds(3, tower_base((block,1)), true, 6)).
fix_fluent(holds(3, tower_base((block,2)), true, 6)).
fix_fluent(holds(3, tower_base((block,3)), false, 6)).
fix_fluent(holds(3, tower_base((block,4)), false, 6)).
fix_fluent(holds(3, tower_base((block,5)), false, 6)).
fix_fluent(holds(3, tower_base((block,6)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 6)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), store_room, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), (block,2), 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(3, complete(blue), false, 7)).
fix_fluent(holds(3, complete(red), false, 7)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 7)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 7)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,5)), store_room, 7)).
fix_fluent(holds(3, in((block,6)), store_room, 7)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 7)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 7)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(3, in(talos), store_room, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(3, on((block,3)), (block,1), 7)).
fix_fluent(holds(3, on((block,4)), (block,2), 7)).
fix_fluent(holds(3, on((block,5)), nothing, 7)).
fix_fluent(holds(3, on((block,6)), nothing, 7)).
fix_fluent(holds(3, tower_base((block,1)), true, 7)).
fix_fluent(holds(3, tower_base((block,2)), true, 7)).
fix_fluent(holds(3, tower_base((block,3)), false, 7)).
fix_fluent(holds(3, tower_base((block,4)), false, 7)).
fix_fluent(holds(3, tower_base((block,5)), false, 7)).
fix_fluent(holds(3, tower_base((block,6)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 7)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), store_room, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), (block,2), 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(3, complete(blue), false, 8)).
fix_fluent(holds(3, complete(red), false, 8)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 8)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 8)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,5)), store_room, 8)).
fix_fluent(holds(3, in((block,6)), store_room, 8)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 8)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 8)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(3, in(talos), store_room, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(3, on((block,3)), (block,1), 8)).
fix_fluent(holds(3, on((block,4)), (block,2), 8)).
fix_fluent(holds(3, on((block,5)), nothing, 8)).
fix_fluent(holds(3, on((block,6)), nothing, 8)).
fix_fluent(holds(3, tower_base((block,1)), true, 8)).
fix_fluent(holds(3, tower_base((block,2)), true, 8)).
fix_fluent(holds(3, tower_base((block,3)), false, 8)).
fix_fluent(holds(3, tower_base((block,4)), false, 8)).
fix_fluent(holds(3, tower_base((block,5)), false, 8)).
fix_fluent(holds(3, tower_base((block,6)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 8)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,5)), hallway, 9)).
fix_fluent(holds(2, in((block,6)), hallway, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), hallway, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), (block,2), 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(3, complete(blue), false, 9)).
fix_fluent(holds(3, complete(red), false, 9)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 9)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 9)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,5)), hallway, 9)).
fix_fluent(holds(3, in((block,6)), hallway, 9)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 9)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 9)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(3, in(talos), hallway, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(3, on((block,3)), (block,1), 9)).
fix_fluent(holds(3, on((block,4)), (block,2), 9)).
fix_fluent(holds(3, on((block,5)), nothing, 9)).
fix_fluent(holds(3, on((block,6)), nothing, 9)).
fix_fluent(holds(3, tower_base((block,1)), true, 9)).
fix_fluent(holds(3, tower_base((block,2)), true, 9)).
fix_fluent(holds(3, tower_base((block,3)), false, 9)).
fix_fluent(holds(3, tower_base((block,4)), false, 9)).
fix_fluent(holds(3, tower_base((block,5)), false, 9)).
fix_fluent(holds(3, tower_base((block,6)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 9)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), puzzle_room, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), (block,2), 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(3, complete(blue), false, 10)).
fix_fluent(holds(3, complete(red), false, 10)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 10)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 10)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 10)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 10)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 10)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(3, in(talos), puzzle_room, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(3, on((block,3)), (block,1), 10)).
fix_fluent(holds(3, on((block,4)), (block,2), 10)).
fix_fluent(holds(3, on((block,5)), nothing, 10)).
fix_fluent(holds(3, on((block,6)), nothing, 10)).
fix_fluent(holds(3, tower_base((block,1)), true, 10)).
fix_fluent(holds(3, tower_base((block,2)), true, 10)).
fix_fluent(holds(3, tower_base((block,3)), false, 10)).
fix_fluent(holds(3, tower_base((block,4)), false, 10)).
fix_fluent(holds(3, tower_base((block,5)), false, 10)).
fix_fluent(holds(3, tower_base((block,6)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 10)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), puzzle_room, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), (block,2), 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(3, complete(blue), false, 11)).
fix_fluent(holds(3, complete(red), false, 11)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 11)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 11)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 11)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 11)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 11)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(3, in(talos), puzzle_room, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(3, on((block,3)), (block,1), 11)).
fix_fluent(holds(3, on((block,4)), (block,2), 11)).
fix_fluent(holds(3, on((block,5)), nothing, 11)).
fix_fluent(holds(3, on((block,6)), nothing, 11)).
fix_fluent(holds(3, tower_base((block,1)), true, 11)).
fix_fluent(holds(3, tower_base((block,2)), true, 11)).
fix_fluent(holds(3, tower_base((block,3)), false, 11)).
fix_fluent(holds(3, tower_base((block,4)), false, 11)).
fix_fluent(holds(3, tower_base((block,5)), false, 11)).
fix_fluent(holds(3, tower_base((block,6)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 11)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), puzzle_room, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), (block,2), 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(3, complete(blue), false, 12)).
fix_fluent(holds(3, complete(red), false, 12)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 12)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 12)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 12)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 12)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 12)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(3, in(talos), puzzle_room, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(3, on((block,3)), (block,1), 12)).
fix_fluent(holds(3, on((block,4)), (block,2), 12)).
fix_fluent(holds(3, on((block,5)), nothing, 12)).
fix_fluent(holds(3, on((block,6)), nothing, 12)).
fix_fluent(holds(3, tower_base((block,1)), true, 12)).
fix_fluent(holds(3, tower_base((block,2)), true, 12)).
fix_fluent(holds(3, tower_base((block,3)), false, 12)).
fix_fluent(holds(3, tower_base((block,4)), false, 12)).
fix_fluent(holds(3, tower_base((block,5)), false, 12)).
fix_fluent(holds(3, tower_base((block,6)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 12)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), puzzle_room, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), (block,2), 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(3, complete(blue), false, 13)).
fix_fluent(holds(3, complete(red), false, 13)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 13)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 13)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 13)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 13)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 13)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(3, in(talos), puzzle_room, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 13)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(3, on((block,3)), (block,1), 13)).
fix_fluent(holds(3, on((block,4)), (block,2), 13)).
fix_fluent(holds(3, on((block,5)), nothing, 13)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 13)).
fix_fluent(holds(3, tower_base((block,1)), true, 13)).
fix_fluent(holds(3, tower_base((block,2)), true, 13)).
fix_fluent(holds(3, tower_base((block,3)), false, 13)).
fix_fluent(holds(3, tower_base((block,4)), false, 13)).
fix_fluent(holds(3, tower_base((block,5)), false, 13)).
fix_fluent(holds(3, tower_base((block,6)), true, 13)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 13)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), closed, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), puzzle_room, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), (block,2), 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(3, complete(blue), false, 14)).
fix_fluent(holds(3, complete(red), false, 14)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 14)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 14)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 14)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 14)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(3, in(talos), puzzle_room, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 14)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(3, on((block,3)), (block,1), 14)).
fix_fluent(holds(3, on((block,4)), (block,2), 14)).
fix_fluent(holds(3, on((block,5)), nothing, 14)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 14)).
fix_fluent(holds(3, tower_base((block,1)), true, 14)).
fix_fluent(holds(3, tower_base((block,2)), true, 14)).
fix_fluent(holds(3, tower_base((block,3)), false, 14)).
fix_fluent(holds(3, tower_base((block,4)), false, 14)).
fix_fluent(holds(3, tower_base((block,5)), false, 14)).
fix_fluent(holds(3, tower_base((block,6)), true, 14)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 14)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), closed, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), puzzle_room, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), (block,2), 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(3, complete(blue), false, 15)).
fix_fluent(holds(3, complete(red), false, 15)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,3), 15)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 15)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 15)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 15)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 15)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(3, in(talos), puzzle_room, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 15)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(3, on((block,3)), (block,1), 15)).
fix_fluent(holds(3, on((block,4)), (block,2), 15)).
fix_fluent(holds(3, on((block,5)), nothing, 15)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 15)).
fix_fluent(holds(3, tower_base((block,1)), true, 15)).
fix_fluent(holds(3, tower_base((block,2)), true, 15)).
fix_fluent(holds(3, tower_base((block,3)), false, 15)).
fix_fluent(holds(3, tower_base((block,4)), false, 15)).
fix_fluent(holds(3, tower_base((block,5)), false, 15)).
fix_fluent(holds(3, tower_base((block,6)), true, 15)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 15)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), closed, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), puzzle_room, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), (block,2), 16)).
fix_fluent(holds(2, on((block,5)), (block,6), 16)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(3, complete(blue), false, 16)).
fix_fluent(holds(3, complete(red), false, 16)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,3), 16)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 16)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 16)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 16)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 16)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(3, in(talos), puzzle_room, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), true, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 16)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(3, on((block,3)), (block,1), 16)).
fix_fluent(holds(3, on((block,4)), (block,2), 16)).
fix_fluent(holds(3, on((block,5)), (block,6), 16)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 16)).
fix_fluent(holds(3, tower_base((block,1)), true, 16)).
fix_fluent(holds(3, tower_base((block,2)), true, 16)).
fix_fluent(holds(3, tower_base((block,3)), false, 16)).
fix_fluent(holds(3, tower_base((block,4)), false, 16)).
fix_fluent(holds(3, tower_base((block,5)), false, 16)).
fix_fluent(holds(3, tower_base((block,6)), true, 16)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 16)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), closed, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), puzzle_room, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,4)), (block,2), 17)).
fix_fluent(holds(2, on((block,5)), (block,6), 17)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), true, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(3, complete(blue), false, 17)).
fix_fluent(holds(3, complete(red), false, 17)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,3), 17)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 17)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,4)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 17)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 17)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 17)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(3, in(talos), puzzle_room, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), true, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), true, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), true, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 17)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(3, on((block,3)), puzzle_room_table, 17)).
fix_fluent(holds(3, on((block,4)), (block,2), 17)).
fix_fluent(holds(3, on((block,5)), (block,6), 17)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 17)).
fix_fluent(holds(3, tower_base((block,1)), true, 17)).
fix_fluent(holds(3, tower_base((block,2)), true, 17)).
fix_fluent(holds(3, tower_base((block,3)), true, 17)).
fix_fluent(holds(3, tower_base((block,4)), false, 17)).
fix_fluent(holds(3, tower_base((block,5)), false, 17)).
fix_fluent(holds(3, tower_base((block,6)), true, 17)).
fix_fluent(holds(3, unordered_tower((block,1)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,2)), true, 17)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 17)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 17)
	('last_sgoals', 18)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('first_sgoals', 10)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000162CDAFF630>)

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 18)', truth=True, inc_range=None)

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.101644s.

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 18: original = External(symbol='current_last_sgoals(10, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(10,18).

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049334s with result Satisfiable.

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15097710000000042, Incremental time limit = None
Running cumulative time = 1.9933936000000028, Cumulative time limit = 3600
Used memory = (RSS = 311.085938Mb, VMS = 303.531250Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.483882s, Solving = 0.509512s, Total = 1.993394s, Memory = (RSS = 311.085938Mb, VMS = 303.531250Mb)), Calls = 18
Final Model :: Total atoms = 11885, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.483881900000001, solving_time=0.5095117000000018, total_time=1.9933936000000028, memory=Memory(rss=311.0859375, vms=303.53125), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10164359999999917, solving_time=0.04933350000000125, total_time=0.15097710000000042, memory=Memory(rss=311.0859375, vms=303.53125), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 48609.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 265646.0, 'bodies_tr': 265646.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3304.0, 'count_bodies_tr': 3304.0, 'sccs': 334.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6362.0, 'rules': 502569.0, 'rules_normal': 499420.0, 'rules_choice': 2915.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 216.0, 'rules_tr': 502525.0, 'rules_tr_normal': 499420.0, 'rules_tr_choice': 2915.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 172.0, 'eqs': 96541.0, 'eqs_atom': 20828.0, 'eqs_body': 4504.0, 'eqs_other': 71209.0}, 'lpStep': {'atoms': 5237.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14853.0, 'bodies_tr': 14853.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 434.0, 'rules': 31386.0, 'rules_normal': 31221.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 31382.0, 'rules_tr_normal': 31221.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 5652.0, 'eqs_atom': 1224.0, 'eqs_body': 413.0, 'eqs_other': 4015.0}, 'generator': {'vars': 26123.0, 'vars_eliminated': 0.0, 'vars_frozen': 16658.0, 'constraints': 289.0, 'constraints_binary': 18183.0, 'constraints_ternary': 1429.0, 'acyc_edges': 0.0, 'complexity': 223706.0}}, 'solving': {'solvers': {'choices': 798.0, 'conflicts': 17.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 333.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 17.0, 'integrated': 15.0, 'lemmas': 35.0, 'lits_learnt': 35.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.140625, 'integrated_imps': 15.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1752.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 3.0, 'lemmas_other': 15.0, 'lits_conflict': 17.0, 'lits_loop': 3.0, 'lits_other': 15.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 0.0, 'levels': 17.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2230701446533203, 'cpu': 0.34375, 'solve': 0.024906158447265625, 'unsat': 0.0, 'sat': 0.0049610137939453125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.1323814392089844, 'cpu': 3.15625, 'solve': 0.3298664093017578, 'unsat': 0.04616546630859375, 'sat': 0.15352630615234375}, 'models': {'enumerated': 11.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 10851.0, 'conflicts': 2412.0, 'conflicts_analyzed': 2363.0, 'restarts': 4.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 3090.0, 'models': 11.0, 'models_level': 2162.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 2201.0, 'distributed_sum_lbd': 5546.0, 'integrated': 12535.0, 'lemmas': 17610.0, 'lits_learnt': 233525.0, 'lemmas_binary': 1519.0, 'lemmas_ternary': 685.0, 'cpu_time': 1.25, 'integrated_imps': 4239.0, 'integrated_jumps': 2392.0, 'guiding_paths_lits': 14722.0, 'guiding_paths': 130.0, 'splits': 0.0, 'lemmas_conflict': 2277.0, 'lemmas_loop': 4008.0, 'lemmas_other': 11325.0, 'lits_conflict': 34002.0, 'lits_loop': 30986.0, 'lits_other': 168537.0, 'jumps': {'jumps': 2363.0, 'jumps_bounded': 430.0, 'levels': 8267.0, 'levels_bounded': 5303.0, 'max': 189.0, 'max_executed': 189.0, 'max_bounded': 188.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 18}

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 2 ( 22.22% solved)

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 18)', truth=True, inc_range=None)

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 11, step = 18]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 11)

[13-11-2021_23-07-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 18:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.084092s.

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(11, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(11,18).

[13-11-2021_23-07-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.109915s with result Satisfiable.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.19400680000000037, Incremental time limit = None
Running cumulative time = 2.187400400000003, Cumulative time limit = 3600
Used memory = (RSS = 312.730469Mb, VMS = 304.882812Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 12
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.567974s, Solving = 0.619426s, Total = 2.187400s, Memory = (RSS = 312.730469Mb, VMS = 304.882812Mb)), Calls = 19
Final Model :: Total atoms = 12228, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.567974200000001, solving_time=0.6194262000000021, total_time=2.187400400000003, memory=Memory(rss=312.73046875, vms=304.8828125), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08409230000000001, solving_time=0.10991450000000036, total_time=0.19400680000000037, memory=Memory(rss=312.73046875, vms=304.8828125), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 50337.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 279316.0, 'bodies_tr': 279316.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3485.0, 'count_bodies_tr': 3485.0, 'sccs': 343.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6423.0, 'rules': 529095.0, 'rules_normal': 525781.0, 'rules_choice': 3067.0, 'rules_minimize': 19.0, 'rules_acyc': 0.0, 'rules_heuristic': 228.0, 'rules_tr': 529041.0, 'rules_tr_normal': 525781.0, 'rules_tr_choice': 3067.0, 'rules_tr_minimize': 19.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 174.0, 'eqs': 101173.0, 'eqs_atom': 21331.0, 'eqs_body': 4895.0, 'eqs_other': 74947.0}, 'lpStep': {'atoms': 1728.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13670.0, 'bodies_tr': 13670.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 9.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 61.0, 'rules': 26526.0, 'rules_normal': 26361.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26516.0, 'rules_tr_normal': 26361.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 4632.0, 'eqs_atom': 503.0, 'eqs_body': 391.0, 'eqs_other': 3738.0}, 'generator': {'vars': 26510.0, 'vars_eliminated': 0.0, 'vars_frozen': 16946.0, 'constraints': 294.0, 'constraints_binary': 18820.0, 'constraints_ternary': 945.0, 'acyc_edges': 0.0, 'complexity': 223706.0}}, 'solving': {'solvers': {'choices': 960.0, 'conflicts': 15.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 359.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 15.0, 'distributed_sum_lbd': 15.0, 'integrated': 0.0, 'lemmas': 15.0, 'lits_learnt': 15.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1912.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 15.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 0.0, 'levels': 15.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 19.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.19709396362304688, 'cpu': 0.234375, 'solve': 0.09674263000488281, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.3294754028320312, 'cpu': 3.390625, 'solve': 0.4266090393066406, 'unsat': 0.04616546630859375, 'sat': 0.15552139282226562}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 11811.0, 'conflicts': 2427.0, 'conflicts_analyzed': 2378.0, 'restarts': 4.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 3090.0, 'models': 12.0, 'models_level': 2521.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 2216.0, 'distributed_sum_lbd': 5561.0, 'integrated': 12535.0, 'lemmas': 17625.0, 'lits_learnt': 233540.0, 'lemmas_binary': 1519.0, 'lemmas_ternary': 685.0, 'cpu_time': 1.375, 'integrated_imps': 4239.0, 'integrated_jumps': 2392.0, 'guiding_paths_lits': 16634.0, 'guiding_paths': 138.0, 'splits': 0.0, 'lemmas_conflict': 2292.0, 'lemmas_loop': 4008.0, 'lemmas_other': 11325.0, 'lits_conflict': 34017.0, 'lits_loop': 30986.0, 'lits_other': 168537.0, 'jumps': {'jumps': 2378.0, 'jumps_bounded': 430.0, 'levels': 8282.0, 'levels_bounded': 5303.0, 'max': 189.0, 'max_executed': 189.0, 'max_bounded': 188.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 18, 11: 19}

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 3 ( 33.33% solved)

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 19)', truth=True, inc_range=None)

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 19]:
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 12)

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.077484s.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 20: original = External(symbol='current_last_sgoals(12, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(12,19).

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029490s with result Satisfiable.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10697400000000101, Incremental time limit = None
Running cumulative time = 2.294374400000004, Cumulative time limit = 3600
Used memory = (RSS = 319.339844Mb, VMS = 317.847656Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 13
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.645458s, Solving = 0.648916s, Total = 2.294374s, Memory = (RSS = 319.339844Mb, VMS = 317.847656Mb)), Calls = 20
Final Model :: Total atoms = 12572, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.6454580000000023, solving_time=0.6489164000000018, total_time=2.294374400000004, memory=Memory(rss=319.33984375, vms=317.84765625), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07748380000000132, solving_time=0.02949019999999969, total_time=0.10697400000000101, memory=Memory(rss=319.33984375, vms=317.84765625), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 52131.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 293213.0, 'bodies_tr': 293213.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3666.0, 'count_bodies_tr': 3666.0, 'sccs': 358.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6616.0, 'rules': 555996.0, 'rules_normal': 552517.0, 'rules_choice': 3219.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 240.0, 'rules_tr': 555936.0, 'rules_tr_normal': 552517.0, 'rules_tr_choice': 3219.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 180.0, 'eqs': 105186.0, 'eqs_atom': 21775.0, 'eqs_body': 5130.0, 'eqs_other': 78281.0}, 'lpStep': {'atoms': 1794.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13897.0, 'bodies_tr': 13897.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 15.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 193.0, 'rules': 26901.0, 'rules_normal': 26736.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26895.0, 'rules_tr_normal': 26736.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 4013.0, 'eqs_atom': 444.0, 'eqs_body': 235.0, 'eqs_other': 3334.0}, 'generator': {'vars': 27390.0, 'vars_eliminated': 0.0, 'vars_frozen': 17560.0, 'constraints': 484.0, 'constraints_binary': 25235.0, 'constraints_ternary': 1506.0, 'acyc_edges': 0.0, 'complexity': 223706.0}}, 'solving': {'solvers': {'choices': 882.0, 'conflicts': 14.0, 'conflicts_analyzed': 14.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 385.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 25.0, 'distributed_sum_lbd': 36.0, 'integrated': 0.0, 'lemmas': 46.0, 'lits_learnt': 141.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 7.0, 'cpu_time': 0.09375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1813.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 14.0, 'lemmas_loop': 32.0, 'lemmas_other': 0.0, 'lits_conflict': 14.0, 'lits_loop': 127.0, 'lits_other': 0.0, 'jumps': {'jumps': 14.0, 'jumps_bounded': 0.0, 'levels': 14.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 20.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.10870742797851562, 'cpu': 0.1875, 'solve': 0.015956878662109375, 'unsat': 0.0, 'sat': 0.0049877166748046875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.438182830810547, 'cpu': 3.578125, 'solve': 0.44256591796875, 'unsat': 0.04616546630859375, 'sat': 0.1605091094970703}, 'models': {'enumerated': 13.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 12693.0, 'conflicts': 2441.0, 'conflicts_analyzed': 2392.0, 'restarts': 4.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 3090.0, 'models': 13.0, 'models_level': 2906.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 2241.0, 'distributed_sum_lbd': 5597.0, 'integrated': 12535.0, 'lemmas': 17671.0, 'lits_learnt': 233681.0, 'lemmas_binary': 1523.0, 'lemmas_ternary': 692.0, 'cpu_time': 1.46875, 'integrated_imps': 4239.0, 'integrated_jumps': 2392.0, 'guiding_paths_lits': 18447.0, 'guiding_paths': 145.0, 'splits': 0.0, 'lemmas_conflict': 2306.0, 'lemmas_loop': 4040.0, 'lemmas_other': 11325.0, 'lits_conflict': 34031.0, 'lits_loop': 31113.0, 'lits_other': 168537.0, 'jumps': {'jumps': 2392.0, 'jumps_bounded': 430.0, 'levels': 8296.0, 'levels_bounded': 5303.0, 'max': 189.0, 'max_executed': 189.0, 'max_bounded': 188.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 18, 11: 19, 12: 20}

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 4 ( 44.44% solved)

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 20)', truth=True, inc_range=None)

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 20]:
sub_goal(3, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 13)

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108690s.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 21: original = External(symbol='current_last_sgoals(13, 20)', truth=True, inc_range=None), conversion = current_last_sgoals(13,20).

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032180s with result Satisfiable.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1408699999999996, Incremental time limit = None
Running cumulative time = 2.4352444000000038, Cumulative time limit = 3600
Used memory = (RSS = 321.941406Mb, VMS = 319.718750Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 14
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.754148s, Solving = 0.681097s, Total = 2.435244s, Memory = (RSS = 321.941406Mb, VMS = 319.718750Mb)), Calls = 21
Final Model :: Total atoms = 12917, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=20, end_step=21, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.7541478000000028, solving_time=0.6810966000000009, total_time=2.4352444000000038, memory=Memory(rss=321.94140625, vms=319.71875), step_range=range(0, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1086898000000005, solving_time=0.032180199999999104, total_time=0.1408699999999996, memory=Memory(rss=321.94140625, vms=319.71875), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 53984.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 307515.0, 'bodies_tr': 307515.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3847.0, 'count_bodies_tr': 3847.0, 'sccs': 376.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6924.0, 'rules': 583576.0, 'rules_normal': 579932.0, 'rules_choice': 3371.0, 'rules_minimize': 21.0, 'rules_acyc': 0.0, 'rules_heuristic': 252.0, 'rules_tr': 583514.0, 'rules_tr_normal': 579932.0, 'rules_tr_choice': 3371.0, 'rules_tr_minimize': 21.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 190.0, 'eqs': 110288.0, 'eqs_atom': 22489.0, 'eqs_body': 5349.0, 'eqs_other': 82450.0}, 'lpStep': {'atoms': 1853.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14302.0, 'bodies_tr': 14302.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 18.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 308.0, 'rules': 27580.0, 'rules_normal': 27415.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27578.0, 'rules_tr_normal': 27415.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 5102.0, 'eqs_atom': 714.0, 'eqs_body': 219.0, 'eqs_other': 4169.0}, 'generator': {'vars': 28718.0, 'vars_eliminated': 0.0, 'vars_frozen': 18417.0, 'constraints': 827.0, 'constraints_binary': 35836.0, 'constraints_ternary': 2669.0, 'acyc_edges': 0.0, 'complexity': 223706.0}}, 'solving': {'solvers': {'choices': 924.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 411.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 0.0, 'lemmas': 45.0, 'lits_learnt': 307.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1953.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 45.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 307.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 21.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.14313125610351562, 'cpu': 0.15625, 'solve': 0.015958786010742188, 'unsat': 0.0, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.5813140869140625, 'cpu': 3.734375, 'solve': 0.4585247039794922, 'unsat': 0.04616546630859375, 'sat': 0.16350173950195312}, 'models': {'enumerated': 14.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 13617.0, 'conflicts': 2441.0, 'conflicts_analyzed': 2392.0, 'restarts': 4.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 3090.0, 'models': 14.0, 'models_level': 3317.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 2243.0, 'distributed_sum_lbd': 5601.0, 'integrated': 12535.0, 'lemmas': 17716.0, 'lits_learnt': 233988.0, 'lemmas_binary': 1525.0, 'lemmas_ternary': 692.0, 'cpu_time': 1.5, 'integrated_imps': 4239.0, 'integrated_jumps': 2392.0, 'guiding_paths_lits': 20400.0, 'guiding_paths': 152.0, 'splits': 0.0, 'lemmas_conflict': 2306.0, 'lemmas_loop': 4085.0, 'lemmas_other': 11325.0, 'lits_conflict': 34031.0, 'lits_loop': 31420.0, 'lits_other': 168537.0, 'jumps': {'jumps': 2392.0, 'jumps_bounded': 430.0, 'levels': 8296.0, 'levels_bounded': 5303.0, 'max': 189.0, 'max_executed': 189.0, 'max_bounded': 188.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 18, 11: 19, 12: 20, 13: 21}

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 5 ( 55.56% solved)

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 21)', truth=True, inc_range=None)

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 14, step = 21]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 14)

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.086093s.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 22: original = External(symbol='current_last_sgoals(14, 21)', truth=True, inc_range=None), conversion = current_last_sgoals(14,21).

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042963s with result Satisfiable.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1290558000000015, Incremental time limit = None
Running cumulative time = 2.5643002000000052, Cumulative time limit = 3600
Used memory = (RSS = 326.128906Mb, VMS = 323.550781Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 15
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.840240s, Solving = 0.724060s, Total = 2.564300s, Memory = (RSS = 326.128906Mb, VMS = 323.550781Mb)), Calls = 22
Final Model :: Total atoms = 13263, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=21, end_step=22, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.8402404000000034, solving_time=0.7240598000000018, total_time=2.5643002000000052, memory=Memory(rss=326.12890625, vms=323.55078125), step_range=range(0, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08609260000000063, solving_time=0.04296320000000087, total_time=0.1290558000000015, memory=Memory(rss=326.12890625, vms=323.55078125), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 56209.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 322512.0, 'bodies_tr': 322512.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4028.0, 'count_bodies_tr': 4028.0, 'sccs': 396.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7360.0, 'rules': 612287.0, 'rules_normal': 608478.0, 'rules_choice': 3523.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 264.0, 'rules_tr': 612225.0, 'rules_tr_normal': 608478.0, 'rules_tr_choice': 3523.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 202.0, 'eqs': 115313.0, 'eqs_atom': 23501.0, 'eqs_body': 5461.0, 'eqs_other': 86351.0}, 'lpStep': {'atoms': 2225.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14997.0, 'bodies_tr': 14997.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28711.0, 'rules_normal': 28546.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28711.0, 'rules_tr_normal': 28546.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5025.0, 'eqs_atom': 1012.0, 'eqs_body': 112.0, 'eqs_other': 3901.0}, 'generator': {'vars': 30432.0, 'vars_eliminated': 0.0, 'vars_frozen': 19508.0, 'constraints': 1308.0, 'constraints_binary': 52602.0, 'constraints_ternary': 4573.0, 'acyc_edges': 0.0, 'complexity': 223706.0}}, 'solving': {'solvers': {'choices': 966.0, 'conflicts': 12.0, 'conflicts_analyzed': 12.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 437.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 12.0, 'distributed_sum_lbd': 12.0, 'integrated': 0.0, 'lemmas': 204.0, 'lits_learnt': 1707.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.078125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2093.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 12.0, 'lemmas_loop': 192.0, 'lemmas_other': 0.0, 'lits_conflict': 12.0, 'lits_loop': 1695.0, 'lits_other': 0.0, 'jumps': {'jumps': 12.0, 'jumps_bounded': 0.0, 'levels': 12.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 22.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1306476593017578, 'cpu': 0.171875, 'solve': 0.027923583984375, 'unsat': 0.0, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.7119617462158203, 'cpu': 3.90625, 'solve': 0.4864482879638672, 'unsat': 0.04616546630859375, 'sat': 0.16649436950683594}, 'models': {'enumerated': 15.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 14583.0, 'conflicts': 2453.0, 'conflicts_analyzed': 2404.0, 'restarts': 4.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 3090.0, 'models': 15.0, 'models_level': 3754.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 2255.0, 'distributed_sum_lbd': 5613.0, 'integrated': 12535.0, 'lemmas': 17920.0, 'lits_learnt': 235695.0, 'lemmas_binary': 1525.0, 'lemmas_ternary': 692.0, 'cpu_time': 1.578125, 'integrated_imps': 4239.0, 'integrated_jumps': 2392.0, 'guiding_paths_lits': 22493.0, 'guiding_paths': 159.0, 'splits': 0.0, 'lemmas_conflict': 2318.0, 'lemmas_loop': 4277.0, 'lemmas_other': 11325.0, 'lits_conflict': 34043.0, 'lits_loop': 33115.0, 'lits_other': 168537.0, 'jumps': {'jumps': 2404.0, 'jumps_bounded': 430.0, 'levels': 8308.0, 'levels_bounded': 5303.0, 'max': 189.0, 'max_executed': 189.0, 'max_bounded': 188.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 18, 11: 19, 12: 20, 13: 21, 14: 22}

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 6 ( 66.67% solved)

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(15, 22)', truth=True, inc_range=None)

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 15, step = 22]:
sub_goal(3, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 15)

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Reaction at search length 22:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.095069s.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 23: original = External(symbol='current_last_sgoals(15, 22)', truth=True, inc_range=None), conversion = current_last_sgoals(15,22).

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033809s with result Satisfiable.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12887780000000149, Incremental time limit = None
Running cumulative time = 2.6931780000000067, Cumulative time limit = 3600
Used memory = (RSS = 329.253906Mb, VMS = 325.609375Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 16
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.935309s, Solving = 0.757869s, Total = 2.693178s, Memory = (RSS = 329.253906Mb, VMS = 325.609375Mb)), Calls = 23
Final Model :: Total atoms = 13610, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=22, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.9353090000000046, solving_time=0.7578690000000021, total_time=2.6931780000000067, memory=Memory(rss=329.25390625, vms=325.609375), step_range=range(0, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09506860000000117, solving_time=0.03380920000000032, total_time=0.12887780000000149, memory=Memory(rss=329.25390625, vms=325.609375), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 58503.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 337701.0, 'bodies_tr': 337701.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4209.0, 'count_bodies_tr': 4209.0, 'sccs': 416.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7796.0, 'rules': 641376.0, 'rules_normal': 637402.0, 'rules_choice': 3675.0, 'rules_minimize': 23.0, 'rules_acyc': 0.0, 'rules_heuristic': 276.0, 'rules_tr': 641314.0, 'rules_tr_normal': 637402.0, 'rules_tr_choice': 3675.0, 'rules_tr_minimize': 23.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 214.0, 'eqs': 120586.0, 'eqs_atom': 24562.0, 'eqs_body': 5575.0, 'eqs_other': 90449.0}, 'lpStep': {'atoms': 2294.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15189.0, 'bodies_tr': 15189.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 29089.0, 'rules_normal': 28924.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 29089.0, 'rules_tr_normal': 28924.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5273.0, 'eqs_atom': 1061.0, 'eqs_body': 114.0, 'eqs_other': 4098.0}, 'generator': {'vars': 32193.0, 'vars_eliminated': 0.0, 'vars_frozen': 20617.0, 'constraints': 1794.0, 'constraints_binary': 67956.0, 'constraints_ternary': 6491.0, 'acyc_edges': 0.0, 'complexity': 223706.0}}, 'solving': {'solvers': {'choices': 1008.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 463.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2233.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 23.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.13164710998535156, 'cpu': 0.140625, 'solve': 0.016954421997070312, 'unsat': 0.0, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.843608856201172, 'cpu': 4.046875, 'solve': 0.5034027099609375, 'unsat': 0.04616546630859375, 'sat': 0.1704864501953125}, 'models': {'enumerated': 16.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 15591.0, 'conflicts': 2453.0, 'conflicts_analyzed': 2404.0, 'restarts': 4.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 3090.0, 'models': 16.0, 'models_level': 4217.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 2255.0, 'distributed_sum_lbd': 5613.0, 'integrated': 12535.0, 'lemmas': 17920.0, 'lits_learnt': 235695.0, 'lemmas_binary': 1525.0, 'lemmas_ternary': 692.0, 'cpu_time': 1.609375, 'integrated_imps': 4239.0, 'integrated_jumps': 2392.0, 'guiding_paths_lits': 24726.0, 'guiding_paths': 166.0, 'splits': 0.0, 'lemmas_conflict': 2318.0, 'lemmas_loop': 4277.0, 'lemmas_other': 11325.0, 'lits_conflict': 34043.0, 'lits_loop': 33115.0, 'lits_other': 168537.0, 'jumps': {'jumps': 2404.0, 'jumps_bounded': 430.0, 'levels': 8308.0, 'levels_bounded': 5303.0, 'max': 189.0, 'max_executed': 189.0, 'max_bounded': 188.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 18, 11: 19, 12: 20, 13: 21, 14: 22, 15: 23}

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 16 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 7 ( 77.78% solved)

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(16, 23)', truth=True, inc_range=None)

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 16, step = 23]:
sub_goal(3, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 16)

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.095990s.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(16, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(16,23).

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035141s with result Satisfiable.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1311302000000012, Incremental time limit = None
Running cumulative time = 2.824308200000008, Cumulative time limit = 3600
Used memory = (RSS = 333.472656Mb, VMS = 328.707031Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 17
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.031299s, Solving = 0.793010s, Total = 2.824308s, Memory = (RSS = 333.472656Mb, VMS = 328.707031Mb)), Calls = 24
Final Model :: Total atoms = 13958, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=23, end_step=24, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.0312986000000057, solving_time=0.7930096000000022, total_time=2.824308200000008, memory=Memory(rss=333.47265625, vms=328.70703125), step_range=range(0, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09598960000000112, solving_time=0.03514060000000008, total_time=0.1311302000000012, memory=Memory(rss=333.47265625, vms=328.70703125), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 60809.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 352923.0, 'bodies_tr': 352923.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4390.0, 'count_bodies_tr': 4390.0, 'sccs': 436.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8232.0, 'rules': 670652.0, 'rules_normal': 666513.0, 'rules_choice': 3827.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 288.0, 'rules_tr': 670590.0, 'rules_tr_normal': 666513.0, 'rules_tr_choice': 3827.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 226.0, 'eqs': 125926.0, 'eqs_atom': 25631.0, 'eqs_body': 5689.0, 'eqs_other': 94606.0}, 'lpStep': {'atoms': 2306.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15222.0, 'bodies_tr': 15222.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 29276.0, 'rules_normal': 29111.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 29276.0, 'rules_tr_normal': 29111.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5340.0, 'eqs_atom': 1069.0, 'eqs_body': 114.0, 'eqs_other': 4157.0}, 'generator': {'vars': 33961.0, 'vars_eliminated': 0.0, 'vars_frozen': 21730.0, 'constraints': 2286.0, 'constraints_binary': 85798.0, 'constraints_ternary': 8466.0, 'acyc_edges': 0.0, 'complexity': 223706.0}}, 'solving': {'solvers': {'choices': 1050.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 489.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2373.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 24.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.13364410400390625, 'cpu': 0.140625, 'solve': 0.017953872680664062, 'unsat': 0.0, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.977252960205078, 'cpu': 4.1875, 'solve': 0.5213565826416016, 'unsat': 0.04616546630859375, 'sat': 0.17447853088378906}, 'models': {'enumerated': 17.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 16641.0, 'conflicts': 2453.0, 'conflicts_analyzed': 2404.0, 'restarts': 4.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 3090.0, 'models': 17.0, 'models_level': 4706.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 2255.0, 'distributed_sum_lbd': 5613.0, 'integrated': 12535.0, 'lemmas': 17920.0, 'lits_learnt': 235695.0, 'lemmas_binary': 1525.0, 'lemmas_ternary': 692.0, 'cpu_time': 1.640625, 'integrated_imps': 4239.0, 'integrated_jumps': 2392.0, 'guiding_paths_lits': 27099.0, 'guiding_paths': 173.0, 'splits': 0.0, 'lemmas_conflict': 2318.0, 'lemmas_loop': 4277.0, 'lemmas_other': 11325.0, 'lits_conflict': 34043.0, 'lits_loop': 33115.0, 'lits_other': 168537.0, 'jumps': {'jumps': 2404.0, 'jumps_bounded': 430.0, 'levels': 8308.0, 'levels_bounded': 5303.0, 'max': 189.0, 'max_executed': 189.0, 'max_bounded': 188.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 18, 11: 19, 12: 20, 13: 21, 14: 22, 15: 23, 16: 24}

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 17 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 8 ( 88.89% solved)

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(17, 24)', truth=True, inc_range=None)

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 17, step = 24]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 17)

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Reaction at search length 24:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.121631s.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 25: original = External(symbol='current_last_sgoals(17, 24)', truth=True, inc_range=None), conversion = current_last_sgoals(17,24).

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032894s with result Satisfiable.

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15452570000000065, Incremental time limit = None
Running cumulative time = 2.9788339000000086, Cumulative time limit = 3600
Used memory = (RSS = 336.976562Mb, VMS = 331.636719Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 18
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.152930s, Solving = 0.825904s, Total = 2.978834s, Memory = (RSS = 336.976562Mb, VMS = 331.636719Mb)), Calls = 25
Final Model :: Total atoms = 14307, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=25, start_step=24, end_step=25, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.1529299000000064, solving_time=0.8259040000000022, total_time=2.9788339000000086, memory=Memory(rss=336.9765625, vms=331.63671875), step_range=range(0, 26), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12163130000000066, solving_time=0.03289439999999999, total_time=0.15452570000000065, memory=Memory(rss=336.9765625, vms=331.63671875), step_range=range(25, 26), clingo_stats={'problem': {'lp': {'atoms': 63128.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 368179.0, 'bodies_tr': 368179.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4571.0, 'count_bodies_tr': 4571.0, 'sccs': 456.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8668.0, 'rules': 700116.0, 'rules_normal': 695812.0, 'rules_choice': 3979.0, 'rules_minimize': 25.0, 'rules_acyc': 0.0, 'rules_heuristic': 300.0, 'rules_tr': 700054.0, 'rules_tr_normal': 695812.0, 'rules_tr_choice': 3979.0, 'rules_tr_minimize': 25.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 238.0, 'eqs': 131338.0, 'eqs_atom': 26709.0, 'eqs_body': 5805.0, 'eqs_other': 98824.0}, 'lpStep': {'atoms': 2319.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15256.0, 'bodies_tr': 15256.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 29464.0, 'rules_normal': 29299.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 29464.0, 'rules_tr_normal': 29299.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5412.0, 'eqs_atom': 1078.0, 'eqs_body': 116.0, 'eqs_other': 4218.0}, 'generator': {'vars': 35736.0, 'vars_eliminated': 0.0, 'vars_frozen': 22847.0, 'constraints': 2779.0, 'constraints_binary': 103817.0, 'constraints_ternary': 10429.0, 'acyc_edges': 0.0, 'complexity': 223706.0}}, 'solving': {'solvers': {'choices': 1092.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 515.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2513.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 25.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1575794219970703, 'cpu': 0.171875, 'solve': 0.01795196533203125, 'unsat': 0.0, 'sat': 0.0049877166748046875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.1348323822021484, 'cpu': 4.359375, 'solve': 0.5393085479736328, 'unsat': 0.04616546630859375, 'sat': 0.17946624755859375}, 'models': {'enumerated': 18.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 17733.0, 'conflicts': 2453.0, 'conflicts_analyzed': 2404.0, 'restarts': 4.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 3090.0, 'models': 18.0, 'models_level': 5221.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 2255.0, 'distributed_sum_lbd': 5613.0, 'integrated': 12535.0, 'lemmas': 17920.0, 'lits_learnt': 235695.0, 'lemmas_binary': 1525.0, 'lemmas_ternary': 692.0, 'cpu_time': 1.671875, 'integrated_imps': 4239.0, 'integrated_jumps': 2392.0, 'guiding_paths_lits': 29612.0, 'guiding_paths': 180.0, 'splits': 0.0, 'lemmas_conflict': 2318.0, 'lemmas_loop': 4277.0, 'lemmas_other': 11325.0, 'lits_conflict': 34043.0, 'lits_loop': 33115.0, 'lits_other': 168537.0, 'jumps': {'jumps': 2404.0, 'jumps_bounded': 430.0, 'levels': 8308.0, 'levels_bounded': 5303.0, 'max': 189.0, 'max_executed': 189.0, 'max_bounded': 188.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 18, 11: 19, 12: 20, 13: 21, 14: 22, 15: 23, 16: 24, 17: 25}

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 18 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 9 (100.00% solved)

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(18, 25)', truth=True, inc_range=None)

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 18, step = 25]:
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 18)

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(25)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[13-11-2021_23-07-24] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(2, complete(blue), false, false)
final_goal(2, complete(blue), true, true)
final_goal(2, complete(red), false, false)
final_goal(2, complete(red), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, tower_base((block,1)), false, true)
final_goal(2, tower_base((block,1)), true, false)
final_goal(2, tower_base((block,2)), false, true)
final_goal(2, tower_base((block,2)), true, false)
final_goal(2, tower_base((block,3)), false, false)
final_goal(2, tower_base((block,3)), true, true)
final_goal(2, tower_base((block,4)), false, true)
final_goal(2, tower_base((block,4)), true, false)
final_goal(2, tower_base((block,5)), false, true)
final_goal(2, tower_base((block,5)), true, false)
final_goal(2, tower_base((block,6)), false, false)
final_goal(2, tower_base((block,6)), true, true)
final_goal(2, unordered_tower((block,1)), false, true)
final_goal(2, unordered_tower((block,1)), true, false)
final_goal(2, unordered_tower((block,2)), false, true)
final_goal(2, unordered_tower((block,2)), true, false)
final_goal(2, unordered_tower((block,3)), false, true)
final_goal(2, unordered_tower((block,3)), true, false)
final_goal(2, unordered_tower((block,4)), false, true)
final_goal(2, unordered_tower((block,4)), true, false)
final_goal(2, unordered_tower((block,5)), false, true)
final_goal(2, unordered_tower((block,5)), true, false)
final_goal(2, unordered_tower((block,6)), false, true)
final_goal(2, unordered_tower((block,6)), true, false)

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.117682s.

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 26: original = External(symbol='current_last_sgoals(18, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(18,25).

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 26: original = External(symbol='seq_achieve_fgoals(25)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(25).

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042857s with result Satisfiable.

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.160539, Incremental time limit = None
Running cumulative time = 3.1393729000000086, Cumulative time limit = 3600
Used memory = (RSS = 340.156250Mb, VMS = 333.941406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 19
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.270612s, Solving = 0.868761s, Total = 3.139373s, Memory = (RSS = 340.156250Mb, VMS = 333.941406Mb)), Calls = 26
Final Model :: Total atoms = 14934, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=26, start_step=25, end_step=26, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.270611700000006, solving_time=0.8687612000000025, total_time=3.1393729000000086, memory=Memory(rss=340.15625, vms=333.94140625), step_range=range(0, 27), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11768179999999973, solving_time=0.04285720000000026, total_time=0.160539, memory=Memory(rss=340.15625, vms=333.94140625), step_range=range(26, 27), clingo_stats={'problem': {'lp': {'atoms': 65461.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 383469.0, 'bodies_tr': 383469.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4752.0, 'count_bodies_tr': 4752.0, 'sccs': 476.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9104.0, 'rules': 729768.0, 'rules_normal': 725299.0, 'rules_choice': 4131.0, 'rules_minimize': 26.0, 'rules_acyc': 0.0, 'rules_heuristic': 312.0, 'rules_tr': 729706.0, 'rules_tr_normal': 725299.0, 'rules_tr_choice': 4131.0, 'rules_tr_minimize': 26.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 250.0, 'eqs': 136823.0, 'eqs_atom': 27797.0, 'eqs_body': 5921.0, 'eqs_other': 103105.0}, 'lpStep': {'atoms': 2333.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15290.0, 'bodies_tr': 15290.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 29652.0, 'rules_normal': 29487.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 29652.0, 'rules_tr_normal': 29487.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5485.0, 'eqs_atom': 1088.0, 'eqs_body': 116.0, 'eqs_other': 4281.0}, 'generator': {'vars': 37517.0, 'vars_eliminated': 0.0, 'vars_frozen': 23968.0, 'constraints': 3273.0, 'constraints_binary': 122022.0, 'constraints_ternary': 12397.0, 'acyc_edges': 0.0, 'complexity': 223706.0}}, 'solving': {'solvers': {'choices': 1134.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 541.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.15625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2653.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 26.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.16356658935546875, 'cpu': 0.296875, 'solve': 0.026929855346679688, 'unsat': 0.0, 'sat': 0.0049877166748046875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.298398971557617, 'cpu': 4.65625, 'solve': 0.5662384033203125, 'unsat': 0.04616546630859375, 'sat': 0.18445396423339844}, 'models': {'enumerated': 19.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 18867.0, 'conflicts': 2453.0, 'conflicts_analyzed': 2404.0, 'restarts': 4.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 3090.0, 'models': 19.0, 'models_level': 5762.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 501.0, 'distributed': 2255.0, 'distributed_sum_lbd': 5613.0, 'integrated': 12535.0, 'lemmas': 17920.0, 'lits_learnt': 235695.0, 'lemmas_binary': 1525.0, 'lemmas_ternary': 692.0, 'cpu_time': 1.828125, 'integrated_imps': 4239.0, 'integrated_jumps': 2392.0, 'guiding_paths_lits': 32265.0, 'guiding_paths': 187.0, 'splits': 0.0, 'lemmas_conflict': 2318.0, 'lemmas_loop': 4277.0, 'lemmas_other': 11325.0, 'lits_conflict': 34043.0, 'lits_loop': 33115.0, 'lits_other': 168537.0, 'jumps': {'jumps': 2404.0, 'jumps_bounded': 430.0, 'levels': 8308.0, 'levels_bounded': 5303.0, 'max': 189.0, 'max_executed': 189.0, 'max_bounded': 188.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 18, 11: 19, 12: 20, 13: 21, 14: 22, 15: 23, 16: 24, 17: 25, 18: 26}

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 19 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 10 (111.11% solved)

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 18 was achieved successfully.

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.083337s, Solving = 0.009690s, Total = 0.093028s, Memory = (RSS = 128.449219Mb, VMS = 117.886719Mb)
2 : Statistics :: Grounding = 0.070032s, Solving = 0.010892s, Total = 0.080923s, Memory = (RSS = 131.464844Mb, VMS = 121.285156Mb)
3 : Statistics :: Grounding = 0.066464s, Solving = 0.005977s, Total = 0.072440s, Memory = (RSS = 132.433594Mb, VMS = 122.277344Mb)
4 : Statistics :: Grounding = 0.067562s, Solving = 0.012283s, Total = 0.079845s, Memory = (RSS = 134.851562Mb, VMS = 124.191406Mb)
5 : Statistics :: Grounding = 0.067549s, Solving = 0.008519s, Total = 0.076067s, Memory = (RSS = 137.468750Mb, VMS = 127.238281Mb)
6 : Statistics :: Grounding = 0.076702s, Solving = 0.015721s, Total = 0.092423s, Memory = (RSS = 139.410156Mb, VMS = 128.785156Mb)
7 : Statistics :: Grounding = 0.072649s, Solving = 0.012010s, Total = 0.084658s, Memory = (RSS = 144.605469Mb, VMS = 133.652344Mb)
8 : Statistics :: Grounding = 0.073103s, Solving = 0.024707s, Total = 0.097810s, Memory = (RSS = 150.875000Mb, VMS = 140.390625Mb)
9 : Statistics :: Grounding = 0.088455s, Solving = 0.023514s, Total = 0.111969s, Memory = (RSS = 154.734375Mb, VMS = 143.066406Mb)
10 : Statistics :: Grounding = 0.079947s, Solving = 0.040438s, Total = 0.120386s, Memory = (RSS = 160.808594Mb, VMS = 150.800781Mb)
11 : Statistics :: Grounding = 0.089736s, Solving = 0.013429s, Total = 0.103164s, Memory = (RSS = 164.039062Mb, VMS = 153.152344Mb)
12 : Statistics :: Grounding = 0.083739s, Solving = 0.085959s, Total = 0.169698s, Memory = (RSS = 168.132812Mb, VMS = 156.894531Mb)
13 : Statistics :: Grounding = 0.090930s, Solving = 0.025122s, Total = 0.116052s, Memory = (RSS = 173.589844Mb, VMS = 161.992188Mb)
14 : Statistics :: Grounding = 0.092957s, Solving = 0.029226s, Total = 0.122184s, Memory = (RSS = 182.000000Mb, VMS = 172.695312Mb)
15 : Statistics :: Grounding = 0.087977s, Solving = 0.016805s, Total = 0.104783s, Memory = (RSS = 184.984375Mb, VMS = 175.074219Mb)
16 : Statistics :: Grounding = 0.095861s, Solving = 0.090050s, Total = 0.185911s, Memory = (RSS = 189.554688Mb, VMS = 179.554688Mb)
17 : Statistics :: Grounding = 0.095238s, Solving = 0.035837s, Total = 0.131075s, Memory = (RSS = 194.093750Mb, VMS = 183.597656Mb)
18 : Statistics :: Grounding = 0.101644s, Solving = 0.049334s, Total = 0.150977s, Memory = (RSS = 311.085938Mb, VMS = 303.531250Mb)
19 : Statistics :: Grounding = 0.084092s, Solving = 0.109915s, Total = 0.194007s, Memory = (RSS = 312.730469Mb, VMS = 304.882812Mb)
20 : Statistics :: Grounding = 0.077484s, Solving = 0.029490s, Total = 0.106974s, Memory = (RSS = 319.339844Mb, VMS = 317.847656Mb)
21 : Statistics :: Grounding = 0.108690s, Solving = 0.032180s, Total = 0.140870s, Memory = (RSS = 321.941406Mb, VMS = 319.718750Mb)
22 : Statistics :: Grounding = 0.086093s, Solving = 0.042963s, Total = 0.129056s, Memory = (RSS = 326.128906Mb, VMS = 323.550781Mb)
23 : Statistics :: Grounding = 0.095069s, Solving = 0.033809s, Total = 0.128878s, Memory = (RSS = 329.253906Mb, VMS = 325.609375Mb)
24 : Statistics :: Grounding = 0.095990s, Solving = 0.035141s, Total = 0.131130s, Memory = (RSS = 333.472656Mb, VMS = 328.707031Mb)
25 : Statistics :: Grounding = 0.121631s, Solving = 0.032894s, Total = 0.154526s, Memory = (RSS = 336.976562Mb, VMS = 331.636719Mb)
26 : Statistics :: Grounding = 0.117682s, Solving = 0.042857s, Total = 0.160539s, Memory = (RSS = 340.156250Mb, VMS = 333.941406Mb)

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.139373s due to: External generator exit.

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Deleting program grounding at level 2.

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 4, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 9, 15: 9, 16: 10, 17: 10, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15, 26: 16, 27: 17}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 7, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 15, 10: 18, 11: 20, 12: 22, 13: 23, 14: 24, 15: 25, 16: 26, 17: 27}
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 5, 12: 5, 13: 5, 14: 6, 15: 7, 16: 8, 17: 9}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 10, 5: 13, 6: 14, 7: 15, 8: 16, 9: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 4, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 9, 15: 9, 16: 10, 17: 10, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15, 26: 16, 27: 17}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 7, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 15, 10: 18, 11: 20, 12: 22, 13: 23, 14: 24, 15: 25, 16: 26, 17: 27}
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 5, 12: 5, 13: 5, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 12, 21: 13, 22: 14, 23: 15, 24: 16, 25: 17, 26: 18}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 10, 5: 13, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 19, 12: 20, 13: 21, 14: 22, 15: 23, 16: 24, 17: 25, 18: 26}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 18, Last requested goal index = 18 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.270612s, Solving = 0.868761s, Total = 3.139373s, Memory = (RSS = 340.156250Mb, VMS = 333.941406Mb)), Calls = 26
Model :: Total atoms = 14934, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 26 :: Actions = 26                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 3:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 4:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 7:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 8:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 9:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 10:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 11:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 14:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 15:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 16:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 17:
    Current Sub-goals:
        [Index = 9] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 9] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 12] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 21:
    Current Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_1,(block,4),(block,5))
Step 22:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
Step 23:
    Current Sub-goals:
        [Index = 15] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 15] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 24:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,2))
Step 25:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
Step 26:
    Current Sub-goals:
        [Index = 18] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 18] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_2,(block,1),(block,2))

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=17, total_plan_length=26, step_range=range(17, 27)

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 27, Actions = 27
Level [2]: Length = 26, Actions = 26
Level [3]: Length = 18, Actions = 18

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  2 (par-ref), Length =   9, Actions =   9 (Com = 1.00), Sgs = 9, Time =   3.169s (Gro =   2.295s, Sea =   0.874s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))

[13-11-2021_23-07-25] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=9, start_step=17, blend=Blend(left=0, right=0)

[13-11-2021_23-07-25] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=4, large_group_size=5

[13-11-2021_23-07-25] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=21, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  2 (par-ref), Length =   9, Actions =   9 (Com = 1.00), Sgs = 9, Time =   3.169s (Gro =   2.295s, Sea =   0.874s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 21, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 3:
Divided plan : Level =  2 (par-ref), Length =   9, Actions =   9 (Com = 1.00), Sgs = 9, Time =   3.169s (Gro =   2.295s, Sea =   0.874s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 21, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [18-21]

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [18-21], problem number = 3, increment number = 3

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 18)
	('last_sgoals', 21)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 18
last_sgoals = 21
start_step = 27
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 30

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency disabled : Problem type = partial conformance refinement (sequential) with sgoals range [18-21] : Minimum search length bound = disabled with value = 30

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = True, chosen = True

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 21})

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 18).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 19).
sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 20).
sub_goal(2, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 21).

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-07-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000162C6152C70>

[13-11-2021_23-07-25] DEBUG :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[13-11-2021_23-07-25] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000162C6152C70> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,0)), 3)).
fix_action(occurs(1, talos, move((store_room,1)), 4)).
fix_action(occurs(1, talos, move((store_room,0)), 5)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 6)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 7)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,6))), 8)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,6)), 9)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,5))), 10)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,5)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 12)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 13)).
fix_action(occurs(1, talos, move((store_room,1)), 14)).
fix_action(occurs(1, talos, move((hallway,0)), 15)).
fix_action(occurs(1, talos, move((hallway,1)), 16)).
fix_action(occurs(1, talos, move((hallway,2)), 17)).
fix_action(occurs(1, talos, move((puzzle_room,0)), 18)).
fix_action(occurs(1, talos, move((puzzle_room,1)), 19)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,6),puzzle_room_table_right), 21)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 22)).
fix_action(occurs(1, talos, release(manipulator_end_1,(block,6)), 23)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,3))), 24)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,3)), 25)).
fix_action(occurs(1, talos, put(manipulator_end_2,(block,5),(block,6)), 26)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,3),puzzle_room_table_left), 27)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[13-11-2021_23-07-26] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000162C6152C70> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), (block,2), 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), (block,2), 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), (block,2), 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), (block,2), 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), (block,2), 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), (block,2), 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,0), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), (block,2), 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), (block,2), 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (store_room,1), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), (block,2), 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), store_room, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), (block,2), 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (store_room,0), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), (block,2), 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), store_room, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), (block,2), 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (store_room,0), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), (block,2), 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), store_room, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), (block,2), 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (store_room,0), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), (block,2), 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), store_room, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), (block,2), 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (store_room,0), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), (block,2), 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), store_room, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), (block,2), 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (store_room,0), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), (block,2), 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), store_room, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), (block,2), 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (store_room,0), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), (block,2), 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), store_room, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), (block,2), 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (store_room,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), (block,2), 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), store_room, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), (block,2), 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (store_room,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), (block,2), 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), store_room, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), (block,2), 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (store_room,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), (block,2), 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), store_room, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), (block,2), 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(1, complete(blue), false, 14)).
fix_fluent(holds(1, complete(red), false, 14)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 14)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 14)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 14)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 14)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 14)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(1, configuration(store_room_door), closed, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 14)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 14)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 14)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 14)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,5)), (store_room,1), 14)).
fix_fluent(holds(1, in((block,6)), (store_room,1), 14)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 14)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 14)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 14)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 14)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 14)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(talos), (store_room,1), 14)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 14)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 14)).
fix_fluent(holds(1, on((block,3)), (block,1), 14)).
fix_fluent(holds(1, on((block,4)), (block,2), 14)).
fix_fluent(holds(1, on((block,5)), nothing, 14)).
fix_fluent(holds(1, on((block,6)), nothing, 14)).
fix_fluent(holds(1, tower_base((block,1)), true, 14)).
fix_fluent(holds(1, tower_base((block,2)), true, 14)).
fix_fluent(holds(1, tower_base((block,3)), false, 14)).
fix_fluent(holds(1, tower_base((block,4)), false, 14)).
fix_fluent(holds(1, tower_base((block,5)), false, 14)).
fix_fluent(holds(1, tower_base((block,6)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), closed, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,5)), store_room, 14)).
fix_fluent(holds(2, in((block,6)), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), store_room, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), (block,2), 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), nothing, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(1, complete(blue), false, 15)).
fix_fluent(holds(1, complete(red), false, 15)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 15)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 15)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 15)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 15)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 15)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(1, configuration(store_room_door), closed, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 15)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 15)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 15)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 15)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,5)), (hallway,0), 15)).
fix_fluent(holds(1, in((block,6)), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 15)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(talos), (hallway,0), 15)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 15)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 15)).
fix_fluent(holds(1, on((block,3)), (block,1), 15)).
fix_fluent(holds(1, on((block,4)), (block,2), 15)).
fix_fluent(holds(1, on((block,5)), nothing, 15)).
fix_fluent(holds(1, on((block,6)), nothing, 15)).
fix_fluent(holds(1, tower_base((block,1)), true, 15)).
fix_fluent(holds(1, tower_base((block,2)), true, 15)).
fix_fluent(holds(1, tower_base((block,3)), false, 15)).
fix_fluent(holds(1, tower_base((block,4)), false, 15)).
fix_fluent(holds(1, tower_base((block,5)), false, 15)).
fix_fluent(holds(1, tower_base((block,6)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), closed, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,5)), hallway, 15)).
fix_fluent(holds(2, in((block,6)), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), hallway, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), (block,2), 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), nothing, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(1, complete(blue), false, 16)).
fix_fluent(holds(1, complete(red), false, 16)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 16)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 16)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 16)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 16)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 16)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(1, configuration(store_room_door), closed, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 16)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 16)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 16)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 16)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,5)), (hallway,1), 16)).
fix_fluent(holds(1, in((block,6)), (hallway,1), 16)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 16)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 16)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 16)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 16)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 16)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(talos), (hallway,1), 16)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 16)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 16)).
fix_fluent(holds(1, on((block,3)), (block,1), 16)).
fix_fluent(holds(1, on((block,4)), (block,2), 16)).
fix_fluent(holds(1, on((block,5)), nothing, 16)).
fix_fluent(holds(1, on((block,6)), nothing, 16)).
fix_fluent(holds(1, tower_base((block,1)), true, 16)).
fix_fluent(holds(1, tower_base((block,2)), true, 16)).
fix_fluent(holds(1, tower_base((block,3)), false, 16)).
fix_fluent(holds(1, tower_base((block,4)), false, 16)).
fix_fluent(holds(1, tower_base((block,5)), false, 16)).
fix_fluent(holds(1, tower_base((block,6)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), closed, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,5)), hallway, 16)).
fix_fluent(holds(2, in((block,6)), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), hallway, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), (block,2), 16)).
fix_fluent(holds(2, on((block,5)), nothing, 16)).
fix_fluent(holds(2, on((block,6)), nothing, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(1, complete(blue), false, 17)).
fix_fluent(holds(1, complete(red), false, 17)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 17)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 17)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 17)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 17)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 17)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(1, configuration(store_room_door), closed, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 17)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 17)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 17)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 17)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,5)), (hallway,2), 17)).
fix_fluent(holds(1, in((block,6)), (hallway,2), 17)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 17)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 17)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 17)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 17)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 17)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 17)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(talos), (hallway,2), 17)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 17)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 17)).
fix_fluent(holds(1, on((block,3)), (block,1), 17)).
fix_fluent(holds(1, on((block,4)), (block,2), 17)).
fix_fluent(holds(1, on((block,5)), nothing, 17)).
fix_fluent(holds(1, on((block,6)), nothing, 17)).
fix_fluent(holds(1, tower_base((block,1)), true, 17)).
fix_fluent(holds(1, tower_base((block,2)), true, 17)).
fix_fluent(holds(1, tower_base((block,3)), false, 17)).
fix_fluent(holds(1, tower_base((block,4)), false, 17)).
fix_fluent(holds(1, tower_base((block,5)), false, 17)).
fix_fluent(holds(1, tower_base((block,6)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), closed, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,5)), hallway, 17)).
fix_fluent(holds(2, in((block,6)), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), hallway, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), (block,1), 17)).
fix_fluent(holds(2, on((block,4)), (block,2), 17)).
fix_fluent(holds(2, on((block,5)), nothing, 17)).
fix_fluent(holds(2, on((block,6)), nothing, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), false, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(1, complete(blue), false, 18)).
fix_fluent(holds(1, complete(red), false, 18)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 18)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 18)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 18)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 18)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 18)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(1, configuration(store_room_door), closed, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 18)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 18)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 18)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 18)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,0), 18)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,0), 18)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,0), 18)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,0), 18)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,0), 18)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,0), 18)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(talos), (puzzle_room,0), 18)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 18)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 18)).
fix_fluent(holds(1, on((block,3)), (block,1), 18)).
fix_fluent(holds(1, on((block,4)), (block,2), 18)).
fix_fluent(holds(1, on((block,5)), nothing, 18)).
fix_fluent(holds(1, on((block,6)), nothing, 18)).
fix_fluent(holds(1, tower_base((block,1)), true, 18)).
fix_fluent(holds(1, tower_base((block,2)), true, 18)).
fix_fluent(holds(1, tower_base((block,3)), false, 18)).
fix_fluent(holds(1, tower_base((block,4)), false, 18)).
fix_fluent(holds(1, tower_base((block,5)), false, 18)).
fix_fluent(holds(1, tower_base((block,6)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), closed, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), puzzle_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), (block,1), 18)).
fix_fluent(holds(2, on((block,4)), (block,2), 18)).
fix_fluent(holds(2, on((block,5)), nothing, 18)).
fix_fluent(holds(2, on((block,6)), nothing, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), false, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(1, complete(blue), false, 19)).
fix_fluent(holds(1, complete(red), false, 19)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 19)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 19)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 19)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 19)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 19)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(1, configuration(store_room_door), closed, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 19)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 19)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 19)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 19)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 19)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 19)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 19)).
fix_fluent(holds(1, on((block,3)), (block,1), 19)).
fix_fluent(holds(1, on((block,4)), (block,2), 19)).
fix_fluent(holds(1, on((block,5)), nothing, 19)).
fix_fluent(holds(1, on((block,6)), nothing, 19)).
fix_fluent(holds(1, tower_base((block,1)), true, 19)).
fix_fluent(holds(1, tower_base((block,2)), true, 19)).
fix_fluent(holds(1, tower_base((block,3)), false, 19)).
fix_fluent(holds(1, tower_base((block,4)), false, 19)).
fix_fluent(holds(1, tower_base((block,5)), false, 19)).
fix_fluent(holds(1, tower_base((block,6)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(2, complete(blue), false, 19)).
fix_fluent(holds(2, complete(red), false, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 19)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 19)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(2, configuration(store_room_door), closed, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 19)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 19)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 19)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 19)).
fix_fluent(holds(2, in(talos), puzzle_room, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,3)), (block,1), 19)).
fix_fluent(holds(2, on((block,4)), (block,2), 19)).
fix_fluent(holds(2, on((block,5)), nothing, 19)).
fix_fluent(holds(2, on((block,6)), nothing, 19)).
fix_fluent(holds(2, tower_base((block,1)), true, 19)).
fix_fluent(holds(2, tower_base((block,2)), true, 19)).
fix_fluent(holds(2, tower_base((block,3)), false, 19)).
fix_fluent(holds(2, tower_base((block,4)), false, 19)).
fix_fluent(holds(2, tower_base((block,5)), false, 19)).
fix_fluent(holds(2, tower_base((block,6)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(1, complete(blue), false, 20)).
fix_fluent(holds(1, complete(red), false, 20)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 20)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 20)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 20)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 20)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 20)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(1, configuration(store_room_door), closed, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 20)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 20)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 20)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 20)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 20)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 20)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 20)).
fix_fluent(holds(1, on((block,3)), (block,1), 20)).
fix_fluent(holds(1, on((block,4)), (block,2), 20)).
fix_fluent(holds(1, on((block,5)), nothing, 20)).
fix_fluent(holds(1, on((block,6)), nothing, 20)).
fix_fluent(holds(1, tower_base((block,1)), true, 20)).
fix_fluent(holds(1, tower_base((block,2)), true, 20)).
fix_fluent(holds(1, tower_base((block,3)), false, 20)).
fix_fluent(holds(1, tower_base((block,4)), false, 20)).
fix_fluent(holds(1, tower_base((block,5)), false, 20)).
fix_fluent(holds(1, tower_base((block,6)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(2, complete(blue), false, 20)).
fix_fluent(holds(2, complete(red), false, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 20)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 20)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(2, configuration(store_room_door), closed, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 20)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 20)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 20)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 20)).
fix_fluent(holds(2, in(talos), puzzle_room, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,3)), (block,1), 20)).
fix_fluent(holds(2, on((block,4)), (block,2), 20)).
fix_fluent(holds(2, on((block,5)), nothing, 20)).
fix_fluent(holds(2, on((block,6)), nothing, 20)).
fix_fluent(holds(2, tower_base((block,1)), true, 20)).
fix_fluent(holds(2, tower_base((block,2)), true, 20)).
fix_fluent(holds(2, tower_base((block,3)), false, 20)).
fix_fluent(holds(2, tower_base((block,4)), false, 20)).
fix_fluent(holds(2, tower_base((block,5)), false, 20)).
fix_fluent(holds(2, tower_base((block,6)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(1, complete(blue), false, 21)).
fix_fluent(holds(1, complete(red), false, 21)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 21)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 21)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 21)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 21)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 21)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(1, configuration(store_room_door), closed, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 21)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 21)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 21)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 21)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 21)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 21)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 21)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 21)).
fix_fluent(holds(1, on((block,3)), (block,1), 21)).
fix_fluent(holds(1, on((block,4)), (block,2), 21)).
fix_fluent(holds(1, on((block,5)), nothing, 21)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 21)).
fix_fluent(holds(1, tower_base((block,1)), true, 21)).
fix_fluent(holds(1, tower_base((block,2)), true, 21)).
fix_fluent(holds(1, tower_base((block,3)), false, 21)).
fix_fluent(holds(1, tower_base((block,4)), false, 21)).
fix_fluent(holds(1, tower_base((block,5)), false, 21)).
fix_fluent(holds(1, tower_base((block,6)), true, 21)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 21)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(2, complete(blue), false, 21)).
fix_fluent(holds(2, complete(red), false, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 21)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 21)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(2, configuration(store_room_door), closed, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 21)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 21)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 21)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 21)).
fix_fluent(holds(2, in(talos), puzzle_room, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 21)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,3)), (block,1), 21)).
fix_fluent(holds(2, on((block,4)), (block,2), 21)).
fix_fluent(holds(2, on((block,5)), nothing, 21)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 21)).
fix_fluent(holds(2, tower_base((block,1)), true, 21)).
fix_fluent(holds(2, tower_base((block,2)), true, 21)).
fix_fluent(holds(2, tower_base((block,3)), false, 21)).
fix_fluent(holds(2, tower_base((block,4)), false, 21)).
fix_fluent(holds(2, tower_base((block,5)), false, 21)).
fix_fluent(holds(2, tower_base((block,6)), true, 21)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 21)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(1, complete(blue), false, 22)).
fix_fluent(holds(1, complete(red), false, 22)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 22)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 22)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 22)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 22)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 22)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(1, configuration(store_room_door), closed, 22)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 22)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 22)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 22)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 22)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 22)).
fix_fluent(holds(1, on((block,3)), (block,1), 22)).
fix_fluent(holds(1, on((block,4)), (block,2), 22)).
fix_fluent(holds(1, on((block,5)), nothing, 22)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 22)).
fix_fluent(holds(1, tower_base((block,1)), true, 22)).
fix_fluent(holds(1, tower_base((block,2)), true, 22)).
fix_fluent(holds(1, tower_base((block,3)), false, 22)).
fix_fluent(holds(1, tower_base((block,4)), false, 22)).
fix_fluent(holds(1, tower_base((block,5)), false, 22)).
fix_fluent(holds(1, tower_base((block,6)), true, 22)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 22)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(2, complete(blue), false, 22)).
fix_fluent(holds(2, complete(red), false, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 22)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 22)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(2, configuration(store_room_door), closed, 22)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 22)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 22)).
fix_fluent(holds(2, in(talos), puzzle_room, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 22)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,3)), (block,1), 22)).
fix_fluent(holds(2, on((block,4)), (block,2), 22)).
fix_fluent(holds(2, on((block,5)), nothing, 22)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 22)).
fix_fluent(holds(2, tower_base((block,1)), true, 22)).
fix_fluent(holds(2, tower_base((block,2)), true, 22)).
fix_fluent(holds(2, tower_base((block,3)), false, 22)).
fix_fluent(holds(2, tower_base((block,4)), false, 22)).
fix_fluent(holds(2, tower_base((block,5)), false, 22)).
fix_fluent(holds(2, tower_base((block,6)), true, 22)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 22)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(1, complete(blue), false, 23)).
fix_fluent(holds(1, complete(red), false, 23)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 23)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 23)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 23)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 23)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 23)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(1, configuration(store_room_door), closed, 23)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 23)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 23)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 23)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 23)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 23)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 23)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 23)).
fix_fluent(holds(1, on((block,3)), (block,1), 23)).
fix_fluent(holds(1, on((block,4)), (block,2), 23)).
fix_fluent(holds(1, on((block,5)), nothing, 23)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 23)).
fix_fluent(holds(1, tower_base((block,1)), true, 23)).
fix_fluent(holds(1, tower_base((block,2)), true, 23)).
fix_fluent(holds(1, tower_base((block,3)), false, 23)).
fix_fluent(holds(1, tower_base((block,4)), false, 23)).
fix_fluent(holds(1, tower_base((block,5)), false, 23)).
fix_fluent(holds(1, tower_base((block,6)), true, 23)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 23)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(2, complete(blue), false, 23)).
fix_fluent(holds(2, complete(red), false, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 23)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 23)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(2, configuration(store_room_door), closed, 23)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 23)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 23)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 23)).
fix_fluent(holds(2, in(talos), puzzle_room, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 23)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,3)), (block,1), 23)).
fix_fluent(holds(2, on((block,4)), (block,2), 23)).
fix_fluent(holds(2, on((block,5)), nothing, 23)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 23)).
fix_fluent(holds(2, tower_base((block,1)), true, 23)).
fix_fluent(holds(2, tower_base((block,2)), true, 23)).
fix_fluent(holds(2, tower_base((block,3)), false, 23)).
fix_fluent(holds(2, tower_base((block,4)), false, 23)).
fix_fluent(holds(2, tower_base((block,5)), false, 23)).
fix_fluent(holds(2, tower_base((block,6)), true, 23)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 23)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(1, complete(blue), false, 24)).
fix_fluent(holds(1, complete(red), false, 24)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 24)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 24)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 24)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 24)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 24)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(1, configuration(store_room_door), closed, 24)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 24)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 24)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 24)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 24)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 24)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 24)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 24)).
fix_fluent(holds(1, on((block,3)), (block,1), 24)).
fix_fluent(holds(1, on((block,4)), (block,2), 24)).
fix_fluent(holds(1, on((block,5)), nothing, 24)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 24)).
fix_fluent(holds(1, tower_base((block,1)), true, 24)).
fix_fluent(holds(1, tower_base((block,2)), true, 24)).
fix_fluent(holds(1, tower_base((block,3)), false, 24)).
fix_fluent(holds(1, tower_base((block,4)), false, 24)).
fix_fluent(holds(1, tower_base((block,5)), false, 24)).
fix_fluent(holds(1, tower_base((block,6)), true, 24)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 24)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(2, complete(blue), false, 24)).
fix_fluent(holds(2, complete(red), false, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 24)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 24)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(2, configuration(store_room_door), closed, 24)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 24)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 24)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 24)).
fix_fluent(holds(2, in(talos), puzzle_room, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 24)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,3)), (block,1), 24)).
fix_fluent(holds(2, on((block,4)), (block,2), 24)).
fix_fluent(holds(2, on((block,5)), nothing, 24)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 24)).
fix_fluent(holds(2, tower_base((block,1)), true, 24)).
fix_fluent(holds(2, tower_base((block,2)), true, 24)).
fix_fluent(holds(2, tower_base((block,3)), false, 24)).
fix_fluent(holds(2, tower_base((block,4)), false, 24)).
fix_fluent(holds(2, tower_base((block,5)), false, 24)).
fix_fluent(holds(2, tower_base((block,6)), true, 24)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 24)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(1, complete(blue), false, 25)).
fix_fluent(holds(1, complete(red), false, 25)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 25)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 25)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 25)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 25)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 25)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(1, configuration(store_room_door), closed, 25)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 25)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 25)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 25)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 25)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 25)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 25)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 25)).
fix_fluent(holds(1, on((block,3)), (block,1), 25)).
fix_fluent(holds(1, on((block,4)), (block,2), 25)).
fix_fluent(holds(1, on((block,5)), nothing, 25)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 25)).
fix_fluent(holds(1, tower_base((block,1)), true, 25)).
fix_fluent(holds(1, tower_base((block,2)), true, 25)).
fix_fluent(holds(1, tower_base((block,3)), false, 25)).
fix_fluent(holds(1, tower_base((block,4)), false, 25)).
fix_fluent(holds(1, tower_base((block,5)), false, 25)).
fix_fluent(holds(1, tower_base((block,6)), true, 25)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 25)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(2, complete(blue), false, 25)).
fix_fluent(holds(2, complete(red), false, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 25)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 25)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(2, configuration(store_room_door), closed, 25)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 25)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 25)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 25)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 25)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 25)).
fix_fluent(holds(2, in(talos), puzzle_room, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 25)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,3)), (block,1), 25)).
fix_fluent(holds(2, on((block,4)), (block,2), 25)).
fix_fluent(holds(2, on((block,5)), nothing, 25)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 25)).
fix_fluent(holds(2, tower_base((block,1)), true, 25)).
fix_fluent(holds(2, tower_base((block,2)), true, 25)).
fix_fluent(holds(2, tower_base((block,3)), false, 25)).
fix_fluent(holds(2, tower_base((block,4)), false, 25)).
fix_fluent(holds(2, tower_base((block,5)), false, 25)).
fix_fluent(holds(2, tower_base((block,6)), true, 25)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 25)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(1, complete(blue), false, 26)).
fix_fluent(holds(1, complete(red), false, 26)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 26)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 26)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 26)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 26)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 26)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(1, configuration(store_room_door), closed, 26)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 26)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 26)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 26)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 26)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 26)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 26)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 26)).
fix_fluent(holds(1, on((block,3)), (block,1), 26)).
fix_fluent(holds(1, on((block,4)), (block,2), 26)).
fix_fluent(holds(1, on((block,5)), (block,6), 26)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 26)).
fix_fluent(holds(1, tower_base((block,1)), true, 26)).
fix_fluent(holds(1, tower_base((block,2)), true, 26)).
fix_fluent(holds(1, tower_base((block,3)), false, 26)).
fix_fluent(holds(1, tower_base((block,4)), false, 26)).
fix_fluent(holds(1, tower_base((block,5)), false, 26)).
fix_fluent(holds(1, tower_base((block,6)), true, 26)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 26)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(2, complete(blue), false, 26)).
fix_fluent(holds(2, complete(red), false, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 26)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 26)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(2, configuration(store_room_door), closed, 26)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 26)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 26)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 26)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 26)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 26)).
fix_fluent(holds(2, in(talos), puzzle_room, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 26)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,3)), (block,1), 26)).
fix_fluent(holds(2, on((block,4)), (block,2), 26)).
fix_fluent(holds(2, on((block,5)), (block,6), 26)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 26)).
fix_fluent(holds(2, tower_base((block,1)), true, 26)).
fix_fluent(holds(2, tower_base((block,2)), true, 26)).
fix_fluent(holds(2, tower_base((block,3)), false, 26)).
fix_fluent(holds(2, tower_base((block,4)), false, 26)).
fix_fluent(holds(2, tower_base((block,5)), false, 26)).
fix_fluent(holds(2, tower_base((block,6)), true, 26)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 26)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(1, complete(blue), false, 27)).
fix_fluent(holds(1, complete(red), false, 27)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 27)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 27)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 27)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 27)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 27)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(1, configuration(store_room_door), closed, 27)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 27)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 27)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 27)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 27)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 27)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 27)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 27)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 27)).
fix_fluent(holds(1, on((block,4)), (block,2), 27)).
fix_fluent(holds(1, on((block,5)), (block,6), 27)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 27)).
fix_fluent(holds(1, tower_base((block,1)), true, 27)).
fix_fluent(holds(1, tower_base((block,2)), true, 27)).
fix_fluent(holds(1, tower_base((block,3)), true, 27)).
fix_fluent(holds(1, tower_base((block,4)), false, 27)).
fix_fluent(holds(1, tower_base((block,5)), false, 27)).
fix_fluent(holds(1, tower_base((block,6)), true, 27)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 27)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(2, complete(blue), false, 27)).
fix_fluent(holds(2, complete(red), false, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 27)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 27)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(2, configuration(store_room_door), closed, 27)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 27)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 27)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 27)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 27)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 27)).
fix_fluent(holds(2, in(talos), puzzle_room, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 27)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,4)), (block,2), 27)).
fix_fluent(holds(2, on((block,5)), (block,6), 27)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 27)).
fix_fluent(holds(2, tower_base((block,1)), true, 27)).
fix_fluent(holds(2, tower_base((block,2)), true, 27)).
fix_fluent(holds(2, tower_base((block,3)), true, 27)).
fix_fluent(holds(2, tower_base((block,4)), false, 27)).
fix_fluent(holds(2, tower_base((block,5)), false, 27)).
fix_fluent(holds(2, tower_base((block,6)), true, 27)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 27)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 27)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 27)
	('last_sgoals', 21)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('first_sgoals', 18)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000162C6152C70>)

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(18, 28)', truth=True, inc_range=None)

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.151848s.

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 28: original = External(symbol='current_last_sgoals(18, 28)', truth=True, inc_range=None), conversion = current_last_sgoals(18,28).

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054254s with result Satisfiable.

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2061023999999989, Incremental time limit = None
Running cumulative time = 4.325170399999999, Cumulative time limit = 3600
Used memory = (RSS = 277.757812Mb, VMS = 269.964844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 19
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.401271s, Solving = 0.923899s, Total = 4.325170s, Memory = (RSS = 304.597656Mb, VMS = 297.562500Mb)), Calls = 28
Final Model :: Total atoms = 18795, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=28, start_step=27, end_step=28, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.4012712999999986, solving_time=0.9238991000000008, total_time=4.325170399999999, memory=Memory(rss=304.59765625, vms=297.5625), step_range=range(0, 29), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15184789999999992, solving_time=0.054254499999998984, total_time=0.2061023999999989, memory=Memory(rss=277.7578125, vms=269.96484375), step_range=range(28, 29), clingo_stats={'problem': {'lp': {'atoms': 97806.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 652200.0, 'bodies_tr': 652200.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5716.0, 'count_bodies_tr': 5716.0, 'sccs': 569.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10570.0, 'rules': 1260750.0, 'rules_normal': 1254578.0, 'rules_choice': 5808.0, 'rules_minimize': 28.0, 'rules_acyc': 0.0, 'rules_heuristic': 336.0, 'rules_tr': 1260563.0, 'rules_tr_normal': 1254578.0, 'rules_tr_choice': 5808.0, 'rules_tr_minimize': 28.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 149.0, 'eqs': 235145.0, 'eqs_atom': 47580.0, 'eqs_body': 10342.0, 'eqs_other': 177223.0}, 'lpStep': {'atoms': 5964.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24122.0, 'bodies_tr': 24122.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 587.0, 'rules': 50079.0, 'rules_normal': 49871.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 50075.0, 'rules_tr_normal': 49871.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 8421.0, 'eqs_atom': 1903.0, 'eqs_body': 314.0, 'eqs_other': 6204.0}, 'generator': {'vars': 39043.0, 'vars_eliminated': 0.0, 'vars_frozen': 24027.0, 'constraints': 522.0, 'constraints_binary': 39472.0, 'constraints_ternary': 1151.0, 'acyc_edges': 0.0, 'complexity': 166623.0}}, 'solving': {'solvers': {'choices': 1218.0, 'conflicts': 20.0, 'conflicts_analyzed': 20.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 604.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 20.0, 'integrated': 0.0, 'lemmas': 28.0, 'lits_learnt': 28.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.078125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 3010.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 20.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 20.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 20.0, 'jumps_bounded': 0.0, 'levels': 20.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 28.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.3334197998046875, 'cpu': 0.421875, 'solve': 0.022937774658203125, 'unsat': 0.0, 'sat': 0.005985260009765625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.624382019042969, 'cpu': 5.375, 'solve': 0.4592723846435547, 'unsat': 0.028924942016601562, 'sat': 0.089691162109375}, 'models': {'enumerated': 19.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 15392.0, 'conflicts': 1007.0, 'conflicts_analyzed': 963.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 603.0, 'models': 19.0, 'models_level': 5754.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 970.0, 'distributed_sum_lbd': 1723.0, 'integrated': 3699.0, 'lemmas': 5677.0, 'lits_learnt': 64268.0, 'lemmas_binary': 440.0, 'lemmas_ternary': 152.0, 'cpu_time': 1.1875, 'integrated_imps': 1884.0, 'integrated_jumps': 911.0, 'guiding_paths_lits': 36754.0, 'guiding_paths': 195.0, 'splits': 0.0, 'lemmas_conflict': 925.0, 'lemmas_loop': 1788.0, 'lemmas_other': 2964.0, 'lits_conflict': 10421.0, 'lits_loop': 14601.0, 'lits_other': 39246.0, 'jumps': {'jumps': 963.0, 'jumps_bounded': 283.0, 'levels': 20857.0, 'levels_bounded': 19033.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 28}

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 19 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 2 ( 50.00% solved)

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(19, 28)', truth=True, inc_range=None)

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 19, step = 28]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 19)

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 28:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.116480s.

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 29: original = External(symbol='current_last_sgoals(19, 28)', truth=True, inc_range=None), conversion = current_last_sgoals(19,28).

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021858s with result Unsatisfiable.

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13833889999999727, Incremental time limit = None
Running cumulative time = 4.463509299999997, Cumulative time limit = 3600
Used memory = (RSS = 278.953125Mb, VMS = 271.054688Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=29, start_step=28, end_step=29, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.5177517999999965, solving_time=0.9457575, total_time=4.463509299999997, memory=Memory(rss=304.59765625, vms=297.5625), step_range=range(0, 30), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11648049999999799, solving_time=0.02185839999999928, total_time=0.13833889999999727, memory=Memory(rss=278.953125, vms=271.0546875), step_range=range(29, 30), clingo_stats={'problem': {'lp': {'atoms': 99730.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 674361.0, 'bodies_tr': 674361.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5918.0, 'count_bodies_tr': 5918.0, 'sccs': 577.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10642.0, 'rules': 1305098.0, 'rules_normal': 1298718.0, 'rules_choice': 6003.0, 'rules_minimize': 29.0, 'rules_acyc': 0.0, 'rules_heuristic': 348.0, 'rules_tr': 1304901.0, 'rules_tr_normal': 1298718.0, 'rules_tr_choice': 6003.0, 'rules_tr_minimize': 29.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 151.0, 'eqs': 240347.0, 'eqs_atom': 48083.0, 'eqs_body': 10676.0, 'eqs_other': 181588.0}, 'lpStep': {'atoms': 1924.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22161.0, 'bodies_tr': 22161.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 8.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 72.0, 'rules': 44348.0, 'rules_normal': 44140.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 44338.0, 'rules_tr_normal': 44140.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 5202.0, 'eqs_atom': 503.0, 'eqs_body': 334.0, 'eqs_other': 4365.0}, 'generator': {'vars': 39495.0, 'vars_eliminated': 0.0, 'vars_frozen': 24371.0, 'constraints': 525.0, 'constraints_binary': 43009.0, 'constraints_ternary': 691.0, 'acyc_edges': 0.0, 'complexity': 166623.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2718.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 29.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.14162254333496094, 'cpu': 0.140625, 'solve': 0.002994537353515625, 'unsat': 0.002994537353515625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.76600456237793, 'cpu': 5.515625, 'solve': 0.4622669219970703, 'unsat': 0.03191947937011719, 'sat': 0.089691162109375}, 'models': {'enumerated': 19.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 15392.0, 'conflicts': 1009.0, 'conflicts_analyzed': 963.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 603.0, 'models': 19.0, 'models_level': 5754.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 970.0, 'distributed_sum_lbd': 1723.0, 'integrated': 3699.0, 'lemmas': 5677.0, 'lits_learnt': 64268.0, 'lemmas_binary': 440.0, 'lemmas_ternary': 152.0, 'cpu_time': 1.1875, 'integrated_imps': 1884.0, 'integrated_jumps': 911.0, 'guiding_paths_lits': 39472.0, 'guiding_paths': 201.0, 'splits': 0.0, 'lemmas_conflict': 925.0, 'lemmas_loop': 1788.0, 'lemmas_other': 2964.0, 'lits_conflict': 10421.0, 'lits_loop': 14601.0, 'lits_other': 39246.0, 'jumps': {'jumps': 963.0, 'jumps_bounded': 283.0, 'levels': 20857.0, 'levels_bounded': 19033.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 29:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [30]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.117981s.

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.064010s with result Satisfiable.

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [30]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.18199089999999885, Incremental time limit = None
Running cumulative time = 4.645500199999995, Cumulative time limit = 3600
Used memory = (RSS = 281.066406Mb, VMS = 272.929688Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 20
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.635733s, Solving = 1.009767s, Total = 4.645500s, Memory = (RSS = 304.597656Mb, VMS = 297.562500Mb)), Calls = 30
Final Model :: Total atoms = 19572, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=30, start_step=29, end_step=30, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.635732799999997, solving_time=1.0097673999999985, total_time=4.645500199999995, memory=Memory(rss=304.59765625, vms=297.5625), step_range=range(0, 31), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11798100000000034, solving_time=0.06400989999999851, total_time=0.18199089999999885, memory=Memory(rss=281.06640625, vms=272.9296875), step_range=range(30, 31), clingo_stats={'problem': {'lp': {'atoms': 101707.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 696779.0, 'bodies_tr': 696779.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6120.0, 'count_bodies_tr': 6120.0, 'sccs': 596.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10854.0, 'rules': 1350013.0, 'rules_normal': 1343425.0, 'rules_choice': 6198.0, 'rules_minimize': 30.0, 'rules_acyc': 0.0, 'rules_heuristic': 360.0, 'rules_tr': 1349806.0, 'rules_tr_normal': 1343425.0, 'rules_tr_choice': 6198.0, 'rules_tr_minimize': 30.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 153.0, 'eqs': 248223.0, 'eqs_atom': 48827.0, 'eqs_body': 11160.0, 'eqs_other': 188236.0}, 'lpStep': {'atoms': 1977.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22418.0, 'bodies_tr': 22418.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 19.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 212.0, 'rules': 44915.0, 'rules_normal': 44707.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 44905.0, 'rules_tr_normal': 44707.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 7876.0, 'eqs_atom': 744.0, 'eqs_body': 484.0, 'eqs_other': 6648.0}, 'generator': {'vars': 40334.0, 'vars_eliminated': 0.0, 'vars_frozen': 24902.0, 'constraints': 698.0, 'constraints_binary': 51017.0, 'constraints_ternary': 1335.0, 'acyc_edges': 0.0, 'complexity': 166623.0}}, 'solving': {'solvers': {'choices': 1307.0, 'conflicts': 44.0, 'conflicts_analyzed': 44.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 5.0, 'models': 1.0, 'models_level': 662.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 52.0, 'distributed_sum_lbd': 65.0, 'integrated': 35.0, 'lemmas': 91.0, 'lits_learnt': 288.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 30.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 3808.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 44.0, 'lemmas_loop': 12.0, 'lemmas_other': 35.0, 'lits_conflict': 64.0, 'lits_loop': 49.0, 'lits_other': 175.0, 'jumps': {'jumps': 44.0, 'jumps_bounded': 5.0, 'levels': 49.0, 'levels_bounded': 5.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 30.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1850738525390625, 'cpu': 0.234375, 'solve': 0.0359039306640625, 'unsat': 0.0, 'sat': 0.0029964447021484375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.951078414916992, 'cpu': 5.75, 'solve': 0.4981708526611328, 'unsat': 0.03191947937011719, 'sat': 0.09268760681152344}, 'models': {'enumerated': 20.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 16699.0, 'conflicts': 1053.0, 'conflicts_analyzed': 1007.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 608.0, 'models': 20.0, 'models_level': 6416.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1022.0, 'distributed_sum_lbd': 1788.0, 'integrated': 3734.0, 'lemmas': 5768.0, 'lits_learnt': 64556.0, 'lemmas_binary': 448.0, 'lemmas_ternary': 152.0, 'cpu_time': 1.28125, 'integrated_imps': 1914.0, 'integrated_jumps': 911.0, 'guiding_paths_lits': 43280.0, 'guiding_paths': 209.0, 'splits': 0.0, 'lemmas_conflict': 969.0, 'lemmas_loop': 1800.0, 'lemmas_other': 2999.0, 'lits_conflict': 10485.0, 'lits_loop': 14650.0, 'lits_other': 39421.0, 'jumps': {'jumps': 1007.0, 'jumps_bounded': 288.0, 'levels': 20906.0, 'levels_bounded': 19038.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 28, 19: 30}

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 20 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 3 ( 75.00% solved)

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(20, 30)', truth=True, inc_range=None)

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 20, step = 30]:
sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 20)

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 30:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [31]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(0)]), ('plan_module', [Number(31), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.117417s.

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 31: original = External(symbol='current_last_sgoals(20, 30)', truth=True, inc_range=None), conversion = current_last_sgoals(20,30).

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054140s with result Satisfiable.

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [31]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1715572000000023, Incremental time limit = None
Running cumulative time = 4.817057399999998, Cumulative time limit = 3600
Used memory = (RSS = 287.167969Mb, VMS = 288.453125Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 21
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.753150s, Solving = 1.063908s, Total = 4.817057s, Memory = (RSS = 304.597656Mb, VMS = 297.562500Mb)), Calls = 31
Final Model :: Total atoms = 19962, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=31, start_step=30, end_step=31, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.7531495, solving_time=1.0639078999999976, total_time=4.817057399999998, memory=Memory(rss=304.59765625, vms=297.5625), step_range=range(0, 32), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11741670000000326, solving_time=0.05414049999999904, total_time=0.1715572000000023, memory=Memory(rss=287.16796875, vms=288.453125), step_range=range(31, 32), clingo_stats={'problem': {'lp': {'atoms': 104640.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 719992.0, 'bodies_tr': 719992.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6322.0, 'count_bodies_tr': 6322.0, 'sccs': 621.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11198.0, 'rules': 1395940.0, 'rules_normal': 1389144.0, 'rules_choice': 6393.0, 'rules_minimize': 31.0, 'rules_acyc': 0.0, 'rules_heuristic': 372.0, 'rules_tr': 1395727.0, 'rules_tr_normal': 1389144.0, 'rules_tr_choice': 6393.0, 'rules_tr_minimize': 31.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 159.0, 'eqs': 257790.0, 'eqs_atom': 49462.0, 'eqs_body': 11401.0, 'eqs_other': 196927.0}, 'lpStep': {'atoms': 2933.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23213.0, 'bodies_tr': 23213.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 344.0, 'rules': 45927.0, 'rules_normal': 45719.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 45921.0, 'rules_tr_normal': 45719.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 9567.0, 'eqs_atom': 635.0, 'eqs_body': 241.0, 'eqs_other': 8691.0}, 'generator': {'vars': 41711.0, 'vars_eliminated': 0.0, 'vars_frozen': 25753.0, 'constraints': 948.0, 'constraints_binary': 61453.0, 'constraints_ternary': 2180.0, 'acyc_edges': 0.0, 'complexity': 166623.0}}, 'solving': {'solvers': {'choices': 1344.0, 'conflicts': 32.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 691.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 50.0, 'distributed_sum_lbd': 68.0, 'integrated': 0.0, 'lemmas': 80.0, 'lits_learnt': 234.0, 'lemmas_binary': 9.0, 'lemmas_ternary': 9.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 3493.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 32.0, 'lemmas_loop': 48.0, 'lemmas_other': 0.0, 'lits_conflict': 32.0, 'lits_loop': 202.0, 'lits_other': 0.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 0.0, 'levels': 32.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 31.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.17553138732910156, 'cpu': 0.1875, 'solve': 0.026929855346679688, 'unsat': 0.0, 'sat': 0.005985260009765625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.126609802246094, 'cpu': 5.9375, 'solve': 0.5251007080078125, 'unsat': 0.03191947937011719, 'sat': 0.09867286682128906}, 'models': {'enumerated': 21.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 18043.0, 'conflicts': 1085.0, 'conflicts_analyzed': 1039.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 608.0, 'models': 21.0, 'models_level': 7107.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1072.0, 'distributed_sum_lbd': 1856.0, 'integrated': 3734.0, 'lemmas': 5848.0, 'lits_learnt': 64790.0, 'lemmas_binary': 457.0, 'lemmas_ternary': 161.0, 'cpu_time': 1.3125, 'integrated_imps': 1914.0, 'integrated_jumps': 911.0, 'guiding_paths_lits': 46773.0, 'guiding_paths': 216.0, 'splits': 0.0, 'lemmas_conflict': 1001.0, 'lemmas_loop': 1848.0, 'lemmas_other': 2999.0, 'lits_conflict': 10517.0, 'lits_loop': 14852.0, 'lits_other': 39421.0, 'jumps': {'jumps': 1039.0, 'jumps_bounded': 288.0, 'levels': 20938.0, 'levels_bounded': 19038.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 28, 19: 30, 20: 31}

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 21 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 4 (100.00% solved)

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(21, 31)', truth=True, inc_range=None)

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 21, step = 31]:
sub_goal(2, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 21)

[13-11-2021_23-07-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 31:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [32]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(32), Number(0)]), ('plan_module', [Number(32), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.137989s.

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 32: original = External(symbol='current_last_sgoals(21, 31)', truth=True, inc_range=None), conversion = current_last_sgoals(21,31).

[13-11-2021_23-07-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.067757s with result Satisfiable.

[13-11-2021_23-07-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [32]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2057462000000001, Incremental time limit = None
Running cumulative time = 5.022803599999998, Cumulative time limit = 3600
Used memory = (RSS = 292.867188Mb, VMS = 293.437500Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 22
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.891139s, Solving = 1.131665s, Total = 5.022804s, Memory = (RSS = 304.597656Mb, VMS = 297.562500Mb)), Calls = 32
Final Model :: Total atoms = 20354, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=32, start_step=31, end_step=32, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.891138599999999, solving_time=1.131664999999999, total_time=5.022803599999998, memory=Memory(rss=304.59765625, vms=297.5625), step_range=range(0, 33), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13798909999999864, solving_time=0.06775710000000146, total_time=0.2057462000000001, memory=Memory(rss=292.8671875, vms=293.4375), step_range=range(32, 33), clingo_stats={'problem': {'lp': {'atoms': 107807.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 743889.0, 'bodies_tr': 743889.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6524.0, 'count_bodies_tr': 6524.0, 'sccs': 646.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11640.0, 'rules': 1442920.0, 'rules_normal': 1435916.0, 'rules_choice': 6588.0, 'rules_minimize': 32.0, 'rules_acyc': 0.0, 'rules_heuristic': 384.0, 'rules_tr': 1442705.0, 'rules_tr_normal': 1435916.0, 'rules_tr_choice': 6588.0, 'rules_tr_minimize': 32.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 169.0, 'eqs': 268742.0, 'eqs_atom': 50246.0, 'eqs_body': 11596.0, 'eqs_other': 206900.0}, 'lpStep': {'atoms': 3167.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23897.0, 'bodies_tr': 23897.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 442.0, 'rules': 46980.0, 'rules_normal': 46772.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 46978.0, 'rules_tr_normal': 46772.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 10952.0, 'eqs_atom': 784.0, 'eqs_body': 195.0, 'eqs_other': 9973.0}, 'generator': {'vars': 43500.0, 'vars_eliminated': 0.0, 'vars_frozen': 26821.0, 'constraints': 1314.0, 'constraints_binary': 76964.0, 'constraints_ternary': 3624.0, 'acyc_edges': 0.0, 'complexity': 166623.0}}, 'solving': {'solvers': {'choices': 1386.0, 'conflicts': 22.0, 'conflicts_analyzed': 22.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 720.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 29.0, 'distributed_sum_lbd': 36.0, 'integrated': 0.0, 'lemmas': 129.0, 'lits_learnt': 753.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.0625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 3654.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 22.0, 'lemmas_loop': 107.0, 'lemmas_other': 0.0, 'lits_conflict': 22.0, 'lits_loop': 731.0, 'lits_other': 0.0, 'jumps': {'jumps': 22.0, 'jumps_bounded': 0.0, 'levels': 22.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 32.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.21014976501464844, 'cpu': 0.234375, 'solve': 0.0388946533203125, 'unsat': 0.0, 'sat': 0.0039882659912109375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.336759567260742, 'cpu': 6.171875, 'solve': 0.563995361328125, 'unsat': 0.03191947937011719, 'sat': 0.1026611328125}, 'models': {'enumerated': 22.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 19429.0, 'conflicts': 1107.0, 'conflicts_analyzed': 1061.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 608.0, 'models': 22.0, 'models_level': 7827.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1101.0, 'distributed_sum_lbd': 1892.0, 'integrated': 3734.0, 'lemmas': 5977.0, 'lits_learnt': 65543.0, 'lemmas_binary': 463.0, 'lemmas_ternary': 162.0, 'cpu_time': 1.375, 'integrated_imps': 1914.0, 'integrated_jumps': 911.0, 'guiding_paths_lits': 50427.0, 'guiding_paths': 223.0, 'splits': 0.0, 'lemmas_conflict': 1023.0, 'lemmas_loop': 1955.0, 'lemmas_other': 2999.0, 'lits_conflict': 10539.0, 'lits_loop': 15583.0, 'lits_other': 39421.0, 'jumps': {'jumps': 1061.0, 'jumps_bounded': 288.0, 'levels': 20960.0, 'levels_bounded': 19038.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 28, 19: 30, 20: 31, 21: 32}

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 22 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 5 (125.00% solved)

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 21 was achieved successfully.

[13-11-2021_23-07-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-07-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.136291s, Solving = 0.013925s, Total = 0.150217s, Memory = (RSS = 203.917969Mb, VMS = 193.789062Mb)
2 : Statistics :: Grounding = 0.108406s, Solving = 0.010814s, Total = 0.119219s, Memory = (RSS = 206.039062Mb, VMS = 195.734375Mb)
3 : Statistics :: Grounding = 0.093286s, Solving = 0.007222s, Total = 0.100508s, Memory = (RSS = 207.398438Mb, VMS = 197.187500Mb)
4 : Statistics :: Grounding = 0.112117s, Solving = 0.016614s, Total = 0.128731s, Memory = (RSS = 209.386719Mb, VMS = 199.074219Mb)
5 : Statistics :: Grounding = 0.115869s, Solving = 0.013917s, Total = 0.129785s, Memory = (RSS = 211.808594Mb, VMS = 201.949219Mb)
6 : Statistics :: Grounding = 0.099495s, Solving = 0.009546s, Total = 0.109041s, Memory = (RSS = 213.589844Mb, VMS = 203.636719Mb)
7 : Statistics :: Grounding = 0.107534s, Solving = 0.011328s, Total = 0.118862s, Memory = (RSS = 214.894531Mb, VMS = 204.972656Mb)
8 : Statistics :: Grounding = 0.110697s, Solving = 0.032135s, Total = 0.142832s, Memory = (RSS = 219.871094Mb, VMS = 210.261719Mb)
9 : Statistics :: Grounding = 0.163249s, Solving = 0.035454s, Total = 0.198703s, Memory = (RSS = 226.449219Mb, VMS = 217.539062Mb)
10 : Statistics :: Grounding = 0.112865s, Solving = 0.018417s, Total = 0.131282s, Memory = (RSS = 231.164062Mb, VMS = 221.671875Mb)
11 : Statistics :: Grounding = 0.117987s, Solving = 0.041655s, Total = 0.159642s, Memory = (RSS = 238.906250Mb, VMS = 230.855469Mb)
12 : Statistics :: Grounding = 0.118920s, Solving = 0.077084s, Total = 0.196004s, Memory = (RSS = 244.777344Mb, VMS = 236.523438Mb)
13 : Statistics :: Grounding = 0.117208s, Solving = 0.032258s, Total = 0.149466s, Memory = (RSS = 250.976562Mb, VMS = 241.859375Mb)
14 : Statistics :: Grounding = 0.153216s, Solving = 0.029288s, Total = 0.182503s, Memory = (RSS = 264.652344Mb, VMS = 257.855469Mb)
15 : Statistics :: Grounding = 0.096785s, Solving = 0.027252s, Total = 0.124037s, Memory = (RSS = 265.722656Mb, VMS = 258.656250Mb)
16 : Statistics :: Grounding = 0.105139s, Solving = 0.014130s, Total = 0.119269s, Memory = (RSS = 266.039062Mb, VMS = 258.703125Mb)
17 : Statistics :: Grounding = 0.102920s, Solving = 0.018884s, Total = 0.121804s, Memory = (RSS = 266.656250Mb, VMS = 258.789062Mb)
18 : Statistics :: Grounding = 0.117919s, Solving = 0.036863s, Total = 0.154783s, Memory = (RSS = 269.281250Mb, VMS = 261.621094Mb)
19 : Statistics :: Grounding = 0.138325s, Solving = 0.029856s, Total = 0.168182s, Memory = (RSS = 271.710938Mb, VMS = 263.757812Mb)
20 : Statistics :: Grounding = 0.118657s, Solving = 0.031890s, Total = 0.150547s, Memory = (RSS = 274.394531Mb, VMS = 266.324219Mb)
21 : Statistics :: Grounding = 0.125934s, Solving = 0.023321s, Total = 0.149255s, Memory = (RSS = 276.269531Mb, VMS = 267.906250Mb)
22 : Statistics :: Grounding = 0.114934s, Solving = 0.043443s, Total = 0.158377s, Memory = (RSS = 279.074219Mb, VMS = 270.097656Mb)
23 : Statistics :: Grounding = 0.132278s, Solving = 0.115496s, Total = 0.247774s, Memory = (RSS = 287.027344Mb, VMS = 283.910156Mb)
24 : Statistics :: Grounding = 0.123553s, Solving = 0.030220s, Total = 0.153772s, Memory = (RSS = 288.773438Mb, VMS = 284.984375Mb)
25 : Statistics :: Grounding = 0.137916s, Solving = 0.051373s, Total = 0.189289s, Memory = (RSS = 294.234375Mb, VMS = 289.839844Mb)
26 : Statistics :: Grounding = 0.135744s, Solving = 0.042840s, Total = 0.178584s, Memory = (RSS = 298.332031Mb, VMS = 292.714844Mb)
27 : Statistics :: Grounding = 0.132180s, Solving = 0.054418s, Total = 0.186598s, Memory = (RSS = 304.597656Mb, VMS = 297.562500Mb)
28 : Statistics :: Grounding = 0.151848s, Solving = 0.054254s, Total = 0.206102s, Memory = (RSS = 277.757812Mb, VMS = 269.964844Mb)
29 : Statistics :: Grounding = 0.116480s, Solving = 0.021858s, Total = 0.138339s, Memory = (RSS = 278.953125Mb, VMS = 271.054688Mb)
30 : Statistics :: Grounding = 0.117981s, Solving = 0.064010s, Total = 0.181991s, Memory = (RSS = 281.066406Mb, VMS = 272.929688Mb)
31 : Statistics :: Grounding = 0.117417s, Solving = 0.054140s, Total = 0.171557s, Memory = (RSS = 287.167969Mb, VMS = 288.453125Mb)
32 : Statistics :: Grounding = 0.137989s, Solving = 0.067757s, Total = 0.205746s, Memory = (RSS = 292.867188Mb, VMS = 293.437500Mb)

[13-11-2021_23-07-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.022804s due to: External generator exit.

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[13-11-2021_23-07-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 4, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 9, 15: 9, 16: 10, 17: 10, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15, 26: 16, 27: 17}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 7, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 15, 10: 18, 11: 20, 12: 22, 13: 23, 14: 24, 15: 25, 16: 26, 17: 27}
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 5, 12: 5, 13: 5, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 12, 21: 13, 22: 14, 23: 15, 24: 16, 25: 17, 26: 18}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 10, 5: 13, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 19, 12: 20, 13: 21, 14: 22, 15: 23, 16: 24, 17: 25, 18: 26}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 4, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 9, 15: 9, 16: 10, 17: 10, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15, 26: 16, 27: 17, 28: 18, 29: 19, 30: 19, 31: 20, 32: 21}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 7, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 15, 10: 18, 11: 20, 12: 22, 13: 23, 14: 24, 15: 25, 16: 26, 17: 27, 18: 28, 19: 30, 20: 31, 21: 32}
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 5, 12: 5, 13: 5, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 12, 21: 13, 22: 14, 23: 15, 24: 16, 25: 17, 26: 18}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 10, 5: 13, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 19, 12: 20, 13: 21, 14: 22, 15: 23, 16: 24, 17: 25, 18: 26}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 21, Last requested goal index = 21 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.891139s, Solving = 1.131665s, Total = 5.022804s, Memory = (RSS = 304.597656Mb, VMS = 297.562500Mb)), Calls = 32
Model :: Total atoms = 20354, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 32 :: Actions = 32                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 2] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 5:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 8:
    Current Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 9:
    Current Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 10:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 12:
    Current Sub-goals:
        [Index = 7] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 7] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 14:
    Current Sub-goals:
        [Index = 9] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 15:
    Current Sub-goals:
        [Index = 9] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 9] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 16:
    Current Sub-goals:
        [Index = 10] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 17:
    Current Sub-goals:
        [Index = 10] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 10] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 22:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 24:
    Current Sub-goals:
        [Index = 14] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 14] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 25:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 26:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 27:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 28:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 29:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 30:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 31:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 32:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,4),(block,5))

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Online planning increment 3 finished.

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 2 : Total constraining sgoals = 18 : Achieved sgoals = 18 : Unachieved sgoals = 0
Level = 1 : Solved problems = 3 : Total constraining sgoals = 26 : Achieved sgoals = 21 : Unachieved sgoals = 5

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Current valid planning level range: [1-1]

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Chosen level range for planning increment 4 by method ground-first: [1-1]

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 4:
Divided plan : Level =  2 (par-ref), Length =   9, Actions =   9 (Com = 1.00), Sgs = 9, Time =   3.169s (Gro =   2.295s, Sea =   0.874s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 21, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [22-26]

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [22-26], problem number = 4, increment number = 4

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 22)
	('last_sgoals', 26)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 22
last_sgoals = 26
start_step = 32
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 36

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency disabled : Problem type = partial conformance refinement (sequential) with sgoals range [22-26] : Minimum search length bound = disabled with value = 36

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = False, chosen = False

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[13-11-2021_23-07-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 24})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 25})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 26})

[13-11-2021_23-07-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[13-11-2021_23-07-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 22).
sub_goal(2, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 23).
sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 24).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 25).
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 26).

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[13-11-2021_23-07-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-07-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000162C833C270>

[13-11-2021_23-07-27] DEBUG :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[13-11-2021_23-07-27] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000162C833C270> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,0)), 3)).
fix_action(occurs(1, talos, move((store_room,1)), 4)).
fix_action(occurs(1, talos, move((store_room,0)), 5)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 6)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 7)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,6))), 8)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,6)), 9)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,5))), 10)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,5)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 12)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 13)).
fix_action(occurs(1, talos, move((store_room,1)), 14)).
fix_action(occurs(1, talos, move((hallway,0)), 15)).
fix_action(occurs(1, talos, move((hallway,1)), 16)).
fix_action(occurs(1, talos, move((hallway,2)), 17)).
fix_action(occurs(1, talos, move((puzzle_room,0)), 18)).
fix_action(occurs(1, talos, move((puzzle_room,1)), 19)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,6),puzzle_room_table_right), 21)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 22)).
fix_action(occurs(1, talos, release(manipulator_end_1,(block,6)), 23)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,3))), 24)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,3)), 25)).
fix_action(occurs(1, talos, put(manipulator_end_2,(block,5),(block,6)), 26)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,3),puzzle_room_table_left), 27)).
fix_action(occurs(1, talos, release(manipulator_end_1,(block,3)), 28)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,4))), 29)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,4)), 30)).
fix_action(occurs(1, talos, release(manipulator_end_2,(block,5)), 31)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,4),(block,5)), 32)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[13-11-2021_23-07-27] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000162C833C270> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), (block,2), 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), (block,2), 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), (block,2), 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), (block,2), 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), (block,2), 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), (block,2), 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,0), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), (block,2), 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), (block,2), 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (store_room,1), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), (block,2), 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), store_room, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), (block,2), 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (store_room,0), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), (block,2), 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), store_room, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), (block,2), 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (store_room,0), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), (block,2), 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), store_room, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), (block,2), 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (store_room,0), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), (block,2), 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), store_room, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), (block,2), 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (store_room,0), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), (block,2), 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), store_room, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), (block,2), 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (store_room,0), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), (block,2), 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), store_room, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), (block,2), 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (store_room,0), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), (block,2), 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), store_room, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), (block,2), 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (store_room,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), (block,2), 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), store_room, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), (block,2), 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (store_room,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), (block,2), 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), store_room, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), (block,2), 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (store_room,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), (block,2), 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), store_room, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), (block,2), 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(1, complete(blue), false, 14)).
fix_fluent(holds(1, complete(red), false, 14)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 14)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 14)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 14)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 14)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 14)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(1, configuration(store_room_door), closed, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 14)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 14)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 14)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 14)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,5)), (store_room,1), 14)).
fix_fluent(holds(1, in((block,6)), (store_room,1), 14)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 14)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 14)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 14)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 14)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 14)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(talos), (store_room,1), 14)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 14)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 14)).
fix_fluent(holds(1, on((block,3)), (block,1), 14)).
fix_fluent(holds(1, on((block,4)), (block,2), 14)).
fix_fluent(holds(1, on((block,5)), nothing, 14)).
fix_fluent(holds(1, on((block,6)), nothing, 14)).
fix_fluent(holds(1, tower_base((block,1)), true, 14)).
fix_fluent(holds(1, tower_base((block,2)), true, 14)).
fix_fluent(holds(1, tower_base((block,3)), false, 14)).
fix_fluent(holds(1, tower_base((block,4)), false, 14)).
fix_fluent(holds(1, tower_base((block,5)), false, 14)).
fix_fluent(holds(1, tower_base((block,6)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), closed, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,5)), store_room, 14)).
fix_fluent(holds(2, in((block,6)), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), store_room, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), (block,2), 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), nothing, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(1, complete(blue), false, 15)).
fix_fluent(holds(1, complete(red), false, 15)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 15)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 15)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 15)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 15)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 15)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(1, configuration(store_room_door), closed, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 15)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 15)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 15)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 15)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,5)), (hallway,0), 15)).
fix_fluent(holds(1, in((block,6)), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 15)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(talos), (hallway,0), 15)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 15)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 15)).
fix_fluent(holds(1, on((block,3)), (block,1), 15)).
fix_fluent(holds(1, on((block,4)), (block,2), 15)).
fix_fluent(holds(1, on((block,5)), nothing, 15)).
fix_fluent(holds(1, on((block,6)), nothing, 15)).
fix_fluent(holds(1, tower_base((block,1)), true, 15)).
fix_fluent(holds(1, tower_base((block,2)), true, 15)).
fix_fluent(holds(1, tower_base((block,3)), false, 15)).
fix_fluent(holds(1, tower_base((block,4)), false, 15)).
fix_fluent(holds(1, tower_base((block,5)), false, 15)).
fix_fluent(holds(1, tower_base((block,6)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), closed, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,5)), hallway, 15)).
fix_fluent(holds(2, in((block,6)), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), hallway, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), (block,2), 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), nothing, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(1, complete(blue), false, 16)).
fix_fluent(holds(1, complete(red), false, 16)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 16)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 16)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 16)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 16)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 16)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(1, configuration(store_room_door), closed, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 16)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 16)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 16)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 16)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,5)), (hallway,1), 16)).
fix_fluent(holds(1, in((block,6)), (hallway,1), 16)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 16)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 16)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 16)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 16)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 16)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(talos), (hallway,1), 16)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 16)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 16)).
fix_fluent(holds(1, on((block,3)), (block,1), 16)).
fix_fluent(holds(1, on((block,4)), (block,2), 16)).
fix_fluent(holds(1, on((block,5)), nothing, 16)).
fix_fluent(holds(1, on((block,6)), nothing, 16)).
fix_fluent(holds(1, tower_base((block,1)), true, 16)).
fix_fluent(holds(1, tower_base((block,2)), true, 16)).
fix_fluent(holds(1, tower_base((block,3)), false, 16)).
fix_fluent(holds(1, tower_base((block,4)), false, 16)).
fix_fluent(holds(1, tower_base((block,5)), false, 16)).
fix_fluent(holds(1, tower_base((block,6)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), closed, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,5)), hallway, 16)).
fix_fluent(holds(2, in((block,6)), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), hallway, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), (block,2), 16)).
fix_fluent(holds(2, on((block,5)), nothing, 16)).
fix_fluent(holds(2, on((block,6)), nothing, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(1, complete(blue), false, 17)).
fix_fluent(holds(1, complete(red), false, 17)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 17)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 17)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 17)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 17)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 17)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(1, configuration(store_room_door), closed, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 17)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 17)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 17)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 17)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,5)), (hallway,2), 17)).
fix_fluent(holds(1, in((block,6)), (hallway,2), 17)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 17)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 17)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 17)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 17)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 17)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 17)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(talos), (hallway,2), 17)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 17)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 17)).
fix_fluent(holds(1, on((block,3)), (block,1), 17)).
fix_fluent(holds(1, on((block,4)), (block,2), 17)).
fix_fluent(holds(1, on((block,5)), nothing, 17)).
fix_fluent(holds(1, on((block,6)), nothing, 17)).
fix_fluent(holds(1, tower_base((block,1)), true, 17)).
fix_fluent(holds(1, tower_base((block,2)), true, 17)).
fix_fluent(holds(1, tower_base((block,3)), false, 17)).
fix_fluent(holds(1, tower_base((block,4)), false, 17)).
fix_fluent(holds(1, tower_base((block,5)), false, 17)).
fix_fluent(holds(1, tower_base((block,6)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), closed, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,5)), hallway, 17)).
fix_fluent(holds(2, in((block,6)), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), hallway, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), (block,1), 17)).
fix_fluent(holds(2, on((block,4)), (block,2), 17)).
fix_fluent(holds(2, on((block,5)), nothing, 17)).
fix_fluent(holds(2, on((block,6)), nothing, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), false, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(1, complete(blue), false, 18)).
fix_fluent(holds(1, complete(red), false, 18)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 18)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 18)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 18)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 18)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 18)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(1, configuration(store_room_door), closed, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 18)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 18)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 18)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 18)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,0), 18)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,0), 18)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,0), 18)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,0), 18)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,0), 18)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,0), 18)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(talos), (puzzle_room,0), 18)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 18)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 18)).
fix_fluent(holds(1, on((block,3)), (block,1), 18)).
fix_fluent(holds(1, on((block,4)), (block,2), 18)).
fix_fluent(holds(1, on((block,5)), nothing, 18)).
fix_fluent(holds(1, on((block,6)), nothing, 18)).
fix_fluent(holds(1, tower_base((block,1)), true, 18)).
fix_fluent(holds(1, tower_base((block,2)), true, 18)).
fix_fluent(holds(1, tower_base((block,3)), false, 18)).
fix_fluent(holds(1, tower_base((block,4)), false, 18)).
fix_fluent(holds(1, tower_base((block,5)), false, 18)).
fix_fluent(holds(1, tower_base((block,6)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), closed, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), puzzle_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), (block,1), 18)).
fix_fluent(holds(2, on((block,4)), (block,2), 18)).
fix_fluent(holds(2, on((block,5)), nothing, 18)).
fix_fluent(holds(2, on((block,6)), nothing, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), false, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(1, complete(blue), false, 19)).
fix_fluent(holds(1, complete(red), false, 19)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 19)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 19)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 19)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 19)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 19)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(1, configuration(store_room_door), closed, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 19)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 19)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 19)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 19)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 19)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 19)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 19)).
fix_fluent(holds(1, on((block,3)), (block,1), 19)).
fix_fluent(holds(1, on((block,4)), (block,2), 19)).
fix_fluent(holds(1, on((block,5)), nothing, 19)).
fix_fluent(holds(1, on((block,6)), nothing, 19)).
fix_fluent(holds(1, tower_base((block,1)), true, 19)).
fix_fluent(holds(1, tower_base((block,2)), true, 19)).
fix_fluent(holds(1, tower_base((block,3)), false, 19)).
fix_fluent(holds(1, tower_base((block,4)), false, 19)).
fix_fluent(holds(1, tower_base((block,5)), false, 19)).
fix_fluent(holds(1, tower_base((block,6)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(2, complete(blue), false, 19)).
fix_fluent(holds(2, complete(red), false, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 19)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 19)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(2, configuration(store_room_door), closed, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 19)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 19)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 19)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 19)).
fix_fluent(holds(2, in(talos), puzzle_room, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,3)), (block,1), 19)).
fix_fluent(holds(2, on((block,4)), (block,2), 19)).
fix_fluent(holds(2, on((block,5)), nothing, 19)).
fix_fluent(holds(2, on((block,6)), nothing, 19)).
fix_fluent(holds(2, tower_base((block,1)), true, 19)).
fix_fluent(holds(2, tower_base((block,2)), true, 19)).
fix_fluent(holds(2, tower_base((block,3)), false, 19)).
fix_fluent(holds(2, tower_base((block,4)), false, 19)).
fix_fluent(holds(2, tower_base((block,5)), false, 19)).
fix_fluent(holds(2, tower_base((block,6)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(1, complete(blue), false, 20)).
fix_fluent(holds(1, complete(red), false, 20)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 20)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 20)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 20)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 20)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 20)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(1, configuration(store_room_door), closed, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 20)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 20)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 20)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 20)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 20)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 20)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 20)).
fix_fluent(holds(1, on((block,3)), (block,1), 20)).
fix_fluent(holds(1, on((block,4)), (block,2), 20)).
fix_fluent(holds(1, on((block,5)), nothing, 20)).
fix_fluent(holds(1, on((block,6)), nothing, 20)).
fix_fluent(holds(1, tower_base((block,1)), true, 20)).
fix_fluent(holds(1, tower_base((block,2)), true, 20)).
fix_fluent(holds(1, tower_base((block,3)), false, 20)).
fix_fluent(holds(1, tower_base((block,4)), false, 20)).
fix_fluent(holds(1, tower_base((block,5)), false, 20)).
fix_fluent(holds(1, tower_base((block,6)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(2, complete(blue), false, 20)).
fix_fluent(holds(2, complete(red), false, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 20)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 20)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(2, configuration(store_room_door), closed, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 20)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 20)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 20)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 20)).
fix_fluent(holds(2, in(talos), puzzle_room, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,3)), (block,1), 20)).
fix_fluent(holds(2, on((block,4)), (block,2), 20)).
fix_fluent(holds(2, on((block,5)), nothing, 20)).
fix_fluent(holds(2, on((block,6)), nothing, 20)).
fix_fluent(holds(2, tower_base((block,1)), true, 20)).
fix_fluent(holds(2, tower_base((block,2)), true, 20)).
fix_fluent(holds(2, tower_base((block,3)), false, 20)).
fix_fluent(holds(2, tower_base((block,4)), false, 20)).
fix_fluent(holds(2, tower_base((block,5)), false, 20)).
fix_fluent(holds(2, tower_base((block,6)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(1, complete(blue), false, 21)).
fix_fluent(holds(1, complete(red), false, 21)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 21)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 21)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 21)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 21)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 21)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(1, configuration(store_room_door), closed, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 21)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 21)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 21)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 21)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 21)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 21)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 21)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 21)).
fix_fluent(holds(1, on((block,3)), (block,1), 21)).
fix_fluent(holds(1, on((block,4)), (block,2), 21)).
fix_fluent(holds(1, on((block,5)), nothing, 21)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 21)).
fix_fluent(holds(1, tower_base((block,1)), true, 21)).
fix_fluent(holds(1, tower_base((block,2)), true, 21)).
fix_fluent(holds(1, tower_base((block,3)), false, 21)).
fix_fluent(holds(1, tower_base((block,4)), false, 21)).
fix_fluent(holds(1, tower_base((block,5)), false, 21)).
fix_fluent(holds(1, tower_base((block,6)), true, 21)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 21)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(2, complete(blue), false, 21)).
fix_fluent(holds(2, complete(red), false, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 21)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 21)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(2, configuration(store_room_door), closed, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 21)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 21)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 21)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 21)).
fix_fluent(holds(2, in(talos), puzzle_room, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 21)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,3)), (block,1), 21)).
fix_fluent(holds(2, on((block,4)), (block,2), 21)).
fix_fluent(holds(2, on((block,5)), nothing, 21)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 21)).
fix_fluent(holds(2, tower_base((block,1)), true, 21)).
fix_fluent(holds(2, tower_base((block,2)), true, 21)).
fix_fluent(holds(2, tower_base((block,3)), false, 21)).
fix_fluent(holds(2, tower_base((block,4)), false, 21)).
fix_fluent(holds(2, tower_base((block,5)), false, 21)).
fix_fluent(holds(2, tower_base((block,6)), true, 21)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 21)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(1, complete(blue), false, 22)).
fix_fluent(holds(1, complete(red), false, 22)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 22)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 22)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 22)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 22)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 22)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(1, configuration(store_room_door), closed, 22)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 22)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 22)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 22)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 22)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 22)).
fix_fluent(holds(1, on((block,3)), (block,1), 22)).
fix_fluent(holds(1, on((block,4)), (block,2), 22)).
fix_fluent(holds(1, on((block,5)), nothing, 22)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 22)).
fix_fluent(holds(1, tower_base((block,1)), true, 22)).
fix_fluent(holds(1, tower_base((block,2)), true, 22)).
fix_fluent(holds(1, tower_base((block,3)), false, 22)).
fix_fluent(holds(1, tower_base((block,4)), false, 22)).
fix_fluent(holds(1, tower_base((block,5)), false, 22)).
fix_fluent(holds(1, tower_base((block,6)), true, 22)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 22)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(2, complete(blue), false, 22)).
fix_fluent(holds(2, complete(red), false, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 22)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 22)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(2, configuration(store_room_door), closed, 22)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 22)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 22)).
fix_fluent(holds(2, in(talos), puzzle_room, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 22)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,3)), (block,1), 22)).
fix_fluent(holds(2, on((block,4)), (block,2), 22)).
fix_fluent(holds(2, on((block,5)), nothing, 22)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 22)).
fix_fluent(holds(2, tower_base((block,1)), true, 22)).
fix_fluent(holds(2, tower_base((block,2)), true, 22)).
fix_fluent(holds(2, tower_base((block,3)), false, 22)).
fix_fluent(holds(2, tower_base((block,4)), false, 22)).
fix_fluent(holds(2, tower_base((block,5)), false, 22)).
fix_fluent(holds(2, tower_base((block,6)), true, 22)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 22)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(1, complete(blue), false, 23)).
fix_fluent(holds(1, complete(red), false, 23)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 23)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 23)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 23)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 23)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 23)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(1, configuration(store_room_door), closed, 23)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 23)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 23)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 23)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 23)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 23)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 23)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 23)).
fix_fluent(holds(1, on((block,3)), (block,1), 23)).
fix_fluent(holds(1, on((block,4)), (block,2), 23)).
fix_fluent(holds(1, on((block,5)), nothing, 23)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 23)).
fix_fluent(holds(1, tower_base((block,1)), true, 23)).
fix_fluent(holds(1, tower_base((block,2)), true, 23)).
fix_fluent(holds(1, tower_base((block,3)), false, 23)).
fix_fluent(holds(1, tower_base((block,4)), false, 23)).
fix_fluent(holds(1, tower_base((block,5)), false, 23)).
fix_fluent(holds(1, tower_base((block,6)), true, 23)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 23)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(2, complete(blue), false, 23)).
fix_fluent(holds(2, complete(red), false, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 23)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 23)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(2, configuration(store_room_door), closed, 23)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 23)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 23)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 23)).
fix_fluent(holds(2, in(talos), puzzle_room, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 23)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,3)), (block,1), 23)).
fix_fluent(holds(2, on((block,4)), (block,2), 23)).
fix_fluent(holds(2, on((block,5)), nothing, 23)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 23)).
fix_fluent(holds(2, tower_base((block,1)), true, 23)).
fix_fluent(holds(2, tower_base((block,2)), true, 23)).
fix_fluent(holds(2, tower_base((block,3)), false, 23)).
fix_fluent(holds(2, tower_base((block,4)), false, 23)).
fix_fluent(holds(2, tower_base((block,5)), false, 23)).
fix_fluent(holds(2, tower_base((block,6)), true, 23)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 23)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(1, complete(blue), false, 24)).
fix_fluent(holds(1, complete(red), false, 24)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 24)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 24)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 24)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 24)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 24)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(1, configuration(store_room_door), closed, 24)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 24)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 24)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 24)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 24)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 24)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 24)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 24)).
fix_fluent(holds(1, on((block,3)), (block,1), 24)).
fix_fluent(holds(1, on((block,4)), (block,2), 24)).
fix_fluent(holds(1, on((block,5)), nothing, 24)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 24)).
fix_fluent(holds(1, tower_base((block,1)), true, 24)).
fix_fluent(holds(1, tower_base((block,2)), true, 24)).
fix_fluent(holds(1, tower_base((block,3)), false, 24)).
fix_fluent(holds(1, tower_base((block,4)), false, 24)).
fix_fluent(holds(1, tower_base((block,5)), false, 24)).
fix_fluent(holds(1, tower_base((block,6)), true, 24)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 24)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(2, complete(blue), false, 24)).
fix_fluent(holds(2, complete(red), false, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 24)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 24)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(2, configuration(store_room_door), closed, 24)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 24)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 24)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 24)).
fix_fluent(holds(2, in(talos), puzzle_room, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 24)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,3)), (block,1), 24)).
fix_fluent(holds(2, on((block,4)), (block,2), 24)).
fix_fluent(holds(2, on((block,5)), nothing, 24)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 24)).
fix_fluent(holds(2, tower_base((block,1)), true, 24)).
fix_fluent(holds(2, tower_base((block,2)), true, 24)).
fix_fluent(holds(2, tower_base((block,3)), false, 24)).
fix_fluent(holds(2, tower_base((block,4)), false, 24)).
fix_fluent(holds(2, tower_base((block,5)), false, 24)).
fix_fluent(holds(2, tower_base((block,6)), true, 24)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 24)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(1, complete(blue), false, 25)).
fix_fluent(holds(1, complete(red), false, 25)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 25)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 25)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 25)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 25)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 25)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(1, configuration(store_room_door), closed, 25)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 25)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 25)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 25)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 25)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 25)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 25)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 25)).
fix_fluent(holds(1, on((block,3)), (block,1), 25)).
fix_fluent(holds(1, on((block,4)), (block,2), 25)).
fix_fluent(holds(1, on((block,5)), nothing, 25)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 25)).
fix_fluent(holds(1, tower_base((block,1)), true, 25)).
fix_fluent(holds(1, tower_base((block,2)), true, 25)).
fix_fluent(holds(1, tower_base((block,3)), false, 25)).
fix_fluent(holds(1, tower_base((block,4)), false, 25)).
fix_fluent(holds(1, tower_base((block,5)), false, 25)).
fix_fluent(holds(1, tower_base((block,6)), true, 25)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 25)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(2, complete(blue), false, 25)).
fix_fluent(holds(2, complete(red), false, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 25)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 25)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(2, configuration(store_room_door), closed, 25)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 25)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 25)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 25)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 25)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 25)).
fix_fluent(holds(2, in(talos), puzzle_room, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 25)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,3)), (block,1), 25)).
fix_fluent(holds(2, on((block,4)), (block,2), 25)).
fix_fluent(holds(2, on((block,5)), nothing, 25)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 25)).
fix_fluent(holds(2, tower_base((block,1)), true, 25)).
fix_fluent(holds(2, tower_base((block,2)), true, 25)).
fix_fluent(holds(2, tower_base((block,3)), false, 25)).
fix_fluent(holds(2, tower_base((block,4)), false, 25)).
fix_fluent(holds(2, tower_base((block,5)), false, 25)).
fix_fluent(holds(2, tower_base((block,6)), true, 25)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 25)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(1, complete(blue), false, 26)).
fix_fluent(holds(1, complete(red), false, 26)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 26)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 26)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 26)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 26)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 26)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(1, configuration(store_room_door), closed, 26)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 26)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 26)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 26)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 26)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 26)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 26)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 26)).
fix_fluent(holds(1, on((block,3)), (block,1), 26)).
fix_fluent(holds(1, on((block,4)), (block,2), 26)).
fix_fluent(holds(1, on((block,5)), (block,6), 26)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 26)).
fix_fluent(holds(1, tower_base((block,1)), true, 26)).
fix_fluent(holds(1, tower_base((block,2)), true, 26)).
fix_fluent(holds(1, tower_base((block,3)), false, 26)).
fix_fluent(holds(1, tower_base((block,4)), false, 26)).
fix_fluent(holds(1, tower_base((block,5)), false, 26)).
fix_fluent(holds(1, tower_base((block,6)), true, 26)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 26)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(2, complete(blue), false, 26)).
fix_fluent(holds(2, complete(red), false, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 26)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 26)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(2, configuration(store_room_door), closed, 26)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 26)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 26)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 26)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 26)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 26)).
fix_fluent(holds(2, in(talos), puzzle_room, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 26)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,3)), (block,1), 26)).
fix_fluent(holds(2, on((block,4)), (block,2), 26)).
fix_fluent(holds(2, on((block,5)), (block,6), 26)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 26)).
fix_fluent(holds(2, tower_base((block,1)), true, 26)).
fix_fluent(holds(2, tower_base((block,2)), true, 26)).
fix_fluent(holds(2, tower_base((block,3)), false, 26)).
fix_fluent(holds(2, tower_base((block,4)), false, 26)).
fix_fluent(holds(2, tower_base((block,5)), false, 26)).
fix_fluent(holds(2, tower_base((block,6)), true, 26)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 26)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(1, complete(blue), false, 27)).
fix_fluent(holds(1, complete(red), false, 27)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 27)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 27)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 27)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 27)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 27)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(1, configuration(store_room_door), closed, 27)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 27)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 27)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 27)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 27)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 27)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 27)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 27)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 27)).
fix_fluent(holds(1, on((block,4)), (block,2), 27)).
fix_fluent(holds(1, on((block,5)), (block,6), 27)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 27)).
fix_fluent(holds(1, tower_base((block,1)), true, 27)).
fix_fluent(holds(1, tower_base((block,2)), true, 27)).
fix_fluent(holds(1, tower_base((block,3)), true, 27)).
fix_fluent(holds(1, tower_base((block,4)), false, 27)).
fix_fluent(holds(1, tower_base((block,5)), false, 27)).
fix_fluent(holds(1, tower_base((block,6)), true, 27)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 27)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(2, complete(blue), false, 27)).
fix_fluent(holds(2, complete(red), false, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 27)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 27)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(2, configuration(store_room_door), closed, 27)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 27)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 27)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 27)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 27)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 27)).
fix_fluent(holds(2, in(talos), puzzle_room, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 27)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,4)), (block,2), 27)).
fix_fluent(holds(2, on((block,5)), (block,6), 27)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 27)).
fix_fluent(holds(2, tower_base((block,1)), true, 27)).
fix_fluent(holds(2, tower_base((block,2)), true, 27)).
fix_fluent(holds(2, tower_base((block,3)), true, 27)).
fix_fluent(holds(2, tower_base((block,4)), false, 27)).
fix_fluent(holds(2, tower_base((block,5)), false, 27)).
fix_fluent(holds(2, tower_base((block,6)), true, 27)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 27)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(1, complete(blue), false, 28)).
fix_fluent(holds(1, complete(red), false, 28)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 28)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 28)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 28)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 28)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 28)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(1, configuration(store_room_door), closed, 28)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 28)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 28)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 28)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 28)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 28)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 28)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 28)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 28)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 28)).
fix_fluent(holds(1, on((block,4)), (block,2), 28)).
fix_fluent(holds(1, on((block,5)), (block,6), 28)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 28)).
fix_fluent(holds(1, tower_base((block,1)), true, 28)).
fix_fluent(holds(1, tower_base((block,2)), true, 28)).
fix_fluent(holds(1, tower_base((block,3)), true, 28)).
fix_fluent(holds(1, tower_base((block,4)), false, 28)).
fix_fluent(holds(1, tower_base((block,5)), false, 28)).
fix_fluent(holds(1, tower_base((block,6)), true, 28)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 28)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(2, complete(blue), false, 28)).
fix_fluent(holds(2, complete(red), false, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 28)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 28)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(2, configuration(store_room_door), closed, 28)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 28)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 28)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 28)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 28)).
fix_fluent(holds(2, in(talos), puzzle_room, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 28)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,4)), (block,2), 28)).
fix_fluent(holds(2, on((block,5)), (block,6), 28)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 28)).
fix_fluent(holds(2, tower_base((block,1)), true, 28)).
fix_fluent(holds(2, tower_base((block,2)), true, 28)).
fix_fluent(holds(2, tower_base((block,3)), true, 28)).
fix_fluent(holds(2, tower_base((block,4)), false, 28)).
fix_fluent(holds(2, tower_base((block,5)), false, 28)).
fix_fluent(holds(2, tower_base((block,6)), true, 28)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 28)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(1, complete(blue), false, 29)).
fix_fluent(holds(1, complete(red), false, 29)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 29)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 29)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 29)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 29)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 29)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(1, configuration(store_room_door), closed, 29)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 29)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 29)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 29)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 29)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 29)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 29)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 29)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 29)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 29)).
fix_fluent(holds(1, on((block,4)), (block,2), 29)).
fix_fluent(holds(1, on((block,5)), (block,6), 29)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 29)).
fix_fluent(holds(1, tower_base((block,1)), true, 29)).
fix_fluent(holds(1, tower_base((block,2)), true, 29)).
fix_fluent(holds(1, tower_base((block,3)), true, 29)).
fix_fluent(holds(1, tower_base((block,4)), false, 29)).
fix_fluent(holds(1, tower_base((block,5)), false, 29)).
fix_fluent(holds(1, tower_base((block,6)), true, 29)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 29)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(2, complete(blue), false, 29)).
fix_fluent(holds(2, complete(red), false, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 29)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 29)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(2, configuration(store_room_door), closed, 29)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 29)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 29)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 29)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 29)).
fix_fluent(holds(2, in(talos), puzzle_room, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 29)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,4)), (block,2), 29)).
fix_fluent(holds(2, on((block,5)), (block,6), 29)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 29)).
fix_fluent(holds(2, tower_base((block,1)), true, 29)).
fix_fluent(holds(2, tower_base((block,2)), true, 29)).
fix_fluent(holds(2, tower_base((block,3)), true, 29)).
fix_fluent(holds(2, tower_base((block,4)), false, 29)).
fix_fluent(holds(2, tower_base((block,5)), false, 29)).
fix_fluent(holds(2, tower_base((block,6)), true, 29)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 29)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(1, complete(blue), false, 30)).
fix_fluent(holds(1, complete(red), false, 30)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 30)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 30)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 30)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 30)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 30)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(1, configuration(store_room_door), closed, 30)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,4), 30)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 30)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,4), 30)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 30)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 30)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 30)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 30)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 30)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 30)).
fix_fluent(holds(1, on((block,4)), (block,2), 30)).
fix_fluent(holds(1, on((block,5)), (block,6), 30)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 30)).
fix_fluent(holds(1, tower_base((block,1)), true, 30)).
fix_fluent(holds(1, tower_base((block,2)), true, 30)).
fix_fluent(holds(1, tower_base((block,3)), true, 30)).
fix_fluent(holds(1, tower_base((block,4)), false, 30)).
fix_fluent(holds(1, tower_base((block,5)), false, 30)).
fix_fluent(holds(1, tower_base((block,6)), true, 30)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 30)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(2, complete(blue), false, 30)).
fix_fluent(holds(2, complete(red), false, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 30)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 30)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(2, configuration(store_room_door), closed, 30)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,4), 30)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 30)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 30)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 30)).
fix_fluent(holds(2, in(talos), puzzle_room, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 30)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,4)), (block,2), 30)).
fix_fluent(holds(2, on((block,5)), (block,6), 30)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 30)).
fix_fluent(holds(2, tower_base((block,1)), true, 30)).
fix_fluent(holds(2, tower_base((block,2)), true, 30)).
fix_fluent(holds(2, tower_base((block,3)), true, 30)).
fix_fluent(holds(2, tower_base((block,4)), false, 30)).
fix_fluent(holds(2, tower_base((block,5)), false, 30)).
fix_fluent(holds(2, tower_base((block,6)), true, 30)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 30)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(1, complete(blue), false, 31)).
fix_fluent(holds(1, complete(red), false, 31)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 31)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 31)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 31)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 31)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 31)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(1, configuration(store_room_door), closed, 31)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,4), 31)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 31)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,4), 31)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 31)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 31)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 31)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 31)).
fix_fluent(holds(1, on((block,4)), (block,2), 31)).
fix_fluent(holds(1, on((block,5)), (block,6), 31)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, tower_base((block,1)), true, 31)).
fix_fluent(holds(1, tower_base((block,2)), true, 31)).
fix_fluent(holds(1, tower_base((block,3)), true, 31)).
fix_fluent(holds(1, tower_base((block,4)), false, 31)).
fix_fluent(holds(1, tower_base((block,5)), false, 31)).
fix_fluent(holds(1, tower_base((block,6)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(2, complete(blue), false, 31)).
fix_fluent(holds(2, complete(red), false, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 31)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 31)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(2, configuration(store_room_door), closed, 31)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,4), 31)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 31)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 31)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 31)).
fix_fluent(holds(2, in(talos), puzzle_room, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,4)), (block,2), 31)).
fix_fluent(holds(2, on((block,5)), (block,6), 31)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 31)).
fix_fluent(holds(2, tower_base((block,1)), true, 31)).
fix_fluent(holds(2, tower_base((block,2)), true, 31)).
fix_fluent(holds(2, tower_base((block,3)), true, 31)).
fix_fluent(holds(2, tower_base((block,4)), false, 31)).
fix_fluent(holds(2, tower_base((block,5)), false, 31)).
fix_fluent(holds(2, tower_base((block,6)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(1, complete(blue), true, 32)).
fix_fluent(holds(1, complete(red), false, 32)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 32)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 32)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 32)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 32)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 32)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(1, configuration(store_room_door), closed, 32)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,4), 32)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 32)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,4), 32)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 32)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 32)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), true, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 32)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 32)).
fix_fluent(holds(1, on((block,4)), (block,5), 32)).
fix_fluent(holds(1, on((block,5)), (block,6), 32)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, tower_base((block,1)), true, 32)).
fix_fluent(holds(1, tower_base((block,2)), true, 32)).
fix_fluent(holds(1, tower_base((block,3)), true, 32)).
fix_fluent(holds(1, tower_base((block,4)), false, 32)).
fix_fluent(holds(1, tower_base((block,5)), false, 32)).
fix_fluent(holds(1, tower_base((block,6)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(2, complete(blue), true, 32)).
fix_fluent(holds(2, complete(red), false, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 32)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 32)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(2, configuration(store_room_door), closed, 32)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,4), 32)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 32)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 32)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 32)).
fix_fluent(holds(2, in(talos), puzzle_room, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), true, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,4)), (block,5), 32)).
fix_fluent(holds(2, on((block,5)), (block,6), 32)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 32)).
fix_fluent(holds(2, tower_base((block,1)), true, 32)).
fix_fluent(holds(2, tower_base((block,2)), true, 32)).
fix_fluent(holds(2, tower_base((block,3)), true, 32)).
fix_fluent(holds(2, tower_base((block,4)), false, 32)).
fix_fluent(holds(2, tower_base((block,5)), false, 32)).
fix_fluent(holds(2, tower_base((block,6)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 32)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 32)
	('last_sgoals', 26)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('first_sgoals', 22)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000162C833C270>)

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(22, 33)', truth=True, inc_range=None)

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [33]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(33), Number(0)]), ('plan_module', [Number(33), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.134716s.

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 33: original = External(symbol='current_last_sgoals(22, 33)', truth=True, inc_range=None), conversion = current_last_sgoals(22,33).

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029388s with result Unsatisfiable.

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [33]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1641042000000006, Incremental time limit = None
Running cumulative time = 5.186907799999998, Cumulative time limit = 3600
Used memory = (RSS = 299.574219Mb, VMS = 298.773438Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=33, start_step=32, end_step=33, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.0258550999999985, solving_time=1.1610527, total_time=5.186907799999998, memory=Memory(rss=304.59765625, vms=298.7734375), step_range=range(0, 34), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13471649999999968, solving_time=0.029387700000000905, total_time=0.1641042000000006, memory=Memory(rss=299.57421875, vms=298.7734375), step_range=range(33, 34), clingo_stats={'problem': {'lp': {'atoms': 112038.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 767591.0, 'bodies_tr': 767591.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6726.0, 'count_bodies_tr': 6726.0, 'sccs': 664.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12084.0, 'rules': 1491196.0, 'rules_normal': 1483984.0, 'rules_choice': 6783.0, 'rules_minimize': 33.0, 'rules_acyc': 0.0, 'rules_heuristic': 396.0, 'rules_tr': 1490981.0, 'rules_tr_normal': 1483984.0, 'rules_tr_choice': 6783.0, 'rules_tr_minimize': 33.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 181.0, 'eqs': 274736.0, 'eqs_atom': 51209.0, 'eqs_body': 11879.0, 'eqs_other': 211648.0}, 'lpStep': {'atoms': 4231.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23702.0, 'bodies_tr': 23702.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 18.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 444.0, 'rules': 48276.0, 'rules_normal': 48068.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 48276.0, 'rules_tr_normal': 48068.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5994.0, 'eqs_atom': 963.0, 'eqs_body': 283.0, 'eqs_other': 4748.0}, 'generator': {'vars': 45345.0, 'vars_eliminated': 0.0, 'vars_frozen': 28013.0, 'constraints': 588.0, 'constraints_binary': 58142.0, 'constraints_ternary': 975.0, 'acyc_edges': 0.0, 'complexity': 166623.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 3300.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 33.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3070793151855469, 'cpu': 0.3125, 'solve': 0.00399017333984375, 'unsat': 0.00399017333984375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.643838882446289, 'cpu': 6.484375, 'solve': 0.5679855346679688, 'unsat': 0.03590965270996094, 'sat': 0.1026611328125}, 'models': {'enumerated': 22.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 19429.0, 'conflicts': 1107.0, 'conflicts_analyzed': 1061.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 608.0, 'models': 22.0, 'models_level': 7827.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1101.0, 'distributed_sum_lbd': 1892.0, 'integrated': 3734.0, 'lemmas': 5980.0, 'lits_learnt': 65546.0, 'lemmas_binary': 463.0, 'lemmas_ternary': 162.0, 'cpu_time': 1.375, 'integrated_imps': 1914.0, 'integrated_jumps': 911.0, 'guiding_paths_lits': 53727.0, 'guiding_paths': 229.0, 'splits': 0.0, 'lemmas_conflict': 1023.0, 'lemmas_loop': 1958.0, 'lemmas_other': 2999.0, 'lits_conflict': 10539.0, 'lits_loop': 15586.0, 'lits_other': 39421.0, 'jumps': {'jumps': 1061.0, 'jumps_bounded': 288.0, 'levels': 20960.0, 'levels_bounded': 19038.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [34]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(34), Number(0)]), ('plan_module', [Number(34), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.116752s.

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052035s with result Satisfiable.

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [34]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.16878639999999834, Incremental time limit = None
Running cumulative time = 5.355694199999997, Cumulative time limit = 3600
Used memory = (RSS = 303.664062Mb, VMS = 302.468750Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 23
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.142607s, Solving = 1.213087s, Total = 5.355694s, Memory = (RSS = 304.597656Mb, VMS = 302.468750Mb)), Calls = 34
Final Model :: Total atoms = 21930, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=34, start_step=33, end_step=34, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.142606899999998, solving_time=1.2130872999999989, total_time=5.355694199999997, memory=Memory(rss=304.59765625, vms=302.46875), step_range=range(0, 35), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1167517999999994, solving_time=0.05203459999999893, total_time=0.16878639999999834, memory=Memory(rss=303.6640625, vms=302.46875), step_range=range(34, 35), clingo_stats={'problem': {'lp': {'atoms': 113897.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 789846.0, 'bodies_tr': 789846.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6928.0, 'count_bodies_tr': 6928.0, 'sccs': 666.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12121.0, 'rules': 1536909.0, 'rules_normal': 1529489.0, 'rules_choice': 6978.0, 'rules_minimize': 34.0, 'rules_acyc': 0.0, 'rules_heuristic': 408.0, 'rules_tr': 1536683.0, 'rules_tr_normal': 1529489.0, 'rules_tr_choice': 6978.0, 'rules_tr_minimize': 34.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 182.0, 'eqs': 279721.0, 'eqs_atom': 51839.0, 'eqs_body': 12338.0, 'eqs_other': 215544.0}, 'lpStep': {'atoms': 1859.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22255.0, 'bodies_tr': 22255.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 45713.0, 'rules_normal': 45505.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 45702.0, 'rules_tr_normal': 45505.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 4985.0, 'eqs_atom': 630.0, 'eqs_body': 459.0, 'eqs_other': 3896.0}, 'generator': {'vars': 45733.0, 'vars_eliminated': 0.0, 'vars_frozen': 28302.0, 'constraints': 654.0, 'constraints_binary': 64727.0, 'constraints_ternary': 1155.0, 'acyc_edges': 0.0, 'complexity': 166623.0}}, 'solving': {'solvers': {'choices': 1470.0, 'conflicts': 23.0, 'conflicts_analyzed': 23.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 788.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 25.0, 'integrated': 0.0, 'lemmas': 24.0, 'lits_learnt': 25.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4624.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 23.0, 'lemmas_loop': 1.0, 'lemmas_other': 0.0, 'lits_conflict': 23.0, 'lits_loop': 2.0, 'lits_other': 0.0, 'jumps': {'jumps': 23.0, 'jumps_bounded': 0.0, 'levels': 23.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 34.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1742401123046875, 'cpu': 0.28125, 'solve': 0.03142738342285156, 'unsat': 0.0, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.818078994750977, 'cpu': 6.765625, 'solve': 0.5994129180908203, 'unsat': 0.03590965270996094, 'sat': 0.10565376281738281}, 'models': {'enumerated': 23.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 20899.0, 'conflicts': 1130.0, 'conflicts_analyzed': 1084.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 608.0, 'models': 23.0, 'models_level': 8615.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1125.0, 'distributed_sum_lbd': 1917.0, 'integrated': 3734.0, 'lemmas': 6004.0, 'lits_learnt': 65571.0, 'lemmas_binary': 464.0, 'lemmas_ternary': 162.0, 'cpu_time': 1.46875, 'integrated_imps': 1914.0, 'integrated_jumps': 911.0, 'guiding_paths_lits': 58351.0, 'guiding_paths': 237.0, 'splits': 0.0, 'lemmas_conflict': 1046.0, 'lemmas_loop': 1959.0, 'lemmas_other': 2999.0, 'lits_conflict': 10562.0, 'lits_loop': 15588.0, 'lits_other': 39421.0, 'jumps': {'jumps': 1084.0, 'jumps_bounded': 288.0, 'levels': 20983.0, 'levels_bounded': 19038.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{22: 34}

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 23 achieved :: Progression >> total requested sgoals = 5, current total achieved sgoals = 2 ( 40.00% solved)

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(23, 34)', truth=True, inc_range=None)

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 23, step = 34]:
sub_goal(2, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 23)

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 34:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [35]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(0)]), ('plan_module', [Number(35), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.123718s.

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 35: original = External(symbol='current_last_sgoals(23, 34)', truth=True, inc_range=None), conversion = current_last_sgoals(23,34).

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.134795s with result Satisfiable.

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [35]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2585128999999995, Incremental time limit = None
Running cumulative time = 5.614207099999996, Cumulative time limit = 3600
Used memory = (RSS = 308.218750Mb, VMS = 306.312500Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 24
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.266325s, Solving = 1.347882s, Total = 5.614207s, Memory = (RSS = 308.218750Mb, VMS = 306.312500Mb)), Calls = 35
Final Model :: Total atoms = 22323, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=35, start_step=34, end_step=35, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.266325299999996, solving_time=1.3478818000000006, total_time=5.614207099999996, memory=Memory(rss=308.21875, vms=306.3125), step_range=range(0, 36), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12371839999999779, solving_time=0.1347945000000017, total_time=0.2585128999999995, memory=Memory(rss=308.21875, vms=306.3125), step_range=range(35, 36), clingo_stats={'problem': {'lp': {'atoms': 115916.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 812283.0, 'bodies_tr': 812283.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7130.0, 'count_bodies_tr': 7130.0, 'sccs': 678.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12291.0, 'rules': 1583134.0, 'rules_normal': 1575506.0, 'rules_choice': 7173.0, 'rules_minimize': 35.0, 'rules_acyc': 0.0, 'rules_heuristic': 420.0, 'rules_tr': 1582901.0, 'rules_tr_normal': 1575506.0, 'rules_tr_choice': 7173.0, 'rules_tr_minimize': 35.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 187.0, 'eqs': 285158.0, 'eqs_atom': 52318.0, 'eqs_body': 12674.0, 'eqs_other': 220166.0}, 'lpStep': {'atoms': 2019.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22437.0, 'bodies_tr': 22437.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 12.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 170.0, 'rules': 46225.0, 'rules_normal': 46017.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 46218.0, 'rules_tr_normal': 46017.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 5.0, 'eqs': 5437.0, 'eqs_atom': 479.0, 'eqs_body': 336.0, 'eqs_other': 4622.0}, 'generator': {'vars': 46582.0, 'vars_eliminated': 0.0, 'vars_frozen': 28903.0, 'constraints': 833.0, 'constraints_binary': 72865.0, 'constraints_ternary': 1065.0, 'acyc_edges': 0.0, 'complexity': 166623.0}}, 'solving': {'solvers': {'choices': 1728.0, 'conflicts': 26.0, 'conflicts_analyzed': 26.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 822.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 41.0, 'distributed_sum_lbd': 56.0, 'integrated': 0.0, 'lemmas': 47.0, 'lits_learnt': 86.0, 'lemmas_binary': 9.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.21875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4848.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 26.0, 'lemmas_loop': 21.0, 'lemmas_other': 0.0, 'lits_conflict': 26.0, 'lits_loop': 60.0, 'lits_other': 0.0, 'jumps': {'jumps': 26.0, 'jumps_bounded': 0.0, 'levels': 26.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 35.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2633037567138672, 'cpu': 0.375, 'solve': 0.11467170715332031, 'unsat': 0.0, 'sat': 0.002964019775390625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 6.081382751464844, 'cpu': 7.140625, 'solve': 0.7140846252441406, 'unsat': 0.03590965270996094, 'sat': 0.10861778259277344}, 'models': {'enumerated': 24.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 22627.0, 'conflicts': 1156.0, 'conflicts_analyzed': 1110.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 608.0, 'models': 24.0, 'models_level': 9437.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1166.0, 'distributed_sum_lbd': 1973.0, 'integrated': 3734.0, 'lemmas': 6051.0, 'lits_learnt': 65657.0, 'lemmas_binary': 473.0, 'lemmas_ternary': 168.0, 'cpu_time': 1.6875, 'integrated_imps': 1914.0, 'integrated_jumps': 911.0, 'guiding_paths_lits': 63199.0, 'guiding_paths': 245.0, 'splits': 0.0, 'lemmas_conflict': 1072.0, 'lemmas_loop': 1980.0, 'lemmas_other': 2999.0, 'lits_conflict': 10588.0, 'lits_loop': 15648.0, 'lits_other': 39421.0, 'jumps': {'jumps': 1110.0, 'jumps_bounded': 288.0, 'levels': 21009.0, 'levels_bounded': 19038.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{22: 34, 23: 35}

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 24 achieved :: Progression >> total requested sgoals = 5, current total achieved sgoals = 3 ( 60.00% solved)

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(24, 35)', truth=True, inc_range=None)

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 24, step = 35]:
sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 24)

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 35:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [36]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(0)]), ('plan_module', [Number(36), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.110582s.

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 36: original = External(symbol='current_last_sgoals(24, 35)', truth=True, inc_range=None), conversion = current_last_sgoals(24,35).

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048216s with result Satisfiable.

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [36]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15879790000000327, Incremental time limit = None
Running cumulative time = 5.7730049999999995, Cumulative time limit = 3600
Used memory = (RSS = 313.359375Mb, VMS = 310.566406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 25
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.376908s, Solving = 1.396097s, Total = 5.773005s, Memory = (RSS = 313.359375Mb, VMS = 310.566406Mb)), Calls = 36
Final Model :: Total atoms = 22717, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=36, start_step=35, end_step=36, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.376907699999998, solving_time=1.3960973000000019, total_time=5.7730049999999995, memory=Memory(rss=313.359375, vms=310.56640625), step_range=range(0, 37), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11058240000000197, solving_time=0.0482155000000013, total_time=0.15879790000000327, memory=Memory(rss=313.359375, vms=310.56640625), step_range=range(36, 37), clingo_stats={'problem': {'lp': {'atoms': 117980.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 835138.0, 'bodies_tr': 835138.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7332.0, 'count_bodies_tr': 7332.0, 'sccs': 703.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12719.0, 'rules': 1630232.0, 'rules_normal': 1622396.0, 'rules_choice': 7368.0, 'rules_minimize': 36.0, 'rules_acyc': 0.0, 'rules_heuristic': 432.0, 'rules_tr': 1629996.0, 'rules_tr_normal': 1622396.0, 'rules_tr_choice': 7368.0, 'rules_tr_minimize': 36.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 196.0, 'eqs': 291840.0, 'eqs_atom': 52972.0, 'eqs_body': 12850.0, 'eqs_other': 226018.0}, 'lpStep': {'atoms': 2064.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22855.0, 'bodies_tr': 22855.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 428.0, 'rules': 47098.0, 'rules_normal': 46890.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 47095.0, 'rules_tr_normal': 46890.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 9.0, 'eqs': 6682.0, 'eqs_atom': 654.0, 'eqs_body': 176.0, 'eqs_other': 5852.0}, 'generator': {'vars': 48228.0, 'vars_eliminated': 0.0, 'vars_frozen': 29909.0, 'constraints': 1229.0, 'constraints_binary': 88256.0, 'constraints_ternary': 2609.0, 'acyc_edges': 0.0, 'complexity': 166623.0}}, 'solving': {'solvers': {'choices': 1554.0, 'conflicts': 16.0, 'conflicts_analyzed': 16.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 856.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 30.0, 'integrated': 0.0, 'lemmas': 47.0, 'lits_learnt': 191.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4438.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 31.0, 'lemmas_other': 0.0, 'lits_conflict': 16.0, 'lits_loop': 175.0, 'lits_other': 0.0, 'jumps': {'jumps': 16.0, 'jumps_bounded': 0.0, 'levels': 16.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 36.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.16281509399414062, 'cpu': 0.171875, 'solve': 0.0239105224609375, 'unsat': 0.0, 'sat': 0.0039615631103515625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 6.244197845458984, 'cpu': 7.3125, 'solve': 0.7379951477050781, 'unsat': 0.03590965270996094, 'sat': 0.112579345703125}, 'models': {'enumerated': 25.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 24181.0, 'conflicts': 1172.0, 'conflicts_analyzed': 1126.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 608.0, 'models': 25.0, 'models_level': 10293.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1189.0, 'distributed_sum_lbd': 2003.0, 'integrated': 3734.0, 'lemmas': 6098.0, 'lits_learnt': 65848.0, 'lemmas_binary': 480.0, 'lemmas_ternary': 168.0, 'cpu_time': 1.71875, 'integrated_imps': 1914.0, 'integrated_jumps': 911.0, 'guiding_paths_lits': 67637.0, 'guiding_paths': 252.0, 'splits': 0.0, 'lemmas_conflict': 1088.0, 'lemmas_loop': 2011.0, 'lemmas_other': 2999.0, 'lits_conflict': 10604.0, 'lits_loop': 15823.0, 'lits_other': 39421.0, 'jumps': {'jumps': 1126.0, 'jumps_bounded': 288.0, 'levels': 21025.0, 'levels_bounded': 19038.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{22: 34, 23: 35, 24: 36}

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 25 achieved :: Progression >> total requested sgoals = 5, current total achieved sgoals = 4 ( 80.00% solved)

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(25, 36)', truth=True, inc_range=None)

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 25, step = 36]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 25)

[13-11-2021_23-07-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 36:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [37]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(37), Number(0)]), ('plan_module', [Number(37), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.133029s.

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 37: original = External(symbol='current_last_sgoals(25, 36)', truth=True, inc_range=None), conversion = current_last_sgoals(25,36).

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041389s with result Unsatisfiable.

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [37]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.17441829999999925, Incremental time limit = None
Running cumulative time = 5.947423299999999, Cumulative time limit = 3600
Used memory = (RSS = 315.257812Mb, VMS = 310.964844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=37, start_step=36, end_step=37, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.509936899999997, solving_time=1.4374864000000018, total_time=5.947423299999999, memory=Memory(rss=315.2578125, vms=310.96484375), step_range=range(0, 38), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1330291999999993, solving_time=0.041389099999999956, total_time=0.17441829999999925, memory=Memory(rss=315.2578125, vms=310.96484375), step_range=range(37, 38), clingo_stats={'problem': {'lp': {'atoms': 121279.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 859541.0, 'bodies_tr': 859541.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7534.0, 'count_bodies_tr': 7534.0, 'sccs': 728.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 13209.0, 'rules': 1680264.0, 'rules_normal': 1672220.0, 'rules_choice': 7563.0, 'rules_minimize': 37.0, 'rules_acyc': 0.0, 'rules_heuristic': 444.0, 'rules_tr': 1680026.0, 'rules_tr_normal': 1672220.0, 'rules_tr_choice': 7563.0, 'rules_tr_minimize': 37.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 206.0, 'eqs': 305685.0, 'eqs_atom': 54730.0, 'eqs_body': 13040.0, 'eqs_other': 237915.0}, 'lpStep': {'atoms': 3299.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24403.0, 'bodies_tr': 24403.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 50032.0, 'rules_normal': 49824.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 50030.0, 'rules_tr_normal': 49824.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 13845.0, 'eqs_atom': 1758.0, 'eqs_body': 190.0, 'eqs_other': 11897.0}, 'generator': {'vars': 50140.0, 'vars_eliminated': 0.0, 'vars_frozen': 31045.0, 'constraints': 1733.0, 'constraints_binary': 108409.0, 'constraints_ternary': 5179.0, 'acyc_edges': 0.0, 'complexity': 166623.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4634.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 37.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1795482635498047, 'cpu': 0.171875, 'solve': 0.00501251220703125, 'unsat': 0.00501251220703125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 6.423746109008789, 'cpu': 7.484375, 'solve': 0.7430076599121094, 'unsat': 0.04092216491699219, 'sat': 0.112579345703125}, 'models': {'enumerated': 25.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 24181.0, 'conflicts': 1180.0, 'conflicts_analyzed': 1126.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 608.0, 'models': 25.0, 'models_level': 10293.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1189.0, 'distributed_sum_lbd': 2003.0, 'integrated': 3734.0, 'lemmas': 6098.0, 'lits_learnt': 65848.0, 'lemmas_binary': 480.0, 'lemmas_ternary': 168.0, 'cpu_time': 1.71875, 'integrated_imps': 1914.0, 'integrated_jumps': 911.0, 'guiding_paths_lits': 72271.0, 'guiding_paths': 259.0, 'splits': 0.0, 'lemmas_conflict': 1088.0, 'lemmas_loop': 2011.0, 'lemmas_other': 2999.0, 'lits_conflict': 10604.0, 'lits_loop': 15823.0, 'lits_other': 39421.0, 'jumps': {'jumps': 1126.0, 'jumps_bounded': 288.0, 'levels': 21025.0, 'levels_bounded': 19038.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 37:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [38]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(0)]), ('plan_module', [Number(38), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.139882s.

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.058295s with result Satisfiable.

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [38]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.19817770000000223, Incremental time limit = None
Running cumulative time = 6.145601000000001, Cumulative time limit = 3600
Used memory = (RSS = 321.394531Mb, VMS = 316.015625Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 26
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.649819s, Solving = 1.495782s, Total = 6.145601s, Memory = (RSS = 321.394531Mb, VMS = 316.015625Mb)), Calls = 38
Final Model :: Total atoms = 23506, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=38, start_step=37, end_step=38, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.649819099999999, solving_time=1.4957819000000017, total_time=6.145601000000001, memory=Memory(rss=321.39453125, vms=316.015625), step_range=range(0, 39), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1398822000000024, solving_time=0.058295499999999834, total_time=0.19817770000000223, memory=Memory(rss=321.39453125, vms=316.015625), step_range=range(38, 39), clingo_stats={'problem': {'lp': {'atoms': 124608.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 884384.0, 'bodies_tr': 884384.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7736.0, 'count_bodies_tr': 7736.0, 'sccs': 753.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 13803.0, 'rules': 1731056.0, 'rules_normal': 1722804.0, 'rules_choice': 7758.0, 'rules_minimize': 38.0, 'rules_acyc': 0.0, 'rules_heuristic': 456.0, 'rules_tr': 1730818.0, 'rules_tr_normal': 1722804.0, 'rules_tr_choice': 7758.0, 'rules_tr_minimize': 38.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 218.0, 'eqs': 313850.0, 'eqs_atom': 56465.0, 'eqs_body': 13130.0, 'eqs_other': 244255.0}, 'lpStep': {'atoms': 3329.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24843.0, 'bodies_tr': 24843.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 50792.0, 'rules_normal': 50584.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 50792.0, 'rules_tr_normal': 50584.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8165.0, 'eqs_atom': 1735.0, 'eqs_body': 90.0, 'eqs_other': 6340.0}, 'generator': {'vars': 52457.0, 'vars_eliminated': 0.0, 'vars_frozen': 32404.0, 'constraints': 2355.0, 'constraints_binary': 137408.0, 'constraints_ternary': 8319.0, 'acyc_edges': 0.0, 'complexity': 166623.0}}, 'solving': {'solvers': {'choices': 1651.0, 'conflicts': 6.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 13.0, 'models': 1.0, 'models_level': 925.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 18.0, 'integrated': 36.0, 'lemmas': 154.0, 'lits_learnt': 1254.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 1.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4830.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 112.0, 'lemmas_other': 36.0, 'lits_conflict': 36.0, 'lits_loop': 1002.0, 'lits_other': 216.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 0.0, 'levels': 6.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 38.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.20345497131347656, 'cpu': 0.234375, 'solve': 0.03191566467285156, 'unsat': 0.0, 'sat': 0.00399017333984375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 6.627201080322266, 'cpu': 7.71875, 'solve': 0.7749233245849609, 'unsat': 0.04092216491699219, 'sat': 0.11656951904296875}, 'models': {'enumerated': 26.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 25832.0, 'conflicts': 1186.0, 'conflicts_analyzed': 1132.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 621.0, 'models': 26.0, 'models_level': 11218.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1195.0, 'distributed_sum_lbd': 2021.0, 'integrated': 3770.0, 'lemmas': 6252.0, 'lits_learnt': 67102.0, 'lemmas_binary': 480.0, 'lemmas_ternary': 168.0, 'cpu_time': 1.78125, 'integrated_imps': 1915.0, 'integrated_jumps': 911.0, 'guiding_paths_lits': 77101.0, 'guiding_paths': 266.0, 'splits': 0.0, 'lemmas_conflict': 1094.0, 'lemmas_loop': 2123.0, 'lemmas_other': 3035.0, 'lits_conflict': 10640.0, 'lits_loop': 16825.0, 'lits_other': 39637.0, 'jumps': {'jumps': 1132.0, 'jumps_bounded': 288.0, 'levels': 21031.0, 'levels_bounded': 19038.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{22: 34, 23: 35, 24: 36, 25: 38}

[13-11-2021_23-07-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 26 achieved :: Progression >> total requested sgoals = 5, current total achieved sgoals = 5 (100.00% solved)

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(26, 38)', truth=True, inc_range=None)

[13-11-2021_23-07-29] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 26, step = 38]:
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 26)

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(38)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[13-11-2021_23-07-29] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(1, complete(blue), false, false)
final_goal(1, complete(blue), true, true)
final_goal(1, complete(red), false, false)
final_goal(1, complete(red), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1)), false, true)
final_goal(1, tower_base((block,1)), true, false)
final_goal(1, tower_base((block,2)), false, true)
final_goal(1, tower_base((block,2)), true, false)
final_goal(1, tower_base((block,3)), false, false)
final_goal(1, tower_base((block,3)), true, true)
final_goal(1, tower_base((block,4)), false, true)
final_goal(1, tower_base((block,4)), true, false)
final_goal(1, tower_base((block,5)), false, true)
final_goal(1, tower_base((block,5)), true, false)
final_goal(1, tower_base((block,6)), false, false)
final_goal(1, tower_base((block,6)), true, true)
final_goal(1, unordered_tower((block,1)), false, true)
final_goal(1, unordered_tower((block,1)), true, false)
final_goal(1, unordered_tower((block,2)), false, true)
final_goal(1, unordered_tower((block,2)), true, false)
final_goal(1, unordered_tower((block,3)), false, true)
final_goal(1, unordered_tower((block,3)), true, false)
final_goal(1, unordered_tower((block,4)), false, true)
final_goal(1, unordered_tower((block,4)), true, false)
final_goal(1, unordered_tower((block,5)), false, true)
final_goal(1, unordered_tower((block,5)), true, false)
final_goal(1, unordered_tower((block,6)), false, true)
final_goal(1, unordered_tower((block,6)), true, false)

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [39]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(0)]), ('plan_module', [Number(39), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.145225s.

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 39: original = External(symbol='current_last_sgoals(26, 38)', truth=True, inc_range=None), conversion = current_last_sgoals(26,38).

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 39: original = External(symbol='seq_achieve_fgoals(38)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(38).

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.066541s with result Satisfiable.

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [39]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.21176550000000205, Incremental time limit = None
Running cumulative time = 6.357366500000003, Cumulative time limit = 3600
Used memory = (RSS = 328.128906Mb, VMS = 321.839844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 27
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.795044s, Solving = 1.562323s, Total = 6.357367s, Memory = (RSS = 328.128906Mb, VMS = 321.839844Mb)), Calls = 39
Final Model :: Total atoms = 24191, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=39, start_step=38, end_step=39, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.7950439000000005, solving_time=1.5623226000000026, total_time=6.357366500000003, memory=Memory(rss=328.12890625, vms=321.83984375), step_range=range(0, 40), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14522480000000115, solving_time=0.0665407000000009, total_time=0.21176550000000205, memory=Memory(rss=328.12890625, vms=321.83984375), step_range=range(39, 40), clingo_stats={'problem': {'lp': {'atoms': 128092.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 909555.0, 'bodies_tr': 909555.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7938.0, 'count_bodies_tr': 7938.0, 'sccs': 778.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 14397.0, 'rules': 1782588.0, 'rules_normal': 1774128.0, 'rules_choice': 7953.0, 'rules_minimize': 39.0, 'rules_acyc': 0.0, 'rules_heuristic': 468.0, 'rules_tr': 1782350.0, 'rules_tr_normal': 1774128.0, 'rules_tr_choice': 7953.0, 'rules_tr_minimize': 39.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 230.0, 'eqs': 322489.0, 'eqs_atom': 58277.0, 'eqs_body': 13200.0, 'eqs_other': 251012.0}, 'lpStep': {'atoms': 3484.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25171.0, 'bodies_tr': 25171.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 51532.0, 'rules_normal': 51324.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 51532.0, 'rules_tr_normal': 51324.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8639.0, 'eqs_atom': 1812.0, 'eqs_body': 70.0, 'eqs_other': 6757.0}, 'generator': {'vars': 54880.0, 'vars_eliminated': 0.0, 'vars_frozen': 33809.0, 'constraints': 2998.0, 'constraints_binary': 168810.0, 'constraints_ternary': 11764.0, 'acyc_edges': 0.0, 'complexity': 183966.0}}, 'solving': {'solvers': {'choices': 1687.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 7.0, 'models': 1.0, 'models_level': 959.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 5026.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 39.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.21642494201660156, 'cpu': 0.3125, 'solve': 0.0299224853515625, 'unsat': 0.0, 'sat': 0.005985260009765625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 6.843626022338867, 'cpu': 8.03125, 'solve': 0.8048458099365234, 'unsat': 0.04092216491699219, 'sat': 0.12255477905273438}, 'models': {'enumerated': 27.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 27519.0, 'conflicts': 1186.0, 'conflicts_analyzed': 1132.0, 'restarts': 0.0, 'restarts_last': 50.0, 'extra': {'domain_choices': 628.0, 'models': 27.0, 'models_level': 12177.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1195.0, 'distributed_sum_lbd': 2021.0, 'integrated': 3770.0, 'lemmas': 6252.0, 'lits_learnt': 67102.0, 'lemmas_binary': 480.0, 'lemmas_ternary': 168.0, 'cpu_time': 1.90625, 'integrated_imps': 1915.0, 'integrated_jumps': 911.0, 'guiding_paths_lits': 82127.0, 'guiding_paths': 273.0, 'splits': 0.0, 'lemmas_conflict': 1094.0, 'lemmas_loop': 2123.0, 'lemmas_other': 3035.0, 'lits_conflict': 10640.0, 'lits_loop': 16825.0, 'lits_other': 39637.0, 'jumps': {'jumps': 1132.0, 'jumps_bounded': 288.0, 'levels': 21031.0, 'levels_bounded': 19038.0, 'max': 314.0, 'max_executed': 314.0, 'max_bounded': 312.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{22: 34, 23: 35, 24: 36, 25: 38, 26: 39}

[13-11-2021_23-07-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 27 achieved :: Progression >> total requested sgoals = 5, current total achieved sgoals = 6 (120.00% solved)

[13-11-2021_23-07-29] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 26 was achieved successfully.

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.136291s, Solving = 0.013925s, Total = 0.150217s, Memory = (RSS = 203.917969Mb, VMS = 193.789062Mb)
2 : Statistics :: Grounding = 0.108406s, Solving = 0.010814s, Total = 0.119219s, Memory = (RSS = 206.039062Mb, VMS = 195.734375Mb)
3 : Statistics :: Grounding = 0.093286s, Solving = 0.007222s, Total = 0.100508s, Memory = (RSS = 207.398438Mb, VMS = 197.187500Mb)
4 : Statistics :: Grounding = 0.112117s, Solving = 0.016614s, Total = 0.128731s, Memory = (RSS = 209.386719Mb, VMS = 199.074219Mb)
5 : Statistics :: Grounding = 0.115869s, Solving = 0.013917s, Total = 0.129785s, Memory = (RSS = 211.808594Mb, VMS = 201.949219Mb)
6 : Statistics :: Grounding = 0.099495s, Solving = 0.009546s, Total = 0.109041s, Memory = (RSS = 213.589844Mb, VMS = 203.636719Mb)
7 : Statistics :: Grounding = 0.107534s, Solving = 0.011328s, Total = 0.118862s, Memory = (RSS = 214.894531Mb, VMS = 204.972656Mb)
8 : Statistics :: Grounding = 0.110697s, Solving = 0.032135s, Total = 0.142832s, Memory = (RSS = 219.871094Mb, VMS = 210.261719Mb)
9 : Statistics :: Grounding = 0.163249s, Solving = 0.035454s, Total = 0.198703s, Memory = (RSS = 226.449219Mb, VMS = 217.539062Mb)
10 : Statistics :: Grounding = 0.112865s, Solving = 0.018417s, Total = 0.131282s, Memory = (RSS = 231.164062Mb, VMS = 221.671875Mb)
11 : Statistics :: Grounding = 0.117987s, Solving = 0.041655s, Total = 0.159642s, Memory = (RSS = 238.906250Mb, VMS = 230.855469Mb)
12 : Statistics :: Grounding = 0.118920s, Solving = 0.077084s, Total = 0.196004s, Memory = (RSS = 244.777344Mb, VMS = 236.523438Mb)
13 : Statistics :: Grounding = 0.117208s, Solving = 0.032258s, Total = 0.149466s, Memory = (RSS = 250.976562Mb, VMS = 241.859375Mb)
14 : Statistics :: Grounding = 0.153216s, Solving = 0.029288s, Total = 0.182503s, Memory = (RSS = 264.652344Mb, VMS = 257.855469Mb)
15 : Statistics :: Grounding = 0.096785s, Solving = 0.027252s, Total = 0.124037s, Memory = (RSS = 265.722656Mb, VMS = 258.656250Mb)
16 : Statistics :: Grounding = 0.105139s, Solving = 0.014130s, Total = 0.119269s, Memory = (RSS = 266.039062Mb, VMS = 258.703125Mb)
17 : Statistics :: Grounding = 0.102920s, Solving = 0.018884s, Total = 0.121804s, Memory = (RSS = 266.656250Mb, VMS = 258.789062Mb)
18 : Statistics :: Grounding = 0.117919s, Solving = 0.036863s, Total = 0.154783s, Memory = (RSS = 269.281250Mb, VMS = 261.621094Mb)
19 : Statistics :: Grounding = 0.138325s, Solving = 0.029856s, Total = 0.168182s, Memory = (RSS = 271.710938Mb, VMS = 263.757812Mb)
20 : Statistics :: Grounding = 0.118657s, Solving = 0.031890s, Total = 0.150547s, Memory = (RSS = 274.394531Mb, VMS = 266.324219Mb)
21 : Statistics :: Grounding = 0.125934s, Solving = 0.023321s, Total = 0.149255s, Memory = (RSS = 276.269531Mb, VMS = 267.906250Mb)
22 : Statistics :: Grounding = 0.114934s, Solving = 0.043443s, Total = 0.158377s, Memory = (RSS = 279.074219Mb, VMS = 270.097656Mb)
23 : Statistics :: Grounding = 0.132278s, Solving = 0.115496s, Total = 0.247774s, Memory = (RSS = 287.027344Mb, VMS = 283.910156Mb)
24 : Statistics :: Grounding = 0.123553s, Solving = 0.030220s, Total = 0.153772s, Memory = (RSS = 288.773438Mb, VMS = 284.984375Mb)
25 : Statistics :: Grounding = 0.137916s, Solving = 0.051373s, Total = 0.189289s, Memory = (RSS = 294.234375Mb, VMS = 289.839844Mb)
26 : Statistics :: Grounding = 0.135744s, Solving = 0.042840s, Total = 0.178584s, Memory = (RSS = 298.332031Mb, VMS = 292.714844Mb)
27 : Statistics :: Grounding = 0.132180s, Solving = 0.054418s, Total = 0.186598s, Memory = (RSS = 304.597656Mb, VMS = 297.562500Mb)
28 : Statistics :: Grounding = 0.151848s, Solving = 0.054254s, Total = 0.206102s, Memory = (RSS = 277.757812Mb, VMS = 269.964844Mb)
29 : Statistics :: Grounding = 0.116480s, Solving = 0.021858s, Total = 0.138339s, Memory = (RSS = 278.953125Mb, VMS = 271.054688Mb)
30 : Statistics :: Grounding = 0.117981s, Solving = 0.064010s, Total = 0.181991s, Memory = (RSS = 281.066406Mb, VMS = 272.929688Mb)
31 : Statistics :: Grounding = 0.117417s, Solving = 0.054140s, Total = 0.171557s, Memory = (RSS = 287.167969Mb, VMS = 288.453125Mb)
32 : Statistics :: Grounding = 0.137989s, Solving = 0.067757s, Total = 0.205746s, Memory = (RSS = 292.867188Mb, VMS = 293.437500Mb)
33 : Statistics :: Grounding = 0.134716s, Solving = 0.029388s, Total = 0.164104s, Memory = (RSS = 299.574219Mb, VMS = 298.773438Mb)
34 : Statistics :: Grounding = 0.116752s, Solving = 0.052035s, Total = 0.168786s, Memory = (RSS = 303.664062Mb, VMS = 302.468750Mb)
35 : Statistics :: Grounding = 0.123718s, Solving = 0.134795s, Total = 0.258513s, Memory = (RSS = 308.218750Mb, VMS = 306.312500Mb)
36 : Statistics :: Grounding = 0.110582s, Solving = 0.048216s, Total = 0.158798s, Memory = (RSS = 313.359375Mb, VMS = 310.566406Mb)
37 : Statistics :: Grounding = 0.133029s, Solving = 0.041389s, Total = 0.174418s, Memory = (RSS = 315.257812Mb, VMS = 310.964844Mb)
38 : Statistics :: Grounding = 0.139882s, Solving = 0.058295s, Total = 0.198178s, Memory = (RSS = 321.394531Mb, VMS = 316.015625Mb)
39 : Statistics :: Grounding = 0.145225s, Solving = 0.066541s, Total = 0.211766s, Memory = (RSS = 328.128906Mb, VMS = 321.839844Mb)

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 6.357367s due to: External generator exit.

[13-11-2021_23-07-29] DEBUG :: ASH Planner Main #1 >> Deleting program grounding at level 1.

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 4, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 9, 15: 9, 16: 10, 17: 10, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15, 26: 16, 27: 17, 28: 18, 29: 19, 30: 19, 31: 20, 32: 21}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 7, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 15, 10: 18, 11: 20, 12: 22, 13: 23, 14: 24, 15: 25, 16: 26, 17: 27, 18: 28, 19: 30, 20: 31, 21: 32}
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 5, 12: 5, 13: 5, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 12, 21: 13, 22: 14, 23: 15, 24: 16, 25: 17, 26: 18}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 10, 5: 13, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 19, 12: 20, 13: 21, 14: 22, 15: 23, 16: 24, 17: 25, 18: 26}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 4, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 9, 15: 9, 16: 10, 17: 10, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15, 26: 16, 27: 17, 28: 18, 29: 19, 30: 19, 31: 20, 32: 21, 33: 22, 34: 22, 35: 23, 36: 24, 37: 25, 38: 25, 39: 26}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 7, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 15, 10: 18, 11: 20, 12: 22, 13: 23, 14: 24, 15: 25, 16: 26, 17: 27, 18: 28, 19: 30, 20: 31, 21: 32, 22: 34, 23: 35, 24: 36, 25: 38, 26: 39}
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 5, 12: 5, 13: 5, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 12, 21: 13, 22: 14, 23: 15, 24: 16, 25: 17, 26: 18}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 10, 5: 13, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 19, 12: 20, 13: 21, 14: 22, 15: 23, 16: 24, 17: 25, 18: 26}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 26, Last requested goal index = 26 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.795044s, Solving = 1.562323s, Total = 6.357367s, Memory = (RSS = 328.128906Mb, VMS = 321.839844Mb)), Calls = 39
Model :: Total atoms = 24191, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 39 :: Actions = 39                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 2] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 5:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 8:
    Current Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 9:
    Current Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 10:
    Current Sub-goals:
        [Index = 5] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 5] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 12:
    Current Sub-goals:
        [Index = 7] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 7] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 14:
    Current Sub-goals:
        [Index = 9] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 15:
    Current Sub-goals:
        [Index = 9] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 9] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 16:
    Current Sub-goals:
        [Index = 10] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 17:
    Current Sub-goals:
        [Index = 10] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 10] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 22:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 24:
    Current Sub-goals:
        [Index = 14] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 14] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 25:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 26:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 27:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 28:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 29:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 30:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 31:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 32:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,4),(block,5))
Step 33:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 34:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 35:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 36:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 37:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 38:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
Step 39:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Online planning increment 4 finished.

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=39, step_range=range(0, 40)

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 39, Actions = 39
Level [2]: Length = 26, Actions = 26
Level [3]: Length = 18, Actions = 18

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=26, step_range=range(0, 27)

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 39, Actions = 39
Level [2]: Length = 26, Actions = 26
Level [3]: Length = 18, Actions = 18

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=18, step_range=range(0, 19)

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 39, Actions = 39
Level [2]: Length = 26, Actions = 26
Level [3]: Length = 18, Actions = 18

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 39, Actions = 18

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >>           ========================================          
                     Ground level plan                      
          ========================================          
                 Steps = 39 :: Actions = 39                 
                ----------------------------                

(1, [Action({'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1})])
(2, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2})])
(3, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 3})])
(4, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 4})])
(5, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 5})])
(6, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 6})])
(7, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 7})])
(8, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,6)))', 'S': 8})])
(9, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,6))', 'S': 9})])
(10, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,5)))', 'S': 10})])
(11, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,5))', 'S': 11})])
(12, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 12})])
(13, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 13})])
(14, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 14})])
(15, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 15})])
(16, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 16})])
(17, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 17})])
(18, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 18})])
(19, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 19})])
(20, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 20})])
(21, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,6),puzzle_room_table_right)', 'S': 21})])
(22, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 22})])
(23, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,6))', 'S': 23})])
(24, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 24})])
(25, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 25})])
(26, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,5),(block,6))', 'S': 26})])
(27, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 27})])
(28, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 28})])
(29, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,4)))', 'S': 29})])
(30, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,4))', 'S': 30})])
(31, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,5))', 'S': 31})])
(32, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,4),(block,5))', 'S': 32})])
(33, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,2)))', 'S': 33})])
(34, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,2))', 'S': 34})])
(35, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,2),(block,3))', 'S': 35})])
(36, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,2))', 'S': 36})])
(37, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,1)))', 'S': 37})])
(38, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,1))', 'S': 38})])
(39, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,1),(block,2))', 'S': 39})])

Hierarchical planning summary: (Execution latency = 5.456095200000006, Overall total planning time = 11.276126000000014, Average partial plan yield time = 4.376669750000001)

     ====================================================================================================================================================================================     
 | Level =  3 (classic), Length =  18, Actions =  18 (Com = 1.00), Sgs = 18, Time =   1.706s (Gro =   1.160s, Sea =   0.546s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00)) |  
 | Level =  2 (com-ref), Length =  26, Actions =  26 (Com = 1.00), Sgs = 26, Time =   3.169s (Gro =   2.295s, Sea =   0.874s), Expan (1.44, 1.44) (Dev = (0.86, 0.86), Bal = (0.59, 0.59)) |  
  | Level =  1 (com-ref), Length =  39, Actions =  39 (Com = 1.00), Sgs = 0, Time =   6.401s (Gro =   4.832s, Sea =   1.569s), Expan (1.50, 1.50) (Dev = (0.65, 0.65), Bal = (0.43, 0.43)) |  
     ====================================================================================================================================================================================     

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=39, step_range=range(0, 40)

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 39, Actions = 39
Level [2]: Length = 26, Actions = 26
Level [3]: Length = 18, Actions = 18

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=26, step_range=range(0, 27)

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 39, Actions = 39
Level [2]: Length = 26, Actions = 26
Level [3]: Length = 18, Actions = 18

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=18, step_range=range(0, 19)

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 39, Actions = 39
Level [2]: Length = 26, Actions = 26
Level [3]: Length = 18, Actions = 18

[13-11-2021_23-07-30] DEBUG :: Experiment >> 

      ================================================      
            Experimental run 1 : Time 17.426421s            
      ================================================      

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', None)
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', True)
	('use_search_length_bound', True)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_actions', None)
	('detect_interleaving', False)
	('detect_dependencies', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', {1: 150, 2: 100, 3: 50})
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3] : ONLINE MODE

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 1 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Current valid planning level range: [3-3]

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Chosen level range for planning increment 1 by method ground-first: [1-3]

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 3

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 50)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = False
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [3] : Concurrency disabled : Problem type = classical : Minimum search length bound = disabled with value = 0

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = False
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = False, chosen = False

[13-11-2021_23-07-30] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-11-2021_23-07-30] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 68 rules into program part ash_initial_state:

holds(3, complete(blue), false, 0).
holds(3, complete(red), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), puzzle_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), true, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), (block,2), 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, tower_base((block,1)), true, 0).
holds(3, tower_base((block,2)), true, 0).
holds(3, tower_base((block,3)), false, 0).
holds(3, tower_base((block,4)), false, 0).
holds(3, tower_base((block,5)), false, 0).
holds(3, tower_base((block,6)), false, 0).
holds(3, unordered_tower((block,1)), true, 0).
holds(3, unordered_tower((block,2)), true, 0).
holds(3, unordered_tower((block,3)), false, 0).
holds(3, unordered_tower((block,4)), false, 0).
holds(3, unordered_tower((block,5)), false, 0).
holds(3, unordered_tower((block,6)), false, 0).

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 142 rules into program part ash_goal_state:

final_goal(3, complete(blue), false, false).
final_goal(3, complete(blue), true, true).
final_goal(3, complete(red), false, false).
final_goal(3, complete(red), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1)), false, true).
final_goal(3, tower_base((block,1)), true, false).
final_goal(3, tower_base((block,2)), false, true).
final_goal(3, tower_base((block,2)), true, false).
final_goal(3, tower_base((block,3)), false, false).
final_goal(3, tower_base((block,3)), true, true).
final_goal(3, tower_base((block,4)), false, true).
final_goal(3, tower_base((block,4)), true, false).
final_goal(3, tower_base((block,5)), false, true).
final_goal(3, tower_base((block,5)), true, false).
final_goal(3, tower_base((block,6)), false, false).
final_goal(3, tower_base((block,6)), true, true).
final_goal(3, unordered_tower((block,1)), false, true).
final_goal(3, unordered_tower((block,1)), true, false).
final_goal(3, unordered_tower((block,2)), false, true).
final_goal(3, unordered_tower((block,2)), true, false).
final_goal(3, unordered_tower((block,3)), false, true).
final_goal(3, unordered_tower((block,3)), true, false).
final_goal(3, unordered_tower((block,4)), false, true).
final_goal(3, unordered_tower((block,4)), true, false).
final_goal(3, unordered_tower((block,5)), false, true).
final_goal(3, unordered_tower((block,5)), true, false).
final_goal(3, unordered_tower((block,6)), false, true).
final_goal(3, unordered_tower((block,6)), true, false).

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x00000162C2F4A4C0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=50, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 560 rules

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004173900000001396s

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.020668s.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004529s with result Satisfiable.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000162CF37FE00>

[13-11-2021_23-07-30] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 3)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000162CF37FE00>)

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, true). %* None *%
#program optimisation_module(#inc, 0, false, false, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.060664s.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006139s with result Unsatisfiable.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.066802899999999, Incremental time limit = None
Running cumulative time = 0.066802899999999, Cumulative time limit = 3600
Used memory = (RSS = 193.453125Mb, VMS = 182.558594Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.046540s.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003739s with result Unsatisfiable.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.05027940000000086, Incremental time limit = None
Running cumulative time = 0.11708229999999986, Cumulative time limit = 3600
Used memory = (RSS = 193.917969Mb, VMS = 183.042969Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.052251s.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005124s with result Unsatisfiable.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.05737469999999689, Incremental time limit = None
Running cumulative time = 0.17445699999999675, Cumulative time limit = 3600
Used memory = (RSS = 194.769531Mb, VMS = 184.296875Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.055059s.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005806s with result Unsatisfiable.

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0608643000000022, Incremental time limit = None
Running cumulative time = 0.23532129999999896, Cumulative time limit = 3600
Used memory = (RSS = 195.984375Mb, VMS = 185.691406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.061839s.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006029s with result Unsatisfiable.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06786759999999958, Incremental time limit = None
Running cumulative time = 0.30318889999999854, Cumulative time limit = 3600
Used memory = (RSS = 197.746094Mb, VMS = 187.933594Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.057888s.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007050s with result Unsatisfiable.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0649374999999992, Incremental time limit = None
Running cumulative time = 0.36812639999999774, Cumulative time limit = 3600
Used memory = (RSS = 199.136719Mb, VMS = 189.230469Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)])]

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.053023s.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007434s with result Unsatisfiable.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06045780000000178, Incremental time limit = None
Running cumulative time = 0.4285841999999995, Cumulative time limit = 3600
Used memory = (RSS = 201.820312Mb, VMS = 192.199219Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)])]

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.054785s.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008092s with result Unsatisfiable.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06287690000000268, Incremental time limit = None
Running cumulative time = 0.4914611000000022, Cumulative time limit = 3600
Used memory = (RSS = 203.164062Mb, VMS = 193.156250Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)])]

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.064915s.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011806s with result Unsatisfiable.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07672090000000154, Incremental time limit = None
Running cumulative time = 0.5681820000000037, Cumulative time limit = 3600
Used memory = (RSS = 206.457031Mb, VMS = 197.000000Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)])]

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.057662s.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009811s with result Unsatisfiable.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06747320000000201, Incremental time limit = None
Running cumulative time = 0.6356552000000057, Cumulative time limit = 3600
Used memory = (RSS = 207.156250Mb, VMS = 197.101562Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)])]

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.057979s.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012786s with result Unsatisfiable.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07076469999999802, Incremental time limit = None
Running cumulative time = 0.7064199000000038, Cumulative time limit = 3600
Used memory = (RSS = 208.546875Mb, VMS = 198.191406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)])]

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.073578s.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017145s with result Unsatisfiable.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09072249999999826, Incremental time limit = None
Running cumulative time = 0.797142400000002, Cumulative time limit = 3600
Used memory = (RSS = 213.921875Mb, VMS = 205.207031Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)])]

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.083491s.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024487s with result Unsatisfiable.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10797840000000036, Incremental time limit = None
Running cumulative time = 0.9051208000000024, Cumulative time limit = 3600
Used memory = (RSS = 215.406250Mb, VMS = 206.156250Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)])]

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.062043s.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.038584s with result Unsatisfiable.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10062759999999926, Incremental time limit = None
Running cumulative time = 1.0057484000000017, Cumulative time limit = 3600
Used memory = (RSS = 216.800781Mb, VMS = 207.074219Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)])]

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.063807s.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059226s with result Unsatisfiable.

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12303329999999946, Incremental time limit = None
Running cumulative time = 1.128781700000001, Cumulative time limit = 3600
Used memory = (RSS = 218.722656Mb, VMS = 208.539062Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)])]

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.071995s.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.095448s with result Unsatisfiable.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1674431000000034, Incremental time limit = None
Running cumulative time = 1.2962248000000045, Cumulative time limit = 3600
Used memory = (RSS = 220.718750Mb, VMS = 210.195312Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)])]

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.067282s.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.206426s with result Unsatisfiable.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2737081000000039, Incremental time limit = None
Running cumulative time = 1.5699329000000084, Cumulative time limit = 3600
Used memory = (RSS = 228.093750Mb, VMS = 219.789062Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)])]

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.068612s.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.118862s with result Satisfiable.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18747389999999697, Incremental time limit = None
Running cumulative time = 1.7574068000000054, Cumulative time limit = 3600
Used memory = (RSS = 229.964844Mb, VMS = 221.503906Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.113412s, Solving = 0.643995s, Total = 1.757407s, Memory = (RSS = 229.964844Mb, VMS = 221.503906Mb)), Calls = 18
Final Model :: Total atoms = 8949, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.060664s, Solving = 0.006139s, Total = 0.066803s, Memory = (RSS = 193.453125Mb, VMS = 182.558594Mb)
2 : Statistics :: Grounding = 0.046540s, Solving = 0.003739s, Total = 0.050279s, Memory = (RSS = 193.917969Mb, VMS = 183.042969Mb)
3 : Statistics :: Grounding = 0.052251s, Solving = 0.005124s, Total = 0.057375s, Memory = (RSS = 194.769531Mb, VMS = 184.296875Mb)
4 : Statistics :: Grounding = 0.055059s, Solving = 0.005806s, Total = 0.060864s, Memory = (RSS = 195.984375Mb, VMS = 185.691406Mb)
5 : Statistics :: Grounding = 0.061839s, Solving = 0.006029s, Total = 0.067868s, Memory = (RSS = 197.746094Mb, VMS = 187.933594Mb)
6 : Statistics :: Grounding = 0.057888s, Solving = 0.007050s, Total = 0.064937s, Memory = (RSS = 199.136719Mb, VMS = 189.230469Mb)
7 : Statistics :: Grounding = 0.053023s, Solving = 0.007434s, Total = 0.060458s, Memory = (RSS = 201.820312Mb, VMS = 192.199219Mb)
8 : Statistics :: Grounding = 0.054785s, Solving = 0.008092s, Total = 0.062877s, Memory = (RSS = 203.164062Mb, VMS = 193.156250Mb)
9 : Statistics :: Grounding = 0.064915s, Solving = 0.011806s, Total = 0.076721s, Memory = (RSS = 206.457031Mb, VMS = 197.000000Mb)
10 : Statistics :: Grounding = 0.057662s, Solving = 0.009811s, Total = 0.067473s, Memory = (RSS = 207.156250Mb, VMS = 197.101562Mb)
11 : Statistics :: Grounding = 0.057979s, Solving = 0.012786s, Total = 0.070765s, Memory = (RSS = 208.546875Mb, VMS = 198.191406Mb)
12 : Statistics :: Grounding = 0.073578s, Solving = 0.017145s, Total = 0.090722s, Memory = (RSS = 213.921875Mb, VMS = 205.207031Mb)
13 : Statistics :: Grounding = 0.083491s, Solving = 0.024487s, Total = 0.107978s, Memory = (RSS = 215.406250Mb, VMS = 206.156250Mb)
14 : Statistics :: Grounding = 0.062043s, Solving = 0.038584s, Total = 0.100628s, Memory = (RSS = 216.800781Mb, VMS = 207.074219Mb)
15 : Statistics :: Grounding = 0.063807s, Solving = 0.059226s, Total = 0.123033s, Memory = (RSS = 218.722656Mb, VMS = 208.539062Mb)
16 : Statistics :: Grounding = 0.071995s, Solving = 0.095448s, Total = 0.167443s, Memory = (RSS = 220.718750Mb, VMS = 210.195312Mb)
17 : Statistics :: Grounding = 0.067282s, Solving = 0.206426s, Total = 0.273708s, Memory = (RSS = 228.093750Mb, VMS = 219.789062Mb)
18 : Statistics :: Grounding = 0.068612s, Solving = 0.118862s, Total = 0.187474s, Memory = (RSS = 229.964844Mb, VMS = 221.503906Mb)

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.757407s due to: Stop condition reached.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.113412s, Solving = 0.643995s, Total = 1.757407s, Memory = (RSS = 229.964844Mb, VMS = 221.503906Mb)), Calls = 18
Model :: Total atoms = 8949, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 18 :: Actions = 18                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room)
Step 2:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,6))
Step 3:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 4:
    Planned actions:
        talos : move(puzzle_room)
Step 5:
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 6:
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 7:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,3))
Step 8:
    Planned actions:
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 9:
    Planned actions:
        talos : put(manipulator_arm_2,(block,3),puzzle_room_table)
Step 10:
    Planned actions:
        talos : release(manipulator_arm_1,(block,5))
Step 11:
    Planned actions:
        talos : release(manipulator_arm_2,(block,3))
Step 12:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 13:
    Planned actions:
        talos : put(manipulator_arm_2,(block,4),(block,5))
Step 14:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
Step 15:
    Planned actions:
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 16:
    Planned actions:
        talos : release(manipulator_arm_1,(block,2))
Step 17:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
Step 18:
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=18, step_range=range(0, 19)

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 0, Actions = 0
Level [2]: Length = 0, Actions = 0
Level [3]: Length = 18, Actions = 18

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  3 (classic), Length =  18, Actions =  18 (Com = 1.00), Sgs = 18, Time =   3.464s (Gro =   2.274s, Sea =   1.190s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))

[13-11-2021_23-07-32] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=18, start_step=0, blend=Blend(left=0, right=0)

[13-11-2021_23-07-32] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=9, large_group_size=10

[13-11-2021_23-07-32] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=9, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  3 (classic), Length =  18, Actions =  18 (Com = 1.00), Sgs = 18, Time =   3.464s (Gro =   2.274s, Sea =   1.190s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 9, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning at level 2 for problem 1:
Divided plan : Level =  3 (classic), Length =  18, Actions =  18 (Com = 1.00), Sgs = 18, Time =   3.464s (Gro =   2.274s, Sea =   1.190s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 9, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-9]

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [1-9], problem number = 1, increment number = 1

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 9)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 9
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 8

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [2] : Concurrency disabled : Problem type = partial conformance refinement (sequential) with sgoals range [1-9] : Minimum search length bound = disabled with value = 8

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = True, chosen = True

[13-11-2021_23-07-32] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-11-2021_23-07-32] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete(blue), false, 0).
holds(2, complete(red), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), puzzle_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), true, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), (block,2), 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1)), true, 0).
holds(2, tower_base((block,2)), true, 0).
holds(2, tower_base((block,3)), false, 0).
holds(2, tower_base((block,4)), false, 0).
holds(2, tower_base((block,5)), false, 0).
holds(2, tower_base((block,6)), false, 0).
holds(2, unordered_tower((block,1)), true, 0).
holds(2, unordered_tower((block,2)), true, 0).
holds(2, unordered_tower((block,3)), false, 0).
holds(2, unordered_tower((block,4)), false, 0).
holds(2, unordered_tower((block,5)), false, 0).
holds(2, unordered_tower((block,6)), false, 0).
holds(3, complete(blue), false, 0).
holds(3, complete(red), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), puzzle_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), true, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), (block,2), 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, tower_base((block,1)), true, 0).
holds(3, tower_base((block,2)), true, 0).
holds(3, tower_base((block,3)), false, 0).
holds(3, tower_base((block,4)), false, 0).
holds(3, tower_base((block,5)), false, 0).
holds(3, tower_base((block,6)), false, 0).
holds(3, unordered_tower((block,1)), true, 0).
holds(3, unordered_tower((block,2)), true, 0).
holds(3, unordered_tower((block,3)), false, 0).
holds(3, unordered_tower((block,4)), false, 0).
holds(3, unordered_tower((block,5)), false, 0).
holds(3, unordered_tower((block,6)), false, 0).

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).
final_goal(3, complete(blue), false, false).
final_goal(3, complete(blue), true, true).
final_goal(3, complete(red), false, false).
final_goal(3, complete(red), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1)), false, true).
final_goal(3, tower_base((block,1)), true, false).
final_goal(3, tower_base((block,2)), false, true).
final_goal(3, tower_base((block,2)), true, false).
final_goal(3, tower_base((block,3)), false, false).
final_goal(3, tower_base((block,3)), true, true).
final_goal(3, tower_base((block,4)), false, true).
final_goal(3, tower_base((block,4)), true, false).
final_goal(3, tower_base((block,5)), false, true).
final_goal(3, tower_base((block,5)), true, false).
final_goal(3, tower_base((block,6)), false, false).
final_goal(3, tower_base((block,6)), true, true).
final_goal(3, unordered_tower((block,1)), false, true).
final_goal(3, unordered_tower((block,1)), true, false).
final_goal(3, unordered_tower((block,2)), false, true).
final_goal(3, unordered_tower((block,2)), true, false).
final_goal(3, unordered_tower((block,3)), false, true).
final_goal(3, unordered_tower((block,3)), true, false).
final_goal(3, unordered_tower((block,4)), false, true).
final_goal(3, unordered_tower((block,4)), true, false).
final_goal(3, unordered_tower((block,5)), false, true).
final_goal(3, unordered_tower((block,5)), true, false).
final_goal(3, unordered_tower((block,6)), false, true).
final_goal(3, unordered_tower((block,6)), true, false).

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 3})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 4})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 5})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,3)', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 9})

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 9 rules into program part base:

sub_goal(3, talos, move(store_room), in(talos), store_room, 1).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 2).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 3).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 4).
sub_goal(3, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 5).
sub_goal(3, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 6).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), (block,3), 7).
sub_goal(3, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 8).
sub_goal(3, talos, put(manipulator_arm_2,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 9).

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x00000162C3FD9D30>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 'none', 'sequential', 'true'), range_=None)]

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 786 rules

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005039499999998753s

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026528s.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005450s with result Satisfiable.

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000162CF3B89A0>

[13-11-2021_23-07-32] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 0)
	('last_sgoals', 9)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000162CF3B89A0>)

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.095334s.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010062s with result Unsatisfiable.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10539650000000123, Incremental time limit = None
Running cumulative time = 0.10539650000000123, Cumulative time limit = 3600
Used memory = (RSS = 196.101562Mb, VMS = 187.085938Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.09533449999999988, solving_time=0.010062000000001348, total_time=0.10539650000000123, memory=Memory(rss=196.1015625, vms=187.0859375), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09533449999999988, solving_time=0.010062000000001348, total_time=0.10539650000000123, memory=Memory(rss=196.1015625, vms=187.0859375), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 8375.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16636.0, 'bodies_tr': 16636.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 227.0, 'count_bodies_tr': 227.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 302.0, 'rules': 34554.0, 'rules_normal': 34210.0, 'rules_choice': 331.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 34550.0, 'rules_tr_normal': 34210.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 14398.0, 'eqs_atom': 3427.0, 'eqs_body': 1150.0, 'eqs_other': 9821.0}, 'lpStep': {'atoms': 3887.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15460.0, 'bodies_tr': 15460.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 227.0, 'count_bodies_tr': 227.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 302.0, 'rules': 29707.0, 'rules_normal': 29363.0, 'rules_choice': 331.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 29703.0, 'rules_tr_normal': 29363.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 8264.0, 'eqs_atom': 1146.0, 'eqs_body': 385.0, 'eqs_other': 6733.0}, 'generator': {'vars': 1562.0, 'vars_eliminated': 0.0, 'vars_frozen': 1076.0, 'constraints': 30.0, 'constraints_binary': 783.0, 'constraints_ternary': 98.0, 'acyc_edges': 0.0, 'complexity': 925.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 92.0, 'guiding_paths': 4.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.10471916198730469, 'cpu': 0.109375, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.14159584045410156, 'cpu': 0.15625, 'solve': 0.0049915313720703125, 'unsat': 0.001995086669921875, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 4.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 100.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.072814s.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.056276s with result Satisfiable.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12908999999999793, Incremental time limit = None
Running cumulative time = 0.23448649999999915, Cumulative time limit = 3600
Used memory = (RSS = 198.132812Mb, VMS = 189.921875Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.168148s, Solving = 0.066338s, Total = 0.234486s, Memory = (RSS = 198.132812Mb, VMS = 189.921875Mb)), Calls = 2
Final Model :: Total atoms = 3939, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.1681480999999998, solving_time=0.06633839999999935, total_time=0.23448649999999915, memory=Memory(rss=198.1328125, vms=189.921875), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07281359999999992, solving_time=0.056276399999998006, total_time=0.12908999999999793, memory=Memory(rss=198.1328125, vms=189.921875), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 10058.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 29957.0, 'bodies_tr': 29957.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 408.0, 'count_bodies_tr': 408.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 354.0, 'rules': 59955.0, 'rules_normal': 59446.0, 'rules_choice': 483.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 59939.0, 'rules_tr_normal': 59446.0, 'rules_tr_choice': 483.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 17545.0, 'eqs_atom': 4143.0, 'eqs_body': 1594.0, 'eqs_other': 11808.0}, 'lpStep': {'atoms': 1683.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13321.0, 'bodies_tr': 13321.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 52.0, 'rules': 25401.0, 'rules_normal': 25236.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 25389.0, 'rules_tr_normal': 25236.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3147.0, 'eqs_atom': 716.0, 'eqs_body': 444.0, 'eqs_other': 1987.0}, 'generator': {'vars': 1705.0, 'vars_eliminated': 0.0, 'vars_frozen': 1209.0, 'constraints': 76.0, 'constraints_binary': 1398.0, 'constraints_ternary': 146.0, 'acyc_edges': 0.0, 'complexity': 1652.0}}, 'solving': {'solvers': {'choices': 228.0, 'conflicts': 17.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 52.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 23.0, 'integrated': 65.0, 'lemmas': 65.0, 'lits_learnt': 72.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 44.0, 'integrated_jumps': 84.0, 'guiding_paths_lits': 272.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 4.0, 'lemmas_other': 44.0, 'lits_conflict': 17.0, 'lits_loop': 11.0, 'lits_other': 44.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 0.0, 'levels': 17.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.12980270385742188, 'cpu': 0.125, 'solve': 0.0500335693359375, 'unsat': 0.0, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.27139854431152344, 'cpu': 0.28125, 'solve': 0.05502510070800781, 'unsat': 0.001995086669921875, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 228.0, 'conflicts': 17.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 53.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 23.0, 'integrated': 65.0, 'lemmas': 69.0, 'lits_learnt': 76.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 44.0, 'integrated_jumps': 84.0, 'guiding_paths_lits': 372.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 8.0, 'lemmas_other': 44.0, 'lits_conflict': 17.0, 'lits_loop': 15.0, 'lits_other': 44.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 0.0, 'levels': 17.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2}

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 2 ( 22.22% solved)

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None)

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 2]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 2)

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 2:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.067117s.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 3: original = External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None), conversion = current_last_sgoals(2,2).

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005957s with result Unsatisfiable.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.07307420000000064, Incremental time limit = None
Running cumulative time = 0.3075606999999998, Cumulative time limit = 3600
Used memory = (RSS = 198.558594Mb, VMS = 190.429688Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.23526520000000062, solving_time=0.07229549999999918, total_time=0.3075606999999998, memory=Memory(rss=198.55859375, vms=190.4296875), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.06711710000000082, solving_time=0.005957099999999826, total_time=0.07307420000000064, memory=Memory(rss=198.55859375, vms=190.4296875), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 11928.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 43371.0, 'bodies_tr': 43371.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 589.0, 'count_bodies_tr': 589.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 430.0, 'rules': 85657.0, 'rules_normal': 84983.0, 'rules_choice': 635.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 85629.0, 'rules_tr_normal': 84983.0, 'rules_tr_choice': 635.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 21682.0, 'eqs_atom': 5033.0, 'eqs_body': 2044.0, 'eqs_other': 14605.0}, 'lpStep': {'atoms': 1870.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13414.0, 'bodies_tr': 13414.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 8.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 76.0, 'rules': 25702.0, 'rules_normal': 25537.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 25690.0, 'rules_tr_normal': 25537.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4137.0, 'eqs_atom': 890.0, 'eqs_body': 450.0, 'eqs_other': 2797.0}, 'generator': {'vars': 1969.0, 'vars_eliminated': 0.0, 'vars_frozen': 1407.0, 'constraints': 133.0, 'constraints_binary': 2296.0, 'constraints_ternary': 165.0, 'acyc_edges': 0.0, 'complexity': 2656.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 2.0, 'lits_learnt': 10.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 270.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 2.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 10.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.07403945922851562, 'cpu': 0.078125, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.34543800354003906, 'cpu': 0.359375, 'solve': 0.057018280029296875, 'unsat': 0.0039882659912109375, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 228.0, 'conflicts': 23.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 53.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 23.0, 'integrated': 65.0, 'lemmas': 71.0, 'lits_learnt': 86.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 44.0, 'integrated_jumps': 84.0, 'guiding_paths_lits': 642.0, 'guiding_paths': 26.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 10.0, 'lemmas_other': 44.0, 'lits_conflict': 17.0, 'lits_loop': 25.0, 'lits_other': 44.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 0.0, 'levels': 17.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 3:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.074091s.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017473s with result Satisfiable.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09156330000000068, Incremental time limit = None
Running cumulative time = 0.3991240000000005, Cumulative time limit = 3600
Used memory = (RSS = 200.992188Mb, VMS = 192.734375Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.309356s, Solving = 0.089768s, Total = 0.399124s, Memory = (RSS = 200.992188Mb, VMS = 192.734375Mb)), Calls = 4
Final Model :: Total atoms = 4604, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.3093558999999999, solving_time=0.08976810000000057, total_time=0.3991240000000005, memory=Memory(rss=200.9921875, vms=192.734375), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07409069999999929, solving_time=0.017472600000001393, total_time=0.09156330000000068, memory=Memory(rss=200.9921875, vms=192.734375), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 13910.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 57208.0, 'bodies_tr': 57208.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 770.0, 'count_bodies_tr': 770.0, 'sccs': 54.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 658.0, 'rules': 111877.0, 'rules_normal': 111038.0, 'rules_choice': 787.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 48.0, 'rules_tr': 111845.0, 'rules_tr_normal': 111038.0, 'rules_tr_choice': 787.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 26152.0, 'eqs_atom': 5910.0, 'eqs_body': 2283.0, 'eqs_other': 17959.0}, 'lpStep': {'atoms': 1982.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13837.0, 'bodies_tr': 13837.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 228.0, 'rules': 26220.0, 'rules_normal': 26055.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26216.0, 'rules_tr_normal': 26055.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 4470.0, 'eqs_atom': 877.0, 'eqs_body': 239.0, 'eqs_other': 3354.0}, 'generator': {'vars': 2945.0, 'vars_eliminated': 0.0, 'vars_frozen': 2062.0, 'constraints': 392.0, 'constraints_binary': 9795.0, 'constraints_ternary': 1002.0, 'acyc_edges': 0.0, 'complexity': 11305.0}}, 'solving': {'solvers': {'choices': 267.0, 'conflicts': 66.0, 'conflicts_analyzed': 66.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 37.0, 'models': 1.0, 'models_level': 86.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 55.0, 'distributed_sum_lbd': 72.0, 'integrated': 221.0, 'lemmas': 301.0, 'lits_learnt': 783.0, 'lemmas_binary': 17.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.03125, 'integrated_imps': 153.0, 'integrated_jumps': 4.0, 'guiding_paths_lits': 448.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 53.0, 'lemmas_loop': 79.0, 'lemmas_other': 169.0, 'lits_conflict': 101.0, 'lits_loop': 379.0, 'lits_other': 303.0, 'jumps': {'jumps': 66.0, 'jumps_bounded': 35.0, 'levels': 1206.0, 'levels_bounded': 1135.0, 'max': 57.0, 'max_executed': 57.0, 'max_bounded': 56.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.09196090698242188, 'cpu': 0.109375, 'solve': 0.010023117065429688, 'unsat': 0.0, 'sat': 0.0019931793212890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.43739891052246094, 'cpu': 0.46875, 'solve': 0.06704139709472656, 'unsat': 0.0039882659912109375, 'sat': 0.00399017333984375}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 495.0, 'conflicts': 89.0, 'conflicts_analyzed': 83.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 37.0, 'models': 3.0, 'models_level': 139.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 75.0, 'distributed_sum_lbd': 95.0, 'integrated': 286.0, 'lemmas': 372.0, 'lits_learnt': 869.0, 'lemmas_binary': 20.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.09375, 'integrated_imps': 197.0, 'integrated_jumps': 88.0, 'guiding_paths_lits': 1090.0, 'guiding_paths': 34.0, 'splits': 0.0, 'lemmas_conflict': 70.0, 'lemmas_loop': 89.0, 'lemmas_other': 213.0, 'lits_conflict': 118.0, 'lits_loop': 404.0, 'lits_other': 347.0, 'jumps': {'jumps': 83.0, 'jumps_bounded': 35.0, 'levels': 1223.0, 'levels_bounded': 1135.0, 'max': 57.0, 'max_executed': 57.0, 'max_bounded': 56.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4}

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 3 ( 33.33% solved)

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 4)', truth=True, inc_range=None)

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 4]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 3)

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 4:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.072293s.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 5: original = External(symbol='current_last_sgoals(3, 4)', truth=True, inc_range=None), conversion = current_last_sgoals(3,4).

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009348s with result Unsatisfiable.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08164120000000352, Incremental time limit = None
Running cumulative time = 0.480765200000004, Cumulative time limit = 3600
Used memory = (RSS = 203.617188Mb, VMS = 196.003906Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.381649000000003, solving_time=0.09911620000000099, total_time=0.480765200000004, memory=Memory(rss=203.6171875, vms=196.00390625), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07229310000000311, solving_time=0.009348100000000414, total_time=0.08164120000000352, memory=Memory(rss=203.6171875, vms=196.00390625), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 16021.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71159.0, 'bodies_tr': 71159.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 951.0, 'count_bodies_tr': 951.0, 'sccs': 74.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 886.0, 'rules': 138248.0, 'rules_normal': 137244.0, 'rules_choice': 939.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 60.0, 'rules_tr': 138212.0, 'rules_tr_normal': 137244.0, 'rules_tr_choice': 939.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 24.0, 'eqs': 30883.0, 'eqs_atom': 6817.0, 'eqs_body': 2557.0, 'eqs_other': 21509.0}, 'lpStep': {'atoms': 2111.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13951.0, 'bodies_tr': 13951.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 228.0, 'rules': 26371.0, 'rules_normal': 26206.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26367.0, 'rules_tr_normal': 26206.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 4731.0, 'eqs_atom': 907.0, 'eqs_body': 274.0, 'eqs_other': 3550.0}, 'generator': {'vars': 3913.0, 'vars_eliminated': 0.0, 'vars_frozen': 2711.0, 'constraints': 454.0, 'constraints_binary': 11296.0, 'constraints_ternary': 1161.0, 'acyc_edges': 0.0, 'complexity': 13045.0}}, 'solving': {'solvers': {'choices': 14.0, 'conflicts': 22.0, 'conflicts_analyzed': 14.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 14.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 28.0, 'integrated': 21.0, 'lemmas': 35.0, 'lits_learnt': 175.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 21.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 469.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 14.0, 'lemmas_loop': 0.0, 'lemmas_other': 21.0, 'lits_conflict': 70.0, 'lits_loop': 0.0, 'lits_other': 105.0, 'jumps': {'jumps': 14.0, 'jumps_bounded': 14.0, 'levels': 28.0, 'levels_bounded': 14.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.08278083801269531, 'cpu': 0.09375, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5201797485351562, 'cpu': 0.5625, 'solve': 0.06903648376464844, 'unsat': 0.0059833526611328125, 'sat': 0.00399017333984375}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 509.0, 'conflicts': 111.0, 'conflicts_analyzed': 97.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 51.0, 'models': 3.0, 'models_level': 139.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 89.0, 'distributed_sum_lbd': 123.0, 'integrated': 307.0, 'lemmas': 407.0, 'lits_learnt': 1044.0, 'lemmas_binary': 20.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.09375, 'integrated_imps': 218.0, 'integrated_jumps': 88.0, 'guiding_paths_lits': 1559.0, 'guiding_paths': 41.0, 'splits': 0.0, 'lemmas_conflict': 84.0, 'lemmas_loop': 89.0, 'lemmas_other': 234.0, 'lits_conflict': 188.0, 'lits_loop': 404.0, 'lits_other': 452.0, 'jumps': {'jumps': 97.0, 'jumps_bounded': 49.0, 'levels': 1251.0, 'levels_bounded': 1149.0, 'max': 57.0, 'max_executed': 57.0, 'max_bounded': 56.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 5:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.074307s.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022078s with result Satisfiable.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.0963852999999979, Incremental time limit = None
Running cumulative time = 0.5771505000000019, Cumulative time limit = 3600
Used memory = (RSS = 205.625000Mb, VMS = 197.230469Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.455956s, Solving = 0.121194s, Total = 0.577151s, Memory = (RSS = 205.625000Mb, VMS = 197.230469Mb)), Calls = 6
Final Model :: Total atoms = 5271, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.4559562000000028, solving_time=0.12119429999999909, total_time=0.5771505000000019, memory=Memory(rss=205.625, vms=197.23046875), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.0743071999999998, solving_time=0.022078099999998102, total_time=0.0963852999999979, memory=Memory(rss=205.625, vms=197.23046875), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 18134.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 85465.0, 'bodies_tr': 85465.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1132.0, 'count_bodies_tr': 1132.0, 'sccs': 94.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1132.0, 'rules': 165074.0, 'rules_normal': 163905.0, 'rules_choice': 1091.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 165034.0, 'rules_tr_normal': 163905.0, 'rules_tr_choice': 1091.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 32.0, 'eqs': 36047.0, 'eqs_atom': 7805.0, 'eqs_body': 2813.0, 'eqs_other': 25429.0}, 'lpStep': {'atoms': 2113.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14306.0, 'bodies_tr': 14306.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 246.0, 'rules': 26826.0, 'rules_normal': 26661.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26822.0, 'rules_tr_normal': 26661.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 5164.0, 'eqs_atom': 988.0, 'eqs_body': 256.0, 'eqs_other': 3920.0}, 'generator': {'vars': 5076.0, 'vars_eliminated': 0.0, 'vars_frozen': 3442.0, 'constraints': 740.0, 'constraints_binary': 21186.0, 'constraints_ternary': 2260.0, 'acyc_edges': 0.0, 'complexity': 24374.0}}, 'solving': {'solvers': {'choices': 515.0, 'conflicts': 163.0, 'conflicts_analyzed': 163.0, 'restarts': 0.0, 'restarts_last': 22.0, 'extra': {'domain_choices': 103.0, 'models': 1.0, 'models_level': 125.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 159.0, 'distributed_sum_lbd': 281.0, 'integrated': 786.0, 'lemmas': 1149.0, 'lits_learnt': 7447.0, 'lemmas_binary': 14.0, 'lemmas_ternary': 7.0, 'cpu_time': 0.015625, 'integrated_imps': 629.0, 'integrated_jumps': 36.0, 'guiding_paths_lits': 546.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 155.0, 'lemmas_loop': 226.0, 'lemmas_other': 768.0, 'lits_conflict': 936.0, 'lits_loop': 1075.0, 'lits_other': 5436.0, 'jumps': {'jumps': 163.0, 'jumps_bounded': 102.0, 'levels': 2595.0, 'levels_bounded': 2412.0, 'max': 79.0, 'max_executed': 79.0, 'max_bounded': 78.0}}}}, 'summary': {'call': 6.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.09724617004394531, 'cpu': 0.09375, 'solve': 0.013963699340820312, 'unsat': 0.0, 'sat': 0.002994537353515625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6174259185791016, 'cpu': 0.65625, 'solve': 0.08300018310546875, 'unsat': 0.0059833526611328125, 'sat': 0.006984710693359375}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1024.0, 'conflicts': 274.0, 'conflicts_analyzed': 260.0, 'restarts': 0.0, 'restarts_last': 22.0, 'extra': {'domain_choices': 154.0, 'models': 4.0, 'models_level': 264.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 248.0, 'distributed_sum_lbd': 404.0, 'integrated': 1093.0, 'lemmas': 1556.0, 'lits_learnt': 8491.0, 'lemmas_binary': 34.0, 'lemmas_ternary': 9.0, 'cpu_time': 0.109375, 'integrated_imps': 847.0, 'integrated_jumps': 124.0, 'guiding_paths_lits': 2105.0, 'guiding_paths': 48.0, 'splits': 0.0, 'lemmas_conflict': 239.0, 'lemmas_loop': 315.0, 'lemmas_other': 1002.0, 'lits_conflict': 1124.0, 'lits_loop': 1479.0, 'lits_other': 5888.0, 'jumps': {'jumps': 260.0, 'jumps_bounded': 151.0, 'levels': 3846.0, 'levels_bounded': 3561.0, 'max': 79.0, 'max_executed': 79.0, 'max_bounded': 78.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 6}

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 4 ( 44.44% solved)

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 6)', truth=True, inc_range=None)

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 6]:
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 4)

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 6:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.079627s.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 7: original = External(symbol='current_last_sgoals(4, 6)', truth=True, inc_range=None), conversion = current_last_sgoals(4,6).

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015501s with result Unsatisfiable.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09512810000000016, Incremental time limit = None
Running cumulative time = 0.6722786000000021, Cumulative time limit = 3600
Used memory = (RSS = 210.476562Mb, VMS = 202.242188Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5355831000000038, solving_time=0.1366954999999983, total_time=0.6722786000000021, memory=Memory(rss=210.4765625, vms=202.2421875), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07962690000000094, solving_time=0.015501199999999216, total_time=0.09512810000000016, memory=Memory(rss=210.4765625, vms=202.2421875), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 20277.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 100117.0, 'bodies_tr': 100117.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1313.0, 'count_bodies_tr': 1313.0, 'sccs': 114.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1568.0, 'rules': 192283.0, 'rules_normal': 190949.0, 'rules_choice': 1243.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 84.0, 'rules_tr': 192243.0, 'rules_tr_normal': 190949.0, 'rules_tr_choice': 1243.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 44.0, 'eqs': 40513.0, 'eqs_atom': 8761.0, 'eqs_body': 2932.0, 'eqs_other': 28820.0}, 'lpStep': {'atoms': 2143.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14652.0, 'bodies_tr': 14652.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27209.0, 'rules_normal': 27044.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27209.0, 'rules_tr_normal': 27044.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 4466.0, 'eqs_atom': 956.0, 'eqs_body': 119.0, 'eqs_other': 3391.0}, 'generator': {'vars': 6756.0, 'vars_eliminated': 0.0, 'vars_frozen': 4517.0, 'constraints': 1053.0, 'constraints_binary': 34108.0, 'constraints_ternary': 3638.0, 'acyc_edges': 0.0, 'complexity': 39049.0}}, 'solving': {'solvers': {'choices': 111.0, 'conflicts': 116.0, 'conflicts_analyzed': 110.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 65.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 102.0, 'distributed_sum_lbd': 223.0, 'integrated': 372.0, 'lemmas': 353.0, 'lits_learnt': 2882.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.0, 'integrated_imps': 98.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 445.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 102.0, 'lemmas_loop': 70.0, 'lemmas_other': 181.0, 'lits_conflict': 934.0, 'lits_loop': 672.0, 'lits_other': 1276.0, 'jumps': {'jumps': 110.0, 'jumps_bounded': 24.0, 'levels': 486.0, 'levels_bounded': 376.0, 'max': 90.0, 'max_executed': 90.0, 'max_bounded': 89.0}}}}, 'summary': {'call': 7.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.09625053405761719, 'cpu': 0.09375, 'solve': 0.0049877166748046875, 'unsat': 0.0049877166748046875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.7136764526367188, 'cpu': 0.75, 'solve': 0.08798789978027344, 'unsat': 0.0109710693359375, 'sat': 0.006984710693359375}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1135.0, 'conflicts': 390.0, 'conflicts_analyzed': 370.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 219.0, 'models': 4.0, 'models_level': 264.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 350.0, 'distributed_sum_lbd': 627.0, 'integrated': 1465.0, 'lemmas': 1909.0, 'lits_learnt': 11373.0, 'lemmas_binary': 46.0, 'lemmas_ternary': 19.0, 'cpu_time': 0.109375, 'integrated_imps': 945.0, 'integrated_jumps': 125.0, 'guiding_paths_lits': 2550.0, 'guiding_paths': 53.0, 'splits': 0.0, 'lemmas_conflict': 341.0, 'lemmas_loop': 385.0, 'lemmas_other': 1183.0, 'lits_conflict': 2058.0, 'lits_loop': 2151.0, 'lits_other': 7164.0, 'jumps': {'jumps': 370.0, 'jumps_bounded': 175.0, 'levels': 4332.0, 'levels_bounded': 3937.0, 'max': 90.0, 'max_executed': 90.0, 'max_bounded': 89.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.079265s.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019643s with result Unsatisfiable.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.0989077000000016, Incremental time limit = None
Running cumulative time = 0.7711863000000037, Cumulative time limit = 3600
Used memory = (RSS = 216.171875Mb, VMS = 208.941406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.6148476000000045, solving_time=0.15633869999999916, total_time=0.7711863000000037, memory=Memory(rss=216.171875, vms=208.94140625), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07926450000000074, solving_time=0.01964320000000086, total_time=0.0989077000000016, memory=Memory(rss=216.171875, vms=208.94140625), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 22539.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 115088.0, 'bodies_tr': 115088.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1494.0, 'count_bodies_tr': 1494.0, 'sccs': 134.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2004.0, 'rules': 219912.0, 'rules_normal': 218413.0, 'rules_choice': 1395.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 96.0, 'rules_tr': 219872.0, 'rules_tr_normal': 218413.0, 'rules_tr_choice': 1395.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 56.0, 'eqs': 45335.0, 'eqs_atom': 9808.0, 'eqs_body': 3045.0, 'eqs_other': 32482.0}, 'lpStep': {'atoms': 2262.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14971.0, 'bodies_tr': 14971.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27629.0, 'rules_normal': 27464.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27629.0, 'rules_tr_normal': 27464.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 4822.0, 'eqs_atom': 1047.0, 'eqs_body': 113.0, 'eqs_other': 3662.0}, 'generator': {'vars': 8499.0, 'vars_eliminated': 0.0, 'vars_frozen': 5608.0, 'constraints': 1528.0, 'constraints_binary': 49947.0, 'constraints_ternary': 5663.0, 'acyc_edges': 0.0, 'complexity': 57458.0}}, 'solving': {'solvers': {'choices': 433.0, 'conflicts': 269.0, 'conflicts_analyzed': 262.0, 'restarts': 0.0, 'restarts_last': 44.0, 'extra': {'domain_choices': 261.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 240.0, 'distributed_sum_lbd': 583.0, 'integrated': 1408.0, 'lemmas': 2136.0, 'lits_learnt': 19386.0, 'lemmas_binary': 159.0, 'lemmas_ternary': 65.0, 'cpu_time': 0.125, 'integrated_imps': 633.0, 'integrated_jumps': 145.0, 'guiding_paths_lits': 700.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 247.0, 'lemmas_loop': 588.0, 'lemmas_other': 1301.0, 'lits_conflict': 2495.0, 'lits_loop': 4556.0, 'lits_other': 12335.0, 'jumps': {'jumps': 262.0, 'jumps_bounded': 87.0, 'levels': 573.0, 'levels_bounded': 285.0, 'max': 101.0, 'max_executed': 101.0, 'max_bounded': 100.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.10073280334472656, 'cpu': 0.21875, 'solve': 0.009973526000976562, 'unsat': 0.009973526000976562, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8144092559814453, 'cpu': 0.96875, 'solve': 0.09796142578125, 'unsat': 0.020944595336914062, 'sat': 0.006984710693359375}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1568.0, 'conflicts': 659.0, 'conflicts_analyzed': 632.0, 'restarts': 0.0, 'restarts_last': 44.0, 'extra': {'domain_choices': 480.0, 'models': 4.0, 'models_level': 264.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 590.0, 'distributed_sum_lbd': 1210.0, 'integrated': 2873.0, 'lemmas': 4045.0, 'lits_learnt': 30759.0, 'lemmas_binary': 205.0, 'lemmas_ternary': 84.0, 'cpu_time': 0.234375, 'integrated_imps': 1578.0, 'integrated_jumps': 270.0, 'guiding_paths_lits': 3250.0, 'guiding_paths': 60.0, 'splits': 0.0, 'lemmas_conflict': 588.0, 'lemmas_loop': 973.0, 'lemmas_other': 2484.0, 'lits_conflict': 4553.0, 'lits_loop': 6707.0, 'lits_other': 19499.0, 'jumps': {'jumps': 632.0, 'jumps_bounded': 262.0, 'levels': 4905.0, 'levels_bounded': 4222.0, 'max': 101.0, 'max_executed': 101.0, 'max_bounded': 100.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.088467s.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025703s with result Unsatisfiable.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.11417030000000139, Incremental time limit = None
Running cumulative time = 0.885356600000005, Cumulative time limit = 3600
Used memory = (RSS = 218.406250Mb, VMS = 210.183594Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.7033146000000059, solving_time=0.18204199999999915, total_time=0.885356600000005, memory=Memory(rss=218.40625, vms=210.18359375), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.0884670000000014, solving_time=0.025703299999999984, total_time=0.11417030000000139, memory=Memory(rss=218.40625, vms=210.18359375), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 24813.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 130083.0, 'bodies_tr': 130083.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1675.0, 'count_bodies_tr': 1675.0, 'sccs': 154.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2440.0, 'rules': 247602.0, 'rules_normal': 245938.0, 'rules_choice': 1547.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 247562.0, 'rules_tr_normal': 245938.0, 'rules_tr_choice': 1547.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 68.0, 'eqs': 50208.0, 'eqs_atom': 10863.0, 'eqs_body': 3160.0, 'eqs_other': 36185.0}, 'lpStep': {'atoms': 2274.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14995.0, 'bodies_tr': 14995.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27690.0, 'rules_normal': 27525.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27690.0, 'rules_tr_normal': 27525.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 4873.0, 'eqs_atom': 1055.0, 'eqs_body': 115.0, 'eqs_other': 3703.0}, 'generator': {'vars': 10249.0, 'vars_eliminated': 0.0, 'vars_frozen': 6703.0, 'constraints': 2004.0, 'constraints_binary': 66021.0, 'constraints_ternary': 7659.0, 'acyc_edges': 0.0, 'complexity': 76074.0}}, 'solving': {'solvers': {'choices': 624.0, 'conflicts': 352.0, 'conflicts_analyzed': 346.0, 'restarts': 0.0, 'restarts_last': 61.0, 'extra': {'domain_choices': 300.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 314.0, 'distributed_sum_lbd': 798.0, 'integrated': 1823.0, 'lemmas': 2397.0, 'lits_learnt': 25639.0, 'lemmas_binary': 170.0, 'lemmas_ternary': 91.0, 'cpu_time': 0.125, 'integrated_imps': 648.0, 'integrated_jumps': 228.0, 'guiding_paths_lits': 777.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 324.0, 'lemmas_loop': 510.0, 'lemmas_other': 1563.0, 'lits_conflict': 3872.0, 'lits_loop': 4066.0, 'lits_other': 17701.0, 'jumps': {'jumps': 346.0, 'jumps_bounded': 66.0, 'levels': 460.0, 'levels_bounded': 66.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 9.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.11571121215820312, 'cpu': 0.234375, 'solve': 0.0159759521484375, 'unsat': 0.0159759521484375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.9301204681396484, 'cpu': 1.203125, 'solve': 0.1139373779296875, 'unsat': 0.03692054748535156, 'sat': 0.006984710693359375}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2192.0, 'conflicts': 1011.0, 'conflicts_analyzed': 978.0, 'restarts': 0.0, 'restarts_last': 61.0, 'extra': {'domain_choices': 780.0, 'models': 4.0, 'models_level': 264.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 904.0, 'distributed_sum_lbd': 2008.0, 'integrated': 4696.0, 'lemmas': 6442.0, 'lits_learnt': 56398.0, 'lemmas_binary': 375.0, 'lemmas_ternary': 175.0, 'cpu_time': 0.359375, 'integrated_imps': 2226.0, 'integrated_jumps': 498.0, 'guiding_paths_lits': 4027.0, 'guiding_paths': 67.0, 'splits': 0.0, 'lemmas_conflict': 912.0, 'lemmas_loop': 1483.0, 'lemmas_other': 4047.0, 'lits_conflict': 8425.0, 'lits_loop': 10773.0, 'lits_other': 37200.0, 'jumps': {'jumps': 978.0, 'jumps_bounded': 328.0, 'levels': 5365.0, 'levels_bounded': 4288.0, 'max': 101.0, 'max_executed': 101.0, 'max_bounded': 100.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.079524s.

[13-11-2021_23-07-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046490s with result Satisfiable.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12601470000000248, Incremental time limit = None
Running cumulative time = 1.0113713000000075, Cumulative time limit = 3600
Used memory = (RSS = 225.937500Mb, VMS = 220.957031Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.782839s, Solving = 0.228532s, Total = 1.011371s, Memory = (RSS = 225.937500Mb, VMS = 220.957031Mb)), Calls = 10
Final Model :: Total atoms = 6606, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.7828390000000063, solving_time=0.22853230000000124, total_time=1.0113713000000075, memory=Memory(rss=225.9375, vms=220.95703125), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.07952440000000038, solving_time=0.046490300000002094, total_time=0.12601470000000248, memory=Memory(rss=225.9375, vms=220.95703125), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 27100.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 145103.0, 'bodies_tr': 145103.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1856.0, 'count_bodies_tr': 1856.0, 'sccs': 174.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2876.0, 'rules': 275354.0, 'rules_normal': 273525.0, 'rules_choice': 1699.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 120.0, 'rules_tr': 275314.0, 'rules_tr_normal': 273525.0, 'rules_tr_choice': 1699.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 80.0, 'eqs': 55133.0, 'eqs_atom': 11927.0, 'eqs_body': 3275.0, 'eqs_other': 39931.0}, 'lpStep': {'atoms': 2287.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15020.0, 'bodies_tr': 15020.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27752.0, 'rules_normal': 27587.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27752.0, 'rules_tr_normal': 27587.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 4925.0, 'eqs_atom': 1064.0, 'eqs_body': 115.0, 'eqs_other': 3746.0}, 'generator': {'vars': 12006.0, 'vars_eliminated': 0.0, 'vars_frozen': 7802.0, 'constraints': 2488.0, 'constraints_binary': 82342.0, 'constraints_ternary': 9629.0, 'acyc_edges': 0.0, 'complexity': 94919.0}}, 'solving': {'solvers': {'choices': 1478.0, 'conflicts': 443.0, 'conflicts_analyzed': 443.0, 'restarts': 1.0, 'restarts_last': 75.0, 'extra': {'domain_choices': 470.0, 'models': 1.0, 'models_level': 193.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 424.0, 'distributed_sum_lbd': 1138.0, 'integrated': 2546.0, 'lemmas': 3456.0, 'lits_learnt': 50920.0, 'lemmas_binary': 286.0, 'lemmas_ternary': 139.0, 'cpu_time': 0.25, 'integrated_imps': 723.0, 'integrated_jumps': 463.0, 'guiding_paths_lits': 854.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 436.0, 'lemmas_loop': 588.0, 'lemmas_other': 2432.0, 'lits_conflict': 7044.0, 'lits_loop': 4749.0, 'lits_other': 39127.0, 'jumps': {'jumps': 443.0, 'jumps_bounded': 67.0, 'levels': 831.0, 'levels_bounded': 309.0, 'max': 132.0, 'max_executed': 132.0, 'max_bounded': 122.0}}}}, 'summary': {'call': 10.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.1266613006591797, 'cpu': 0.34375, 'solve': 0.03590583801269531, 'unsat': 0.0, 'sat': 0.0269317626953125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.0567817687988281, 'cpu': 1.546875, 'solve': 0.1498432159423828, 'unsat': 0.03692054748535156, 'sat': 0.033916473388671875}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3670.0, 'conflicts': 1454.0, 'conflicts_analyzed': 1421.0, 'restarts': 1.0, 'restarts_last': 75.0, 'extra': {'domain_choices': 1250.0, 'models': 5.0, 'models_level': 457.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1328.0, 'distributed_sum_lbd': 3146.0, 'integrated': 7242.0, 'lemmas': 9898.0, 'lits_learnt': 107318.0, 'lemmas_binary': 661.0, 'lemmas_ternary': 314.0, 'cpu_time': 0.609375, 'integrated_imps': 2949.0, 'integrated_jumps': 961.0, 'guiding_paths_lits': 4881.0, 'guiding_paths': 74.0, 'splits': 0.0, 'lemmas_conflict': 1348.0, 'lemmas_loop': 2071.0, 'lemmas_other': 6479.0, 'lits_conflict': 15469.0, 'lits_loop': 15522.0, 'lits_other': 76327.0, 'jumps': {'jumps': 1421.0, 'jumps_bounded': 395.0, 'levels': 6196.0, 'levels_bounded': 4597.0, 'max': 132.0, 'max_executed': 132.0, 'max_bounded': 122.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 6, 4: 10}

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 5 ( 55.56% solved)

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 10)', truth=True, inc_range=None)

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 10]:
sub_goal(3, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 5)

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.083199s.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 11: original = External(symbol='current_last_sgoals(5, 10)', truth=True, inc_range=None), conversion = current_last_sgoals(5,10).

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015607s with result Unsatisfiable.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09880619999999851, Incremental time limit = None
Running cumulative time = 1.110177500000006, Cumulative time limit = 3600
Used memory = (RSS = 228.058594Mb, VMS = 222.136719Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.8660382000000055, solving_time=0.2441393000000005, total_time=1.110177500000006, memory=Memory(rss=228.05859375, vms=222.13671875), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08319919999999925, solving_time=0.01560699999999926, total_time=0.09880619999999851, memory=Memory(rss=228.05859375, vms=222.13671875), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 29401.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 160148.0, 'bodies_tr': 160148.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2037.0, 'count_bodies_tr': 2037.0, 'sccs': 194.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3312.0, 'rules': 303168.0, 'rules_normal': 301174.0, 'rules_choice': 1851.0, 'rules_minimize': 11.0, 'rules_acyc': 0.0, 'rules_heuristic': 132.0, 'rules_tr': 303128.0, 'rules_tr_normal': 301174.0, 'rules_tr_choice': 1851.0, 'rules_tr_minimize': 11.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 92.0, 'eqs': 60115.0, 'eqs_atom': 13001.0, 'eqs_body': 3392.0, 'eqs_other': 43722.0}, 'lpStep': {'atoms': 2301.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15045.0, 'bodies_tr': 15045.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27814.0, 'rules_normal': 27649.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27814.0, 'rules_tr_normal': 27649.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 4982.0, 'eqs_atom': 1074.0, 'eqs_body': 117.0, 'eqs_other': 3791.0}, 'generator': {'vars': 13769.0, 'vars_eliminated': 0.0, 'vars_frozen': 8905.0, 'constraints': 2969.0, 'constraints_binary': 98594.0, 'constraints_ternary': 11540.0, 'acyc_edges': 0.0, 'complexity': 113633.0}}, 'solving': {'solvers': {'choices': 32.0, 'conflicts': 26.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 17.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 13.0, 'distributed_sum_lbd': 26.0, 'integrated': 42.0, 'lemmas': 89.0, 'lits_learnt': 750.0, 'lemmas_binary': 15.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 10.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 798.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 64.0, 'lemmas_other': 12.0, 'lits_conflict': 230.0, 'lits_loop': 496.0, 'lits_other': 24.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 5.0, 'levels': 33.0, 'levels_bounded': 5.0, 'max': 4.0, 'max_executed': 4.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.1017303466796875, 'cpu': 0.09375, 'solve': 0.0049877166748046875, 'unsat': 0.0049877166748046875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.1585121154785156, 'cpu': 1.640625, 'solve': 0.1548309326171875, 'unsat': 0.04190826416015625, 'sat': 0.033916473388671875}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3702.0, 'conflicts': 1480.0, 'conflicts_analyzed': 1442.0, 'restarts': 1.0, 'restarts_last': 75.0, 'extra': {'domain_choices': 1267.0, 'models': 5.0, 'models_level': 457.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1341.0, 'distributed_sum_lbd': 3172.0, 'integrated': 7284.0, 'lemmas': 9987.0, 'lits_learnt': 108068.0, 'lemmas_binary': 676.0, 'lemmas_ternary': 314.0, 'cpu_time': 0.609375, 'integrated_imps': 2959.0, 'integrated_jumps': 961.0, 'guiding_paths_lits': 5679.0, 'guiding_paths': 80.0, 'splits': 0.0, 'lemmas_conflict': 1361.0, 'lemmas_loop': 2135.0, 'lemmas_other': 6491.0, 'lits_conflict': 15699.0, 'lits_loop': 16018.0, 'lits_other': 76351.0, 'jumps': {'jumps': 1442.0, 'jumps_bounded': 400.0, 'levels': 6229.0, 'levels_bounded': 4602.0, 'max': 132.0, 'max_executed': 132.0, 'max_bounded': 122.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.092211s.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.067027s with result Satisfiable.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15923819999999722, Incremental time limit = None
Running cumulative time = 1.2694157000000033, Cumulative time limit = 3600
Used memory = (RSS = 230.785156Mb, VMS = 223.691406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.958249s, Solving = 0.311167s, Total = 1.269416s, Memory = (RSS = 230.785156Mb, VMS = 223.691406Mb)), Calls = 12
Final Model :: Total atoms = 7277, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.9582490000000057, solving_time=0.3111666999999976, total_time=1.2694157000000033, memory=Memory(rss=230.78515625, vms=223.69140625), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09221080000000015, solving_time=0.06702739999999707, total_time=0.15923819999999722, memory=Memory(rss=230.78515625, vms=223.69140625), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 31711.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 175213.0, 'bodies_tr': 175213.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2218.0, 'count_bodies_tr': 2218.0, 'sccs': 214.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3748.0, 'rules': 331038.0, 'rules_normal': 328879.0, 'rules_choice': 2003.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 330998.0, 'rules_tr_normal': 328879.0, 'rules_tr_choice': 2003.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 104.0, 'eqs': 65141.0, 'eqs_atom': 14084.0, 'eqs_body': 3508.0, 'eqs_other': 47549.0}, 'lpStep': {'atoms': 2310.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15065.0, 'bodies_tr': 15065.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27870.0, 'rules_normal': 27705.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27870.0, 'rules_tr_normal': 27705.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5026.0, 'eqs_atom': 1083.0, 'eqs_body': 116.0, 'eqs_other': 3827.0}, 'generator': {'vars': 15534.0, 'vars_eliminated': 0.0, 'vars_frozen': 10008.0, 'constraints': 3454.0, 'constraints_binary': 115025.0, 'constraints_ternary': 13510.0, 'acyc_edges': 0.0, 'complexity': 132589.0}}, 'solving': {'solvers': {'choices': 1834.0, 'conflicts': 543.0, 'conflicts_analyzed': 543.0, 'restarts': 2.0, 'restarts_last': 102.0, 'extra': {'domain_choices': 878.0, 'models': 1.0, 'models_level': 226.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 514.0, 'distributed_sum_lbd': 1409.0, 'integrated': 3072.0, 'lemmas': 4128.0, 'lits_learnt': 64953.0, 'lemmas_binary': 390.0, 'lemmas_ternary': 189.0, 'cpu_time': 0.359375, 'integrated_imps': 698.0, 'integrated_jumps': 484.0, 'guiding_paths_lits': 1008.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 536.0, 'lemmas_loop': 648.0, 'lemmas_other': 2944.0, 'lits_conflict': 9389.0, 'lits_loop': 5373.0, 'lits_other': 50191.0, 'jumps': {'jumps': 543.0, 'jumps_bounded': 33.0, 'levels': 1080.0, 'levels_bounded': 319.0, 'max': 148.0, 'max_executed': 148.0, 'max_bounded': 144.0}}}}, 'summary': {'call': 12.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.16156768798828125, 'cpu': 0.453125, 'solve': 0.05684661865234375, 'unsat': 0.0, 'sat': 0.04288673400878906}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.3200798034667969, 'cpu': 2.09375, 'solve': 0.21167755126953125, 'unsat': 0.04190826416015625, 'sat': 0.07680320739746094}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 5536.0, 'conflicts': 2023.0, 'conflicts_analyzed': 1985.0, 'restarts': 3.0, 'restarts_last': 102.0, 'extra': {'domain_choices': 2145.0, 'models': 6.0, 'models_level': 683.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1855.0, 'distributed_sum_lbd': 4581.0, 'integrated': 10356.0, 'lemmas': 14115.0, 'lits_learnt': 173021.0, 'lemmas_binary': 1066.0, 'lemmas_ternary': 503.0, 'cpu_time': 0.96875, 'integrated_imps': 3657.0, 'integrated_jumps': 1445.0, 'guiding_paths_lits': 6687.0, 'guiding_paths': 87.0, 'splits': 0.0, 'lemmas_conflict': 1897.0, 'lemmas_loop': 2783.0, 'lemmas_other': 9435.0, 'lits_conflict': 25088.0, 'lits_loop': 21391.0, 'lits_other': 126542.0, 'jumps': {'jumps': 1985.0, 'jumps_bounded': 433.0, 'levels': 7309.0, 'levels_bounded': 4921.0, 'max': 148.0, 'max_executed': 148.0, 'max_bounded': 144.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 6, 4: 10, 5: 12}

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 6 ( 66.67% solved)

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 12)', truth=True, inc_range=None)

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 12]:
sub_goal(3, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 6)

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108390s.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 13: original = External(symbol='current_last_sgoals(6, 12)', truth=True, inc_range=None), conversion = current_last_sgoals(6,12).

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027843s with result Satisfiable.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1362325999999996, Incremental time limit = None
Running cumulative time = 1.4056483000000028, Cumulative time limit = 3600
Used memory = (RSS = 234.953125Mb, VMS = 226.617188Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.066639s, Solving = 0.339009s, Total = 1.405648s, Memory = (RSS = 234.953125Mb, VMS = 226.617188Mb)), Calls = 13
Final Model :: Total atoms = 7615, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.0666390000000057, solving_time=0.3390092999999972, total_time=1.4056483000000028, memory=Memory(rss=234.953125, vms=226.6171875), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10838999999999999, solving_time=0.027842599999999607, total_time=0.1362325999999996, memory=Memory(rss=234.953125, vms=226.6171875), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 34030.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 190297.0, 'bodies_tr': 190297.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2399.0, 'count_bodies_tr': 2399.0, 'sccs': 234.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4184.0, 'rules': 358963.0, 'rules_normal': 356639.0, 'rules_choice': 2155.0, 'rules_minimize': 13.0, 'rules_acyc': 0.0, 'rules_heuristic': 156.0, 'rules_tr': 358923.0, 'rules_tr_normal': 356639.0, 'rules_tr_choice': 2155.0, 'rules_tr_minimize': 13.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 116.0, 'eqs': 70215.0, 'eqs_atom': 15176.0, 'eqs_body': 3625.0, 'eqs_other': 51414.0}, 'lpStep': {'atoms': 2319.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15084.0, 'bodies_tr': 15084.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27925.0, 'rules_normal': 27760.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27925.0, 'rules_tr_normal': 27760.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5074.0, 'eqs_atom': 1092.0, 'eqs_body': 117.0, 'eqs_other': 3865.0}, 'generator': {'vars': 17299.0, 'vars_eliminated': 0.0, 'vars_frozen': 11111.0, 'constraints': 3938.0, 'constraints_binary': 131240.0, 'constraints_ternary': 15479.0, 'acyc_edges': 0.0, 'complexity': 151327.0}}, 'solving': {'solvers': {'choices': 631.0, 'conflicts': 4.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 11.0, 'models': 1.0, 'models_level': 245.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 6.0, 'lemmas': 113.0, 'lits_learnt': 790.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 5.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1085.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 107.0, 'lemmas_other': 5.0, 'lits_conflict': 2.0, 'lits_loop': 778.0, 'lits_other': 10.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 4.0, 'levels': 8.0, 'levels_bounded': 4.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 13.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.13962554931640625, 'cpu': 0.125, 'solve': 0.014957427978515625, 'unsat': 0.0, 'sat': 0.004985809326171875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.4597053527832031, 'cpu': 2.21875, 'solve': 0.22663497924804688, 'unsat': 0.04190826416015625, 'sat': 0.08178901672363281}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6167.0, 'conflicts': 2027.0, 'conflicts_analyzed': 1989.0, 'restarts': 3.0, 'restarts_last': 102.0, 'extra': {'domain_choices': 2156.0, 'models': 7.0, 'models_level': 928.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1856.0, 'distributed_sum_lbd': 4583.0, 'integrated': 10362.0, 'lemmas': 14228.0, 'lits_learnt': 173811.0, 'lemmas_binary': 1072.0, 'lemmas_ternary': 503.0, 'cpu_time': 0.96875, 'integrated_imps': 3662.0, 'integrated_jumps': 1445.0, 'guiding_paths_lits': 7772.0, 'guiding_paths': 94.0, 'splits': 0.0, 'lemmas_conflict': 1898.0, 'lemmas_loop': 2890.0, 'lemmas_other': 9440.0, 'lits_conflict': 25090.0, 'lits_loop': 22169.0, 'lits_other': 126552.0, 'jumps': {'jumps': 1989.0, 'jumps_bounded': 437.0, 'levels': 7317.0, 'levels_bounded': 4925.0, 'max': 148.0, 'max_executed': 148.0, 'max_bounded': 144.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 6, 4: 10, 5: 12, 6: 13}

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 7 ( 77.78% solved)

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 13)', truth=True, inc_range=None)

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 13]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), (block,3), 7)

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.104023s.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 14: original = External(symbol='current_last_sgoals(7, 13)', truth=True, inc_range=None), conversion = current_last_sgoals(7,13).

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027880s with result Satisfiable.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13190290000000005, Incremental time limit = None
Running cumulative time = 1.537551200000003, Cumulative time limit = 3600
Used memory = (RSS = 246.308594Mb, VMS = 241.035156Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.170662s, Solving = 0.366889s, Total = 1.537551s, Memory = (RSS = 246.308594Mb, VMS = 241.035156Mb)), Calls = 14
Final Model :: Total atoms = 7954, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.170662200000006, solving_time=0.3668889999999969, total_time=1.537551200000003, memory=Memory(rss=246.30859375, vms=241.03515625), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10402320000000032, solving_time=0.02787969999999973, total_time=0.13190290000000005, memory=Memory(rss=246.30859375, vms=241.03515625), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 36358.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 205400.0, 'bodies_tr': 205400.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2580.0, 'count_bodies_tr': 2580.0, 'sccs': 254.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4620.0, 'rules': 386943.0, 'rules_normal': 384454.0, 'rules_choice': 2307.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 168.0, 'rules_tr': 386903.0, 'rules_tr_normal': 384454.0, 'rules_tr_choice': 2307.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 128.0, 'eqs': 75335.0, 'eqs_atom': 16277.0, 'eqs_body': 3741.0, 'eqs_other': 55317.0}, 'lpStep': {'atoms': 2328.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15103.0, 'bodies_tr': 15103.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 27980.0, 'rules_normal': 27815.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27980.0, 'rules_tr_normal': 27815.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5120.0, 'eqs_atom': 1101.0, 'eqs_body': 116.0, 'eqs_other': 3903.0}, 'generator': {'vars': 19064.0, 'vars_eliminated': 0.0, 'vars_frozen': 12214.0, 'constraints': 4423.0, 'constraints_binary': 147763.0, 'constraints_ternary': 17450.0, 'acyc_edges': 0.0, 'complexity': 170376.0}}, 'solving': {'solvers': {'choices': 669.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 7.0, 'models': 1.0, 'models_level': 260.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 99.0, 'lits_learnt': 822.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1162.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 99.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 822.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 14.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.1346569061279297, 'cpu': 0.15625, 'solve': 0.014471054077148438, 'unsat': 0.0, 'sat': 0.0064945220947265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.5943622589111328, 'cpu': 2.375, 'solve': 0.2411060333251953, 'unsat': 0.04190826416015625, 'sat': 0.08828353881835938}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6836.0, 'conflicts': 2027.0, 'conflicts_analyzed': 1989.0, 'restarts': 3.0, 'restarts_last': 102.0, 'extra': {'domain_choices': 2163.0, 'models': 8.0, 'models_level': 1188.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1856.0, 'distributed_sum_lbd': 4583.0, 'integrated': 10362.0, 'lemmas': 14327.0, 'lits_learnt': 174633.0, 'lemmas_binary': 1072.0, 'lemmas_ternary': 503.0, 'cpu_time': 1.0, 'integrated_imps': 3662.0, 'integrated_jumps': 1445.0, 'guiding_paths_lits': 8934.0, 'guiding_paths': 101.0, 'splits': 0.0, 'lemmas_conflict': 1898.0, 'lemmas_loop': 2989.0, 'lemmas_other': 9440.0, 'lits_conflict': 25090.0, 'lits_loop': 22991.0, 'lits_other': 126552.0, 'jumps': {'jumps': 1989.0, 'jumps_bounded': 437.0, 'levels': 7317.0, 'levels_bounded': 4925.0, 'max': 148.0, 'max_executed': 148.0, 'max_bounded': 144.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 6, 4: 10, 5: 12, 6: 13, 7: 14}

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 8 ( 88.89% solved)

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 14)', truth=True, inc_range=None)

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 14]:
sub_goal(3, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 8)

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.106889s.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 15: original = External(symbol='current_last_sgoals(8, 14)', truth=True, inc_range=None), conversion = current_last_sgoals(8,14).

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016953s with result Unsatisfiable.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1238421000000045, Incremental time limit = None
Running cumulative time = 1.6613933000000074, Cumulative time limit = 3600
Used memory = (RSS = 248.523438Mb, VMS = 242.203125Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.2775511000000073, solving_time=0.38384220000000013, total_time=1.6613933000000074, memory=Memory(rss=248.5234375, vms=242.203125), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10688890000000129, solving_time=0.01695320000000322, total_time=0.1238421000000045, memory=Memory(rss=248.5234375, vms=242.203125), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 38695.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 220522.0, 'bodies_tr': 220522.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2761.0, 'count_bodies_tr': 2761.0, 'sccs': 274.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5056.0, 'rules': 414978.0, 'rules_normal': 412324.0, 'rules_choice': 2459.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 414938.0, 'rules_tr_normal': 412324.0, 'rules_tr_choice': 2459.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 140.0, 'eqs': 80503.0, 'eqs_atom': 17387.0, 'eqs_body': 3858.0, 'eqs_other': 59258.0}, 'lpStep': {'atoms': 2337.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15122.0, 'bodies_tr': 15122.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28035.0, 'rules_normal': 27870.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28035.0, 'rules_tr_normal': 27870.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5168.0, 'eqs_atom': 1110.0, 'eqs_body': 117.0, 'eqs_other': 3941.0}, 'generator': {'vars': 20829.0, 'vars_eliminated': 0.0, 'vars_frozen': 13317.0, 'constraints': 4908.0, 'constraints_binary': 164332.0, 'constraints_ternary': 19420.0, 'acyc_edges': 0.0, 'complexity': 189470.0}}, 'solving': {'solvers': {'choices': 6.0, 'conflicts': 13.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 6.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 12.0, 'integrated': 0.0, 'lemmas': 6.0, 'lits_learnt': 195.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1062.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 195.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 6.0, 'levels': 12.0, 'levels_bounded': 6.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 15.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1266651153564453, 'cpu': 0.109375, 'solve': 0.004985809326171875, 'unsat': 0.004985809326171875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.7210273742675781, 'cpu': 2.484375, 'solve': 0.2460918426513672, 'unsat': 0.046894073486328125, 'sat': 0.08828353881835938}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6842.0, 'conflicts': 2040.0, 'conflicts_analyzed': 1995.0, 'restarts': 3.0, 'restarts_last': 102.0, 'extra': {'domain_choices': 2169.0, 'models': 8.0, 'models_level': 1188.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1862.0, 'distributed_sum_lbd': 4595.0, 'integrated': 10362.0, 'lemmas': 14333.0, 'lits_learnt': 174828.0, 'lemmas_binary': 1072.0, 'lemmas_ternary': 503.0, 'cpu_time': 1.0, 'integrated_imps': 3662.0, 'integrated_jumps': 1445.0, 'guiding_paths_lits': 9996.0, 'guiding_paths': 107.0, 'splits': 0.0, 'lemmas_conflict': 1904.0, 'lemmas_loop': 2989.0, 'lemmas_other': 9440.0, 'lits_conflict': 25285.0, 'lits_loop': 22991.0, 'lits_other': 126552.0, 'jumps': {'jumps': 1995.0, 'jumps_bounded': 443.0, 'levels': 7329.0, 'levels_bounded': 4931.0, 'max': 148.0, 'max_executed': 148.0, 'max_bounded': 144.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.093139s.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.140248s with result Satisfiable.

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.23338710000000162, Incremental time limit = None
Running cumulative time = 1.894780400000009, Cumulative time limit = 3600
Used memory = (RSS = 251.281250Mb, VMS = 244.316406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.370690s, Solving = 0.524090s, Total = 1.894780s, Memory = (RSS = 251.281250Mb, VMS = 244.316406Mb)), Calls = 16
Final Model :: Total atoms = 8631, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.3706903000000068, solving_time=0.5240901000000022, total_time=1.894780400000009, memory=Memory(rss=251.28125, vms=244.31640625), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09313919999999953, solving_time=0.1402479000000021, total_time=0.23338710000000162, memory=Memory(rss=251.28125, vms=244.31640625), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 41041.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 235663.0, 'bodies_tr': 235663.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2942.0, 'count_bodies_tr': 2942.0, 'sccs': 294.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5492.0, 'rules': 443068.0, 'rules_normal': 440249.0, 'rules_choice': 2611.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 192.0, 'rules_tr': 443028.0, 'rules_tr_normal': 440249.0, 'rules_tr_choice': 2611.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 152.0, 'eqs': 85717.0, 'eqs_atom': 18506.0, 'eqs_body': 3974.0, 'eqs_other': 63237.0}, 'lpStep': {'atoms': 2346.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15141.0, 'bodies_tr': 15141.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28090.0, 'rules_normal': 27925.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28090.0, 'rules_tr_normal': 27925.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5214.0, 'eqs_atom': 1119.0, 'eqs_body': 116.0, 'eqs_other': 3979.0}, 'generator': {'vars': 22594.0, 'vars_eliminated': 0.0, 'vars_frozen': 14420.0, 'constraints': 5393.0, 'constraints_binary': 180947.0, 'constraints_ternary': 21390.0, 'acyc_edges': 0.0, 'complexity': 208610.0}}, 'solving': {'solvers': {'choices': 3718.0, 'conflicts': 1109.0, 'conflicts_analyzed': 1109.0, 'restarts': 6.0, 'restarts_last': 123.0, 'extra': {'domain_choices': 1899.0, 'models': 1.0, 'models_level': 303.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 998.0, 'distributed_sum_lbd': 2990.0, 'integrated': 5956.0, 'lemmas': 8315.0, 'lits_learnt': 175815.0, 'lemmas_binary': 765.0, 'lemmas_ternary': 273.0, 'cpu_time': 0.890625, 'integrated_imps': 1228.0, 'integrated_jumps': 1457.0, 'guiding_paths_lits': 1316.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1099.0, 'lemmas_loop': 1318.0, 'lemmas_other': 5898.0, 'lits_conflict': 26807.0, 'lits_loop': 11012.0, 'lits_other': 137996.0, 'jumps': {'jumps': 1109.0, 'jumps_bounded': 14.0, 'levels': 2016.0, 'levels_bounded': 529.0, 'max': 199.0, 'max_executed': 199.0, 'max_bounded': 188.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.2363719940185547, 'cpu': 1.0, 'solve': 0.12865638732910156, 'unsat': 0.0, 'sat': 0.11469459533691406}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.9573993682861328, 'cpu': 3.484375, 'solve': 0.37474822998046875, 'unsat': 0.046894073486328125, 'sat': 0.20297813415527344}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 10560.0, 'conflicts': 3149.0, 'conflicts_analyzed': 3104.0, 'restarts': 9.0, 'restarts_last': 123.0, 'extra': {'domain_choices': 4068.0, 'models': 9.0, 'models_level': 1491.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2860.0, 'distributed_sum_lbd': 7585.0, 'integrated': 16318.0, 'lemmas': 22648.0, 'lits_learnt': 350643.0, 'lemmas_binary': 1837.0, 'lemmas_ternary': 776.0, 'cpu_time': 1.890625, 'integrated_imps': 4890.0, 'integrated_jumps': 2902.0, 'guiding_paths_lits': 11312.0, 'guiding_paths': 114.0, 'splits': 0.0, 'lemmas_conflict': 3003.0, 'lemmas_loop': 4307.0, 'lemmas_other': 15338.0, 'lits_conflict': 52092.0, 'lits_loop': 34003.0, 'lits_other': 264548.0, 'jumps': {'jumps': 3104.0, 'jumps_bounded': 457.0, 'levels': 9345.0, 'levels_bounded': 5460.0, 'max': 199.0, 'max_executed': 199.0, 'max_bounded': 188.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 6, 4: 10, 5: 12, 6: 13, 7: 14, 8: 16}

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 9 (100.00% solved)

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 16)', truth=True, inc_range=None)

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 16]:
sub_goal(3, talos, put(manipulator_arm_2,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 9)

[13-11-2021_23-07-34] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-07-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.098943s.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 17: original = External(symbol='current_last_sgoals(9, 16)', truth=True, inc_range=None), conversion = current_last_sgoals(9,16).

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033895s with result Satisfiable.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1328384000000007, Incremental time limit = None
Running cumulative time = 2.0276188000000097, Cumulative time limit = 3600
Used memory = (RSS = 253.382812Mb, VMS = 245.027344Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.469633s, Solving = 0.557986s, Total = 2.027619s, Memory = (RSS = 253.382812Mb, VMS = 245.027344Mb)), Calls = 17
Final Model :: Total atoms = 8972, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.4696332000000076, solving_time=0.5579856000000021, total_time=2.0276188000000097, memory=Memory(rss=253.3828125, vms=245.02734375), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09894290000000083, solving_time=0.033895499999999856, total_time=0.1328384000000007, memory=Memory(rss=253.3828125, vms=245.02734375), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 43396.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 250823.0, 'bodies_tr': 250823.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3123.0, 'count_bodies_tr': 3123.0, 'sccs': 314.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5928.0, 'rules': 471213.0, 'rules_normal': 468229.0, 'rules_choice': 2763.0, 'rules_minimize': 17.0, 'rules_acyc': 0.0, 'rules_heuristic': 204.0, 'rules_tr': 471173.0, 'rules_tr_normal': 468229.0, 'rules_tr_choice': 2763.0, 'rules_tr_minimize': 17.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 164.0, 'eqs': 90979.0, 'eqs_atom': 19634.0, 'eqs_body': 4091.0, 'eqs_other': 67254.0}, 'lpStep': {'atoms': 2355.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15160.0, 'bodies_tr': 15160.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 181.0, 'count_bodies_tr': 181.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 28145.0, 'rules_normal': 27980.0, 'rules_choice': 152.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28145.0, 'rules_tr_normal': 27980.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5262.0, 'eqs_atom': 1128.0, 'eqs_body': 117.0, 'eqs_other': 4017.0}, 'generator': {'vars': 24359.0, 'vars_eliminated': 0.0, 'vars_frozen': 15523.0, 'constraints': 5795.0, 'constraints_binary': 193388.0, 'constraints_ternary': 22960.0, 'acyc_edges': 0.0, 'complexity': 223093.0}}, 'solving': {'solvers': {'choices': 973.0, 'conflicts': 18.0, 'conflicts_analyzed': 18.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 49.0, 'models': 1.0, 'models_level': 318.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 58.0, 'integrated': 102.0, 'lemmas': 248.0, 'lits_learnt': 5624.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 19.0, 'integrated_jumps': 97.0, 'guiding_paths_lits': 1393.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 18.0, 'lemmas_loop': 128.0, 'lemmas_other': 102.0, 'lits_conflict': 688.0, 'lits_loop': 1066.0, 'lits_other': 3870.0, 'jumps': {'jumps': 18.0, 'jumps_bounded': 1.0, 'levels': 36.0, 'levels_bounded': 1.0, 'max': 8.0, 'max_executed': 8.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.13640403747558594, 'cpu': 0.25, 'solve': 0.0199432373046875, 'unsat': 0.0, 'sat': 0.009973526000976562}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.0938034057617188, 'cpu': 3.734375, 'solve': 0.39469146728515625, 'unsat': 0.046894073486328125, 'sat': 0.21295166015625}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 11533.0, 'conflicts': 3167.0, 'conflicts_analyzed': 3122.0, 'restarts': 9.0, 'restarts_last': 123.0, 'extra': {'domain_choices': 4117.0, 'models': 10.0, 'models_level': 1809.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2877.0, 'distributed_sum_lbd': 7643.0, 'integrated': 16420.0, 'lemmas': 22896.0, 'lits_learnt': 356267.0, 'lemmas_binary': 1844.0, 'lemmas_ternary': 776.0, 'cpu_time': 2.015625, 'integrated_imps': 4909.0, 'integrated_jumps': 2999.0, 'guiding_paths_lits': 12705.0, 'guiding_paths': 121.0, 'splits': 0.0, 'lemmas_conflict': 3021.0, 'lemmas_loop': 4435.0, 'lemmas_other': 15440.0, 'lits_conflict': 52780.0, 'lits_loop': 35069.0, 'lits_other': 268418.0, 'jumps': {'jumps': 3122.0, 'jumps_bounded': 458.0, 'levels': 9381.0, 'levels_bounded': 5461.0, 'max': 199.0, 'max_executed': 199.0, 'max_bounded': 188.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 6, 4: 10, 5: 12, 6: 13, 7: 14, 8: 16, 9: 17}

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 10 (111.11% solved)

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 9 was achieved successfully.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.095334s, Solving = 0.010062s, Total = 0.105397s, Memory = (RSS = 196.101562Mb, VMS = 187.085938Mb)
2 : Statistics :: Grounding = 0.072814s, Solving = 0.056276s, Total = 0.129090s, Memory = (RSS = 198.132812Mb, VMS = 189.921875Mb)
3 : Statistics :: Grounding = 0.067117s, Solving = 0.005957s, Total = 0.073074s, Memory = (RSS = 198.558594Mb, VMS = 190.429688Mb)
4 : Statistics :: Grounding = 0.074091s, Solving = 0.017473s, Total = 0.091563s, Memory = (RSS = 200.992188Mb, VMS = 192.734375Mb)
5 : Statistics :: Grounding = 0.072293s, Solving = 0.009348s, Total = 0.081641s, Memory = (RSS = 203.617188Mb, VMS = 196.003906Mb)
6 : Statistics :: Grounding = 0.074307s, Solving = 0.022078s, Total = 0.096385s, Memory = (RSS = 205.625000Mb, VMS = 197.230469Mb)
7 : Statistics :: Grounding = 0.079627s, Solving = 0.015501s, Total = 0.095128s, Memory = (RSS = 210.476562Mb, VMS = 202.242188Mb)
8 : Statistics :: Grounding = 0.079265s, Solving = 0.019643s, Total = 0.098908s, Memory = (RSS = 216.171875Mb, VMS = 208.941406Mb)
9 : Statistics :: Grounding = 0.088467s, Solving = 0.025703s, Total = 0.114170s, Memory = (RSS = 218.406250Mb, VMS = 210.183594Mb)
10 : Statistics :: Grounding = 0.079524s, Solving = 0.046490s, Total = 0.126015s, Memory = (RSS = 225.937500Mb, VMS = 220.957031Mb)
11 : Statistics :: Grounding = 0.083199s, Solving = 0.015607s, Total = 0.098806s, Memory = (RSS = 228.058594Mb, VMS = 222.136719Mb)
12 : Statistics :: Grounding = 0.092211s, Solving = 0.067027s, Total = 0.159238s, Memory = (RSS = 230.785156Mb, VMS = 223.691406Mb)
13 : Statistics :: Grounding = 0.108390s, Solving = 0.027843s, Total = 0.136233s, Memory = (RSS = 234.953125Mb, VMS = 226.617188Mb)
14 : Statistics :: Grounding = 0.104023s, Solving = 0.027880s, Total = 0.131903s, Memory = (RSS = 246.308594Mb, VMS = 241.035156Mb)
15 : Statistics :: Grounding = 0.106889s, Solving = 0.016953s, Total = 0.123842s, Memory = (RSS = 248.523438Mb, VMS = 242.203125Mb)
16 : Statistics :: Grounding = 0.093139s, Solving = 0.140248s, Total = 0.233387s, Memory = (RSS = 251.281250Mb, VMS = 244.316406Mb)
17 : Statistics :: Grounding = 0.098943s, Solving = 0.033895s, Total = 0.132838s, Memory = (RSS = 253.382812Mb, VMS = 245.027344Mb)

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.027619s due to: External generator exit.

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 2.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 5, 12: 5, 13: 6, 14: 7, 15: 8, 16: 8, 17: 9}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 6, 4: 10, 5: 12, 6: 13, 7: 14, 8: 16, 9: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 9, Last requested goal index = 9 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.469633s, Solving = 0.557986s, Total = 2.027619s, Memory = (RSS = 253.382812Mb, VMS = 245.027344Mb)), Calls = 17
Model :: Total atoms = 8972, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 17 :: Actions = 17                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 3:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,6))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 7:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 8:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 9:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 10:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 11:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 12:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 14:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,3))
Step 15:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 17:
    Current Sub-goals:
        [Index = 9] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 9] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,3),puzzle_room_table)

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=17, step_range=range(0, 18)

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 0, Actions = 0
Level [2]: Length = 17, Actions = 17
Level [3]: Length = 18, Actions = 18

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  2 (par-ref), Length =  17, Actions =  17 (Com = 1.00), Sgs = 17, Time =   5.197s (Gro =   3.765s, Sea =   1.432s), Expan (1.89, 1.89) (Dev = (1.05, 1.05), Bal = (0.56, 0.56))

[13-11-2021_23-07-35] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=17, start_step=0, blend=Blend(left=0, right=0)

[13-11-2021_23-07-35] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=8, large_group_size=9

[13-11-2021_23-07-35] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=8, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  17 (Com = 1.00), Sgs = 17, Time =   5.197s (Gro =   3.765s, Sea =   1.432s), Expan (1.89, 1.89) (Dev = (1.05, 1.05), Bal = (0.56, 0.56))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 1:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  17 (Com = 1.00), Sgs = 17, Time =   5.197s (Gro =   3.765s, Sea =   1.432s), Expan (1.89, 1.89) (Dev = (1.05, 1.05), Bal = (0.56, 0.56))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-8]

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-8], problem number = 1, increment number = 1

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 8)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 8
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 7

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency disabled : Problem type = partial conformance refinement (sequential) with sgoals range [1-8] : Minimum search length bound = disabled with value = 7

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = True, chosen = True

[13-11-2021_23-07-35] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-11-2021_23-07-35] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete(blue), false, 0).
holds(1, complete(red), false, 0).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(1, configuration(manipulator_limb_1), retracted, 0).
holds(1, configuration(manipulator_limb_2), retracted, 0).
holds(1, configuration(puzzle_room_door), closed, 0).
holds(1, configuration(starting_room_door), closed, 0).
holds(1, configuration(store_room_door), closed, 0).
holds(1, grasping(manipulator_arm_1), nothing, 0).
holds(1, grasping(manipulator_arm_2), nothing, 0).
holds(1, grasping(manipulator_end_1), nothing, 0).
holds(1, grasping(manipulator_end_2), nothing, 0).
holds(1, in((block,1)), (puzzle_room,1), 0).
holds(1, in((block,2)), (puzzle_room,1), 0).
holds(1, in((block,3)), (puzzle_room,1), 0).
holds(1, in((block,4)), (puzzle_room,1), 0).
holds(1, in((block,5)), (store_room,0), 0).
holds(1, in((block,6)), (store_room,0), 0).
holds(1, in(manipulator_arm_1), (starting_room,0), 0).
holds(1, in(manipulator_arm_2), (starting_room,0), 0).
holds(1, in(manipulator_end_1), (starting_room,0), 0).
holds(1, in(manipulator_end_2), (starting_room,0), 0).
holds(1, in(manipulator_limb_1), (starting_room,0), 0).
holds(1, in(manipulator_limb_2), (starting_room,0), 0).
holds(1, in(puzzle_room_table), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0).
holds(1, in(talos), (starting_room,0), 0).
holds(1, in_tower((block,1),(block,1)), true, 0).
holds(1, in_tower((block,1),(block,2)), false, 0).
holds(1, in_tower((block,1),(block,3)), true, 0).
holds(1, in_tower((block,1),(block,4)), false, 0).
holds(1, in_tower((block,1),(block,5)), false, 0).
holds(1, in_tower((block,1),(block,6)), false, 0).
holds(1, in_tower((block,2),(block,1)), false, 0).
holds(1, in_tower((block,2),(block,2)), true, 0).
holds(1, in_tower((block,2),(block,3)), false, 0).
holds(1, in_tower((block,2),(block,4)), true, 0).
holds(1, in_tower((block,2),(block,5)), false, 0).
holds(1, in_tower((block,2),(block,6)), false, 0).
holds(1, in_tower((block,3),(block,1)), false, 0).
holds(1, in_tower((block,3),(block,2)), false, 0).
holds(1, in_tower((block,3),(block,3)), false, 0).
holds(1, in_tower((block,3),(block,4)), false, 0).
holds(1, in_tower((block,3),(block,5)), false, 0).
holds(1, in_tower((block,3),(block,6)), false, 0).
holds(1, in_tower((block,4),(block,1)), false, 0).
holds(1, in_tower((block,4),(block,2)), false, 0).
holds(1, in_tower((block,4),(block,3)), false, 0).
holds(1, in_tower((block,4),(block,4)), false, 0).
holds(1, in_tower((block,4),(block,5)), false, 0).
holds(1, in_tower((block,4),(block,6)), false, 0).
holds(1, in_tower((block,5),(block,1)), false, 0).
holds(1, in_tower((block,5),(block,2)), false, 0).
holds(1, in_tower((block,5),(block,3)), false, 0).
holds(1, in_tower((block,5),(block,4)), false, 0).
holds(1, in_tower((block,5),(block,5)), false, 0).
holds(1, in_tower((block,5),(block,6)), false, 0).
holds(1, in_tower((block,6),(block,1)), false, 0).
holds(1, in_tower((block,6),(block,2)), false, 0).
holds(1, in_tower((block,6),(block,3)), false, 0).
holds(1, in_tower((block,6),(block,4)), false, 0).
holds(1, in_tower((block,6),(block,5)), false, 0).
holds(1, in_tower((block,6),(block,6)), false, 0).
holds(1, on((block,1)), puzzle_room_table_left, 0).
holds(1, on((block,2)), puzzle_room_table_right, 0).
holds(1, on((block,3)), (block,1), 0).
holds(1, on((block,4)), (block,2), 0).
holds(1, on((block,5)), nothing, 0).
holds(1, on((block,6)), nothing, 0).
holds(1, tower_base((block,1)), true, 0).
holds(1, tower_base((block,2)), true, 0).
holds(1, tower_base((block,3)), false, 0).
holds(1, tower_base((block,4)), false, 0).
holds(1, tower_base((block,5)), false, 0).
holds(1, tower_base((block,6)), false, 0).
holds(1, unordered_tower((block,1)), true, 0).
holds(1, unordered_tower((block,2)), true, 0).
holds(1, unordered_tower((block,3)), false, 0).
holds(1, unordered_tower((block,4)), false, 0).
holds(1, unordered_tower((block,5)), false, 0).
holds(1, unordered_tower((block,6)), false, 0).
holds(2, complete(blue), false, 0).
holds(2, complete(red), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), puzzle_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), true, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), (block,2), 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1)), true, 0).
holds(2, tower_base((block,2)), true, 0).
holds(2, tower_base((block,3)), false, 0).
holds(2, tower_base((block,4)), false, 0).
holds(2, tower_base((block,5)), false, 0).
holds(2, tower_base((block,6)), false, 0).
holds(2, unordered_tower((block,1)), true, 0).
holds(2, unordered_tower((block,2)), true, 0).
holds(2, unordered_tower((block,3)), false, 0).
holds(2, unordered_tower((block,4)), false, 0).
holds(2, unordered_tower((block,5)), false, 0).
holds(2, unordered_tower((block,6)), false, 0).

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete(blue), false, false).
final_goal(1, complete(blue), true, true).
final_goal(1, complete(red), false, false).
final_goal(1, complete(red), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1)), false, true).
final_goal(1, tower_base((block,1)), true, false).
final_goal(1, tower_base((block,2)), false, true).
final_goal(1, tower_base((block,2)), true, false).
final_goal(1, tower_base((block,3)), false, false).
final_goal(1, tower_base((block,3)), true, true).
final_goal(1, tower_base((block,4)), false, true).
final_goal(1, tower_base((block,4)), true, false).
final_goal(1, tower_base((block,5)), false, true).
final_goal(1, tower_base((block,5)), true, false).
final_goal(1, tower_base((block,6)), false, false).
final_goal(1, tower_base((block,6)), true, true).
final_goal(1, unordered_tower((block,1)), false, true).
final_goal(1, unordered_tower((block,1)), true, false).
final_goal(1, unordered_tower((block,2)), false, true).
final_goal(1, unordered_tower((block,2)), true, false).
final_goal(1, unordered_tower((block,3)), false, true).
final_goal(1, unordered_tower((block,3)), true, false).
final_goal(1, unordered_tower((block,4)), false, true).
final_goal(1, unordered_tower((block,4)), true, false).
final_goal(1, unordered_tower((block,5)), false, true).
final_goal(1, unordered_tower((block,5)), true, false).
final_goal(1, unordered_tower((block,6)), false, true).
final_goal(1, unordered_tower((block,6)), true, false).
final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 1})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 7})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 8})

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 8 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 1).
sub_goal(2, talos, move(store_room), in(talos), store_room, 2).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 3).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 4).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 5).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 6).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 7).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 8).

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x00000162C2F4A4C0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 'none', 'sequential', 'true'), range_=None)]

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 806 rules

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.007185299999999728s

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029411s.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010170s with result Satisfiable.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000162C7A54B30>

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 0)
	('last_sgoals', 8)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000162C7A54B30>)

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.142372s.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021943s with result Unsatisfiable.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16431469999999493, Incremental time limit = None
Running cumulative time = 0.16431469999999493, Cumulative time limit = 3600
Used memory = (RSS = 254.941406Mb, VMS = 246.835938Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.142371899999997, solving_time=0.02194279999999793, total_time=0.16431469999999493, memory=Memory(rss=254.94140625, vms=246.8359375), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.142371899999997, solving_time=0.02194279999999793, total_time=0.16431469999999493, memory=Memory(rss=254.94140625, vms=246.8359375), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 12195.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28207.0, 'bodies_tr': 28207.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 536.0, 'rules': 56766.0, 'rules_normal': 56210.0, 'rules_choice': 543.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 56754.0, 'rules_tr_normal': 56210.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 26325.0, 'eqs_atom': 7034.0, 'eqs_body': 1906.0, 'eqs_other': 17385.0}, 'lpStep': {'atoms': 5680.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25604.0, 'bodies_tr': 25604.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 536.0, 'rules': 49341.0, 'rules_normal': 48785.0, 'rules_choice': 543.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 49329.0, 'rules_tr_normal': 48785.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 13321.0, 'eqs_atom': 2126.0, 'eqs_body': 397.0, 'eqs_other': 10798.0}, 'generator': {'vars': 2367.0, 'vars_eliminated': 0.0, 'vars_frozen': 1514.0, 'constraints': 28.0, 'constraints_binary': 884.0, 'constraints_ternary': 120.0, 'acyc_edges': 0.0, 'complexity': 1048.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 10.0, 'lits_learnt': 10.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 105.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 10.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 10.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.16356468200683594, 'cpu': 0.15625, 'solve': 0.0019969940185546875, 'unsat': 0.0019969940185546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2114124298095703, 'cpu': 0.1875, 'solve': 0.008977890014648438, 'unsat': 0.0019969940185546875, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 10.0, 'lits_learnt': 10.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 113.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 10.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 10.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096940s.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014386s with result Satisfiable.

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11132560000000424, Incremental time limit = None
Running cumulative time = 0.27564029999999917, Cumulative time limit = 3600
Used memory = (RSS = 257.484375Mb, VMS = 248.964844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.239312s, Solving = 0.036329s, Total = 0.275640s, Memory = (RSS = 257.484375Mb, VMS = 248.964844Mb)), Calls = 2
Final Model :: Total atoms = 4524, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.23931169999999824, solving_time=0.03632860000000093, total_time=0.27564029999999917, memory=Memory(rss=257.484375, vms=248.96484375), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09693980000000124, solving_time=0.014385800000003002, total_time=0.11132560000000424, memory=Memory(rss=257.484375, vms=248.96484375), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 14034.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49778.0, 'bodies_tr': 49778.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 464.0, 'count_bodies_tr': 464.0, 'sccs': 47.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 712.0, 'rules': 97975.0, 'rules_normal': 97211.0, 'rules_choice': 738.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 97951.0, 'rules_tr_normal': 97211.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 30046.0, 'eqs_atom': 7795.0, 'eqs_body': 2339.0, 'eqs_other': 19912.0}, 'lpStep': {'atoms': 1839.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21571.0, 'bodies_tr': 21571.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176.0, 'rules': 41209.0, 'rules_normal': 41001.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 41197.0, 'rules_tr_normal': 41001.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3721.0, 'eqs_atom': 761.0, 'eqs_body': 433.0, 'eqs_other': 2527.0}, 'generator': {'vars': 2619.0, 'vars_eliminated': 0.0, 'vars_frozen': 1734.0, 'constraints': 115.0, 'constraints_binary': 2715.0, 'constraints_ternary': 210.0, 'acyc_edges': 0.0, 'complexity': 3082.0}}, 'solving': {'solvers': {'choices': 218.0, 'conflicts': 32.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 49.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 40.0, 'distributed_sum_lbd': 48.0, 'integrated': 135.0, 'lemmas': 151.0, 'lits_learnt': 216.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 79.0, 'integrated_jumps': 62.0, 'guiding_paths_lits': 248.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 32.0, 'lemmas_loop': 12.0, 'lemmas_other': 107.0, 'lits_conflict': 32.0, 'lits_loop': 49.0, 'lits_other': 135.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 6.0, 'levels': 224.0, 'levels_bounded': 186.0, 'max': 33.0, 'max_executed': 2.0, 'max_bounded': 31.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.11269950866699219, 'cpu': 0.125, 'solve': 0.0069789886474609375, 'unsat': 0.0, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3241119384765625, 'cpu': 0.3125, 'solve': 0.015956878662109375, 'unsat': 0.0019969940185546875, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 218.0, 'conflicts': 32.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 50.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 40.0, 'distributed_sum_lbd': 48.0, 'integrated': 135.0, 'lemmas': 161.0, 'lits_learnt': 226.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 79.0, 'integrated_jumps': 62.0, 'guiding_paths_lits': 361.0, 'guiding_paths': 21.0, 'splits': 0.0, 'lemmas_conflict': 32.0, 'lemmas_loop': 22.0, 'lemmas_other': 107.0, 'lits_conflict': 32.0, 'lits_loop': 59.0, 'lits_other': 135.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 6.0, 'levels': 224.0, 'levels_bounded': 186.0, 'max': 33.0, 'max_executed': 2.0, 'max_bounded': 31.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2}

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 2 ( 25.00% solved)

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None)

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 2]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 2)

[13-11-2021_23-07-35] DEBUG :: ASH Planner Main #1 >> Reaction at search length 2:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.104533s.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 3: original = External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None), conversion = current_last_sgoals(2,2).

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008861s with result Unsatisfiable.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.11339380000000077, Incremental time limit = None
Running cumulative time = 0.38903409999999994, Cumulative time limit = 3600
Used memory = (RSS = 257.585938Mb, VMS = 248.964844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.3438449999999982, solving_time=0.04518910000000176, total_time=0.38903409999999994, memory=Memory(rss=257.5859375, vms=248.96484375), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10453329999999994, solving_time=0.008860500000000826, total_time=0.11339380000000077, memory=Memory(rss=257.5859375, vms=248.96484375), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 16626.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71438.0, 'bodies_tr': 71438.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 666.0, 'count_bodies_tr': 666.0, 'sccs': 60.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 898.0, 'rules': 139402.0, 'rules_normal': 138430.0, 'rules_choice': 933.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 139366.0, 'rules_tr_normal': 138430.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 34602.0, 'eqs_atom': 8644.0, 'eqs_body': 2776.0, 'eqs_other': 23182.0}, 'lpStep': {'atoms': 2592.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21660.0, 'bodies_tr': 21660.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 41427.0, 'rules_normal': 41219.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 41415.0, 'rules_tr_normal': 41219.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4556.0, 'eqs_atom': 849.0, 'eqs_body': 437.0, 'eqs_other': 3270.0}, 'generator': {'vars': 2869.0, 'vars_eliminated': 0.0, 'vars_frozen': 1974.0, 'constraints': 158.0, 'constraints_binary': 2859.0, 'constraints_ternary': 155.0, 'acyc_edges': 0.0, 'complexity': 3236.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 12.0, 'integrated': 0.0, 'lemmas': 10.0, 'lits_learnt': 48.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 287.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 10.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 48.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.11369705200195312, 'cpu': 0.109375, 'solve': 0.000995635986328125, 'unsat': 0.000995635986328125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4378089904785156, 'cpu': 0.421875, 'solve': 0.0169525146484375, 'unsat': 0.0029926300048828125, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 218.0, 'conflicts': 39.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 50.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 46.0, 'distributed_sum_lbd': 60.0, 'integrated': 135.0, 'lemmas': 171.0, 'lits_learnt': 274.0, 'lemmas_binary': 42.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 79.0, 'integrated_jumps': 62.0, 'guiding_paths_lits': 648.0, 'guiding_paths': 28.0, 'splits': 0.0, 'lemmas_conflict': 32.0, 'lemmas_loop': 32.0, 'lemmas_other': 107.0, 'lits_conflict': 32.0, 'lits_loop': 107.0, 'lits_other': 135.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 6.0, 'levels': 224.0, 'levels_bounded': 186.0, 'max': 33.0, 'max_executed': 2.0, 'max_bounded': 31.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 3:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.099707s.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014366s with result Satisfiable.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11407359999999755, Incremental time limit = None
Running cumulative time = 0.5031076999999975, Cumulative time limit = 3600
Used memory = (RSS = 257.863281Mb, VMS = 248.964844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.443552s, Solving = 0.059556s, Total = 0.503108s, Memory = (RSS = 257.863281Mb, VMS = 248.964844Mb)), Calls = 4
Final Model :: Total atoms = 5269, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.4435521999999956, solving_time=0.05955550000000187, total_time=0.5031076999999975, memory=Memory(rss=257.86328125, vms=248.96484375), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09970719999999744, solving_time=0.014366400000000112, total_time=0.11407359999999755, memory=Memory(rss=257.86328125, vms=248.96484375), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 19226.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 93375.0, 'bodies_tr': 93375.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 868.0, 'count_bodies_tr': 868.0, 'sccs': 73.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1132.0, 'rules': 181699.0, 'rules_normal': 180519.0, 'rules_choice': 1128.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 48.0, 'rules_tr': 181651.0, 'rules_tr_normal': 180519.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 41494.0, 'eqs_atom': 10094.0, 'eqs_body': 3373.0, 'eqs_other': 28027.0}, 'lpStep': {'atoms': 2600.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21937.0, 'bodies_tr': 21937.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 42297.0, 'rules_normal': 42089.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 42285.0, 'rules_tr_normal': 42089.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6892.0, 'eqs_atom': 1450.0, 'eqs_body': 597.0, 'eqs_other': 4845.0}, 'generator': {'vars': 3433.0, 'vars_eliminated': 0.0, 'vars_frozen': 2379.0, 'constraints': 309.0, 'constraints_binary': 6786.0, 'constraints_ternary': 541.0, 'acyc_edges': 0.0, 'complexity': 7746.0}}, 'solving': {'solvers': {'choices': 268.0, 'conflicts': 68.0, 'conflicts_analyzed': 68.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 81.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 67.0, 'distributed_sum_lbd': 79.0, 'integrated': 72.0, 'lemmas': 182.0, 'lits_learnt': 1391.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 23.0, 'integrated_jumps': 13.0, 'guiding_paths_lits': 408.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 67.0, 'lemmas_loop': 46.0, 'lemmas_other': 69.0, 'lits_conflict': 184.0, 'lits_loop': 375.0, 'lits_other': 832.0, 'jumps': {'jumps': 68.0, 'jumps_bounded': 3.0, 'levels': 104.0, 'levels_bounded': 3.0, 'max': 34.0, 'max_executed': 34.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.11469268798828125, 'cpu': 0.140625, 'solve': 0.0069522857666015625, 'unsat': 0.0, 'sat': 0.001964569091796875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5525016784667969, 'cpu': 0.5625, 'solve': 0.023904800415039062, 'unsat': 0.0029926300048828125, 'sat': 0.0049571990966796875}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 486.0, 'conflicts': 107.0, 'conflicts_analyzed': 100.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 113.0, 'distributed_sum_lbd': 139.0, 'integrated': 207.0, 'lemmas': 353.0, 'lits_learnt': 1665.0, 'lemmas_binary': 49.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 102.0, 'integrated_jumps': 75.0, 'guiding_paths_lits': 1056.0, 'guiding_paths': 36.0, 'splits': 0.0, 'lemmas_conflict': 99.0, 'lemmas_loop': 78.0, 'lemmas_other': 176.0, 'lits_conflict': 216.0, 'lits_loop': 482.0, 'lits_other': 967.0, 'jumps': {'jumps': 100.0, 'jumps_bounded': 9.0, 'levels': 328.0, 'levels_bounded': 189.0, 'max': 34.0, 'max_executed': 34.0, 'max_bounded': 31.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4}

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 3 ( 37.50% solved)

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 4)', truth=True, inc_range=None)

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 4]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 3)

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 4:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.104966s.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 5: original = External(symbol='current_last_sgoals(3, 4)', truth=True, inc_range=None), conversion = current_last_sgoals(3,4).

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016894s with result Satisfiable.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12185990000000047, Incremental time limit = None
Running cumulative time = 0.624967599999998, Cumulative time limit = 3600
Used memory = (RSS = 259.511719Mb, VMS = 250.875000Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.548518s, Solving = 0.076449s, Total = 0.624968s, Memory = (RSS = 259.511719Mb, VMS = 250.875000Mb)), Calls = 5
Final Model :: Total atoms = 5644, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.5485184999999966, solving_time=0.07644910000000138, total_time=0.624967599999998, memory=Memory(rss=259.51171875, vms=250.875), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10496630000000096, solving_time=0.01689359999999951, total_time=0.12185990000000047, memory=Memory(rss=259.51171875, vms=250.875), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 22109.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 115299.0, 'bodies_tr': 115299.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1070.0, 'count_bodies_tr': 1070.0, 'sccs': 86.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1352.0, 'rules': 223824.0, 'rules_normal': 222436.0, 'rules_choice': 1323.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 60.0, 'rules_tr': 223764.0, 'rules_tr_normal': 222436.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 47437.0, 'eqs_atom': 11392.0, 'eqs_body': 3870.0, 'eqs_other': 32175.0}, 'lpStep': {'atoms': 2883.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21924.0, 'bodies_tr': 21924.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 220.0, 'rules': 42125.0, 'rules_normal': 41917.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 42113.0, 'rules_tr_normal': 41917.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5943.0, 'eqs_atom': 1298.0, 'eqs_body': 497.0, 'eqs_other': 4148.0}, 'generator': {'vars': 3799.0, 'vars_eliminated': 0.0, 'vars_frozen': 2702.0, 'constraints': 362.0, 'constraints_binary': 5655.0, 'constraints_ternary': 451.0, 'acyc_edges': 0.0, 'complexity': 7746.0}}, 'solving': {'solvers': {'choices': 271.0, 'conflicts': 19.0, 'conflicts_analyzed': 19.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 97.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 25.0, 'integrated': 28.0, 'lemmas': 95.0, 'lits_learnt': 579.0, 'lemmas_binary': 15.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 13.0, 'integrated_jumps': 17.0, 'guiding_paths_lits': 488.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 19.0, 'lemmas_loop': 57.0, 'lemmas_other': 19.0, 'lits_conflict': 24.0, 'lits_loop': 496.0, 'lits_other': 59.0, 'jumps': {'jumps': 19.0, 'jumps_bounded': 2.0, 'levels': 21.0, 'levels_bounded': 2.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.12267303466796875, 'cpu': 0.234375, 'solve': 0.008975982666015625, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6751747131347656, 'cpu': 0.796875, 'solve': 0.03288078308105469, 'unsat': 0.0029926300048828125, 'sat': 0.0069522857666015625}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 757.0, 'conflicts': 126.0, 'conflicts_analyzed': 119.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 228.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 134.0, 'distributed_sum_lbd': 164.0, 'integrated': 235.0, 'lemmas': 448.0, 'lits_learnt': 2244.0, 'lemmas_binary': 64.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.1875, 'integrated_imps': 115.0, 'integrated_jumps': 92.0, 'guiding_paths_lits': 1544.0, 'guiding_paths': 44.0, 'splits': 0.0, 'lemmas_conflict': 118.0, 'lemmas_loop': 135.0, 'lemmas_other': 195.0, 'lits_conflict': 240.0, 'lits_loop': 978.0, 'lits_other': 1026.0, 'jumps': {'jumps': 119.0, 'jumps_bounded': 11.0, 'levels': 349.0, 'levels_bounded': 191.0, 'max': 34.0, 'max_executed': 34.0, 'max_bounded': 31.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 5}

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 4 ( 50.00% solved)

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 5)', truth=True, inc_range=None)

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 5]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 4)

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 5:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.104519s.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 6: original = External(symbol='current_last_sgoals(4, 5)', truth=True, inc_range=None), conversion = current_last_sgoals(4,5).

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.076442s with result Satisfiable.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.18096060000000236, Incremental time limit = None
Running cumulative time = 0.8059282000000003, Cumulative time limit = 3600
Used memory = (RSS = 260.453125Mb, VMS = 251.539062Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.653037s, Solving = 0.152891s, Total = 0.805928s, Memory = (RSS = 260.453125Mb, VMS = 251.539062Mb)), Calls = 6
Final Model :: Total atoms = 6020, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.6530370999999988, solving_time=0.1528911000000015, total_time=0.8059282000000003, memory=Memory(rss=260.453125, vms=251.5390625), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10451860000000224, solving_time=0.07644200000000012, total_time=0.18096060000000236, memory=Memory(rss=260.453125, vms=251.5390625), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 24744.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 137251.0, 'bodies_tr': 137251.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1272.0, 'count_bodies_tr': 1272.0, 'sccs': 99.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1586.0, 'rules': 266193.0, 'rules_normal': 264597.0, 'rules_choice': 1518.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 266121.0, 'rules_tr_normal': 264597.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 53707.0, 'eqs_atom': 12819.0, 'eqs_body': 4300.0, 'eqs_other': 36588.0}, 'lpStep': {'atoms': 2635.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21952.0, 'bodies_tr': 21952.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 42369.0, 'rules_normal': 42161.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 42357.0, 'rules_tr_normal': 42161.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6270.0, 'eqs_atom': 1427.0, 'eqs_body': 430.0, 'eqs_other': 4413.0}, 'generator': {'vars': 4232.0, 'vars_eliminated': 0.0, 'vars_frozen': 3065.0, 'constraints': 506.0, 'constraints_binary': 8446.0, 'constraints_ternary': 781.0, 'acyc_edges': 0.0, 'complexity': 9911.0}}, 'solving': {'solvers': {'choices': 336.0, 'conflicts': 1.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 113.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 1.0, 'integrated': 0.0, 'lemmas': 70.0, 'lits_learnt': 629.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 568.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 69.0, 'lemmas_other': 0.0, 'lits_conflict': 1.0, 'lits_loop': 628.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 0.0, 'levels': 1.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 6.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.18151283264160156, 'cpu': 0.21875, 'solve': 0.06878662109375, 'unsat': 0.0, 'sat': 0.00096893310546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8566875457763672, 'cpu': 1.015625, 'solve': 0.10166740417480469, 'unsat': 0.0029926300048828125, 'sat': 0.007921218872070312}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1093.0, 'conflicts': 127.0, 'conflicts_analyzed': 120.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 341.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 135.0, 'distributed_sum_lbd': 165.0, 'integrated': 235.0, 'lemmas': 518.0, 'lits_learnt': 2873.0, 'lemmas_binary': 64.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.296875, 'integrated_imps': 115.0, 'integrated_jumps': 92.0, 'guiding_paths_lits': 2112.0, 'guiding_paths': 52.0, 'splits': 0.0, 'lemmas_conflict': 119.0, 'lemmas_loop': 204.0, 'lemmas_other': 195.0, 'lits_conflict': 241.0, 'lits_loop': 1606.0, 'lits_other': 1026.0, 'jumps': {'jumps': 120.0, 'jumps_bounded': 11.0, 'levels': 350.0, 'levels_bounded': 191.0, 'max': 34.0, 'max_executed': 34.0, 'max_bounded': 31.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 5, 4: 6}

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 5 ( 62.50% solved)

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 6)', truth=True, inc_range=None)

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 6]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 5)

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 6:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124520s.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 7: original = External(symbol='current_last_sgoals(5, 6)', truth=True, inc_range=None), conversion = current_last_sgoals(5,6).

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011076s with result Unsatisfiable.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13559530000000208, Incremental time limit = None
Running cumulative time = 0.9415235000000024, Cumulative time limit = 3600
Used memory = (RSS = 261.613281Mb, VMS = 252.906250Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.7775566000000005, solving_time=0.16396690000000191, total_time=0.9415235000000024, memory=Memory(rss=261.61328125, vms=252.90625), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12451950000000167, solving_time=0.011075800000000413, total_time=0.13559530000000208, memory=Memory(rss=261.61328125, vms=252.90625), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 27401.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 159372.0, 'bodies_tr': 159372.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1474.0, 'count_bodies_tr': 1474.0, 'sccs': 112.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1820.0, 'rules': 308756.0, 'rules_normal': 306952.0, 'rules_choice': 1713.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 84.0, 'rules_tr': 308672.0, 'rules_tr_normal': 306952.0, 'rules_tr_choice': 1713.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 61249.0, 'eqs_atom': 14248.0, 'eqs_body': 4873.0, 'eqs_other': 42128.0}, 'lpStep': {'atoms': 2657.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22121.0, 'bodies_tr': 22121.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 42563.0, 'rules_normal': 42355.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 42551.0, 'rules_tr_normal': 42355.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7542.0, 'eqs_atom': 1429.0, 'eqs_body': 573.0, 'eqs_other': 5540.0}, 'generator': {'vars': 4898.0, 'vars_eliminated': 0.0, 'vars_frozen': 3522.0, 'constraints': 673.0, 'constraints_binary': 13539.0, 'constraints_ternary': 1217.0, 'acyc_edges': 0.0, 'complexity': 15653.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 486.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 7.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.13663673400878906, 'cpu': 0.125, 'solve': 0.0009937286376953125, 'unsat': 0.0009937286376953125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.9933242797851562, 'cpu': 1.140625, 'solve': 0.1026611328125, 'unsat': 0.003986358642578125, 'sat': 0.007921218872070312}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1093.0, 'conflicts': 134.0, 'conflicts_analyzed': 120.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 341.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 135.0, 'distributed_sum_lbd': 165.0, 'integrated': 235.0, 'lemmas': 518.0, 'lits_learnt': 2873.0, 'lemmas_binary': 64.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.296875, 'integrated_imps': 115.0, 'integrated_jumps': 92.0, 'guiding_paths_lits': 2598.0, 'guiding_paths': 58.0, 'splits': 0.0, 'lemmas_conflict': 119.0, 'lemmas_loop': 204.0, 'lemmas_other': 195.0, 'lits_conflict': 241.0, 'lits_loop': 1606.0, 'lits_other': 1026.0, 'jumps': {'jumps': 120.0, 'jumps_bounded': 11.0, 'levels': 350.0, 'levels_bounded': 191.0, 'max': 34.0, 'max_executed': 34.0, 'max_bounded': 31.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.104842s.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016018s with result Unsatisfiable.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.12085950000000167, Incremental time limit = None
Running cumulative time = 1.062383000000004, Cumulative time limit = 3600
Used memory = (RSS = 264.859375Mb, VMS = 257.183594Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.8823986000000019, solving_time=0.17998440000000215, total_time=1.062383000000004, memory=Memory(rss=264.859375, vms=257.18359375), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10484200000000143, solving_time=0.01601750000000024, total_time=0.12085950000000167, memory=Memory(rss=264.859375, vms=257.18359375), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 30307.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 182265.0, 'bodies_tr': 182265.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1676.0, 'count_bodies_tr': 1676.0, 'sccs': 137.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2218.0, 'rules': 352294.0, 'rules_normal': 350282.0, 'rules_choice': 1908.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 96.0, 'rules_tr': 352206.0, 'rules_tr_normal': 350282.0, 'rules_tr_choice': 1908.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 68345.0, 'eqs_atom': 15694.0, 'eqs_body': 5065.0, 'eqs_other': 47586.0}, 'lpStep': {'atoms': 2906.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22893.0, 'bodies_tr': 22893.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 43538.0, 'rules_normal': 43330.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 43534.0, 'rules_tr_normal': 43330.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 7096.0, 'eqs_atom': 1446.0, 'eqs_body': 192.0, 'eqs_other': 5458.0}, 'generator': {'vars': 6419.0, 'vars_eliminated': 0.0, 'vars_frozen': 4459.0, 'constraints': 1053.0, 'constraints_binary': 27609.0, 'constraints_ternary': 2767.0, 'acyc_edges': 0.0, 'complexity': 31723.0}}, 'solving': {'solvers': {'choices': 146.0, 'conflicts': 90.0, 'conflicts_analyzed': 82.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 45.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 66.0, 'distributed_sum_lbd': 135.0, 'integrated': 375.0, 'lemmas': 542.0, 'lits_learnt': 6340.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.109375, 'integrated_imps': 240.0, 'integrated_jumps': 54.0, 'guiding_paths_lits': 637.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 67.0, 'lemmas_loop': 140.0, 'lemmas_other': 335.0, 'lits_conflict': 760.0, 'lits_loop': 1278.0, 'lits_other': 4302.0, 'jumps': {'jumps': 82.0, 'jumps_bounded': 35.0, 'levels': 1297.0, 'levels_bounded': 1205.0, 'max': 93.0, 'max_executed': 93.0, 'max_bounded': 91.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.12192344665527344, 'cpu': 0.21875, 'solve': 0.003963470458984375, 'unsat': 0.003963470458984375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.1152477264404297, 'cpu': 1.359375, 'solve': 0.10662460327148438, 'unsat': 0.0079498291015625, 'sat': 0.007921218872070312}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1239.0, 'conflicts': 224.0, 'conflicts_analyzed': 202.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 45.0, 'models': 5.0, 'models_level': 341.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 201.0, 'distributed_sum_lbd': 300.0, 'integrated': 610.0, 'lemmas': 1060.0, 'lits_learnt': 9213.0, 'lemmas_binary': 100.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.40625, 'integrated_imps': 355.0, 'integrated_jumps': 146.0, 'guiding_paths_lits': 3235.0, 'guiding_paths': 65.0, 'splits': 0.0, 'lemmas_conflict': 186.0, 'lemmas_loop': 344.0, 'lemmas_other': 530.0, 'lits_conflict': 1001.0, 'lits_loop': 2884.0, 'lits_other': 5328.0, 'jumps': {'jumps': 202.0, 'jumps_bounded': 46.0, 'levels': 1647.0, 'levels_bounded': 1396.0, 'max': 93.0, 'max_executed': 93.0, 'max_bounded': 91.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.109830s.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029832s with result Satisfiable.

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13966220000000007, Incremental time limit = None
Running cumulative time = 1.2020452000000041, Cumulative time limit = 3600
Used memory = (RSS = 266.496094Mb, VMS = 257.921875Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.992229s, Solving = 0.209817s, Total = 1.202045s, Memory = (RSS = 266.496094Mb, VMS = 257.921875Mb)), Calls = 9
Final Model :: Total atoms = 7145, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.9922287000000019, solving_time=0.2098165000000023, total_time=1.2020452000000041, memory=Memory(rss=266.49609375, vms=257.921875), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10983009999999993, solving_time=0.02983210000000014, total_time=0.13966220000000007, memory=Memory(rss=266.49609375, vms=257.921875), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 33479.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 205819.0, 'bodies_tr': 205819.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1878.0, 'count_bodies_tr': 1878.0, 'sccs': 162.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2622.0, 'rules': 396696.0, 'rules_normal': 394476.0, 'rules_choice': 2103.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 396604.0, 'rules_tr_normal': 394476.0, 'rules_tr_choice': 2103.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 79299.0, 'eqs_atom': 17370.0, 'eqs_body': 5354.0, 'eqs_other': 56575.0}, 'lpStep': {'atoms': 3172.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23554.0, 'bodies_tr': 23554.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 404.0, 'rules': 44402.0, 'rules_normal': 44194.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 44398.0, 'rules_tr_normal': 44194.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 10954.0, 'eqs_atom': 1676.0, 'eqs_body': 289.0, 'eqs_other': 8989.0}, 'generator': {'vars': 8143.0, 'vars_eliminated': 0.0, 'vars_frozen': 5460.0, 'constraints': 1467.0, 'constraints_binary': 43569.0, 'constraints_ternary': 4649.0, 'acyc_edges': 0.0, 'complexity': 50049.0}}, 'solving': {'solvers': {'choices': 570.0, 'conflicts': 97.0, 'conflicts_analyzed': 97.0, 'restarts': 0.0, 'restarts_last': 19.0, 'extra': {'domain_choices': 69.0, 'models': 1.0, 'models_level': 163.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 96.0, 'distributed_sum_lbd': 183.0, 'integrated': 564.0, 'lemmas': 811.0, 'lits_learnt': 9930.0, 'lemmas_binary': 53.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.125, 'integrated_imps': 444.0, 'integrated_jumps': 30.0, 'guiding_paths_lits': 707.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 96.0, 'lemmas_loop': 174.0, 'lemmas_other': 541.0, 'lits_conflict': 1296.0, 'lits_loop': 1301.0, 'lits_other': 7333.0, 'jumps': {'jumps': 97.0, 'jumps_bounded': 67.0, 'levels': 2172.0, 'levels_bounded': 2067.0, 'max': 102.0, 'max_executed': 102.0, 'max_bounded': 101.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.14113426208496094, 'cpu': 0.25, 'solve': 0.012939453125, 'unsat': 0.0, 'sat': 0.0049591064453125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.2563819885253906, 'cpu': 1.609375, 'solve': 0.11956405639648438, 'unsat': 0.0079498291015625, 'sat': 0.012880325317382812}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1809.0, 'conflicts': 321.0, 'conflicts_analyzed': 299.0, 'restarts': 0.0, 'restarts_last': 19.0, 'extra': {'domain_choices': 114.0, 'models': 6.0, 'models_level': 504.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 297.0, 'distributed_sum_lbd': 483.0, 'integrated': 1174.0, 'lemmas': 1871.0, 'lits_learnt': 19143.0, 'lemmas_binary': 153.0, 'lemmas_ternary': 35.0, 'cpu_time': 0.53125, 'integrated_imps': 799.0, 'integrated_jumps': 176.0, 'guiding_paths_lits': 3942.0, 'guiding_paths': 72.0, 'splits': 0.0, 'lemmas_conflict': 282.0, 'lemmas_loop': 518.0, 'lemmas_other': 1071.0, 'lits_conflict': 2297.0, 'lits_loop': 4185.0, 'lits_other': 12661.0, 'jumps': {'jumps': 299.0, 'jumps_bounded': 113.0, 'levels': 3819.0, 'levels_bounded': 3463.0, 'max': 102.0, 'max_executed': 102.0, 'max_bounded': 101.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 5, 4: 6, 5: 9}

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 6 ( 75.00% solved)

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 9)', truth=True, inc_range=None)

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 9]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 6)

[13-11-2021_23-07-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.113753s.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 10: original = External(symbol='current_last_sgoals(6, 9)', truth=True, inc_range=None), conversion = current_last_sgoals(6,9).

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019231s with result Unsatisfiable.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1329835999999993, Incremental time limit = None
Running cumulative time = 1.3350288000000035, Cumulative time limit = 3600
Used memory = (RSS = 268.023438Mb, VMS = 259.042969Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.105981700000001, solving_time=0.2290471000000025, total_time=1.3350288000000035, memory=Memory(rss=268.0234375, vms=259.04296875), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1137529999999991, solving_time=0.01923060000000021, total_time=0.1329835999999993, memory=Memory(rss=268.0234375, vms=259.04296875), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 36688.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 229968.0, 'bodies_tr': 229968.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2080.0, 'count_bodies_tr': 2080.0, 'sccs': 187.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3216.0, 'rules': 441722.0, 'rules_normal': 439294.0, 'rules_choice': 2298.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 120.0, 'rules_tr': 441630.0, 'rules_tr_normal': 439294.0, 'rules_tr_choice': 2298.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 28.0, 'eqs': 86161.0, 'eqs_atom': 18967.0, 'eqs_body': 5433.0, 'eqs_other': 61761.0}, 'lpStep': {'atoms': 3209.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24149.0, 'bodies_tr': 24149.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45026.0, 'rules_normal': 44818.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 45026.0, 'rules_tr_normal': 44818.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 6862.0, 'eqs_atom': 1597.0, 'eqs_body': 79.0, 'eqs_other': 5186.0}, 'generator': {'vars': 10481.0, 'vars_eliminated': 0.0, 'vars_frozen': 6829.0, 'constraints': 1954.0, 'constraints_binary': 65176.0, 'constraints_ternary': 7255.0, 'acyc_edges': 0.0, 'complexity': 74827.0}}, 'solving': {'solvers': {'choices': 41.0, 'conflicts': 40.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 14.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 50.0, 'integrated': 100.0, 'lemmas': 105.0, 'lits_learnt': 1759.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 3.0, 'cpu_time': 0.0, 'integrated_imps': 18.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 777.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 22.0, 'lemmas_loop': 38.0, 'lemmas_other': 45.0, 'lits_conflict': 459.0, 'lits_loop': 348.0, 'lits_other': 952.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 7.0, 'levels': 41.0, 'levels_bounded': 7.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1351470947265625, 'cpu': 0.125, 'solve': 0.0039615631103515625, 'unsat': 0.0039615631103515625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.3915290832519531, 'cpu': 1.734375, 'solve': 0.12352561950683594, 'unsat': 0.011911392211914062, 'sat': 0.012880325317382812}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1850.0, 'conflicts': 361.0, 'conflicts_analyzed': 331.0, 'restarts': 0.0, 'restarts_last': 19.0, 'extra': {'domain_choices': 128.0, 'models': 6.0, 'models_level': 504.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 318.0, 'distributed_sum_lbd': 533.0, 'integrated': 1274.0, 'lemmas': 1976.0, 'lits_learnt': 20902.0, 'lemmas_binary': 160.0, 'lemmas_ternary': 38.0, 'cpu_time': 0.53125, 'integrated_imps': 817.0, 'integrated_jumps': 183.0, 'guiding_paths_lits': 4719.0, 'guiding_paths': 79.0, 'splits': 0.0, 'lemmas_conflict': 304.0, 'lemmas_loop': 556.0, 'lemmas_other': 1116.0, 'lits_conflict': 2756.0, 'lits_loop': 4533.0, 'lits_other': 13613.0, 'jumps': {'jumps': 331.0, 'jumps_bounded': 120.0, 'levels': 3860.0, 'levels_bounded': 3470.0, 'max': 102.0, 'max_executed': 102.0, 'max_bounded': 101.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.112937s.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036161s with result Satisfiable.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.149097900000001, Incremental time limit = None
Running cumulative time = 1.4841267000000045, Cumulative time limit = 3600
Used memory = (RSS = 274.050781Mb, VMS = 266.304688Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.218919s, Solving = 0.265208s, Total = 1.484127s, Memory = (RSS = 274.050781Mb, VMS = 266.304688Mb)), Calls = 11
Final Model :: Total atoms = 7896, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.218918900000002, solving_time=0.26520780000000244, total_time=1.4841267000000045, memory=Memory(rss=274.05078125, vms=266.3046875), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11293720000000107, solving_time=0.036160699999999935, total_time=0.149097900000001, memory=Memory(rss=274.05078125, vms=266.3046875), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 40145.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 254585.0, 'bodies_tr': 254585.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2282.0, 'count_bodies_tr': 2282.0, 'sccs': 212.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3810.0, 'rules': 487418.0, 'rules_normal': 484782.0, 'rules_choice': 2493.0, 'rules_minimize': 11.0, 'rules_acyc': 0.0, 'rules_heuristic': 132.0, 'rules_tr': 487326.0, 'rules_tr_normal': 484782.0, 'rules_tr_choice': 2493.0, 'rules_tr_minimize': 11.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 40.0, 'eqs': 93671.0, 'eqs_atom': 20776.0, 'eqs_body': 5506.0, 'eqs_other': 67389.0}, 'lpStep': {'atoms': 3457.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24617.0, 'bodies_tr': 24617.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45696.0, 'rules_normal': 45488.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 45696.0, 'rules_tr_normal': 45488.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7510.0, 'eqs_atom': 1809.0, 'eqs_body': 73.0, 'eqs_other': 5628.0}, 'generator': {'vars': 12889.0, 'vars_eliminated': 0.0, 'vars_frozen': 8210.0, 'constraints': 2582.0, 'constraints_binary': 90782.0, 'constraints_ternary': 10750.0, 'acyc_edges': 0.0, 'complexity': 104642.0}}, 'solving': {'solvers': {'choices': 947.0, 'conflicts': 230.0, 'conflicts_analyzed': 230.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 207.0, 'models': 1.0, 'models_level': 201.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 180.0, 'distributed_sum_lbd': 369.0, 'integrated': 1056.0, 'lemmas': 1578.0, 'lits_learnt': 23095.0, 'lemmas_binary': 124.0, 'lemmas_ternary': 84.0, 'cpu_time': 0.125, 'integrated_imps': 768.0, 'integrated_jumps': 130.0, 'guiding_paths_lits': 847.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 196.0, 'lemmas_loop': 380.0, 'lemmas_other': 1002.0, 'lits_conflict': 3401.0, 'lits_loop': 3143.0, 'lits_other': 16551.0, 'jumps': {'jumps': 230.0, 'jumps_bounded': 115.0, 'levels': 2186.0, 'levels_bounded': 1915.0, 'max': 122.0, 'max_executed': 122.0, 'max_bounded': 121.0}}}}, 'summary': {'call': 11.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.1515941619873047, 'cpu': 0.25, 'solve': 0.021940231323242188, 'unsat': 0.0, 'sat': 0.01197052001953125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.5431232452392578, 'cpu': 1.984375, 'solve': 0.14546585083007812, 'unsat': 0.011911392211914062, 'sat': 0.024850845336914062}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2797.0, 'conflicts': 591.0, 'conflicts_analyzed': 561.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 335.0, 'models': 7.0, 'models_level': 705.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 498.0, 'distributed_sum_lbd': 902.0, 'integrated': 2330.0, 'lemmas': 3554.0, 'lits_learnt': 43997.0, 'lemmas_binary': 284.0, 'lemmas_ternary': 122.0, 'cpu_time': 0.65625, 'integrated_imps': 1585.0, 'integrated_jumps': 313.0, 'guiding_paths_lits': 5566.0, 'guiding_paths': 86.0, 'splits': 0.0, 'lemmas_conflict': 500.0, 'lemmas_loop': 936.0, 'lemmas_other': 2118.0, 'lits_conflict': 6157.0, 'lits_loop': 7676.0, 'lits_other': 30164.0, 'jumps': {'jumps': 561.0, 'jumps_bounded': 235.0, 'levels': 6046.0, 'levels_bounded': 5385.0, 'max': 122.0, 'max_executed': 122.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 5, 4: 6, 5: 9, 6: 11}

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 7 ( 87.50% solved)

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 11)', truth=True, inc_range=None)

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 11]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 7)

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.120877s.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 12: original = External(symbol='current_last_sgoals(7, 11)', truth=True, inc_range=None), conversion = current_last_sgoals(7,11).

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035277s with result Satisfiable.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15615430000000075, Incremental time limit = None
Running cumulative time = 1.6402810000000052, Cumulative time limit = 3600
Used memory = (RSS = 278.328125Mb, VMS = 270.207031Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.339796s, Solving = 0.300485s, Total = 1.640281s, Memory = (RSS = 278.328125Mb, VMS = 270.207031Mb)), Calls = 12
Final Model :: Total atoms = 8274, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.3397959000000021, solving_time=0.30048510000000306, total_time=1.6402810000000052, memory=Memory(rss=278.328125, vms=270.20703125), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12087700000000012, solving_time=0.03527730000000062, total_time=0.15615430000000075, memory=Memory(rss=278.328125, vms=270.20703125), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 43610.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 279219.0, 'bodies_tr': 279219.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2484.0, 'count_bodies_tr': 2484.0, 'sccs': 237.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4404.0, 'rules': 533159.0, 'rules_normal': 530315.0, 'rules_choice': 2688.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 533067.0, 'rules_tr_normal': 530315.0, 'rules_tr_choice': 2688.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 52.0, 'eqs': 101223.0, 'eqs_atom': 22593.0, 'eqs_body': 5579.0, 'eqs_other': 73051.0}, 'lpStep': {'atoms': 3465.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24634.0, 'bodies_tr': 24634.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45741.0, 'rules_normal': 45533.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 45741.0, 'rules_tr_normal': 45533.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7552.0, 'eqs_atom': 1817.0, 'eqs_body': 73.0, 'eqs_other': 5662.0}, 'generator': {'vars': 15297.0, 'vars_eliminated': 0.0, 'vars_frozen': 9591.0, 'constraints': 3149.0, 'constraints_binary': 114045.0, 'constraints_ternary': 13854.0, 'acyc_edges': 0.0, 'complexity': 131654.0}}, 'solving': {'solvers': {'choices': 657.0, 'conflicts': 76.0, 'conflicts_analyzed': 76.0, 'restarts': 0.0, 'restarts_last': 15.0, 'extra': {'domain_choices': 70.0, 'models': 1.0, 'models_level': 211.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 66.0, 'distributed_sum_lbd': 135.0, 'integrated': 396.0, 'lemmas': 257.0, 'lits_learnt': 3358.0, 'lemmas_binary': 24.0, 'lemmas_ternary': 7.0, 'cpu_time': 0.109375, 'integrated_imps': 57.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 917.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 66.0, 'lemmas_loop': 110.0, 'lemmas_other': 81.0, 'lits_conflict': 1429.0, 'lits_loop': 908.0, 'lits_other': 1021.0, 'jumps': {'jumps': 76.0, 'jumps_bounded': 7.0, 'levels': 90.0, 'levels_bounded': 7.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 12.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1595745086669922, 'cpu': 0.25, 'solve': 0.015956878662109375, 'unsat': 0.0, 'sat': 0.0069828033447265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.70269775390625, 'cpu': 2.234375, 'solve': 0.1614227294921875, 'unsat': 0.011911392211914062, 'sat': 0.031833648681640625}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3454.0, 'conflicts': 667.0, 'conflicts_analyzed': 637.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 405.0, 'models': 8.0, 'models_level': 916.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 564.0, 'distributed_sum_lbd': 1037.0, 'integrated': 2726.0, 'lemmas': 3811.0, 'lits_learnt': 47355.0, 'lemmas_binary': 308.0, 'lemmas_ternary': 129.0, 'cpu_time': 0.765625, 'integrated_imps': 1642.0, 'integrated_jumps': 313.0, 'guiding_paths_lits': 6483.0, 'guiding_paths': 93.0, 'splits': 0.0, 'lemmas_conflict': 566.0, 'lemmas_loop': 1046.0, 'lemmas_other': 2199.0, 'lits_conflict': 7586.0, 'lits_loop': 8584.0, 'lits_other': 31185.0, 'jumps': {'jumps': 637.0, 'jumps_bounded': 242.0, 'levels': 6136.0, 'levels_bounded': 5392.0, 'max': 122.0, 'max_executed': 122.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 5, 4: 6, 5: 9, 6: 11, 7: 12}

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 8 (100.00% solved)

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 12)', truth=True, inc_range=None)

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 12]:
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 8)

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.121406s.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 13: original = External(symbol='current_last_sgoals(8, 12)', truth=True, inc_range=None), conversion = current_last_sgoals(8,12).

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032653s with result Satisfiable.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15405919999999895, Incremental time limit = None
Running cumulative time = 1.7943402000000042, Cumulative time limit = 3600
Used memory = (RSS = 284.773438Mb, VMS = 275.925781Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.461202s, Solving = 0.333138s, Total = 1.794340s, Memory = (RSS = 284.773438Mb, VMS = 275.925781Mb)), Calls = 13
Final Model :: Total atoms = 8652, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.4612022000000024, solving_time=0.3331380000000017, total_time=1.7943402000000042, memory=Memory(rss=284.7734375, vms=275.92578125), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1214063000000003, solving_time=0.03265289999999865, total_time=0.15405919999999895, memory=Memory(rss=284.7734375, vms=275.92578125), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 47083.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 303870.0, 'bodies_tr': 303870.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2686.0, 'count_bodies_tr': 2686.0, 'sccs': 262.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4998.0, 'rules': 578945.0, 'rules_normal': 575893.0, 'rules_choice': 2883.0, 'rules_minimize': 13.0, 'rules_acyc': 0.0, 'rules_heuristic': 156.0, 'rules_tr': 578853.0, 'rules_tr_normal': 575893.0, 'rules_tr_choice': 2883.0, 'rules_tr_minimize': 13.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 64.0, 'eqs': 108817.0, 'eqs_atom': 24418.0, 'eqs_body': 5652.0, 'eqs_other': 78747.0}, 'lpStep': {'atoms': 3473.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24651.0, 'bodies_tr': 24651.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45786.0, 'rules_normal': 45578.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 45786.0, 'rules_tr_normal': 45578.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7594.0, 'eqs_atom': 1825.0, 'eqs_body': 73.0, 'eqs_other': 5696.0}, 'generator': {'vars': 17705.0, 'vars_eliminated': 0.0, 'vars_frozen': 10972.0, 'constraints': 3777.0, 'constraints_binary': 139743.0, 'constraints_ternary': 17403.0, 'acyc_edges': 0.0, 'complexity': 161615.0}}, 'solving': {'solvers': {'choices': 724.0, 'conflicts': 25.0, 'conflicts_analyzed': 25.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 25.0, 'models': 1.0, 'models_level': 227.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 47.0, 'integrated': 134.0, 'lemmas': 297.0, 'lits_learnt': 3752.0, 'lemmas_binary': 55.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 74.0, 'integrated_jumps': 81.0, 'guiding_paths_lits': 987.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 23.0, 'lemmas_loop': 160.0, 'lemmas_other': 114.0, 'lits_conflict': 407.0, 'lits_loop': 1299.0, 'lits_other': 2046.0, 'jumps': {'jumps': 25.0, 'jumps_bounded': 12.0, 'levels': 40.0, 'levels_bounded': 12.0, 'max': 4.0, 'max_executed': 4.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 13.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.15558433532714844, 'cpu': 0.171875, 'solve': 0.01593017578125, 'unsat': 0.0, 'sat': 0.006954193115234375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.8582820892333984, 'cpu': 2.40625, 'solve': 0.1773529052734375, 'unsat': 0.011911392211914062, 'sat': 0.038787841796875}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4178.0, 'conflicts': 692.0, 'conflicts_analyzed': 662.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 430.0, 'models': 9.0, 'models_level': 1143.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 587.0, 'distributed_sum_lbd': 1084.0, 'integrated': 2860.0, 'lemmas': 4108.0, 'lits_learnt': 51107.0, 'lemmas_binary': 363.0, 'lemmas_ternary': 129.0, 'cpu_time': 0.796875, 'integrated_imps': 1716.0, 'integrated_jumps': 394.0, 'guiding_paths_lits': 7470.0, 'guiding_paths': 100.0, 'splits': 0.0, 'lemmas_conflict': 589.0, 'lemmas_loop': 1206.0, 'lemmas_other': 2313.0, 'lits_conflict': 7993.0, 'lits_loop': 9883.0, 'lits_other': 33231.0, 'jumps': {'jumps': 662.0, 'jumps_bounded': 254.0, 'levels': 6176.0, 'levels_bounded': 5404.0, 'max': 122.0, 'max_executed': 122.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 4, 3: 5, 4: 6, 5: 9, 6: 11, 7: 12, 8: 13}

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 9 (112.50% solved)

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 8 was achieved successfully.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.142372s, Solving = 0.021943s, Total = 0.164315s, Memory = (RSS = 254.941406Mb, VMS = 246.835938Mb)
2 : Statistics :: Grounding = 0.096940s, Solving = 0.014386s, Total = 0.111326s, Memory = (RSS = 257.484375Mb, VMS = 248.964844Mb)
3 : Statistics :: Grounding = 0.104533s, Solving = 0.008861s, Total = 0.113394s, Memory = (RSS = 257.585938Mb, VMS = 248.964844Mb)
4 : Statistics :: Grounding = 0.099707s, Solving = 0.014366s, Total = 0.114074s, Memory = (RSS = 257.863281Mb, VMS = 248.964844Mb)
5 : Statistics :: Grounding = 0.104966s, Solving = 0.016894s, Total = 0.121860s, Memory = (RSS = 259.511719Mb, VMS = 250.875000Mb)
6 : Statistics :: Grounding = 0.104519s, Solving = 0.076442s, Total = 0.180961s, Memory = (RSS = 260.453125Mb, VMS = 251.539062Mb)
7 : Statistics :: Grounding = 0.124520s, Solving = 0.011076s, Total = 0.135595s, Memory = (RSS = 261.613281Mb, VMS = 252.906250Mb)
8 : Statistics :: Grounding = 0.104842s, Solving = 0.016018s, Total = 0.120860s, Memory = (RSS = 264.859375Mb, VMS = 257.183594Mb)
9 : Statistics :: Grounding = 0.109830s, Solving = 0.029832s, Total = 0.139662s, Memory = (RSS = 266.496094Mb, VMS = 257.921875Mb)
10 : Statistics :: Grounding = 0.113753s, Solving = 0.019231s, Total = 0.132984s, Memory = (RSS = 268.023438Mb, VMS = 259.042969Mb)
11 : Statistics :: Grounding = 0.112937s, Solving = 0.036161s, Total = 0.149098s, Memory = (RSS = 274.050781Mb, VMS = 266.304688Mb)
12 : Statistics :: Grounding = 0.120877s, Solving = 0.035277s, Total = 0.156154s, Memory = (RSS = 278.328125Mb, VMS = 270.207031Mb)
13 : Statistics :: Grounding = 0.121406s, Solving = 0.032653s, Total = 0.154059s, Memory = (RSS = 284.773438Mb, VMS = 275.925781Mb)

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.794340s due to: External generator exit.

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 5, 12: 5, 13: 6, 14: 7, 15: 8, 16: 8, 17: 9}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 6, 4: 10, 5: 12, 6: 13, 7: 14, 8: 16, 9: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13}
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 5, 12: 5, 13: 6, 14: 7, 15: 8, 16: 8, 17: 9}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 6, 4: 10, 5: 12, 6: 13, 7: 14, 8: 16, 9: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 8, Last requested goal index = 8 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.461202s, Solving = 0.333138s, Total = 1.794340s, Memory = (RSS = 284.773438Mb, VMS = 275.925781Mb)), Calls = 13
Model :: Total atoms = 8652, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 13 :: Actions = 13                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 2] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 5:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 3] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 4] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 4] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 10:
    Current Sub-goals:
        [Index = 5] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 5] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 12:
    Current Sub-goals:
        [Index = 7] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 7] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Online planning increment 1 finished.

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 1 : Total constraining sgoals = 18 : Achieved sgoals = 9 : Unachieved sgoals = 9
Level = 1 : Solved problems = 1 : Total constraining sgoals = 17 : Achieved sgoals = 8 : Unachieved sgoals = 9

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Current valid planning level range: [1-2]

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Chosen level range for planning increment 2 by method ground-first: [1-1]

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 2:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  17 (Com = 1.00), Sgs = 17, Time =   5.197s (Gro =   3.765s, Sea =   1.432s), Expan (1.89, 1.89) (Dev = (1.05, 1.05), Bal = (0.56, 0.56))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [9-17]

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [9-17], problem number = 2, increment number = 2

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 9)
	('last_sgoals', 17)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 9
last_sgoals = 17
start_step = 13
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 21

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency disabled : Problem type = partial conformance refinement (sequential) with sgoals range [9-17] : Minimum search length bound = disabled with value = 21

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = True, chosen = True

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 12})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,3)', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 17})

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 9 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 9).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 10).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 11).
sub_goal(2, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 12).
sub_goal(2, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 13).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), (block,3), 14).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 15).
sub_goal(2, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 16).
sub_goal(2, talos, put(manipulator_arm_2,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 17).

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-07-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000162C79CC9A0>

[13-11-2021_23-07-37] DEBUG :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[13-11-2021_23-07-37] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000162C79CC9A0> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,0)), 3)).
fix_action(occurs(1, talos, move((store_room,1)), 4)).
fix_action(occurs(1, talos, move((store_room,0)), 5)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 6)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,5))), 7)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 8)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,6))), 9)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,6)), 10)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,5)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 12)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 13)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[13-11-2021_23-07-37] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x00000162C79CC9A0> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), (block,2), 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), (block,2), 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), (block,2), 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), (block,2), 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), (block,2), 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), (block,2), 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,0), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), (block,2), 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), (block,2), 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (store_room,1), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), (block,2), 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), store_room, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), (block,2), 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (store_room,0), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), (block,2), 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), store_room, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), (block,2), 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (store_room,0), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), (block,2), 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), store_room, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), (block,2), 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (store_room,0), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), (block,2), 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), store_room, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), (block,2), 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (store_room,0), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), (block,2), 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), store_room, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), (block,2), 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (store_room,0), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), (block,2), 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), store_room, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), (block,2), 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (store_room,0), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), (block,2), 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), store_room, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), (block,2), 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (store_room,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), (block,2), 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), store_room, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), (block,2), 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (store_room,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), (block,2), 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), store_room, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), (block,2), 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,5), 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,6), 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,5), 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,6), 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (store_room,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), (block,2), 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,5), 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,6), 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), store_room, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), (block,2), 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_1.lp'], Anon #1), Main #1, 8, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 13)
	('last_sgoals', 17)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000162C3F55F40>)
	('first_sgoals', 9)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000162C79CC9A0>)

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 14)', truth=True, inc_range=None)

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122703s.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 14: original = External(symbol='current_last_sgoals(9, 14)', truth=True, inc_range=None), conversion = current_last_sgoals(9,14).

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029200s with result Unsatisfiable.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.15190270000000083, Incremental time limit = None
Running cumulative time = 1.946242900000005, Cumulative time limit = 3600
Used memory = (RSS = 296.597656Mb, VMS = 290.160156Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.5839051000000026, solving_time=0.3623378000000024, total_time=1.946242900000005, memory=Memory(rss=296.59765625, vms=290.16015625), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12270290000000017, solving_time=0.029199800000000664, total_time=0.15190270000000083, memory=Memory(rss=296.59765625, vms=290.16015625), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 52985.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 327806.0, 'bodies_tr': 327806.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2888.0, 'count_bodies_tr': 2888.0, 'sccs': 287.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5585.0, 'rules': 626882.0, 'rules_normal': 623622.0, 'rules_choice': 3078.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 168.0, 'rules_tr': 626782.0, 'rules_tr_normal': 623622.0, 'rules_tr_choice': 3078.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 68.0, 'eqs': 116359.0, 'eqs_atom': 26267.0, 'eqs_body': 5947.0, 'eqs_other': 84145.0}, 'lpStep': {'atoms': 5902.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23936.0, 'bodies_tr': 23936.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 587.0, 'rules': 47937.0, 'rules_normal': 47729.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 47929.0, 'rules_tr_normal': 47729.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 7542.0, 'eqs_atom': 1849.0, 'eqs_body': 295.0, 'eqs_other': 5398.0}, 'generator': {'vars': 20180.0, 'vars_eliminated': 0.0, 'vars_frozen': 12471.0, 'constraints': 217.0, 'constraints_binary': 10011.0, 'constraints_ternary': 813.0, 'acyc_edges': 0.0, 'complexity': 161615.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 10.0, 'lits_learnt': 10.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 160.0, 'guiding_paths': 1.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 10.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 10.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 14.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.22327423095703125, 'cpu': 0.3125, 'solve': 0.004985809326171875, 'unsat': 0.004985809326171875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.0815563201904297, 'cpu': 2.71875, 'solve': 0.18233871459960938, 'unsat': 0.016897201538085938, 'sat': 0.038787841796875}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4178.0, 'conflicts': 692.0, 'conflicts_analyzed': 662.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 430.0, 'models': 9.0, 'models_level': 1143.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 587.0, 'distributed_sum_lbd': 1084.0, 'integrated': 2860.0, 'lemmas': 4118.0, 'lits_learnt': 51117.0, 'lemmas_binary': 363.0, 'lemmas_ternary': 129.0, 'cpu_time': 0.890625, 'integrated_imps': 1716.0, 'integrated_jumps': 394.0, 'guiding_paths_lits': 7630.0, 'guiding_paths': 101.0, 'splits': 0.0, 'lemmas_conflict': 589.0, 'lemmas_loop': 1216.0, 'lemmas_other': 2313.0, 'lits_conflict': 7993.0, 'lits_loop': 9893.0, 'lits_other': 33231.0, 'jumps': {'jumps': 662.0, 'jumps_bounded': 254.0, 'levels': 6176.0, 'levels_bounded': 5404.0, 'max': 122.0, 'max_executed': 122.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.104796s.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028696s with result Satisfiable.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13349159999999927, Incremental time limit = None
Running cumulative time = 2.0797345000000043, Cumulative time limit = 3600
Used memory = (RSS = 296.964844Mb, VMS = 290.210938Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.688701s, Solving = 0.391033s, Total = 2.079735s, Memory = (RSS = 296.964844Mb, VMS = 290.210938Mb)), Calls = 15
Final Model :: Total atoms = 11620, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.6887012000000006, solving_time=0.3910333000000037, total_time=2.0797345000000043, memory=Memory(rss=296.96484375, vms=290.2109375), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10479609999999795, solving_time=0.028695500000001317, total_time=0.13349159999999927, memory=Memory(rss=296.96484375, vms=290.2109375), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 54951.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 349585.0, 'bodies_tr': 349585.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3090.0, 'count_bodies_tr': 3090.0, 'sccs': 300.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5761.0, 'rules': 668901.0, 'rules_normal': 665433.0, 'rules_choice': 3273.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 668789.0, 'rules_tr_normal': 665433.0, 'rules_tr_choice': 3273.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 68.0, 'eqs': 120985.0, 'eqs_atom': 27096.0, 'eqs_body': 6365.0, 'eqs_other': 87524.0}, 'lpStep': {'atoms': 1966.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21779.0, 'bodies_tr': 21779.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176.0, 'rules': 42019.0, 'rules_normal': 41811.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 42007.0, 'rules_tr_normal': 41811.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4626.0, 'eqs_atom': 829.0, 'eqs_body': 418.0, 'eqs_other': 3379.0}, 'generator': {'vars': 20601.0, 'vars_eliminated': 0.0, 'vars_frozen': 12775.0, 'constraints': 352.0, 'constraints_binary': 12024.0, 'constraints_ternary': 1074.0, 'acyc_edges': 0.0, 'complexity': 161615.0}}, 'solving': {'solvers': {'choices': 2330.0, 'conflicts': 51.0, 'conflicts_analyzed': 51.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 275.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 55.0, 'distributed_sum_lbd': 64.0, 'integrated': 116.0, 'lemmas': 172.0, 'lits_learnt': 239.0, 'lemmas_binary': 38.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 100.0, 'integrated_jumps': 1002.0, 'guiding_paths_lits': 1432.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 49.0, 'lemmas_loop': 10.0, 'lemmas_other': 113.0, 'lits_conflict': 52.0, 'lits_loop': 45.0, 'lits_other': 142.0, 'jumps': {'jumps': 51.0, 'jumps_bounded': 14.0, 'levels': 3194.0, 'levels_bounded': 2506.0, 'max': 268.0, 'max_executed': 181.0, 'max_bounded': 179.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.13566970825195312, 'cpu': 0.15625, 'solve': 0.015985488891601562, 'unsat': 0.0, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.217226028442383, 'cpu': 2.875, 'solve': 0.19832420349121094, 'unsat': 0.016897201538085938, 'sat': 0.04078483581542969}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6508.0, 'conflicts': 743.0, 'conflicts_analyzed': 713.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 430.0, 'models': 10.0, 'models_level': 1418.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 642.0, 'distributed_sum_lbd': 1148.0, 'integrated': 2976.0, 'lemmas': 4290.0, 'lits_learnt': 51356.0, 'lemmas_binary': 401.0, 'lemmas_ternary': 129.0, 'cpu_time': 0.921875, 'integrated_imps': 1816.0, 'integrated_jumps': 1396.0, 'guiding_paths_lits': 9062.0, 'guiding_paths': 109.0, 'splits': 0.0, 'lemmas_conflict': 638.0, 'lemmas_loop': 1226.0, 'lemmas_other': 2426.0, 'lits_conflict': 8045.0, 'lits_loop': 9938.0, 'lits_other': 33373.0, 'jumps': {'jumps': 713.0, 'jumps_bounded': 268.0, 'levels': 9370.0, 'levels_bounded': 7910.0, 'max': 268.0, 'max_executed': 181.0, 'max_bounded': 179.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 15}

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 2 ( 22.22% solved)

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 15)', truth=True, inc_range=None)

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 10, step = 15]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 10)

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108719s.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(10, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(10,15).

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014150s with result Unsatisfiable.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.12286879999999911, Incremental time limit = None
Running cumulative time = 2.2026033000000034, Cumulative time limit = 3600
Used memory = (RSS = 297.445312Mb, VMS = 290.261719Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.797419999999999, solving_time=0.40518330000000446, total_time=2.2026033000000034, memory=Memory(rss=297.4453125, vms=290.26171875), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10871879999999834, solving_time=0.014150000000000773, total_time=0.12286879999999911, memory=Memory(rss=297.4453125, vms=290.26171875), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 57857.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 371601.0, 'bodies_tr': 371601.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3292.0, 'count_bodies_tr': 3292.0, 'sccs': 313.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5947.0, 'rules': 711417.0, 'rules_normal': 707741.0, 'rules_choice': 3468.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 192.0, 'rules_tr': 711294.0, 'rules_tr_normal': 707741.0, 'rules_tr_choice': 3468.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 69.0, 'eqs': 126554.0, 'eqs_atom': 28004.0, 'eqs_body': 6765.0, 'eqs_other': 91785.0}, 'lpStep': {'atoms': 2906.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22016.0, 'bodies_tr': 22016.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 42516.0, 'rules_normal': 42308.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 42505.0, 'rules_tr_normal': 42308.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 5569.0, 'eqs_atom': 908.0, 'eqs_body': 400.0, 'eqs_other': 4261.0}, 'generator': {'vars': 21031.0, 'vars_eliminated': 0.0, 'vars_frozen': 13101.0, 'constraints': 382.0, 'constraints_binary': 12905.0, 'constraints_ternary': 557.0, 'acyc_edges': 0.0, 'complexity': 161615.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 1.0, 'lits_learnt': 2.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1386.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 1.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 2.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 16.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.12566375732421875, 'cpu': 0.125, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.3428897857666016, 'cpu': 3.0, 'solve': 0.2003173828125, 'unsat': 0.018890380859375, 'sat': 0.04078483581542969}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6508.0, 'conflicts': 749.0, 'conflicts_analyzed': 713.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 430.0, 'models': 10.0, 'models_level': 1418.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 643.0, 'distributed_sum_lbd': 1150.0, 'integrated': 2976.0, 'lemmas': 4291.0, 'lits_learnt': 51358.0, 'lemmas_binary': 402.0, 'lemmas_ternary': 129.0, 'cpu_time': 0.921875, 'integrated_imps': 1816.0, 'integrated_jumps': 1396.0, 'guiding_paths_lits': 10448.0, 'guiding_paths': 116.0, 'splits': 0.0, 'lemmas_conflict': 638.0, 'lemmas_loop': 1227.0, 'lemmas_other': 2426.0, 'lits_conflict': 8045.0, 'lits_loop': 9940.0, 'lits_other': 33373.0, 'jumps': {'jumps': 713.0, 'jumps_bounded': 268.0, 'levels': 9370.0, 'levels_bounded': 7910.0, 'max': 268.0, 'max_executed': 181.0, 'max_bounded': 179.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.106783s.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022525s with result Unsatisfiable.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.12930810000000292, Incremental time limit = None
Running cumulative time = 2.3319114000000063, Cumulative time limit = 3600
Used memory = (RSS = 297.796875Mb, VMS = 290.351562Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.9042034, solving_time=0.4277080000000062, total_time=2.3319114000000063, memory=Memory(rss=297.796875, vms=290.3515625), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1067834000000012, solving_time=0.02252470000000173, total_time=0.12930810000000292, memory=Memory(rss=297.796875, vms=290.3515625), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 60712.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 394026.0, 'bodies_tr': 394026.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3494.0, 'count_bodies_tr': 3494.0, 'sccs': 330.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6201.0, 'rules': 755168.0, 'rules_normal': 751284.0, 'rules_choice': 3663.0, 'rules_minimize': 17.0, 'rules_acyc': 0.0, 'rules_heuristic': 204.0, 'rules_tr': 755035.0, 'rules_tr_normal': 751284.0, 'rules_tr_choice': 3663.0, 'rules_tr_minimize': 17.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 71.0, 'eqs': 135369.0, 'eqs_atom': 29623.0, 'eqs_body': 7276.0, 'eqs_other': 98470.0}, 'lpStep': {'atoms': 2855.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22425.0, 'bodies_tr': 22425.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 254.0, 'rules': 43751.0, 'rules_normal': 43543.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 43741.0, 'rules_tr_normal': 43543.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 8815.0, 'eqs_atom': 1619.0, 'eqs_body': 511.0, 'eqs_other': 6685.0}, 'generator': {'vars': 21841.0, 'vars_eliminated': 0.0, 'vars_frozen': 13636.0, 'constraints': 576.0, 'constraints_binary': 19426.0, 'constraints_ternary': 1331.0, 'acyc_edges': 0.0, 'complexity': 161615.0}}, 'solving': {'solvers': {'choices': 53.0, 'conflicts': 32.0, 'conflicts_analyzed': 27.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 17.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 44.0, 'distributed_sum_lbd': 75.0, 'integrated': 218.0, 'lemmas': 239.0, 'lits_learnt': 994.0, 'lemmas_binary': 67.0, 'lemmas_ternary': 7.0, 'cpu_time': 0.0, 'integrated_imps': 99.0, 'integrated_jumps': 21.0, 'guiding_paths_lits': 1519.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 27.0, 'lemmas_loop': 41.0, 'lemmas_other': 171.0, 'lits_conflict': 131.0, 'lits_loop': 226.0, 'lits_other': 637.0, 'jumps': {'jumps': 27.0, 'jumps_bounded': 17.0, 'levels': 3721.0, 'levels_bounded': 3689.0, 'max': 219.0, 'max_executed': 219.0, 'max_bounded': 217.0}}}}, 'summary': {'call': 17.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.13164710998535156, 'cpu': 0.125, 'solve': 0.0019683837890625, 'unsat': 0.0019683837890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.474536895751953, 'cpu': 3.125, 'solve': 0.2022857666015625, 'unsat': 0.0208587646484375, 'sat': 0.04078483581542969}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6561.0, 'conflicts': 781.0, 'conflicts_analyzed': 740.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 447.0, 'models': 10.0, 'models_level': 1418.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 687.0, 'distributed_sum_lbd': 1225.0, 'integrated': 3194.0, 'lemmas': 4530.0, 'lits_learnt': 52352.0, 'lemmas_binary': 469.0, 'lemmas_ternary': 136.0, 'cpu_time': 0.921875, 'integrated_imps': 1915.0, 'integrated_jumps': 1417.0, 'guiding_paths_lits': 11967.0, 'guiding_paths': 123.0, 'splits': 0.0, 'lemmas_conflict': 665.0, 'lemmas_loop': 1268.0, 'lemmas_other': 2597.0, 'lits_conflict': 8176.0, 'lits_loop': 10166.0, 'lits_other': 34010.0, 'jumps': {'jumps': 740.0, 'jumps_bounded': 285.0, 'levels': 13091.0, 'levels_bounded': 11599.0, 'max': 268.0, 'max_executed': 219.0, 'max_bounded': 217.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108186s.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034943s with result Satisfiable.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14312920000000062, Incremental time limit = None
Running cumulative time = 2.475040600000007, Cumulative time limit = 3600
Used memory = (RSS = 299.957031Mb, VMS = 292.210938Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.012389s, Solving = 0.462651s, Total = 2.475041s, Memory = (RSS = 299.957031Mb, VMS = 292.210938Mb)), Calls = 18
Final Model :: Total atoms = 12754, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.012389200000001, solving_time=0.4626514000000057, total_time=2.475040600000007, memory=Memory(rss=299.95703125, vms=292.2109375), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10818580000000111, solving_time=0.034943399999999514, total_time=0.14312920000000062, memory=Memory(rss=299.95703125, vms=292.2109375), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 63644.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 416698.0, 'bodies_tr': 416698.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3696.0, 'count_bodies_tr': 3696.0, 'sccs': 347.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6455.0, 'rules': 799303.0, 'rules_normal': 795211.0, 'rules_choice': 3858.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 216.0, 'rules_tr': 799162.0, 'rules_tr_normal': 795211.0, 'rules_tr_choice': 3858.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 75.0, 'eqs': 144978.0, 'eqs_atom': 31227.0, 'eqs_body': 7730.0, 'eqs_other': 106021.0}, 'lpStep': {'atoms': 2932.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22672.0, 'bodies_tr': 22672.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 254.0, 'rules': 44135.0, 'rules_normal': 43927.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 44127.0, 'rules_tr_normal': 43927.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 9609.0, 'eqs_atom': 1604.0, 'eqs_body': 454.0, 'eqs_other': 7551.0}, 'generator': {'vars': 22786.0, 'vars_eliminated': 0.0, 'vars_frozen': 14239.0, 'constraints': 738.0, 'constraints_binary': 26545.0, 'constraints_ternary': 1961.0, 'acyc_edges': 0.0, 'complexity': 161615.0}}, 'solving': {'solvers': {'choices': 947.0, 'conflicts': 118.0, 'conflicts_analyzed': 118.0, 'restarts': 0.0, 'restarts_last': 10.0, 'extra': {'domain_choices': 21.0, 'models': 1.0, 'models_level': 353.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 116.0, 'distributed_sum_lbd': 162.0, 'integrated': 246.0, 'lemmas': 425.0, 'lits_learnt': 2655.0, 'lemmas_binary': 20.0, 'lemmas_ternary': 7.0, 'cpu_time': 0.03125, 'integrated_imps': 124.0, 'integrated_jumps': 68.0, 'guiding_paths_lits': 1888.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 115.0, 'lemmas_loop': 82.0, 'lemmas_other': 228.0, 'lits_conflict': 342.0, 'lits_loop': 730.0, 'lits_other': 1583.0, 'jumps': {'jumps': 118.0, 'jumps_bounded': 16.0, 'levels': 3906.0, 'levels_bounded': 3776.0, 'max': 238.0, 'max_executed': 238.0, 'max_bounded': 236.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.14560699462890625, 'cpu': 0.15625, 'solve': 0.016927719116210938, 'unsat': 0.0, 'sat': 0.0029659271240234375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.6201438903808594, 'cpu': 3.28125, 'solve': 0.21921348571777344, 'unsat': 0.0208587646484375, 'sat': 0.043750762939453125}, 'models': {'enumerated': 11.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 7508.0, 'conflicts': 899.0, 'conflicts_analyzed': 858.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 468.0, 'models': 11.0, 'models_level': 1771.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 803.0, 'distributed_sum_lbd': 1387.0, 'integrated': 3440.0, 'lemmas': 4955.0, 'lits_learnt': 55007.0, 'lemmas_binary': 489.0, 'lemmas_ternary': 143.0, 'cpu_time': 0.953125, 'integrated_imps': 2039.0, 'integrated_jumps': 1485.0, 'guiding_paths_lits': 13855.0, 'guiding_paths': 131.0, 'splits': 0.0, 'lemmas_conflict': 780.0, 'lemmas_loop': 1350.0, 'lemmas_other': 2825.0, 'lits_conflict': 8518.0, 'lits_loop': 10896.0, 'lits_other': 35593.0, 'jumps': {'jumps': 858.0, 'jumps_bounded': 301.0, 'levels': 16997.0, 'levels_bounded': 15375.0, 'max': 268.0, 'max_executed': 238.0, 'max_bounded': 236.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 15, 10: 18}

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 3 ( 33.33% solved)

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 18)', truth=True, inc_range=None)

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 11, step = 18]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 11)

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Reaction at search length 18:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.116763s.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(11, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(11,18).

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031274s with result Satisfiable.

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14803699999999864, Incremental time limit = None
Running cumulative time = 2.6230776000000056, Cumulative time limit = 3600
Used memory = (RSS = 302.613281Mb, VMS = 294.628906Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 12
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.129153s, Solving = 0.493925s, Total = 2.623078s, Memory = (RSS = 302.613281Mb, VMS = 294.628906Mb)), Calls = 19
Final Model :: Total atoms = 13135, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.1291525, solving_time=0.49392510000000556, total_time=2.6230776000000056, memory=Memory(rss=302.61328125, vms=294.62890625), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11676329999999879, solving_time=0.03127369999999985, total_time=0.14803699999999864, memory=Memory(rss=302.61328125, vms=294.62890625), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 66586.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 439130.0, 'bodies_tr': 439130.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3898.0, 'count_bodies_tr': 3898.0, 'sccs': 360.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6682.0, 'rules': 843224.0, 'rules_normal': 838924.0, 'rules_choice': 4053.0, 'rules_minimize': 19.0, 'rules_acyc': 0.0, 'rules_heuristic': 228.0, 'rules_tr': 843073.0, 'rules_tr_normal': 838924.0, 'rules_tr_choice': 4053.0, 'rules_tr_minimize': 19.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 77.0, 'eqs': 152748.0, 'eqs_atom': 32783.0, 'eqs_body': 8179.0, 'eqs_other': 111786.0}, 'lpStep': {'atoms': 2942.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22432.0, 'bodies_tr': 22432.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 227.0, 'rules': 43921.0, 'rules_normal': 43713.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 43911.0, 'rules_tr_normal': 43713.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 7770.0, 'eqs_atom': 1556.0, 'eqs_body': 449.0, 'eqs_other': 5765.0}, 'generator': {'vars': 23441.0, 'vars_eliminated': 0.0, 'vars_frozen': 14675.0, 'constraints': 800.0, 'constraints_binary': 23582.0, 'constraints_ternary': 1899.0, 'acyc_edges': 0.0, 'complexity': 161615.0}}, 'solving': {'solvers': {'choices': 857.0, 'conflicts': 19.0, 'conflicts_analyzed': 19.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 2.0, 'models': 1.0, 'models_level': 375.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 27.0, 'integrated': 42.0, 'lemmas': 127.0, 'lits_learnt': 824.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 34.0, 'integrated_jumps': 9.0, 'guiding_paths_lits': 1785.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 19.0, 'lemmas_loop': 67.0, 'lemmas_other': 41.0, 'lits_conflict': 42.0, 'lits_loop': 598.0, 'lits_other': 184.0, 'jumps': {'jumps': 19.0, 'jumps_bounded': 4.0, 'levels': 533.0, 'levels_bounded': 512.0, 'max': 256.0, 'max_executed': 256.0, 'max_bounded': 255.0}}}}, 'summary': {'call': 19.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.15059661865234375, 'cpu': 0.171875, 'solve': 0.014957427978515625, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.770740509033203, 'cpu': 3.453125, 'solve': 0.23417091369628906, 'unsat': 0.0208587646484375, 'sat': 0.045745849609375}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 8365.0, 'conflicts': 918.0, 'conflicts_analyzed': 877.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 470.0, 'models': 12.0, 'models_level': 2146.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 823.0, 'distributed_sum_lbd': 1414.0, 'integrated': 3482.0, 'lemmas': 5082.0, 'lits_learnt': 55831.0, 'lemmas_binary': 495.0, 'lemmas_ternary': 143.0, 'cpu_time': 0.984375, 'integrated_imps': 2073.0, 'integrated_jumps': 1494.0, 'guiding_paths_lits': 15640.0, 'guiding_paths': 138.0, 'splits': 0.0, 'lemmas_conflict': 799.0, 'lemmas_loop': 1417.0, 'lemmas_other': 2866.0, 'lits_conflict': 8560.0, 'lits_loop': 11494.0, 'lits_other': 35777.0, 'jumps': {'jumps': 877.0, 'jumps_bounded': 305.0, 'levels': 17530.0, 'levels_bounded': 15887.0, 'max': 268.0, 'max_executed': 256.0, 'max_bounded': 255.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 15, 10: 18, 11: 19}

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 4 ( 44.44% solved)

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 19)', truth=True, inc_range=None)

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 19]:
sub_goal(2, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 12)

[13-11-2021_23-07-38] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.129652s.

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 20: original = External(symbol='current_last_sgoals(12, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(12,19).

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020639s with result Unsatisfiable.

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.15029010000000298, Incremental time limit = None
Running cumulative time = 2.7733677000000085, Cumulative time limit = 3600
Used memory = (RSS = 303.878906Mb, VMS = 295.511719Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.2588040000000014, solving_time=0.5145637000000072, total_time=2.7733677000000085, memory=Memory(rss=303.87890625, vms=295.51171875), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12965150000000136, solving_time=0.020638600000001617, total_time=0.15029010000000298, memory=Memory(rss=303.87890625, vms=295.51171875), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 69490.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 461748.0, 'bodies_tr': 461748.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4100.0, 'count_bodies_tr': 4100.0, 'sccs': 377.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6936.0, 'rules': 887579.0, 'rules_normal': 883071.0, 'rules_choice': 4248.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 240.0, 'rules_tr': 887420.0, 'rules_tr_normal': 883071.0, 'rules_tr_choice': 4248.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 81.0, 'eqs': 161062.0, 'eqs_atom': 34365.0, 'eqs_body': 8521.0, 'eqs_other': 118176.0}, 'lpStep': {'atoms': 2904.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22618.0, 'bodies_tr': 22618.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 254.0, 'rules': 44355.0, 'rules_normal': 44147.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 44347.0, 'rules_tr_normal': 44147.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 8314.0, 'eqs_atom': 1582.0, 'eqs_body': 342.0, 'eqs_other': 6390.0}, 'generator': {'vars': 24293.0, 'vars_eliminated': 0.0, 'vars_frozen': 15245.0, 'constraints': 1007.0, 'constraints_binary': 31343.0, 'constraints_ternary': 2807.0, 'acyc_edges': 0.0, 'complexity': 161615.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1918.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 20.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.15259361267089844, 'cpu': 0.140625, 'solve': 0.0029659271240234375, 'unsat': 0.0029659271240234375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.9233341217041016, 'cpu': 3.59375, 'solve': 0.2371368408203125, 'unsat': 0.023824691772460938, 'sat': 0.045745849609375}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 8365.0, 'conflicts': 926.0, 'conflicts_analyzed': 877.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 470.0, 'models': 12.0, 'models_level': 2146.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 823.0, 'distributed_sum_lbd': 1414.0, 'integrated': 3482.0, 'lemmas': 5082.0, 'lits_learnt': 55831.0, 'lemmas_binary': 495.0, 'lemmas_ternary': 143.0, 'cpu_time': 0.984375, 'integrated_imps': 2073.0, 'integrated_jumps': 1494.0, 'guiding_paths_lits': 17558.0, 'guiding_paths': 145.0, 'splits': 0.0, 'lemmas_conflict': 799.0, 'lemmas_loop': 1417.0, 'lemmas_other': 2866.0, 'lits_conflict': 8560.0, 'lits_loop': 11494.0, 'lits_other': 35777.0, 'jumps': {'jumps': 877.0, 'jumps_bounded': 305.0, 'levels': 17530.0, 'levels_bounded': 15887.0, 'max': 268.0, 'max_executed': 256.0, 'max_bounded': 255.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108258s.

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.141824s with result Satisfiable.

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2500828999999989, Incremental time limit = None
Running cumulative time = 3.0234506000000074, Cumulative time limit = 3600
Used memory = (RSS = 306.812500Mb, VMS = 298.292969Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 13
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.367062s, Solving = 0.656388s, Total = 3.023451s, Memory = (RSS = 306.812500Mb, VMS = 298.292969Mb)), Calls = 21
Final Model :: Total atoms = 13896, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=20, end_step=21, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.3670624999999994, solving_time=0.656388100000008, total_time=3.0234506000000074, memory=Memory(rss=306.8125, vms=298.29296875), step_range=range(0, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10825849999999804, solving_time=0.14182440000000085, total_time=0.2500828999999989, memory=Memory(rss=306.8125, vms=298.29296875), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 72424.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 484576.0, 'bodies_tr': 484576.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4302.0, 'count_bodies_tr': 4302.0, 'sccs': 394.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7194.0, 'rules': 932279.0, 'rules_normal': 927563.0, 'rules_choice': 4443.0, 'rules_minimize': 21.0, 'rules_acyc': 0.0, 'rules_heuristic': 252.0, 'rules_tr': 932112.0, 'rules_tr_normal': 927563.0, 'rules_tr_choice': 4443.0, 'rules_tr_minimize': 21.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 85.0, 'eqs': 170976.0, 'eqs_atom': 35949.0, 'eqs_body': 8944.0, 'eqs_other': 126083.0}, 'lpStep': {'atoms': 2934.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22828.0, 'bodies_tr': 22828.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 258.0, 'rules': 44700.0, 'rules_normal': 44492.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 44692.0, 'rules_tr_normal': 44492.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 9914.0, 'eqs_atom': 1584.0, 'eqs_body': 423.0, 'eqs_other': 7907.0}, 'generator': {'vars': 25287.0, 'vars_eliminated': 0.0, 'vars_frozen': 15866.0, 'constraints': 1233.0, 'constraints_binary': 41423.0, 'constraints_ternary': 3631.0, 'acyc_edges': 0.0, 'complexity': 161615.0}}, 'solving': {'solvers': {'choices': 956.0, 'conflicts': 57.0, 'conflicts_analyzed': 57.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 19.0, 'models': 1.0, 'models_level': 426.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 63.0, 'distributed_sum_lbd': 75.0, 'integrated': 93.0, 'lemmas': 181.0, 'lits_learnt': 499.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 16.0, 'cpu_time': 0.25, 'integrated_imps': 81.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 2344.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 55.0, 'lemmas_loop': 33.0, 'lemmas_other': 93.0, 'lits_conflict': 66.0, 'lits_loop': 263.0, 'lits_other': 170.0, 'jumps': {'jumps': 57.0, 'jumps_bounded': 12.0, 'levels': 3574.0, 'levels_bounded': 3516.0, 'max': 294.0, 'max_executed': 294.0, 'max_bounded': 293.0}}}}, 'summary': {'call': 21.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.2528343200683594, 'cpu': 0.375, 'solve': 0.12318038940429688, 'unsat': 0.0, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.176168441772461, 'cpu': 3.96875, 'solve': 0.3603172302246094, 'unsat': 0.023824691772460938, 'sat': 0.04873847961425781}, 'models': {'enumerated': 13.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 9321.0, 'conflicts': 983.0, 'conflicts_analyzed': 934.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 489.0, 'models': 13.0, 'models_level': 2572.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 886.0, 'distributed_sum_lbd': 1489.0, 'integrated': 3575.0, 'lemmas': 5263.0, 'lits_learnt': 56330.0, 'lemmas_binary': 503.0, 'lemmas_ternary': 159.0, 'cpu_time': 1.234375, 'integrated_imps': 2154.0, 'integrated_jumps': 1501.0, 'guiding_paths_lits': 19902.0, 'guiding_paths': 153.0, 'splits': 0.0, 'lemmas_conflict': 854.0, 'lemmas_loop': 1450.0, 'lemmas_other': 2959.0, 'lits_conflict': 8626.0, 'lits_loop': 11757.0, 'lits_other': 35947.0, 'jumps': {'jumps': 934.0, 'jumps_bounded': 317.0, 'levels': 21104.0, 'levels_bounded': 19403.0, 'max': 294.0, 'max_executed': 294.0, 'max_bounded': 293.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 15, 10: 18, 11: 19, 12: 21}

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 5 ( 55.56% solved)

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 21)', truth=True, inc_range=None)

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 21]:
sub_goal(2, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 13)

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.139779s.

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 22: original = External(symbol='current_last_sgoals(13, 21)', truth=True, inc_range=None), conversion = current_last_sgoals(13,21).

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036286s with result Satisfiable.

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.17606500000000125, Incremental time limit = None
Running cumulative time = 3.1995156000000087, Cumulative time limit = 3600
Used memory = (RSS = 309.855469Mb, VMS = 301.117188Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 14
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.506841s, Solving = 0.692675s, Total = 3.199516s, Memory = (RSS = 309.855469Mb, VMS = 301.117188Mb)), Calls = 22
Final Model :: Total atoms = 14279, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=21, end_step=22, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.5068410000000014, solving_time=0.6926746000000072, total_time=3.1995156000000087, memory=Memory(rss=309.85546875, vms=301.1171875), step_range=range(0, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13977850000000203, solving_time=0.03628649999999922, total_time=0.17606500000000125, memory=Memory(rss=309.85546875, vms=301.1171875), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 75381.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 507416.0, 'bodies_tr': 507416.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4504.0, 'count_bodies_tr': 4504.0, 'sccs': 411.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7452.0, 'rules': 977128.0, 'rules_normal': 972204.0, 'rules_choice': 4638.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 264.0, 'rules_tr': 976953.0, 'rules_tr_normal': 972204.0, 'rules_tr_choice': 4638.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 89.0, 'eqs': 181046.0, 'eqs_atom': 37549.0, 'eqs_body': 9377.0, 'eqs_other': 134120.0}, 'lpStep': {'atoms': 2957.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22840.0, 'bodies_tr': 22840.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 258.0, 'rules': 44849.0, 'rules_normal': 44641.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 44841.0, 'rules_tr_normal': 44641.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 10070.0, 'eqs_atom': 1600.0, 'eqs_body': 433.0, 'eqs_other': 8037.0}, 'generator': {'vars': 26275.0, 'vars_eliminated': 0.0, 'vars_frozen': 16485.0, 'constraints': 1428.0, 'constraints_binary': 47063.0, 'constraints_ternary': 4092.0, 'acyc_edges': 0.0, 'complexity': 161615.0}}, 'solving': {'solvers': {'choices': 973.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 7.0, 'models': 1.0, 'models_level': 451.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 60.0, 'lits_learnt': 516.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.09375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2184.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 60.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 516.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 22.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1795215606689453, 'cpu': 0.25, 'solve': 0.015956878662109375, 'unsat': 0.0, 'sat': 0.00299072265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.3556900024414062, 'cpu': 4.21875, 'solve': 0.37627410888671875, 'unsat': 0.023824691772460938, 'sat': 0.05172920227050781}, 'models': {'enumerated': 14.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 10294.0, 'conflicts': 983.0, 'conflicts_analyzed': 934.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 496.0, 'models': 14.0, 'models_level': 3023.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 890.0, 'distributed_sum_lbd': 1497.0, 'integrated': 3575.0, 'lemmas': 5323.0, 'lits_learnt': 56846.0, 'lemmas_binary': 503.0, 'lemmas_ternary': 163.0, 'cpu_time': 1.328125, 'integrated_imps': 2154.0, 'integrated_jumps': 1501.0, 'guiding_paths_lits': 22086.0, 'guiding_paths': 160.0, 'splits': 0.0, 'lemmas_conflict': 854.0, 'lemmas_loop': 1510.0, 'lemmas_other': 2959.0, 'lits_conflict': 8626.0, 'lits_loop': 12273.0, 'lits_other': 35947.0, 'jumps': {'jumps': 934.0, 'jumps_bounded': 317.0, 'levels': 21104.0, 'levels_bounded': 19403.0, 'max': 294.0, 'max_executed': 294.0, 'max_bounded': 293.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 15, 10: 18, 11: 19, 12: 21, 13: 22}

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 6 ( 66.67% solved)

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 22)', truth=True, inc_range=None)

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 14, step = 22]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), (block,3), 14)

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Reaction at search length 22:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.117010s.

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 23: original = External(symbol='current_last_sgoals(14, 22)', truth=True, inc_range=None), conversion = current_last_sgoals(14,22).

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031521s with result Unsatisfiable.

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.14853130000000192, Incremental time limit = None
Running cumulative time = 3.3480469000000106, Cumulative time limit = 3600
Used memory = (RSS = 342.929688Mb, VMS = 343.894531Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=22, end_step=23, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.623851400000003, solving_time=0.7241955000000075, total_time=3.3480469000000106, memory=Memory(rss=342.9296875, vms=343.89453125), step_range=range(0, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11701040000000162, solving_time=0.031520900000000296, total_time=0.14853130000000192, memory=Memory(rss=342.9296875, vms=343.89453125), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 78342.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 530661.0, 'bodies_tr': 530661.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4706.0, 'count_bodies_tr': 4706.0, 'sccs': 436.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7850.0, 'rules': 1022518.0, 'rules_normal': 1017386.0, 'rules_choice': 4833.0, 'rules_minimize': 23.0, 'rules_acyc': 0.0, 'rules_heuristic': 276.0, 'rules_tr': 1022339.0, 'rules_tr_normal': 1017386.0, 'rules_tr_choice': 4833.0, 'rules_tr_minimize': 23.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 97.0, 'eqs': 188950.0, 'eqs_atom': 39012.0, 'eqs_body': 9561.0, 'eqs_other': 140377.0}, 'lpStep': {'atoms': 2961.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23245.0, 'bodies_tr': 23245.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 45390.0, 'rules_normal': 45182.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 45386.0, 'rules_tr_normal': 45182.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 7904.0, 'eqs_atom': 1463.0, 'eqs_body': 184.0, 'eqs_other': 6257.0}, 'generator': {'vars': 27840.0, 'vars_eliminated': 0.0, 'vars_frozen': 17444.0, 'constraints': 1831.0, 'constraints_binary': 63016.0, 'constraints_ternary': 5696.0, 'acyc_edges': 0.0, 'complexity': 161615.0}}, 'solving': {'solvers': {'choices': 34.0, 'conflicts': 30.0, 'conflicts_analyzed': 24.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 21.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 19.0, 'distributed_sum_lbd': 33.0, 'integrated': 68.0, 'lemmas': 162.0, 'lits_learnt': 1489.0, 'lemmas_binary': 13.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.09375, 'integrated_imps': 58.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 1986.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 20.0, 'lemmas_loop': 76.0, 'lemmas_other': 66.0, 'lits_conflict': 166.0, 'lits_loop': 622.0, 'lits_other': 701.0, 'jumps': {'jumps': 24.0, 'jumps_bounded': 13.0, 'levels': 1690.0, 'levels_bounded': 1663.0, 'max': 332.0, 'max_executed': 332.0, 'max_bounded': 331.0}}}}, 'summary': {'call': 23.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.1515979766845703, 'cpu': 0.328125, 'solve': 0.006984710693359375, 'unsat': 0.006984710693359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.5072879791259766, 'cpu': 4.546875, 'solve': 0.3832588195800781, 'unsat': 0.030809402465820312, 'sat': 0.05172920227050781}, 'models': {'enumerated': 14.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 10328.0, 'conflicts': 1013.0, 'conflicts_analyzed': 958.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 517.0, 'models': 14.0, 'models_level': 3023.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 909.0, 'distributed_sum_lbd': 1530.0, 'integrated': 3643.0, 'lemmas': 5485.0, 'lits_learnt': 58335.0, 'lemmas_binary': 516.0, 'lemmas_ternary': 169.0, 'cpu_time': 1.421875, 'integrated_imps': 2212.0, 'integrated_jumps': 1508.0, 'guiding_paths_lits': 24072.0, 'guiding_paths': 166.0, 'splits': 0.0, 'lemmas_conflict': 874.0, 'lemmas_loop': 1586.0, 'lemmas_other': 3025.0, 'lits_conflict': 8792.0, 'lits_loop': 12895.0, 'lits_other': 36648.0, 'jumps': {'jumps': 958.0, 'jumps_bounded': 330.0, 'levels': 22794.0, 'levels_bounded': 21066.0, 'max': 332.0, 'max_executed': 332.0, 'max_bounded': 331.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.157403s.

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.057944s with result Satisfiable.

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.21534670000000133, Incremental time limit = None
Running cumulative time = 3.563393600000012, Cumulative time limit = 3600
Used memory = (RSS = 371.996094Mb, VMS = 376.703125Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 15
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.781255s, Solving = 0.782139s, Total = 3.563394s, Memory = (RSS = 371.996094Mb, VMS = 376.703125Mb)), Calls = 24
Final Model :: Total atoms = 15046, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=23, end_step=24, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.781254600000004, solving_time=0.7821390000000079, total_time=3.563393600000012, memory=Memory(rss=371.99609375, vms=376.703125), step_range=range(0, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15740320000000096, solving_time=0.05794350000000037, total_time=0.21534670000000133, memory=Memory(rss=371.99609375, vms=376.703125), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 81551.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 554468.0, 'bodies_tr': 554468.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4908.0, 'count_bodies_tr': 4908.0, 'sccs': 461.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8254.0, 'rules': 1068781.0, 'rules_normal': 1063441.0, 'rules_choice': 5028.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 288.0, 'rules_tr': 1068598.0, 'rules_tr_normal': 1063441.0, 'rules_tr_choice': 5028.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 105.0, 'eqs': 201131.0, 'eqs_atom': 40707.0, 'eqs_body': 9850.0, 'eqs_other': 150574.0}, 'lpStep': {'atoms': 3209.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23807.0, 'bodies_tr': 23807.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 404.0, 'rules': 46263.0, 'rules_normal': 46055.0, 'rules_choice': 195.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 46259.0, 'rules_tr_normal': 46055.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 12181.0, 'eqs_atom': 1695.0, 'eqs_body': 289.0, 'eqs_other': 10197.0}, 'generator': {'vars': 29582.0, 'vars_eliminated': 0.0, 'vars_frozen': 18463.0, 'constraints': 2255.0, 'constraints_binary': 81848.0, 'constraints_ternary': 7628.0, 'acyc_edges': 0.0, 'complexity': 161615.0}}, 'solving': {'solvers': {'choices': 1063.0, 'conflicts': 6.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 13.0, 'models': 1.0, 'models_level': 501.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 18.0, 'integrated': 36.0, 'lemmas': 110.0, 'lits_learnt': 945.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2450.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 68.0, 'lemmas_other': 36.0, 'lits_conflict': 66.0, 'lits_loop': 483.0, 'lits_other': 396.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 0.0, 'levels': 6.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 24.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2189006805419922, 'cpu': 0.453125, 'solve': 0.020458221435546875, 'unsat': 0.0, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.7261886596679688, 'cpu': 5.0, 'solve': 0.403717041015625, 'unsat': 0.030809402465820312, 'sat': 0.055721282958984375}, 'models': {'enumerated': 15.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 11391.0, 'conflicts': 1019.0, 'conflicts_analyzed': 964.0, 'restarts': 0.0, 'restarts_last': 37.0, 'extra': {'domain_choices': 530.0, 'models': 15.0, 'models_level': 3524.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 915.0, 'distributed_sum_lbd': 1548.0, 'integrated': 3679.0, 'lemmas': 5595.0, 'lits_learnt': 59280.0, 'lemmas_binary': 516.0, 'lemmas_ternary': 169.0, 'cpu_time': 1.453125, 'integrated_imps': 2212.0, 'integrated_jumps': 1508.0, 'guiding_paths_lits': 26522.0, 'guiding_paths': 173.0, 'splits': 0.0, 'lemmas_conflict': 880.0, 'lemmas_loop': 1654.0, 'lemmas_other': 3061.0, 'lits_conflict': 8858.0, 'lits_loop': 13378.0, 'lits_other': 37044.0, 'jumps': {'jumps': 964.0, 'jumps_bounded': 330.0, 'levels': 22800.0, 'levels_bounded': 21066.0, 'max': 332.0, 'max_executed': 332.0, 'max_bounded': 331.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 15, 10: 18, 11: 19, 12: 21, 13: 22, 14: 24}

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 7 ( 77.78% solved)

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(15, 24)', truth=True, inc_range=None)

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 15, step = 24]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 15)

[13-11-2021_23-07-39] DEBUG :: ASH Planner Main #1 >> Reaction at search length 24:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-07-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

