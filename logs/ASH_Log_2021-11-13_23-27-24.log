[13-11-2021_23-27-24] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
          This program comes with ABSOLUTELY NO WARRANTY; for details use `--warranty'. This is free software,          
            and you are welcome to redistribute it under certain conditions; use `--conditions' for details.            
                    For help and usage instructions use `--help' and `--instructions' respectively.                     
                                                                                                                        
  ####################################################################################################################  

[13-11-2021_23-27-24] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[13-11-2021_23-27-24] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[13-11-2021_23-27-24] DEBUG :: __main__ >> Command line arguments:
'./test_problems/blocks_world_plus/BWP_system_laws.lp'
'./test_problems/blocks_world_plus/BWP_problem_small_3.lp'
'-conc'
'True'
'-ao'
'verbose'
'-strat'
'basic'
'-bound'
'2'
'-op'
'standard'
'-ir'
'0'
'-er'
'10'
'-ll'
'3=50'
'2=100'
'1=150'
'-save'
'True'
'-rblend'
'0.2'

[13-11-2021_23-27-24] DEBUG :: __main__ >> Parsed command line argumenys:
('files', ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'])
('display_loader', None)
('domain_rules', None)
('domain_structure', None)
('problem_specifics', None)
('load_schema', None)
('plan_file', './solutions/plans/ASH_Plan_2021-11-13_23-27-24.txt')
('log_file', './logs/ASH_Log_2021-11-13_23-27-24.log')
('excel_file', None)
('data_file', None)
('data_sep', ' ')
('data_end', '\n')
('save_schema', './solutions/schemas/ASH_Schema_2021-11-13_23-27-24.txt')
('schema_level', 1)
('warranty', False)
('conditions', False)
('instructions', False)
('ash_output', 'verbose')
('clingo_output', False)
('console_logging', 'INFO')
('disable_logging', False)
('disable_pause_on_start', False)
('display_graph', True)
('operation', 'standard')
('experimental_runs', 10)
('initial_runs', 0)
('pause_on_run_completion', False)
('threads', 8)
('planning_time_limit', 3600)
('search_length_limit', {3: 50, 2: 100, 1: 150})
('planning_mode', 'hcr')
('conformance_type', 'sequential')
('enable_concurrency', True)
('minimise_actions', None)
('sequential_yielding', True)
('detect_interleaving', False)
('minimum_search_length_bound', True)
('make_observable', False)
('problem_space', None)
('pause_on_level_change', False)
('pause_on_increment_change', False)
('top_level', None)
('bottom_level', 1)
('online_method', 'ground-first')
('division_strategy', 'basic')
('division_strategy_bounds', 2)
('bound_type', 'incremental')
('backwards_horizon', 0)
('preemptive_division', False)
('interrupting_division', False)
('moving_average', 1)
('left_blend_quantities', 0)
('right_blend_quantities', 0.2)
('avoid_refining_sgoals_marked_for_blending', False)
('treat_tasks_as_independent', True)
('save_grounding', True)
('positive_final_goal_preemptive_achievement_heuristic', None)
('negative_final_goal_preemptive_achievement_heuristic', None)
('final_goal_intermediate_achievement_ordering_preferences', None)
('detect_dependencies', False)

[13-11-2021_23-27-24] DEBUG :: core.Planner >> Instantiating new planning domain:
Name = None
Domain files = [./test_problems/blocks_world_plus/BWP_system_laws.lp
                ./test_problems/blocks_world_plus/BWP_problem_small_3.lp]

[13-11-2021_23-27-24] DEBUG :: core.Planner >> The domain files ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'initial_state': True, 'goal_state': True, 'entities': True, 'static_state': True}.

[13-11-2021_23-27-24] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', None)
	('silent', True)
	('warnings', False)
	('message_limit', 20)
	('enable_tqdm', False)

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if:
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively.
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either:
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total number of actions in a plan, False to disable.
%%%%    preemptive_pos_fgoals: bool - A Boolean, True to
%%%%    preemptive_neg_fgoals: bool - A Boolean, True to
%%%%    pref_order_fgoals: bool - A Boolean, True to
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Minimise quanity of actions (level 2):
%%      - Eliminate any unnecessary, redundant or superfluous actions from the plan by minimising the total number of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), incomplete_plan(step - 1), pl(AL), step > start, minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final goal preemptive achievement heuristics:
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]

%% Final goal achievement ordering preferences:
%%      - The chosen ordering over the intermediate achievement of intermediate fgoals are then effectively encoded into the sgoals and maintained by the order over achievement of sgoals, resultantly it only makes sense to have an ordering preference over the achievement of fgoals at the top-level
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M). [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Keep incrementing until a complete plan is found
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
:- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Ensure plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%    achievement: {simultaneous, sequential} - A string defining the achievement type of subgoal stages.
%%%%    We are likely to see a greater restriction on the search space with simultaneous, but it is also not always possible to achieve subgoals in the same stage simultaneously, since the loss or generalisation of enabling constraints and
%%%%    state constraints (state constraints can be lost in tasking models) in the abstract model from which the sub-goals they were produced may mean that there is no original level state that maps to an abstract state in which all the abstract effects that form them hold simultaneously
%%%%    as the reintroduction or specialisation of those enabling and state constraints might make it no longer a reachable valid state pair.
%%%%    It thus may occur that no valid subgoal states that can achieve the effects of a set of concurrently planned actions.
%%%%    Sequential conformance is more flexible and relaxes this constraint significantly, and avoids this problem, at the cost of a weaker conformance constraint, and potentially less restriction on the search space.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint and the step it was first commited at during sequential yield progression through the goal seuence
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given explicitly and fixed iff this program grounding will not be saved,
%%      - The last is given by an external context function (allowing it to be modified) if this program grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first), %% TODO
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% These don't get updated because we would have to go back a step in the incrementation;
%%      - Although the new modules are added with start step = start_step, they are only grounded first at step start_step + 1,
%%      - incrementing starts at step start + 1 since actions lead current sub-goals by one step,
%%      - but the first sub-goal must be current at step start (which is the achievement step of the last sub-goal stage of the previous partial problem),
%%      - So although we get current sub-goals add to a saved grouning, they neither;
%%          - Appear as a sub-goal index,
%%          - Or set the plan as incomplete.
current_sub_goal_index(AL + 1, FI, SS) :- restart_from(FI, SS), pl(AL).

%% The current sub-goal sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 3.

%% Abstraction types
#const reduc = 3. % Classical
#const conde = 2. % Refine both
#const groun = 1. % Refine both

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(3, robot).
class(3, armed_robot).
class(3, location).
class(3, room).
class(3, object).
class(3, grounded).
class(3, graspable).
class(3, placeable).
class(3, block).
class(3, surface).
class(3, table).
class(3, colour).
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted in condensed model
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% End-effectors can grasp objects
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator limbs are extensible
override_class(manipulator_arm, manipulator_limb, extensible).

%% The cells of rooms are places
override_class(room, cell, location).

%% The sides of a table are surfaces
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE), B) :- insta_of(AL, block, BASE),
                                            sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE), B) :- insta_of(AL, block, BASE),
                                                 sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete(COLOUR), B) :- insta_of(AL, colour, COLOUR),
                                            sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, sequencing_type, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < reduc, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
%**% #program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either:
%%      - On a table
%%      - On a descenant surface of a table
holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, surface, SURFACE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

%% A block is in a tower if it is either:
%%      - The base of the tower
%%      - On a block that is in the tower
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE), true),
                                            insta_of(AL, block, BASE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                             holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                             holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                             holds(AL, tower_base(BASE), true, t),
                                             fluent(AL, defined, unordered_tower(BASE), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                             fluent(AL, defined, tower_base(BASE), true),
                                             fluent(AL, inertial, on(BLOCK_1), BLOCK_2),     
                                             BLOCK_1 = (block, N_1), block_number(N_1),
                                             BLOCK_2 = (block, N_2), block_number(N_2),
                                             BLOCK_1 != BLOCK_2, N_1 > N_2,
                                             insta_of(AL, block, BLOCK_1),
                                             insta_of(AL, block, BLOCK_2),
                                             insta_of(AL, block, BASE),
                                             sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete(COLOUR), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                             is(AL, colour_of(BLOCK, COLOUR)),
                                                             fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        N = #count { BLOCK : is(AL, colour_of(BLOCK, COLOUR)),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        holds(AL, unordered_tower(BASE), false, t),
                                        holds(AL, tower_base(BASE), true, t),
                                        fluent(AL, defined, unordered_tower(BASE), true),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        is(AL, colour_of(BASE, COLOUR)),
                                        static(AL, colour_of(BASE, COLOUR)),
                                        insta_of(AL, colour, COLOUR),
                                        insta_of(AL, block, BASE),
                                        sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
% holds(1, on((block, 4)), (block, 2), 0).

%% The other three blocks are on the floor in the store room
holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete(COLOUR)) :- insta_of(AL, colour, COLOUR), al(AL).
goal_fluent(AL, unordered_tower(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete(COLOUR), true, true) :- insta_of(AL, colour, COLOUR), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Component Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are six blocks
block_number(1..6).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Logic program code parsed successfully.

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Logic program instantiated successfully.

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Entering new direct one-shot solve call.

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = ['--parallel-mode=1,compete']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Program building started :: Processing 349 rules

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Program building completed in 0.003182999999999936s

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Grounding program parts:
[('abstraction_levels', [Number(0), Function('hierarchical', [], True)]), ('domain_sorts', [])]

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:97:58-77: info: atom does not occur in any rule head:
  insta_of(#X0,#P1,#X2)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:600:50-78: info: atom does not occur in any rule head:
  insta_of(AL,graspable,OBJ)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:613:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:614:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:618:47-68: info: atom does not occur in any rule head:
  insta_of(AL,door,D)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:619:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:620:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:624:27-52: info: atom does not occur in any rule head:
  insta_of(AL,object,OBJ)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:625:27-54: info: atom does not occur in any rule head:
  insta_of(AL,grounded,OBJ)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:626:27-52: info: atom does not occur in any rule head:
  insta_of(AL,location,L)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:630:41-67: info: atom does not occur in any rule head:
  insta_of(AL,block,BLOCK)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:631:41-69: info: atom does not occur in any rule head:
  insta_of(AL,colour,COLOUR)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:643:39-66: info: atom does not occur in any rule head:
  insta_of(AL_1,location,L)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:644:39-66: info: atom does not occur in any rule head:
  insta_of(AL_2,object,OBJ)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:645:43-72: info: atom does not occur in any rule head:
  insta_of(AL_2,grounded,OBJ)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:651:45-77: info: atom does not occur in any rule head:
  insta_of(AL_1,surface,SURFACE)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:652:45-75: info: atom does not occur in any rule head:
  insta_of(AL_2,placeable,OBJ)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:657:48-78: info: atom does not occur in any rule head:
  insta_of(AL_1,graspable,OBJ)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:658:48-77: info: atom does not occur in any rule head:
  insta_of(AL_2,grasper,DESC)


[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Grounding completed in 0.009307s.

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Solving program.

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Solving completed in 0.001185s with result Satisfiable.

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Freeing held grounding...

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Held grounding freed successfully.

[13-11-2021_23-27-24] DEBUG :: Logic Program Anonymous #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding = 0.009307s, Solving = 0.001185s, Total = 0.010493s, Memory = (RSS = 102.843750Mb, VMS = 89.820312Mb)
Final Model :: Total atoms = 67, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-27-24] DEBUG :: core.Planner >> Planning Domain Anon #1 :: Abstraction range = [1-3] instantiated successfully

[13-11-2021_23-27-24] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'ASH')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-27-24] DEBUG :: Logic Program ASH #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if:
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively.
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either:
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total number of actions in a plan, False to disable.
%%%%    preemptive_pos_fgoals: bool - A Boolean, True to
%%%%    preemptive_neg_fgoals: bool - A Boolean, True to
%%%%    pref_order_fgoals: bool - A Boolean, True to
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Minimise quanity of actions (level 2):
%%      - Eliminate any unnecessary, redundant or superfluous actions from the plan by minimising the total number of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), incomplete_plan(step - 1), pl(AL), step > start, minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final goal preemptive achievement heuristics:
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]

%% Final goal achievement ordering preferences:
%%      - The chosen ordering over the intermediate achievement of intermediate fgoals are then effectively encoded into the sgoals and maintained by the order over achievement of sgoals, resultantly it only makes sense to have an ordering preference over the achievement of fgoals at the top-level
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M). [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Keep incrementing until a complete plan is found
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
:- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Ensure plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%    achievement: {simultaneous, sequential} - A string defining the achievement type of subgoal stages.
%%%%    We are likely to see a greater restriction on the search space with simultaneous, but it is also not always possible to achieve subgoals in the same stage simultaneously, since the loss or generalisation of enabling constraints and
%%%%    state constraints (state constraints can be lost in tasking models) in the abstract model from which the sub-goals they were produced may mean that there is no original level state that maps to an abstract state in which all the abstract effects that form them hold simultaneously
%%%%    as the reintroduction or specialisation of those enabling and state constraints might make it no longer a reachable valid state pair.
%%%%    It thus may occur that no valid subgoal states that can achieve the effects of a set of concurrently planned actions.
%%%%    Sequential conformance is more flexible and relaxes this constraint significantly, and avoids this problem, at the cost of a weaker conformance constraint, and potentially less restriction on the search space.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint and the step it was first commited at during sequential yield progression through the goal seuence
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given explicitly and fixed iff this program grounding will not be saved,
%%      - The last is given by an external context function (allowing it to be modified) if this program grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first), %% TODO
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% These don't get updated because we would have to go back a step in the incrementation;
%%      - Although the new modules are added with start step = start_step, they are only grounded first at step start_step + 1,
%%      - incrementing starts at step start + 1 since actions lead current sub-goals by one step,
%%      - but the first sub-goal must be current at step start (which is the achievement step of the last sub-goal stage of the previous partial problem),
%%      - So although we get current sub-goals add to a saved grouning, they neither;
%%          - Appear as a sub-goal index,
%%          - Or set the plan as incomplete.
current_sub_goal_index(AL + 1, FI, SS) :- restart_from(FI, SS), pl(AL).

%% The current sub-goal sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 3.

%% Abstraction types
#const reduc = 3. % Classical
#const conde = 2. % Refine both
#const groun = 1. % Refine both

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(3, robot).
class(3, armed_robot).
class(3, location).
class(3, room).
class(3, object).
class(3, grounded).
class(3, graspable).
class(3, placeable).
class(3, block).
class(3, surface).
class(3, table).
class(3, colour).
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted in condensed model
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% End-effectors can grasp objects
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator limbs are extensible
override_class(manipulator_arm, manipulator_limb, extensible).

%% The cells of rooms are places
override_class(room, cell, location).

%% The sides of a table are surfaces
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE), B) :- insta_of(AL, block, BASE),
                                            sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE), B) :- insta_of(AL, block, BASE),
                                                 sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete(COLOUR), B) :- insta_of(AL, colour, COLOUR),
                                            sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, sequencing_type, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < reduc, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
%**% #program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either:
%%      - On a table
%%      - On a descenant surface of a table
holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, surface, SURFACE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

%% A block is in a tower if it is either:
%%      - The base of the tower
%%      - On a block that is in the tower
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE), true),
                                            insta_of(AL, block, BASE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                             holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                             holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                             holds(AL, tower_base(BASE), true, t),
                                             fluent(AL, defined, unordered_tower(BASE), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                             fluent(AL, defined, tower_base(BASE), true),
                                             fluent(AL, inertial, on(BLOCK_1), BLOCK_2),     
                                             BLOCK_1 = (block, N_1), block_number(N_1),
                                             BLOCK_2 = (block, N_2), block_number(N_2),
                                             BLOCK_1 != BLOCK_2, N_1 > N_2,
                                             insta_of(AL, block, BLOCK_1),
                                             insta_of(AL, block, BLOCK_2),
                                             insta_of(AL, block, BASE),
                                             sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete(COLOUR), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                             is(AL, colour_of(BLOCK, COLOUR)),
                                                             fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        N = #count { BLOCK : is(AL, colour_of(BLOCK, COLOUR)),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        holds(AL, unordered_tower(BASE), false, t),
                                        holds(AL, tower_base(BASE), true, t),
                                        fluent(AL, defined, unordered_tower(BASE), true),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        is(AL, colour_of(BASE, COLOUR)),
                                        static(AL, colour_of(BASE, COLOUR)),
                                        insta_of(AL, colour, COLOUR),
                                        insta_of(AL, block, BASE),
                                        sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
% holds(1, on((block, 4)), (block, 2), 0).

%% The other three blocks are on the floor in the store room
holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete(COLOUR)) :- insta_of(AL, colour, COLOUR), al(AL).
goal_fluent(AL, unordered_tower(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete(COLOUR), true, true) :- insta_of(AL, colour, COLOUR), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Component Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are six blocks
block_number(1..6).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[13-11-2021_23-27-24] DEBUG :: Logic Program ASH #1 >> Logic program code parsed successfully.

[13-11-2021_23-27-24] DEBUG :: Logic Program ASH #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-24] DEBUG :: Logic Program ASH #1 >> Input storing variables set.

[13-11-2021_23-27-24] DEBUG :: Logic Program ASH #1 >> Resetting output storing variables.

[13-11-2021_23-27-24] DEBUG :: Logic Program ASH #1 >> Output storing variables reset.

[13-11-2021_23-27-24] DEBUG :: Logic Program ASH #1 >> Logic program instantiated successfully.

[13-11-2021_23-27-24] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,_,ROBOT,A) } :- pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = true.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); incomplete_plan((step-1)); pl(AL); step > start; minimise_actions = true. [1@2,ROBOT,A,step]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
:~ goal_satisfied(AL,F,V,B,step); goal_order(AL,F,V,B,ORDER); final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); max_order(M). [(((M+1)-ORDER)*-step)@4,AL,F,V,B]
max_order(M) :- M = #max { ORDER: goal_order(AL,F,V,B,ORDER) }; final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B).
#program check(step).
:~ gen_search_space_at(step); incomplete_plan((step-1)); enforce_achieve_fgoals((step-1)). [1@1,step]
#external query(step). [false]
#external gen_search_space_at(step). [false]
#false :- incomplete_plan(step); not gen_search_space_at(step); query(step).
#const minimum_search_length_bound = -1.
#false :- step <= minimum_search_length_bound; query(step).
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; step >= S; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)) :- last != none.
sgoals_index((first..L)) :- last = none; L = @get_total_last_sgoals(PL); pl(PL).
current_sub_goal((AL+1),ROBOT,A,F,V,first,(start+1)) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); holds((AL+1),F,V,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); not unachieved_sgoals((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),FI,SS) :- restart_from(FI,SS); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); include_sgoals((I_SG+1),step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,true,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,false,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,false,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,true,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL_I,manipulator_end); AL <= AL_I; AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,sequential,locomotion,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,manipulation,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,manipulation,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,configuration,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,concurrent,manipulation,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,concurrent,manipulation,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < reduc; sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); action(AL,_,_,ROBO,actuate(DESC,D)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
#program action_preconditions(t).
precond(AL,ROBO,move(L_2),in(ROBO),L_1,false) :- not is(AL,connected(L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); block_number(N_1); BLOCK_2 = (block,N_2); block_number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK: is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2 = (X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,in((block,4)),(store_room,0),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,unordered_tower(BASE)) :- insta_of(AL,block,BASE); al(AL).
goal_fluent(AL,in_tower(BASE,BLOCK)) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); al(AL).
goal_fluent(AL,tower_base(BASE)) :- insta_of(AL,block,BASE); al(AL).
goal_fluent(AL,on(BLOCK)) :- insta_of(AL,block,BLOCK); al(AL).
final_goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
final_goal(1,on((block,3)),puzzle_room_table_left,true).
final_goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
block_number((1..6)).
entity(block,(block,N)) :- block_number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X < MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[13-11-2021_23-27-24] INFO :: ASH Planner Main #1 >> Attempting to initialise hierarchical planning problem...

[13-11-2021_23-27-24] INFO :: ASH Planner Main #1 >> Generating initial states...

[13-11-2021_23-27-24] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Initial States

[13-11-2021_23-27-24] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Initial States')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Parsing raw logic program code:


[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program code parsed successfully.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program instantiated successfully.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Entering new direct one-shot solve call.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=all']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building started :: Processing 349 rules

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building completed in 0.0028361999999999554s

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('state_module', [Number(0), Number(0)]), ('entities', []), ('static_state', []), ('initial_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[13-11-2021_23-27-24] WARNING :: Logic Program Main #1 || Generate Initial States #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding completed in 0.110396s.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving program.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving completed in 0.019563s with result Satisfiable.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Freeing held grounding...

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Held grounding freed successfully.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.110396s, Solving = 0.019563s, Total = 0.129959s, Memory = (RSS = 112.535156Mb, VMS = 99.464844Mb)
Final Model :: Total atoms = 2731, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-24] INFO :: ASH Planner Main #1 >> Initial states generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.110396s, Solving = 0.019563s, Total = 0.129959s, Memory = (RSS = 112.535156Mb, VMS = 99.464844Mb)
Final Model :: Total atoms = 2731, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-24] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 3            
      ================================================      

holds(3, complete(blue), false, 0)
holds(3, complete(red), false, 0)
holds(3, grasping(manipulator_arm_1), nothing, 0)
holds(3, grasping(manipulator_arm_2), nothing, 0)
holds(3, in((block,1)), puzzle_room, 0)
holds(3, in((block,2)), puzzle_room, 0)
holds(3, in((block,3)), puzzle_room, 0)
holds(3, in((block,4)), store_room, 0)
holds(3, in((block,5)), store_room, 0)
holds(3, in((block,6)), store_room, 0)
holds(3, in(manipulator_arm_1), starting_room, 0)
holds(3, in(manipulator_arm_2), starting_room, 0)
holds(3, in(puzzle_room_table), puzzle_room, 0)
holds(3, in(talos), starting_room, 0)
holds(3, in_tower((block,1),(block,1)), true, 0)
holds(3, in_tower((block,1),(block,2)), false, 0)
holds(3, in_tower((block,1),(block,3)), true, 0)
holds(3, in_tower((block,1),(block,4)), false, 0)
holds(3, in_tower((block,1),(block,5)), false, 0)
holds(3, in_tower((block,1),(block,6)), false, 0)
holds(3, in_tower((block,2),(block,1)), false, 0)
holds(3, in_tower((block,2),(block,2)), true, 0)
holds(3, in_tower((block,2),(block,3)), false, 0)
holds(3, in_tower((block,2),(block,4)), false, 0)
holds(3, in_tower((block,2),(block,5)), false, 0)
holds(3, in_tower((block,2),(block,6)), false, 0)
holds(3, in_tower((block,3),(block,1)), false, 0)
holds(3, in_tower((block,3),(block,2)), false, 0)
holds(3, in_tower((block,3),(block,3)), false, 0)
holds(3, in_tower((block,3),(block,4)), false, 0)
holds(3, in_tower((block,3),(block,5)), false, 0)
holds(3, in_tower((block,3),(block,6)), false, 0)
holds(3, in_tower((block,4),(block,1)), false, 0)
holds(3, in_tower((block,4),(block,2)), false, 0)
holds(3, in_tower((block,4),(block,3)), false, 0)
holds(3, in_tower((block,4),(block,4)), false, 0)
holds(3, in_tower((block,4),(block,5)), false, 0)
holds(3, in_tower((block,4),(block,6)), false, 0)
holds(3, in_tower((block,5),(block,1)), false, 0)
holds(3, in_tower((block,5),(block,2)), false, 0)
holds(3, in_tower((block,5),(block,3)), false, 0)
holds(3, in_tower((block,5),(block,4)), false, 0)
holds(3, in_tower((block,5),(block,5)), false, 0)
holds(3, in_tower((block,5),(block,6)), false, 0)
holds(3, in_tower((block,6),(block,1)), false, 0)
holds(3, in_tower((block,6),(block,2)), false, 0)
holds(3, in_tower((block,6),(block,3)), false, 0)
holds(3, in_tower((block,6),(block,4)), false, 0)
holds(3, in_tower((block,6),(block,5)), false, 0)
holds(3, in_tower((block,6),(block,6)), false, 0)
holds(3, on((block,1)), puzzle_room_table, 0)
holds(3, on((block,2)), puzzle_room_table, 0)
holds(3, on((block,3)), (block,1), 0)
holds(3, on((block,4)), nothing, 0)
holds(3, on((block,5)), nothing, 0)
holds(3, on((block,6)), nothing, 0)
holds(3, tower_base((block,1)), true, 0)
holds(3, tower_base((block,2)), true, 0)
holds(3, tower_base((block,3)), false, 0)
holds(3, tower_base((block,4)), false, 0)
holds(3, tower_base((block,5)), false, 0)
holds(3, tower_base((block,6)), false, 0)
holds(3, unordered_tower((block,1)), true, 0)
holds(3, unordered_tower((block,2)), false, 0)
holds(3, unordered_tower((block,3)), false, 0)
holds(3, unordered_tower((block,4)), false, 0)
holds(3, unordered_tower((block,5)), false, 0)
holds(3, unordered_tower((block,6)), false, 0)

[13-11-2021_23-27-24] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 2            
      ================================================      

holds(2, complete(blue), false, 0)
holds(2, complete(red), false, 0)
holds(2, configuration(manipulator_arm_1), retracted, 0)
holds(2, configuration(manipulator_arm_2), retracted, 0)
holds(2, configuration(puzzle_room_door), closed, 0)
holds(2, configuration(starting_room_door), closed, 0)
holds(2, configuration(store_room_door), closed, 0)
holds(2, grasping(manipulator_arm_1), nothing, 0)
holds(2, grasping(manipulator_arm_2), nothing, 0)
holds(2, in((block,1)), puzzle_room, 0)
holds(2, in((block,2)), puzzle_room, 0)
holds(2, in((block,3)), puzzle_room, 0)
holds(2, in((block,4)), store_room, 0)
holds(2, in((block,5)), store_room, 0)
holds(2, in((block,6)), store_room, 0)
holds(2, in(manipulator_arm_1), starting_room, 0)
holds(2, in(manipulator_arm_2), starting_room, 0)
holds(2, in(puzzle_room_table), puzzle_room, 0)
holds(2, in(talos), starting_room, 0)
holds(2, in_tower((block,1),(block,1)), true, 0)
holds(2, in_tower((block,1),(block,2)), false, 0)
holds(2, in_tower((block,1),(block,3)), true, 0)
holds(2, in_tower((block,1),(block,4)), false, 0)
holds(2, in_tower((block,1),(block,5)), false, 0)
holds(2, in_tower((block,1),(block,6)), false, 0)
holds(2, in_tower((block,2),(block,1)), false, 0)
holds(2, in_tower((block,2),(block,2)), true, 0)
holds(2, in_tower((block,2),(block,3)), false, 0)
holds(2, in_tower((block,2),(block,4)), false, 0)
holds(2, in_tower((block,2),(block,5)), false, 0)
holds(2, in_tower((block,2),(block,6)), false, 0)
holds(2, in_tower((block,3),(block,1)), false, 0)
holds(2, in_tower((block,3),(block,2)), false, 0)
holds(2, in_tower((block,3),(block,3)), false, 0)
holds(2, in_tower((block,3),(block,4)), false, 0)
holds(2, in_tower((block,3),(block,5)), false, 0)
holds(2, in_tower((block,3),(block,6)), false, 0)
holds(2, in_tower((block,4),(block,1)), false, 0)
holds(2, in_tower((block,4),(block,2)), false, 0)
holds(2, in_tower((block,4),(block,3)), false, 0)
holds(2, in_tower((block,4),(block,4)), false, 0)
holds(2, in_tower((block,4),(block,5)), false, 0)
holds(2, in_tower((block,4),(block,6)), false, 0)
holds(2, in_tower((block,5),(block,1)), false, 0)
holds(2, in_tower((block,5),(block,2)), false, 0)
holds(2, in_tower((block,5),(block,3)), false, 0)
holds(2, in_tower((block,5),(block,4)), false, 0)
holds(2, in_tower((block,5),(block,5)), false, 0)
holds(2, in_tower((block,5),(block,6)), false, 0)
holds(2, in_tower((block,6),(block,1)), false, 0)
holds(2, in_tower((block,6),(block,2)), false, 0)
holds(2, in_tower((block,6),(block,3)), false, 0)
holds(2, in_tower((block,6),(block,4)), false, 0)
holds(2, in_tower((block,6),(block,5)), false, 0)
holds(2, in_tower((block,6),(block,6)), false, 0)
holds(2, on((block,1)), puzzle_room_table, 0)
holds(2, on((block,2)), puzzle_room_table, 0)
holds(2, on((block,3)), (block,1), 0)
holds(2, on((block,4)), nothing, 0)
holds(2, on((block,5)), nothing, 0)
holds(2, on((block,6)), nothing, 0)
holds(2, tower_base((block,1)), true, 0)
holds(2, tower_base((block,2)), true, 0)
holds(2, tower_base((block,3)), false, 0)
holds(2, tower_base((block,4)), false, 0)
holds(2, tower_base((block,5)), false, 0)
holds(2, tower_base((block,6)), false, 0)
holds(2, unordered_tower((block,1)), true, 0)
holds(2, unordered_tower((block,2)), false, 0)
holds(2, unordered_tower((block,3)), false, 0)
holds(2, unordered_tower((block,4)), false, 0)
holds(2, unordered_tower((block,5)), false, 0)
holds(2, unordered_tower((block,6)), false, 0)

[13-11-2021_23-27-24] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 1            
      ================================================      

holds(1, complete(blue), false, 0)
holds(1, complete(red), false, 0)
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(1, configuration(manipulator_limb_1), retracted, 0)
holds(1, configuration(manipulator_limb_2), retracted, 0)
holds(1, configuration(puzzle_room_door), closed, 0)
holds(1, configuration(starting_room_door), closed, 0)
holds(1, configuration(store_room_door), closed, 0)
holds(1, grasping(manipulator_arm_1), nothing, 0)
holds(1, grasping(manipulator_arm_2), nothing, 0)
holds(1, grasping(manipulator_end_1), nothing, 0)
holds(1, grasping(manipulator_end_2), nothing, 0)
holds(1, in((block,1)), (puzzle_room,1), 0)
holds(1, in((block,2)), (puzzle_room,1), 0)
holds(1, in((block,3)), (puzzle_room,1), 0)
holds(1, in((block,4)), (store_room,0), 0)
holds(1, in((block,5)), (store_room,0), 0)
holds(1, in((block,6)), (store_room,0), 0)
holds(1, in(manipulator_arm_1), (starting_room,0), 0)
holds(1, in(manipulator_arm_2), (starting_room,0), 0)
holds(1, in(manipulator_end_1), (starting_room,0), 0)
holds(1, in(manipulator_end_2), (starting_room,0), 0)
holds(1, in(manipulator_limb_1), (starting_room,0), 0)
holds(1, in(manipulator_limb_2), (starting_room,0), 0)
holds(1, in(puzzle_room_table), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)
holds(1, in(talos), (starting_room,0), 0)
holds(1, in_tower((block,1),(block,1)), true, 0)
holds(1, in_tower((block,1),(block,2)), false, 0)
holds(1, in_tower((block,1),(block,3)), true, 0)
holds(1, in_tower((block,1),(block,4)), false, 0)
holds(1, in_tower((block,1),(block,5)), false, 0)
holds(1, in_tower((block,1),(block,6)), false, 0)
holds(1, in_tower((block,2),(block,1)), false, 0)
holds(1, in_tower((block,2),(block,2)), true, 0)
holds(1, in_tower((block,2),(block,3)), false, 0)
holds(1, in_tower((block,2),(block,4)), false, 0)
holds(1, in_tower((block,2),(block,5)), false, 0)
holds(1, in_tower((block,2),(block,6)), false, 0)
holds(1, in_tower((block,3),(block,1)), false, 0)
holds(1, in_tower((block,3),(block,2)), false, 0)
holds(1, in_tower((block,3),(block,3)), false, 0)
holds(1, in_tower((block,3),(block,4)), false, 0)
holds(1, in_tower((block,3),(block,5)), false, 0)
holds(1, in_tower((block,3),(block,6)), false, 0)
holds(1, in_tower((block,4),(block,1)), false, 0)
holds(1, in_tower((block,4),(block,2)), false, 0)
holds(1, in_tower((block,4),(block,3)), false, 0)
holds(1, in_tower((block,4),(block,4)), false, 0)
holds(1, in_tower((block,4),(block,5)), false, 0)
holds(1, in_tower((block,4),(block,6)), false, 0)
holds(1, in_tower((block,5),(block,1)), false, 0)
holds(1, in_tower((block,5),(block,2)), false, 0)
holds(1, in_tower((block,5),(block,3)), false, 0)
holds(1, in_tower((block,5),(block,4)), false, 0)
holds(1, in_tower((block,5),(block,5)), false, 0)
holds(1, in_tower((block,5),(block,6)), false, 0)
holds(1, in_tower((block,6),(block,1)), false, 0)
holds(1, in_tower((block,6),(block,2)), false, 0)
holds(1, in_tower((block,6),(block,3)), false, 0)
holds(1, in_tower((block,6),(block,4)), false, 0)
holds(1, in_tower((block,6),(block,5)), false, 0)
holds(1, in_tower((block,6),(block,6)), false, 0)
holds(1, on((block,1)), puzzle_room_table_left, 0)
holds(1, on((block,2)), puzzle_room_table_right, 0)
holds(1, on((block,3)), (block,1), 0)
holds(1, on((block,4)), nothing, 0)
holds(1, on((block,5)), nothing, 0)
holds(1, on((block,6)), nothing, 0)
holds(1, tower_base((block,1)), true, 0)
holds(1, tower_base((block,2)), true, 0)
holds(1, tower_base((block,3)), false, 0)
holds(1, tower_base((block,4)), false, 0)
holds(1, tower_base((block,5)), false, 0)
holds(1, tower_base((block,6)), false, 0)
holds(1, unordered_tower((block,1)), true, 0)
holds(1, unordered_tower((block,2)), false, 0)
holds(1, unordered_tower((block,3)), false, 0)
holds(1, unordered_tower((block,4)), false, 0)
holds(1, unordered_tower((block,5)), false, 0)
holds(1, unordered_tower((block,6)), false, 0)

[13-11-2021_23-27-24] INFO :: ASH Planner Main #1 >> Generating final-goals...

[13-11-2021_23-27-24] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Final Goals

[13-11-2021_23-27-24] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Final Goals')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Parsing raw logic program code:


[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program code parsed successfully.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program instantiated successfully.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Entering new direct one-shot solve call.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=all']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building started :: Processing 349 rules

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building completed in 0.002998700000000021s

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[13-11-2021_23-27-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('goal_abstraction_module', []), ('entities', []), ('static_state', []), ('goal_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[13-11-2021_23-27-24] WARNING :: Logic Program Main #1 || Generate Final Goals #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding completed in 0.067200s.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving program.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving completed in 0.014401s with result Satisfiable.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Freeing held grounding...

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Held grounding freed successfully.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.067200s, Solving = 0.014401s, Total = 0.081601s, Memory = (RSS = 111.531250Mb, VMS = 98.542969Mb)
Final Model :: Total atoms = 3275, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> Final-goals generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.067200s, Solving = 0.014401s, Total = 0.081601s, Memory = (RSS = 111.531250Mb, VMS = 98.542969Mb)
Final Model :: Total atoms = 3275, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 3         
      ================================================      

final_goal(3, complete(blue), true, true)
final_goal(3, complete(red), true, true)
final_goal(3, in_tower((block,1),(block,1)), false, true)
final_goal(3, in_tower((block,1),(block,2)), false, true)
final_goal(3, in_tower((block,1),(block,3)), false, true)
final_goal(3, in_tower((block,1),(block,4)), false, true)
final_goal(3, in_tower((block,1),(block,5)), false, true)
final_goal(3, in_tower((block,1),(block,6)), false, true)
final_goal(3, in_tower((block,2),(block,1)), false, true)
final_goal(3, in_tower((block,2),(block,2)), false, true)
final_goal(3, in_tower((block,2),(block,3)), false, true)
final_goal(3, in_tower((block,2),(block,4)), false, true)
final_goal(3, in_tower((block,2),(block,5)), false, true)
final_goal(3, in_tower((block,2),(block,6)), false, true)
final_goal(3, in_tower((block,3),(block,1)), true, true)
final_goal(3, in_tower((block,3),(block,2)), true, true)
final_goal(3, in_tower((block,3),(block,3)), true, true)
final_goal(3, in_tower((block,3),(block,4)), false, true)
final_goal(3, in_tower((block,3),(block,5)), false, true)
final_goal(3, in_tower((block,3),(block,6)), false, true)
final_goal(3, in_tower((block,4),(block,1)), false, true)
final_goal(3, in_tower((block,4),(block,2)), false, true)
final_goal(3, in_tower((block,4),(block,3)), false, true)
final_goal(3, in_tower((block,4),(block,4)), false, true)
final_goal(3, in_tower((block,4),(block,5)), false, true)
final_goal(3, in_tower((block,4),(block,6)), false, true)
final_goal(3, in_tower((block,5),(block,1)), false, true)
final_goal(3, in_tower((block,5),(block,2)), false, true)
final_goal(3, in_tower((block,5),(block,3)), false, true)
final_goal(3, in_tower((block,5),(block,4)), false, true)
final_goal(3, in_tower((block,5),(block,5)), false, true)
final_goal(3, in_tower((block,5),(block,6)), false, true)
final_goal(3, in_tower((block,6),(block,1)), false, true)
final_goal(3, in_tower((block,6),(block,2)), false, true)
final_goal(3, in_tower((block,6),(block,3)), false, true)
final_goal(3, in_tower((block,6),(block,4)), true, true)
final_goal(3, in_tower((block,6),(block,5)), true, true)
final_goal(3, in_tower((block,6),(block,6)), true, true)
final_goal(3, on((block,1)), (block,2), true)
final_goal(3, on((block,2)), (block,3), true)
final_goal(3, on((block,3)), puzzle_room_table, true)
final_goal(3, on((block,4)), (block,5), true)
final_goal(3, on((block,5)), (block,6), true)
final_goal(3, on((block,6)), puzzle_room_table, true)
final_goal(3, tower_base((block,1)), false, true)
final_goal(3, tower_base((block,2)), false, true)
final_goal(3, tower_base((block,3)), true, true)
final_goal(3, tower_base((block,4)), false, true)
final_goal(3, tower_base((block,5)), false, true)
final_goal(3, tower_base((block,6)), true, true)
final_goal(3, unordered_tower((block,1)), false, true)
final_goal(3, unordered_tower((block,2)), false, true)
final_goal(3, unordered_tower((block,3)), false, true)
final_goal(3, unordered_tower((block,4)), false, true)
final_goal(3, unordered_tower((block,5)), false, true)
final_goal(3, unordered_tower((block,6)), false, true)

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 3         
      ================================================      

final_goal(3, complete(blue), false, false)
final_goal(3, complete(red), false, false)
final_goal(3, in_tower((block,1),(block,1)), true, false)
final_goal(3, in_tower((block,1),(block,2)), true, false)
final_goal(3, in_tower((block,1),(block,3)), true, false)
final_goal(3, in_tower((block,1),(block,4)), true, false)
final_goal(3, in_tower((block,1),(block,5)), true, false)
final_goal(3, in_tower((block,1),(block,6)), true, false)
final_goal(3, in_tower((block,2),(block,1)), true, false)
final_goal(3, in_tower((block,2),(block,2)), true, false)
final_goal(3, in_tower((block,2),(block,3)), true, false)
final_goal(3, in_tower((block,2),(block,4)), true, false)
final_goal(3, in_tower((block,2),(block,5)), true, false)
final_goal(3, in_tower((block,2),(block,6)), true, false)
final_goal(3, in_tower((block,3),(block,1)), false, false)
final_goal(3, in_tower((block,3),(block,2)), false, false)
final_goal(3, in_tower((block,3),(block,3)), false, false)
final_goal(3, in_tower((block,3),(block,4)), true, false)
final_goal(3, in_tower((block,3),(block,5)), true, false)
final_goal(3, in_tower((block,3),(block,6)), true, false)
final_goal(3, in_tower((block,4),(block,1)), true, false)
final_goal(3, in_tower((block,4),(block,2)), true, false)
final_goal(3, in_tower((block,4),(block,3)), true, false)
final_goal(3, in_tower((block,4),(block,4)), true, false)
final_goal(3, in_tower((block,4),(block,5)), true, false)
final_goal(3, in_tower((block,4),(block,6)), true, false)
final_goal(3, in_tower((block,5),(block,1)), true, false)
final_goal(3, in_tower((block,5),(block,2)), true, false)
final_goal(3, in_tower((block,5),(block,3)), true, false)
final_goal(3, in_tower((block,5),(block,4)), true, false)
final_goal(3, in_tower((block,5),(block,5)), true, false)
final_goal(3, in_tower((block,5),(block,6)), true, false)
final_goal(3, in_tower((block,6),(block,1)), true, false)
final_goal(3, in_tower((block,6),(block,2)), true, false)
final_goal(3, in_tower((block,6),(block,3)), true, false)
final_goal(3, in_tower((block,6),(block,4)), false, false)
final_goal(3, in_tower((block,6),(block,5)), false, false)
final_goal(3, in_tower((block,6),(block,6)), false, false)
final_goal(3, on((block,1)), (block,3), false)
final_goal(3, on((block,1)), (block,4), false)
final_goal(3, on((block,1)), (block,5), false)
final_goal(3, on((block,1)), (block,6), false)
final_goal(3, on((block,1)), nothing, false)
final_goal(3, on((block,1)), puzzle_room_table, false)
final_goal(3, on((block,2)), (block,1), false)
final_goal(3, on((block,2)), (block,4), false)
final_goal(3, on((block,2)), (block,5), false)
final_goal(3, on((block,2)), (block,6), false)
final_goal(3, on((block,2)), nothing, false)
final_goal(3, on((block,2)), puzzle_room_table, false)
final_goal(3, on((block,3)), (block,1), false)
final_goal(3, on((block,3)), (block,2), false)
final_goal(3, on((block,3)), (block,4), false)
final_goal(3, on((block,3)), (block,5), false)
final_goal(3, on((block,3)), (block,6), false)
final_goal(3, on((block,3)), nothing, false)
final_goal(3, on((block,4)), (block,1), false)
final_goal(3, on((block,4)), (block,2), false)
final_goal(3, on((block,4)), (block,3), false)
final_goal(3, on((block,4)), (block,6), false)
final_goal(3, on((block,4)), nothing, false)
final_goal(3, on((block,4)), puzzle_room_table, false)
final_goal(3, on((block,5)), (block,1), false)
final_goal(3, on((block,5)), (block,2), false)
final_goal(3, on((block,5)), (block,3), false)
final_goal(3, on((block,5)), (block,4), false)
final_goal(3, on((block,5)), nothing, false)
final_goal(3, on((block,5)), puzzle_room_table, false)
final_goal(3, on((block,6)), (block,1), false)
final_goal(3, on((block,6)), (block,2), false)
final_goal(3, on((block,6)), (block,3), false)
final_goal(3, on((block,6)), (block,4), false)
final_goal(3, on((block,6)), (block,5), false)
final_goal(3, on((block,6)), nothing, false)
final_goal(3, tower_base((block,1)), true, false)
final_goal(3, tower_base((block,2)), true, false)
final_goal(3, tower_base((block,3)), false, false)
final_goal(3, tower_base((block,4)), true, false)
final_goal(3, tower_base((block,5)), true, false)
final_goal(3, tower_base((block,6)), false, false)
final_goal(3, unordered_tower((block,1)), true, false)
final_goal(3, unordered_tower((block,2)), true, false)
final_goal(3, unordered_tower((block,3)), true, false)
final_goal(3, unordered_tower((block,4)), true, false)
final_goal(3, unordered_tower((block,5)), true, false)
final_goal(3, unordered_tower((block,6)), true, false)

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 2         
      ================================================      

final_goal(2, complete(blue), true, true)
final_goal(2, complete(red), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, tower_base((block,1)), false, true)
final_goal(2, tower_base((block,2)), false, true)
final_goal(2, tower_base((block,3)), true, true)
final_goal(2, tower_base((block,4)), false, true)
final_goal(2, tower_base((block,5)), false, true)
final_goal(2, tower_base((block,6)), true, true)
final_goal(2, unordered_tower((block,1)), false, true)
final_goal(2, unordered_tower((block,2)), false, true)
final_goal(2, unordered_tower((block,3)), false, true)
final_goal(2, unordered_tower((block,4)), false, true)
final_goal(2, unordered_tower((block,5)), false, true)
final_goal(2, unordered_tower((block,6)), false, true)

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 2         
      ================================================      

final_goal(2, complete(blue), false, false)
final_goal(2, complete(red), false, false)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, tower_base((block,1)), true, false)
final_goal(2, tower_base((block,2)), true, false)
final_goal(2, tower_base((block,3)), false, false)
final_goal(2, tower_base((block,4)), true, false)
final_goal(2, tower_base((block,5)), true, false)
final_goal(2, tower_base((block,6)), false, false)
final_goal(2, unordered_tower((block,1)), true, false)
final_goal(2, unordered_tower((block,2)), true, false)
final_goal(2, unordered_tower((block,3)), true, false)
final_goal(2, unordered_tower((block,4)), true, false)
final_goal(2, unordered_tower((block,5)), true, false)
final_goal(2, unordered_tower((block,6)), true, false)

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 1         
      ================================================      

final_goal(1, complete(blue), true, true)
final_goal(1, complete(red), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1)), false, true)
final_goal(1, tower_base((block,2)), false, true)
final_goal(1, tower_base((block,3)), true, true)
final_goal(1, tower_base((block,4)), false, true)
final_goal(1, tower_base((block,5)), false, true)
final_goal(1, tower_base((block,6)), true, true)
final_goal(1, unordered_tower((block,1)), false, true)
final_goal(1, unordered_tower((block,2)), false, true)
final_goal(1, unordered_tower((block,3)), false, true)
final_goal(1, unordered_tower((block,4)), false, true)
final_goal(1, unordered_tower((block,5)), false, true)
final_goal(1, unordered_tower((block,6)), false, true)

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 1         
      ================================================      

final_goal(1, complete(blue), false, false)
final_goal(1, complete(red), false, false)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, tower_base((block,1)), true, false)
final_goal(1, tower_base((block,2)), true, false)
final_goal(1, tower_base((block,3)), false, false)
final_goal(1, tower_base((block,4)), true, false)
final_goal(1, tower_base((block,5)), true, false)
final_goal(1, tower_base((block,6)), false, false)
final_goal(1, unordered_tower((block,1)), true, false)
final_goal(1, unordered_tower((block,2)), true, false)
final_goal(1, unordered_tower((block,3)), true, false)
final_goal(1, unordered_tower((block,4)), true, false)
final_goal(1, unordered_tower((block,5)), true, false)
final_goal(1, unordered_tower((block,6)), true, false)

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> Hierarchical planning problem successfully initialised:
Initial State is UNIQUE, Final-Goal is UNIQUE

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> The given problem specification has a unique interpretation (exactly one stable model exists).

[13-11-2021_23-27-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', None)
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016425336EA0>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', True)
	('use_search_length_bound', True)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_actions', None)
	('detect_interleaving', False)
	('detect_dependencies', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', {1: 150, 2: 100, 3: 50})
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3] : ONLINE MODE

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 1 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> Current valid planning level range: [3-3]

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 1 by method ground-first: [1-3]

[13-11-2021_23-27-25] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 3

[13-11-2021_23-27-25] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016425336EA0>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 50)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = True
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [3] : Concurrency enabled : Problem type = classical : Minimum search length bound = disabled with value = 0

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = False
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-27-25] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = False, chosen = False

[13-11-2021_23-27-25] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-11-2021_23-27-25] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[13-11-2021_23-27-25] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-27-25] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 68 rules into program part ash_initial_state:

holds(3, complete(blue), false, 0).
holds(3, complete(red), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, tower_base((block,1)), true, 0).
holds(3, tower_base((block,2)), true, 0).
holds(3, tower_base((block,3)), false, 0).
holds(3, tower_base((block,4)), false, 0).
holds(3, tower_base((block,5)), false, 0).
holds(3, tower_base((block,6)), false, 0).
holds(3, unordered_tower((block,1)), true, 0).
holds(3, unordered_tower((block,2)), false, 0).
holds(3, unordered_tower((block,3)), false, 0).
holds(3, unordered_tower((block,4)), false, 0).
holds(3, unordered_tower((block,5)), false, 0).
holds(3, unordered_tower((block,6)), false, 0).

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 142 rules into program part ash_goal_state:

final_goal(3, complete(blue), false, false).
final_goal(3, complete(blue), true, true).
final_goal(3, complete(red), false, false).
final_goal(3, complete(red), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1)), false, true).
final_goal(3, tower_base((block,1)), true, false).
final_goal(3, tower_base((block,2)), false, true).
final_goal(3, tower_base((block,2)), true, false).
final_goal(3, tower_base((block,3)), false, false).
final_goal(3, tower_base((block,3)), true, true).
final_goal(3, tower_base((block,4)), false, true).
final_goal(3, tower_base((block,4)), true, false).
final_goal(3, tower_base((block,5)), false, true).
final_goal(3, tower_base((block,5)), true, false).
final_goal(3, tower_base((block,6)), false, false).
final_goal(3, tower_base((block,6)), true, true).
final_goal(3, unordered_tower((block,1)), false, true).
final_goal(3, unordered_tower((block,1)), true, false).
final_goal(3, unordered_tower((block,2)), false, true).
final_goal(3, unordered_tower((block,2)), true, false).
final_goal(3, unordered_tower((block,3)), false, true).
final_goal(3, unordered_tower((block,3)), true, false).
final_goal(3, unordered_tower((block,4)), false, true).
final_goal(3, unordered_tower((block,4)), true, false).
final_goal(3, unordered_tower((block,5)), false, true).
final_goal(3, unordered_tower((block,5)), true, false).
final_goal(3, unordered_tower((block,6)), false, true).
final_goal(3, unordered_tower((block,6)), true, false).

[13-11-2021_23-27-25] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[13-11-2021_23-27-25] INFO :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001642431D5E0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=50, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'false', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 563 rules

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004740200000000083s

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.028814s.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004678s with result Satisfiable.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001642538C720>

[13-11-2021_23-27-25] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 3)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000016425336EA0>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001642538C720>)

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, true). %* None *%
#program optimisation_module(#inc, 0, true, false, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.104853s.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005193s with result Unsatisfiable.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11004609999999948, Incremental time limit = None
Running cumulative time = 0.11004609999999948, Cumulative time limit = 3600
Used memory = (RSS = 112.644531Mb, VMS = 99.320312Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082094s.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003619s with result Unsatisfiable.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08571339999999994, Incremental time limit = None
Running cumulative time = 0.19575949999999942, Cumulative time limit = 3600
Used memory = (RSS = 113.820312Mb, VMS = 100.742188Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.095649s.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004619s with result Unsatisfiable.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10026789999999952, Incremental time limit = None
Running cumulative time = 0.29602739999999894, Cumulative time limit = 3600
Used memory = (RSS = 115.000000Mb, VMS = 101.953125Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.089173s.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004854s with result Unsatisfiable.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09402690000000025, Incremental time limit = None
Running cumulative time = 0.3900542999999992, Cumulative time limit = 3600
Used memory = (RSS = 116.789062Mb, VMS = 103.781250Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.105511s.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005379s with result Unsatisfiable.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11088970000000042, Incremental time limit = None
Running cumulative time = 0.5009439999999996, Cumulative time limit = 3600
Used memory = (RSS = 119.562500Mb, VMS = 106.714844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.090921s.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006318s with result Unsatisfiable.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0972388000000004, Incremental time limit = None
Running cumulative time = 0.5981828, Cumulative time limit = 3600
Used memory = (RSS = 122.644531Mb, VMS = 109.542969Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)])]

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.109911s.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008216s with result Unsatisfiable.

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11812709999999971, Incremental time limit = None
Running cumulative time = 0.7163098999999997, Cumulative time limit = 3600
Used memory = (RSS = 125.980469Mb, VMS = 113.027344Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-27-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)])]

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.092815s.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008759s with result Unsatisfiable.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10157360000000004, Incremental time limit = None
Running cumulative time = 0.8178834999999998, Cumulative time limit = 3600
Used memory = (RSS = 127.835938Mb, VMS = 114.757812Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)])]

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.098779s.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010507s with result Unsatisfiable.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10928530000000025, Incremental time limit = None
Running cumulative time = 0.9271688, Cumulative time limit = 3600
Used memory = (RSS = 131.023438Mb, VMS = 118.359375Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)])]

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.101440s.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011892s with result Unsatisfiable.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11333249999999984, Incremental time limit = None
Running cumulative time = 1.0405012999999999, Cumulative time limit = 3600
Used memory = (RSS = 133.203125Mb, VMS = 120.324219Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)])]

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.101360s.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021013s with result Unsatisfiable.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12237300000000007, Incremental time limit = None
Running cumulative time = 1.1628743, Cumulative time limit = 3600
Used memory = (RSS = 135.769531Mb, VMS = 122.781250Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)])]

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.097302s.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027793s with result Unsatisfiable.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12509530000000035, Incremental time limit = None
Running cumulative time = 1.2879696000000003, Cumulative time limit = 3600
Used memory = (RSS = 139.707031Mb, VMS = 127.523438Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)])]

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.109706s.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046036s with result Unsatisfiable.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.15574280000000051, Incremental time limit = None
Running cumulative time = 1.4437124000000008, Cumulative time limit = 3600
Used memory = (RSS = 141.378906Mb, VMS = 129.199219Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)])]

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096033s.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.068576s with result Satisfiable.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1646087999999999, Incremental time limit = None
Running cumulative time = 1.6083212000000007, Cumulative time limit = 3600
Used memory = (RSS = 146.460938Mb, VMS = 133.960938Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.375548s, Solving = 0.232774s, Total = 1.608321s, Memory = (RSS = 146.460938Mb, VMS = 133.960938Mb)), Calls = 14
Final Model :: Total atoms = 7619, Cost = (21, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.104853s, Solving = 0.005193s, Total = 0.110046s, Memory = (RSS = 112.644531Mb, VMS = 99.320312Mb)
2 : Statistics :: Grounding = 0.082094s, Solving = 0.003619s, Total = 0.085713s, Memory = (RSS = 113.820312Mb, VMS = 100.742188Mb)
3 : Statistics :: Grounding = 0.095649s, Solving = 0.004619s, Total = 0.100268s, Memory = (RSS = 115.000000Mb, VMS = 101.953125Mb)
4 : Statistics :: Grounding = 0.089173s, Solving = 0.004854s, Total = 0.094027s, Memory = (RSS = 116.789062Mb, VMS = 103.781250Mb)
5 : Statistics :: Grounding = 0.105511s, Solving = 0.005379s, Total = 0.110890s, Memory = (RSS = 119.562500Mb, VMS = 106.714844Mb)
6 : Statistics :: Grounding = 0.090921s, Solving = 0.006318s, Total = 0.097239s, Memory = (RSS = 122.644531Mb, VMS = 109.542969Mb)
7 : Statistics :: Grounding = 0.109911s, Solving = 0.008216s, Total = 0.118127s, Memory = (RSS = 125.980469Mb, VMS = 113.027344Mb)
8 : Statistics :: Grounding = 0.092815s, Solving = 0.008759s, Total = 0.101574s, Memory = (RSS = 127.835938Mb, VMS = 114.757812Mb)
9 : Statistics :: Grounding = 0.098779s, Solving = 0.010507s, Total = 0.109285s, Memory = (RSS = 131.023438Mb, VMS = 118.359375Mb)
10 : Statistics :: Grounding = 0.101440s, Solving = 0.011892s, Total = 0.113332s, Memory = (RSS = 133.203125Mb, VMS = 120.324219Mb)
11 : Statistics :: Grounding = 0.101360s, Solving = 0.021013s, Total = 0.122373s, Memory = (RSS = 135.769531Mb, VMS = 122.781250Mb)
12 : Statistics :: Grounding = 0.097302s, Solving = 0.027793s, Total = 0.125095s, Memory = (RSS = 139.707031Mb, VMS = 127.523438Mb)
13 : Statistics :: Grounding = 0.109706s, Solving = 0.046036s, Total = 0.155743s, Memory = (RSS = 141.378906Mb, VMS = 129.199219Mb)
14 : Statistics :: Grounding = 0.096033s, Solving = 0.068576s, Total = 0.164609s, Memory = (RSS = 146.460938Mb, VMS = 133.960938Mb)

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.608321s due to: Stop condition reached.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-27-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[13-11-2021_23-27-27] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-27-27] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.375548s, Solving = 0.232774s, Total = 1.608321s, Memory = (RSS = 146.460938Mb, VMS = 133.960938Mb)), Calls = 14
Model :: Total atoms = 7619, Cost = (21, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-27] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 14 :: Actions = 21                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room)
Step 2:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
        talos : grasp(manipulator_arm_2,(block,5))
Step 3:
    Planned actions:
        talos : move(puzzle_room)
Step 4:
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 5:
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 6:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 7:
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_2,(block,5))
Step 8:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
        talos : release(manipulator_arm_1,(block,3))
Step 9:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 10:
    Planned actions:
        talos : lift(manipulator_arm_1,(block,1))
        talos : release(manipulator_arm_2,(block,2))
Step 11:
    Planned actions:
        talos : move(store_room)
Step 12:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 13:
    Planned actions:
        talos : move(puzzle_room)
Step 14:
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))
        talos : put(manipulator_arm_2,(block,4),(block,5))

[13-11-2021_23-27-27] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=14, step_range=range(0, 15)

[13-11-2021_23-27-27] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 0, Actions = 0
Level [2]: Length = 0, Actions = 0
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-27-27] INFO :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.642s (Gro =   1.404s, Sea =   0.237s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))

[13-11-2021_23-27-27] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=14, start_step=0, blend=Blend(left=0, right=0.2)

[13-11-2021_23-27-27] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=7, large_group_size=8

[13-11-2021_23-27-27] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=7, blend=Blend(left=0, right=1), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[13-11-2021_23-27-27] INFO :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.642s (Gro =   1.404s, Sea =   0.237s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 7, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-27-27] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning at level 2 for problem 1:
Divided plan : Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.642s (Gro =   1.404s, Sea =   0.237s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 7, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-27-27] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-8]

[13-11-2021_23-27-27] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [1-8], problem number = 1, increment number = 1

[13-11-2021_23-27-27] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 8)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016425336EA0>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-27-27] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 8
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 7

[13-11-2021_23-27-27] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [2] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [1-8] : Minimum search length bound = disabled with value = 7

[13-11-2021_23-27-27] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-27-27] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = True, chosen = True

[13-11-2021_23-27-27] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-11-2021_23-27-27] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[13-11-2021_23-27-27] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-27-27] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete(blue), false, 0).
holds(2, complete(red), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1)), true, 0).
holds(2, tower_base((block,2)), true, 0).
holds(2, tower_base((block,3)), false, 0).
holds(2, tower_base((block,4)), false, 0).
holds(2, tower_base((block,5)), false, 0).
holds(2, tower_base((block,6)), false, 0).
holds(2, unordered_tower((block,1)), true, 0).
holds(2, unordered_tower((block,2)), false, 0).
holds(2, unordered_tower((block,3)), false, 0).
holds(2, unordered_tower((block,4)), false, 0).
holds(2, unordered_tower((block,5)), false, 0).
holds(2, unordered_tower((block,6)), false, 0).
holds(3, complete(blue), false, 0).
holds(3, complete(red), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, tower_base((block,1)), true, 0).
holds(3, tower_base((block,2)), true, 0).
holds(3, tower_base((block,3)), false, 0).
holds(3, tower_base((block,4)), false, 0).
holds(3, tower_base((block,5)), false, 0).
holds(3, tower_base((block,6)), false, 0).
holds(3, unordered_tower((block,1)), true, 0).
holds(3, unordered_tower((block,2)), false, 0).
holds(3, unordered_tower((block,3)), false, 0).
holds(3, unordered_tower((block,4)), false, 0).
holds(3, unordered_tower((block,5)), false, 0).
holds(3, unordered_tower((block,6)), false, 0).

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).
final_goal(3, complete(blue), false, false).
final_goal(3, complete(blue), true, true).
final_goal(3, complete(red), false, false).
final_goal(3, complete(red), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1)), false, true).
final_goal(3, tower_base((block,1)), true, false).
final_goal(3, tower_base((block,2)), false, true).
final_goal(3, tower_base((block,2)), true, false).
final_goal(3, tower_base((block,3)), false, false).
final_goal(3, tower_base((block,3)), true, true).
final_goal(3, tower_base((block,4)), false, true).
final_goal(3, tower_base((block,4)), true, false).
final_goal(3, tower_base((block,5)), false, true).
final_goal(3, tower_base((block,5)), true, false).
final_goal(3, tower_base((block,6)), false, false).
final_goal(3, tower_base((block,6)), true, true).
final_goal(3, unordered_tower((block,1)), false, true).
final_goal(3, unordered_tower((block,1)), true, false).
final_goal(3, unordered_tower((block,2)), false, true).
final_goal(3, unordered_tower((block,2)), true, false).
final_goal(3, unordered_tower((block,3)), false, true).
final_goal(3, unordered_tower((block,3)), true, false).
final_goal(3, unordered_tower((block,4)), false, true).
final_goal(3, unordered_tower((block,4)), true, false).
final_goal(3, unordered_tower((block,5)), false, true).
final_goal(3, unordered_tower((block,5)), true, false).
final_goal(3, unordered_tower((block,6)), false, true).
final_goal(3, unordered_tower((block,6)), true, false).

[13-11-2021_23-27-27] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 3})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 4})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 8})

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 12 rules into program part base:

sub_goal(3, talos, move(store_room), in(talos), store_room, 1).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 2).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 2).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 3).
sub_goal(3, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 4).
sub_goal(3, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 5).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 6).
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 6).
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 7).
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 7).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 8).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 8).

[13-11-2021_23-27-27] INFO :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001642432CD30>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 'none', 'sequential', 'true'), range_=None)]

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 792 rules

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006941300000000261s

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.030693s.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005157s with result Satisfiable.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001642748CDB0>

[13-11-2021_23-27-27] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 2)
	('start_step', 0)
	('last_sgoals', 8)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000016425336EA0>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001642748CDB0>)

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.159854s.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008733s with result Unsatisfiable.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16858769999999978, Incremental time limit = None
Running cumulative time = 0.16858769999999978, Cumulative time limit = 3600
Used memory = (RSS = 126.300781Mb, VMS = 115.476562Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.1598544999999998, solving_time=0.008733199999999997, total_time=0.16858769999999978, memory=Memory(rss=126.30078125, vms=115.4765625), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1598544999999998, solving_time=0.008733199999999997, total_time=0.16858769999999978, memory=Memory(rss=126.30078125, vms=115.4765625), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 8549.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10282.0, 'bodies_tr': 10282.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 226.0, 'count_bodies_tr': 226.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 358.0, 'rules': 18251.0, 'rules_normal': 17906.0, 'rules_choice': 331.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 18249.0, 'rules_tr_normal': 17906.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 15357.0, 'eqs_atom': 3454.0, 'eqs_body': 1143.0, 'eqs_other': 10760.0}, 'lpStep': {'atoms': 4054.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9106.0, 'bodies_tr': 9106.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 226.0, 'count_bodies_tr': 226.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 358.0, 'rules': 13397.0, 'rules_normal': 13052.0, 'rules_choice': 331.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 13395.0, 'rules_tr_normal': 13052.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9219.0, 'eqs_atom': 1171.0, 'eqs_body': 378.0, 'eqs_other': 7670.0}, 'generator': {'vars': 1841.0, 'vars_eliminated': 0.0, 'vars_frozen': 1255.0, 'constraints': 27.0, 'constraints_binary': 779.0, 'constraints_ternary': 121.0, 'acyc_edges': 0.0, 'complexity': 939.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 4.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 126.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.16833114624023438, 'cpu': 0.171875, 'solve': 0.000995635986328125, 'unsat': 0.000995635986328125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.21221351623535156, 'cpu': 0.21875, 'solve': 0.0049591064453125, 'unsat': 0.000995635986328125, 'sat': 0.0019683837890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 4.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 134.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.111839s.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004315s with result Unsatisfiable.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.11615420000000043, Incremental time limit = None
Running cumulative time = 0.2847419000000002, Cumulative time limit = 3600
Used memory = (RSS = 128.250000Mb, VMS = 117.433594Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.27169359999999987, solving_time=0.013048300000000346, total_time=0.2847419000000002, memory=Memory(rss=128.25, vms=117.43359375), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11183910000000008, solving_time=0.004315100000000349, total_time=0.11615420000000043, memory=Memory(rss=128.25, vms=117.43359375), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 10233.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16880.0, 'bodies_tr': 16880.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 406.0, 'count_bodies_tr': 406.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 410.0, 'rules': 26955.0, 'rules_normal': 26444.0, 'rules_choice': 483.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 26941.0, 'rules_tr_normal': 26444.0, 'rules_tr_choice': 483.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 18491.0, 'eqs_atom': 4176.0, 'eqs_body': 1590.0, 'eqs_other': 12725.0}, 'lpStep': {'atoms': 1684.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 6598.0, 'bodies_tr': 6598.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 52.0, 'rules': 8704.0, 'rules_normal': 8538.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 8692.0, 'rules_tr_normal': 8538.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3134.0, 'eqs_atom': 722.0, 'eqs_body': 447.0, 'eqs_other': 1965.0}, 'generator': {'vars': 1982.0, 'vars_eliminated': 0.0, 'vars_frozen': 1386.0, 'constraints': 71.0, 'constraints_binary': 1234.0, 'constraints_ternary': 211.0, 'acyc_edges': 0.0, 'complexity': 1544.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 9.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 186.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 9.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.11666297912597656, 'cpu': 0.109375, 'solve': 0.0009708404541015625, 'unsat': 0.0009708404541015625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3288764953613281, 'cpu': 0.328125, 'solve': 0.0059299468994140625, 'unsat': 0.0019664764404296875, 'sat': 0.0019683837890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 6.0, 'integrated': 0.0, 'lemmas': 6.0, 'lits_learnt': 13.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 320.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 6.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 13.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.136421s.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005483s with result Unsatisfiable.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1419037999999997, Incremental time limit = None
Running cumulative time = 0.4266456999999999, Cumulative time limit = 3600
Used memory = (RSS = 130.261719Mb, VMS = 119.281250Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.4081146000000002, solving_time=0.01853109999999969, total_time=0.4266456999999999, memory=Memory(rss=130.26171875, vms=119.28125), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13642100000000035, solving_time=0.005482799999999344, total_time=0.1419037999999997, memory=Memory(rss=130.26171875, vms=119.28125), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 12252.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23743.0, 'bodies_tr': 23743.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 586.0, 'count_bodies_tr': 586.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 36120.0, 'rules_normal': 35443.0, 'rules_choice': 635.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 36094.0, 'rules_tr_normal': 35443.0, 'rules_tr_choice': 635.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 22938.0, 'eqs_atom': 5083.0, 'eqs_body': 2048.0, 'eqs_other': 15807.0}, 'lpStep': {'atoms': 2019.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 6863.0, 'bodies_tr': 6863.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 8.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 76.0, 'rules': 9165.0, 'rules_normal': 8999.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9153.0, 'rules_tr_normal': 8999.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4447.0, 'eqs_atom': 907.0, 'eqs_body': 458.0, 'eqs_other': 3082.0}, 'generator': {'vars': 2331.0, 'vars_eliminated': 0.0, 'vars_frozen': 1645.0, 'constraints': 145.0, 'constraints_binary': 2397.0, 'constraints_ternary': 540.0, 'acyc_edges': 0.0, 'complexity': 3142.0}}, 'solving': {'solvers': {'choices': 122.0, 'conflicts': 30.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 3.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 23.0, 'integrated': 85.0, 'lemmas': 96.0, 'lits_learnt': 133.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 72.0, 'integrated_jumps': 31.0, 'guiding_paths_lits': 246.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 20.0, 'lemmas_loop': 4.0, 'lemmas_other': 72.0, 'lits_conflict': 29.0, 'lits_loop': 24.0, 'lits_other': 80.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 11.0, 'levels': 553.0, 'levels_bounded': 456.0, 'max': 52.0, 'max_executed': 52.0, 'max_bounded': 42.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.14261627197265625, 'cpu': 0.140625, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4714927673339844, 'cpu': 0.46875, 'solve': 0.007923126220703125, 'unsat': 0.00395965576171875, 'sat': 0.0019683837890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 122.0, 'conflicts': 36.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 3.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 29.0, 'integrated': 85.0, 'lemmas': 102.0, 'lits_learnt': 146.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 72.0, 'integrated_jumps': 31.0, 'guiding_paths_lits': 566.0, 'guiding_paths': 26.0, 'splits': 0.0, 'lemmas_conflict': 20.0, 'lemmas_loop': 10.0, 'lemmas_other': 72.0, 'lits_conflict': 29.0, 'lits_loop': 37.0, 'lits_other': 80.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 11.0, 'levels': 553.0, 'levels_bounded': 456.0, 'max': 52.0, 'max_executed': 52.0, 'max_bounded': 42.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.148550s.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009006s with result Unsatisfiable.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.15755669999999977, Incremental time limit = None
Running cumulative time = 0.5842023999999997, Cumulative time limit = 3600
Used memory = (RSS = 133.375000Mb, VMS = 123.851562Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5566651, solving_time=0.027537299999999654, total_time=0.5842023999999997, memory=Memory(rss=133.375, vms=123.8515625), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1485504999999998, solving_time=0.009006199999999964, total_time=0.15755669999999977, memory=Memory(rss=133.375, vms=123.8515625), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 14430.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 30879.0, 'bodies_tr': 30879.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 766.0, 'count_bodies_tr': 766.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 572.0, 'rules': 45588.0, 'rules_normal': 44745.0, 'rules_choice': 787.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 48.0, 'rules_tr': 45554.0, 'rules_tr_normal': 44745.0, 'rules_tr_choice': 787.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 14.0, 'eqs': 27384.0, 'eqs_atom': 5977.0, 'eqs_body': 2440.0, 'eqs_other': 18967.0}, 'lpStep': {'atoms': 2178.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7136.0, 'bodies_tr': 7136.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 86.0, 'rules': 9468.0, 'rules_normal': 9302.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9460.0, 'rules_tr_normal': 9302.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4446.0, 'eqs_atom': 894.0, 'eqs_body': 392.0, 'eqs_other': 3160.0}, 'generator': {'vars': 2943.0, 'vars_eliminated': 0.0, 'vars_frozen': 2091.0, 'constraints': 214.0, 'constraints_binary': 4272.0, 'constraints_ternary': 1033.0, 'acyc_edges': 0.0, 'complexity': 5615.0}}, 'solving': {'solvers': {'choices': 79.0, 'conflicts': 25.0, 'conflicts_analyzed': 18.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 13.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 22.0, 'integrated': 46.0, 'lemmas': 70.0, 'lits_learnt': 148.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 3.0, 'cpu_time': 0.0, 'integrated_imps': 39.0, 'integrated_jumps': 16.0, 'guiding_paths_lits': 357.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 8.0, 'lemmas_other': 45.0, 'lits_conflict': 30.0, 'lits_loop': 39.0, 'lits_other': 79.0, 'jumps': {'jumps': 18.0, 'jumps_bounded': 14.0, 'levels': 685.0, 'levels_bounded': 622.0, 'max': 62.0, 'max_executed': 62.0, 'max_bounded': 52.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.15857696533203125, 'cpu': 0.15625, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6300697326660156, 'cpu': 0.625, 'solve': 0.009918212890625, 'unsat': 0.005954742431640625, 'sat': 0.0019683837890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 201.0, 'conflicts': 61.0, 'conflicts_analyzed': 39.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 16.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 40.0, 'distributed_sum_lbd': 51.0, 'integrated': 131.0, 'lemmas': 172.0, 'lits_learnt': 294.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 3.0, 'cpu_time': 0.015625, 'integrated_imps': 111.0, 'integrated_jumps': 47.0, 'guiding_paths_lits': 923.0, 'guiding_paths': 33.0, 'splits': 0.0, 'lemmas_conflict': 37.0, 'lemmas_loop': 18.0, 'lemmas_other': 117.0, 'lits_conflict': 59.0, 'lits_loop': 76.0, 'lits_other': 159.0, 'jumps': {'jumps': 39.0, 'jumps_bounded': 25.0, 'levels': 1238.0, 'levels_bounded': 1078.0, 'max': 62.0, 'max_executed': 62.0, 'max_bounded': 52.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.155644s.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008008s with result Unsatisfiable.

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1636527000000001, Incremental time limit = None
Running cumulative time = 0.7478550999999998, Cumulative time limit = 3600
Used memory = (RSS = 138.414062Mb, VMS = 128.765625Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.7123093999999996, solving_time=0.035545700000000124, total_time=0.7478550999999998, memory=Memory(rss=138.4140625, vms=128.765625), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15564429999999962, solving_time=0.00800840000000047, total_time=0.1636527000000001, memory=Memory(rss=138.4140625, vms=128.765625), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 16702.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 38415.0, 'bodies_tr': 38415.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 946.0, 'count_bodies_tr': 946.0, 'sccs': 64.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 884.0, 'rules': 55580.0, 'rules_normal': 54571.0, 'rules_choice': 939.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 60.0, 'rules_tr': 55544.0, 'rules_tr_normal': 54571.0, 'rules_tr_choice': 939.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 24.0, 'eqs': 32723.0, 'eqs_atom': 6902.0, 'eqs_body': 2657.0, 'eqs_other': 23164.0}, 'lpStep': {'atoms': 2272.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7536.0, 'bodies_tr': 7536.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 312.0, 'rules': 9992.0, 'rules_normal': 9826.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9990.0, 'rules_tr_normal': 9826.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 5339.0, 'eqs_atom': 925.0, 'eqs_body': 217.0, 'eqs_other': 4197.0}, 'generator': {'vars': 4321.0, 'vars_eliminated': 0.0, 'vars_frozen': 3039.0, 'constraints': 511.0, 'constraints_binary': 9652.0, 'constraints_ternary': 2253.0, 'acyc_edges': 0.0, 'complexity': 12552.0}}, 'solving': {'solvers': {'choices': 279.0, 'conflicts': 57.0, 'conflicts_analyzed': 50.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 37.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 34.0, 'distributed_sum_lbd': 66.0, 'integrated': 145.0, 'lemmas': 142.0, 'lits_learnt': 434.0, 'lemmas_binary': 34.0, 'lemmas_ternary': 5.0, 'cpu_time': 0.078125, 'integrated_imps': 75.0, 'integrated_jumps': 182.0, 'guiding_paths_lits': 366.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 32.0, 'lemmas_loop': 18.0, 'lemmas_other': 92.0, 'lits_conflict': 125.0, 'lits_loop': 70.0, 'lits_other': 239.0, 'jumps': {'jumps': 50.0, 'jumps_bounded': 18.0, 'levels': 485.0, 'levels_bounded': 387.0, 'max': 63.0, 'max_executed': 63.0, 'max_bounded': 62.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.1655559539794922, 'cpu': 0.234375, 'solve': 0.00299072265625, 'unsat': 0.00299072265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.7956256866455078, 'cpu': 0.859375, 'solve': 0.012908935546875, 'unsat': 0.008945465087890625, 'sat': 0.0019683837890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 480.0, 'conflicts': 118.0, 'conflicts_analyzed': 89.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 53.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 74.0, 'distributed_sum_lbd': 117.0, 'integrated': 276.0, 'lemmas': 314.0, 'lits_learnt': 728.0, 'lemmas_binary': 39.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.09375, 'integrated_imps': 186.0, 'integrated_jumps': 229.0, 'guiding_paths_lits': 1289.0, 'guiding_paths': 39.0, 'splits': 0.0, 'lemmas_conflict': 69.0, 'lemmas_loop': 36.0, 'lemmas_other': 209.0, 'lits_conflict': 184.0, 'lits_loop': 146.0, 'lits_other': 398.0, 'jumps': {'jumps': 89.0, 'jumps_bounded': 43.0, 'levels': 1723.0, 'levels_bounded': 1465.0, 'max': 63.0, 'max_executed': 63.0, 'max_bounded': 62.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.132372s.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007898s with result Unsatisfiable.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.14027029999999918, Incremental time limit = None
Running cumulative time = 0.888125399999999, Cumulative time limit = 3600
Used memory = (RSS = 139.828125Mb, VMS = 129.414062Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.8446812999999995, solving_time=0.04344409999999943, total_time=0.888125399999999, memory=Memory(rss=139.828125, vms=129.4140625), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13237189999999988, solving_time=0.007898399999999306, total_time=0.14027029999999918, memory=Memory(rss=139.828125, vms=129.4140625), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 19026.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 45767.0, 'bodies_tr': 45767.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1126.0, 'count_bodies_tr': 1126.0, 'sccs': 74.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 971.0, 'rules': 65386.0, 'rules_normal': 64211.0, 'rules_choice': 1091.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 65342.0, 'rules_tr_normal': 64211.0, 'rules_tr_choice': 1091.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 28.0, 'eqs': 37767.0, 'eqs_atom': 7926.0, 'eqs_body': 3093.0, 'eqs_other': 26748.0}, 'lpStep': {'atoms': 2324.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7352.0, 'bodies_tr': 7352.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 87.0, 'rules': 9806.0, 'rules_normal': 9640.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9798.0, 'rules_tr_normal': 9640.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 5044.0, 'eqs_atom': 1024.0, 'eqs_body': 436.0, 'eqs_other': 3584.0}, 'generator': {'vars': 5009.0, 'vars_eliminated': 0.0, 'vars_frozen': 3512.0, 'constraints': 343.0, 'constraints_binary': 7603.0, 'constraints_ternary': 1805.0, 'acyc_edges': 0.0, 'complexity': 12552.0}}, 'solving': {'solvers': {'choices': 359.0, 'conflicts': 81.0, 'conflicts_analyzed': 69.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 32.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 53.0, 'distributed_sum_lbd': 100.0, 'integrated': 265.0, 'lemmas': 292.0, 'lits_learnt': 872.0, 'lemmas_binary': 68.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.0, 'integrated_imps': 160.0, 'integrated_jumps': 160.0, 'guiding_paths_lits': 426.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 54.0, 'lemmas_loop': 17.0, 'lemmas_other': 221.0, 'lits_conflict': 185.0, 'lits_loop': 88.0, 'lits_other': 599.0, 'jumps': {'jumps': 69.0, 'jumps_bounded': 27.0, 'levels': 1369.0, 'levels_bounded': 1165.0, 'max': 75.0, 'max_executed': 75.0, 'max_bounded': 72.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [5.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.14261817932128906, 'cpu': 0.140625, 'solve': 0.00299072265625, 'unsat': 0.00299072265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.9382438659667969, 'cpu': 1.0, 'solve': 0.015899658203125, 'unsat': 0.011936187744140625, 'sat': 0.0019683837890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 839.0, 'conflicts': 199.0, 'conflicts_analyzed': 158.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 85.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 127.0, 'distributed_sum_lbd': 217.0, 'integrated': 541.0, 'lemmas': 606.0, 'lits_learnt': 1600.0, 'lemmas_binary': 107.0, 'lemmas_ternary': 12.0, 'cpu_time': 0.09375, 'integrated_imps': 346.0, 'integrated_jumps': 389.0, 'guiding_paths_lits': 1715.0, 'guiding_paths': 50.0, 'splits': 0.0, 'lemmas_conflict': 123.0, 'lemmas_loop': 53.0, 'lemmas_other': 430.0, 'lits_conflict': 369.0, 'lits_loop': 234.0, 'lits_other': 997.0, 'jumps': {'jumps': 158.0, 'jumps_bounded': 70.0, 'levels': 3092.0, 'levels_bounded': 2630.0, 'max': 75.0, 'max_executed': 75.0, 'max_bounded': 72.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.159243s.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023340s with result Satisfiable.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.18258269999999932, Incremental time limit = None
Running cumulative time = 1.0707080999999983, Cumulative time limit = 3600
Used memory = (RSS = 141.179688Mb, VMS = 128.582031Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.003924s, Solving = 0.066784s, Total = 1.070708s, Memory = (RSS = 141.179688Mb, VMS = 129.414062Mb)), Calls = 7
Final Model :: Total atoms = 5611, Cost = (6, 0), Optimality proven = False, Number = 2, Thread ID = 4, Model type = ModelType.StableModel

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.0039239999999996, solving_time=0.06678409999999868, total_time=1.0707080999999983, memory=Memory(rss=141.1796875, vms=129.4140625), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15924270000000007, solving_time=0.02333999999999925, total_time=0.18258269999999932, memory=Memory(rss=141.1796875, vms=128.58203125), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 21304.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 53086.0, 'bodies_tr': 53086.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1306.0, 'count_bodies_tr': 1306.0, 'sccs': 84.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1058.0, 'rules': 75185.0, 'rules_normal': 73844.0, 'rules_choice': 1243.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 84.0, 'rules_tr': 75133.0, 'rules_tr_normal': 73844.0, 'rules_tr_choice': 1243.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 32.0, 'eqs': 42692.0, 'eqs_atom': 8917.0, 'eqs_body': 3497.0, 'eqs_other': 30278.0}, 'lpStep': {'atoms': 2278.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7319.0, 'bodies_tr': 7319.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 87.0, 'rules': 9799.0, 'rules_normal': 9633.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9791.0, 'rules_tr_normal': 9633.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4925.0, 'eqs_atom': 991.0, 'eqs_body': 404.0, 'eqs_other': 3530.0}, 'generator': {'vars': 5697.0, 'vars_eliminated': 0.0, 'vars_frozen': 3985.0, 'constraints': 382.0, 'constraints_binary': 8352.0, 'constraints_ternary': 2012.0, 'acyc_edges': 0.0, 'complexity': 12552.0}}, 'solving': {'solvers': {'choices': 1756.0, 'conflicts': 141.0, 'conflicts_analyzed': 134.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 37.0, 'models': 2.0, 'models_level': 285.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 113.0, 'distributed_sum_lbd': 239.0, 'integrated': 596.0, 'lemmas': 670.0, 'lits_learnt': 2375.0, 'lemmas_binary': 148.0, 'lemmas_ternary': 71.0, 'cpu_time': 0.03125, 'integrated_imps': 296.0, 'integrated_jumps': 722.0, 'guiding_paths_lits': 648.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 126.0, 'lemmas_loop': 34.0, 'lemmas_other': 510.0, 'lits_conflict': 564.0, 'lits_loop': 189.0, 'lits_other': 1622.0, 'jumps': {'jumps': 134.0, 'jumps_bounded': 27.0, 'levels': 1410.0, 'levels_bounded': 1083.0, 'max': 85.0, 'max_executed': 85.0, 'max_bounded': 82.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [6.0, 0.0], 'lower': [6.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.1845073699951172, 'cpu': 0.203125, 'solve': 0.016956329345703125, 'unsat': 0.00597381591796875, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.122751235961914, 'cpu': 1.203125, 'solve': 0.032855987548828125, 'unsat': 0.017910003662109375, 'sat': 0.0039653778076171875}, 'models': {'enumerated': 3.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 2595.0, 'conflicts': 340.0, 'conflicts_analyzed': 292.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 122.0, 'models': 3.0, 'models_level': 286.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 240.0, 'distributed_sum_lbd': 456.0, 'integrated': 1137.0, 'lemmas': 1276.0, 'lits_learnt': 3975.0, 'lemmas_binary': 255.0, 'lemmas_ternary': 83.0, 'cpu_time': 0.125, 'integrated_imps': 642.0, 'integrated_jumps': 1111.0, 'guiding_paths_lits': 2363.0, 'guiding_paths': 59.0, 'splits': 0.0, 'lemmas_conflict': 249.0, 'lemmas_loop': 87.0, 'lemmas_other': 940.0, 'lits_conflict': 933.0, 'lits_loop': 423.0, 'lits_other': 2619.0, 'jumps': {'jumps': 292.0, 'jumps_bounded': 97.0, 'levels': 4502.0, 'levels_bounded': 3713.0, 'max': 85.0, 'max_executed': 85.0, 'max_bounded': 82.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7}

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 2 ( 25.00% solved)

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=None)

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 7]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 2)
sub_goal(3, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 2)

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.145588s.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 8: original = External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=None), conversion = current_last_sgoals(2,7).

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007494s with result Unsatisfiable.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.15308289999999936, Incremental time limit = None
Running cumulative time = 1.2237909999999976, Cumulative time limit = 3600
Used memory = (RSS = 144.410156Mb, VMS = 132.789062Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.1495124999999993, solving_time=0.07427849999999836, total_time=1.2237909999999976, memory=Memory(rss=144.41015625, vms=132.7890625), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14558849999999968, solving_time=0.007494399999999679, total_time=0.15308289999999936, memory=Memory(rss=144.41015625, vms=132.7890625), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 23582.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 60310.0, 'bodies_tr': 60310.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1486.0, 'count_bodies_tr': 1486.0, 'sccs': 94.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1144.0, 'rules': 84853.0, 'rules_normal': 83346.0, 'rules_choice': 1395.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 96.0, 'rules_tr': 84793.0, 'rules_tr_normal': 83346.0, 'rules_tr_choice': 1395.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 36.0, 'eqs': 47384.0, 'eqs_atom': 9824.0, 'eqs_body': 3903.0, 'eqs_other': 33657.0}, 'lpStep': {'atoms': 2278.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7224.0, 'bodies_tr': 7224.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 86.0, 'rules': 9668.0, 'rules_normal': 9502.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9660.0, 'rules_tr_normal': 9502.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4692.0, 'eqs_atom': 907.0, 'eqs_body': 406.0, 'eqs_other': 3379.0}, 'generator': {'vars': 6308.0, 'vars_eliminated': 0.0, 'vars_frozen': 4430.0, 'constraints': 361.0, 'constraints_binary': 7760.0, 'constraints_ternary': 1624.0, 'acyc_edges': 0.0, 'complexity': 12552.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 546.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.15558433532714844, 'cpu': 0.15625, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.2783355712890625, 'cpu': 1.359375, 'solve': 0.03484916687011719, 'unsat': 0.019903182983398438, 'sat': 0.0039653778076171875}, 'models': {'enumerated': 3.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 2595.0, 'conflicts': 346.0, 'conflicts_analyzed': 292.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 122.0, 'models': 3.0, 'models_level': 286.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 240.0, 'distributed_sum_lbd': 456.0, 'integrated': 1137.0, 'lemmas': 1276.0, 'lits_learnt': 3975.0, 'lemmas_binary': 255.0, 'lemmas_ternary': 83.0, 'cpu_time': 0.140625, 'integrated_imps': 642.0, 'integrated_jumps': 1111.0, 'guiding_paths_lits': 2909.0, 'guiding_paths': 65.0, 'splits': 0.0, 'lemmas_conflict': 249.0, 'lemmas_loop': 87.0, 'lemmas_other': 940.0, 'lits_conflict': 933.0, 'lits_loop': 423.0, 'lits_other': 2619.0, 'jumps': {'jumps': 292.0, 'jumps_bounded': 97.0, 'levels': 4502.0, 'levels_bounded': 3713.0, 'max': 85.0, 'max_executed': 85.0, 'max_bounded': 82.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.147020s.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.064003s with result Satisfiable.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.21102369999999926, Incremental time limit = None
Running cumulative time = 1.434814699999997, Cumulative time limit = 3600
Used memory = (RSS = 149.660156Mb, VMS = 137.531250Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.296533s, Solving = 0.138282s, Total = 1.434815s, Memory = (RSS = 149.660156Mb, VMS = 137.531250Mb)), Calls = 9
Final Model :: Total atoms = 6285, Cost = (10, 0), Optimality proven = False, Number = 4, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.2965329999999993, solving_time=0.13828169999999762, total_time=1.434814699999997, memory=Memory(rss=149.66015625, vms=137.53125), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1470205, solving_time=0.06400319999999926, total_time=0.21102369999999926, memory=Memory(rss=149.66015625, vms=137.53125), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 25854.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68028.0, 'bodies_tr': 68028.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1666.0, 'count_bodies_tr': 1666.0, 'sccs': 114.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1464.0, 'rules': 95203.0, 'rules_normal': 93530.0, 'rules_choice': 1547.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 95141.0, 'rules_tr_normal': 93530.0, 'rules_tr_choice': 1547.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 46.0, 'eqs': 53150.0, 'eqs_atom': 10846.0, 'eqs_body': 4120.0, 'eqs_other': 38184.0}, 'lpStep': {'atoms': 2272.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7718.0, 'bodies_tr': 7718.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 320.0, 'rules': 10350.0, 'rules_normal': 10184.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 10348.0, 'rules_tr_normal': 10184.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 5766.0, 'eqs_atom': 1022.0, 'eqs_body': 217.0, 'eqs_other': 4527.0}, 'generator': {'vars': 7790.0, 'vars_eliminated': 0.0, 'vars_frozen': 5424.0, 'constraints': 705.0, 'constraints_binary': 14980.0, 'constraints_ternary': 3456.0, 'acyc_edges': 0.0, 'complexity': 19361.0}}, 'solving': {'solvers': {'choices': 1850.0, 'conflicts': 137.0, 'conflicts_analyzed': 129.0, 'restarts': 0.0, 'restarts_last': 22.0, 'extra': {'domain_choices': 89.0, 'models': 4.0, 'models_level': 714.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 106.0, 'distributed_sum_lbd': 178.0, 'integrated': 679.0, 'lemmas': 863.0, 'lits_learnt': 4159.0, 'lemmas_binary': 84.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.125, 'integrated_imps': 484.0, 'integrated_jumps': 218.0, 'guiding_paths_lits': 808.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 113.0, 'lemmas_loop': 167.0, 'lemmas_other': 583.0, 'lits_conflict': 674.0, 'lits_loop': 1013.0, 'lits_other': 2472.0, 'jumps': {'jumps': 129.0, 'jumps_bounded': 62.0, 'levels': 3851.0, 'levels_bounded': 3660.0, 'max': 135.0, 'max_executed': 135.0, 'max_bounded': 134.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [10.0, 0.0], 'lower': [10.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.212432861328125, 'cpu': 0.28125, 'solve': 0.05385780334472656, 'unsat': 0.0059833526611328125, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.4907684326171875, 'cpu': 1.640625, 'solve': 0.08870697021484375, 'unsat': 0.02588653564453125, 'sat': 0.0069580078125}, 'models': {'enumerated': 7.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 4445.0, 'conflicts': 483.0, 'conflicts_analyzed': 421.0, 'restarts': 0.0, 'restarts_last': 22.0, 'extra': {'domain_choices': 211.0, 'models': 7.0, 'models_level': 1000.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 346.0, 'distributed_sum_lbd': 634.0, 'integrated': 1816.0, 'lemmas': 2139.0, 'lits_learnt': 8134.0, 'lemmas_binary': 339.0, 'lemmas_ternary': 85.0, 'cpu_time': 0.265625, 'integrated_imps': 1126.0, 'integrated_jumps': 1329.0, 'guiding_paths_lits': 3717.0, 'guiding_paths': 82.0, 'splits': 0.0, 'lemmas_conflict': 362.0, 'lemmas_loop': 254.0, 'lemmas_other': 1523.0, 'lits_conflict': 1607.0, 'lits_loop': 1436.0, 'lits_other': 5091.0, 'jumps': {'jumps': 421.0, 'jumps_bounded': 159.0, 'levels': 8353.0, 'levels_bounded': 7373.0, 'max': 135.0, 'max_executed': 135.0, 'max_bounded': 134.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9}

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 3 ( 37.50% solved)

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=None)

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 9]:
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 3)

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.147331s.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 10: original = External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=None), conversion = current_last_sgoals(3,9).

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013374s with result Unsatisfiable.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16070419999999963, Incremental time limit = None
Running cumulative time = 1.5955188999999965, Cumulative time limit = 3600
Used memory = (RSS = 154.734375Mb, VMS = 143.820312Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.4438635999999994, solving_time=0.15165529999999716, total_time=1.5955188999999965, memory=Memory(rss=154.734375, vms=143.8203125), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1473306000000001, solving_time=0.013373599999999541, total_time=0.16070419999999963, memory=Memory(rss=154.734375, vms=143.8203125), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 28190.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 75950.0, 'bodies_tr': 75950.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1846.0, 'count_bodies_tr': 1846.0, 'sccs': 134.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1885.0, 'rules': 105786.0, 'rules_normal': 103947.0, 'rules_choice': 1699.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 120.0, 'rules_tr': 105724.0, 'rules_tr_normal': 103947.0, 'rules_tr_choice': 1699.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 58.0, 'eqs': 58142.0, 'eqs_atom': 11889.0, 'eqs_body': 4325.0, 'eqs_other': 41928.0}, 'lpStep': {'atoms': 2336.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7922.0, 'bodies_tr': 7922.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 421.0, 'rules': 10583.0, 'rules_normal': 10417.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 10583.0, 'rules_tr_normal': 10417.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 4992.0, 'eqs_atom': 1043.0, 'eqs_body': 205.0, 'eqs_other': 3744.0}, 'generator': {'vars': 9541.0, 'vars_eliminated': 0.0, 'vars_frozen': 6602.0, 'constraints': 921.0, 'constraints_binary': 19250.0, 'constraints_ternary': 4503.0, 'acyc_edges': 0.0, 'complexity': 24938.0}}, 'solving': {'solvers': {'choices': 7.0, 'conflicts': 18.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 7.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 10.0, 'lemmas': 12.0, 'lits_learnt': 24.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 10.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 777.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 0.0, 'lemmas_other': 10.0, 'lits_conflict': 4.0, 'lits_loop': 0.0, 'lits_other': 20.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 7.0, 'levels': 18.0, 'levels_bounded': 11.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [6.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.16359901428222656, 'cpu': 0.15625, 'solve': 0.002994537353515625, 'unsat': 0.002994537353515625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.654367446899414, 'cpu': 1.796875, 'solve': 0.09170150756835938, 'unsat': 0.028881072998046875, 'sat': 0.0069580078125}, 'models': {'enumerated': 7.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 4452.0, 'conflicts': 501.0, 'conflicts_analyzed': 428.0, 'restarts': 0.0, 'restarts_last': 22.0, 'extra': {'domain_choices': 218.0, 'models': 7.0, 'models_level': 1000.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 348.0, 'distributed_sum_lbd': 638.0, 'integrated': 1826.0, 'lemmas': 2151.0, 'lits_learnt': 8158.0, 'lemmas_binary': 351.0, 'lemmas_ternary': 85.0, 'cpu_time': 0.265625, 'integrated_imps': 1136.0, 'integrated_jumps': 1329.0, 'guiding_paths_lits': 4494.0, 'guiding_paths': 95.0, 'splits': 0.0, 'lemmas_conflict': 364.0, 'lemmas_loop': 254.0, 'lemmas_other': 1533.0, 'lits_conflict': 1611.0, 'lits_loop': 1436.0, 'lits_other': 5111.0, 'jumps': {'jumps': 428.0, 'jumps_bounded': 166.0, 'levels': 8371.0, 'levels_bounded': 7384.0, 'max': 135.0, 'max_executed': 135.0, 'max_bounded': 134.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.133671s.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015985s with result Unsatisfiable.

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.14965649999999986, Incremental time limit = None
Running cumulative time = 1.7451753999999964, Cumulative time limit = 3600
Used memory = (RSS = 157.394531Mb, VMS = 145.691406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.5775349999999992, solving_time=0.16764039999999714, total_time=1.7451753999999964, memory=Memory(rss=157.39453125, vms=145.69140625), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13367139999999988, solving_time=0.015985099999999974, total_time=0.14965649999999986, memory=Memory(rss=157.39453125, vms=145.69140625), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 30583.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 84335.0, 'bodies_tr': 84335.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2026.0, 'count_bodies_tr': 2026.0, 'sccs': 154.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2321.0, 'rules': 116892.0, 'rules_normal': 114887.0, 'rules_choice': 1851.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 132.0, 'rules_tr': 116830.0, 'rules_tr_normal': 114887.0, 'rules_tr_choice': 1851.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 70.0, 'eqs': 63257.0, 'eqs_atom': 12929.0, 'eqs_body': 4436.0, 'eqs_other': 45892.0}, 'lpStep': {'atoms': 2393.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8385.0, 'bodies_tr': 8385.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11106.0, 'rules_normal': 10940.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11106.0, 'rules_tr_normal': 10940.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5115.0, 'eqs_atom': 1040.0, 'eqs_body': 111.0, 'eqs_other': 3964.0}, 'generator': {'vars': 11423.0, 'vars_eliminated': 0.0, 'vars_frozen': 7832.0, 'constraints': 1401.0, 'constraints_binary': 28744.0, 'constraints_ternary': 6881.0, 'acyc_edges': 0.0, 'complexity': 37358.0}}, 'solving': {'solvers': {'choices': 233.0, 'conflicts': 131.0, 'conflicts_analyzed': 116.0, 'restarts': 0.0, 'restarts_last': 26.0, 'extra': {'domain_choices': 179.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 103.0, 'distributed_sum_lbd': 221.0, 'integrated': 510.0, 'lemmas': 1055.0, 'lits_learnt': 8315.0, 'lemmas_binary': 122.0, 'lemmas_ternary': 17.0, 'cpu_time': 0.0, 'integrated_imps': 290.0, 'integrated_jumps': 104.0, 'guiding_paths_lits': 847.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 103.0, 'lemmas_loop': 500.0, 'lemmas_other': 452.0, 'lits_conflict': 794.0, 'lits_loop': 4145.0, 'lits_other': 3376.0, 'jumps': {'jumps': 116.0, 'jumps_bounded': 57.0, 'levels': 3637.0, 'levels_bounded': 3508.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [10.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.1505756378173828, 'cpu': 0.140625, 'solve': 0.007953643798828125, 'unsat': 0.007953643798828125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.8049430847167969, 'cpu': 1.9375, 'solve': 0.0996551513671875, 'unsat': 0.036834716796875, 'sat': 0.0069580078125}, 'models': {'enumerated': 7.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 4685.0, 'conflicts': 632.0, 'conflicts_analyzed': 544.0, 'restarts': 0.0, 'restarts_last': 26.0, 'extra': {'domain_choices': 397.0, 'models': 7.0, 'models_level': 1000.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 451.0, 'distributed_sum_lbd': 859.0, 'integrated': 2336.0, 'lemmas': 3206.0, 'lits_learnt': 16473.0, 'lemmas_binary': 473.0, 'lemmas_ternary': 102.0, 'cpu_time': 0.265625, 'integrated_imps': 1426.0, 'integrated_jumps': 1433.0, 'guiding_paths_lits': 5341.0, 'guiding_paths': 112.0, 'splits': 0.0, 'lemmas_conflict': 467.0, 'lemmas_loop': 754.0, 'lemmas_other': 1985.0, 'lits_conflict': 2405.0, 'lits_loop': 5581.0, 'lits_other': 8487.0, 'jumps': {'jumps': 544.0, 'jumps_bounded': 223.0, 'levels': 12008.0, 'levels_bounded': 10892.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.156307s.

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047363s with result Satisfiable.

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.20366989999999952, Incremental time limit = None
Running cumulative time = 1.948845299999996, Cumulative time limit = 3600
Used memory = (RSS = 163.386719Mb, VMS = 151.394531Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.733842s, Solving = 0.215004s, Total = 1.948845s, Memory = (RSS = 163.386719Mb, VMS = 151.394531Mb)), Calls = 12
Final Model :: Total atoms = 7300, Cost = (19, 0), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.7338416999999984, solving_time=0.21500359999999752, total_time=1.948845299999996, memory=Memory(rss=163.38671875, vms=151.39453125), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15630669999999913, solving_time=0.04736320000000038, total_time=0.20366989999999952, memory=Memory(rss=163.38671875, vms=151.39453125), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 32987.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 92742.0, 'bodies_tr': 92742.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2206.0, 'count_bodies_tr': 2206.0, 'sccs': 174.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2757.0, 'rules': 128049.0, 'rules_normal': 125878.0, 'rules_choice': 2003.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 127987.0, 'rules_tr_normal': 125878.0, 'rules_tr_choice': 2003.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 82.0, 'eqs': 68416.0, 'eqs_atom': 13976.0, 'eqs_body': 4547.0, 'eqs_other': 49893.0}, 'lpStep': {'atoms': 2404.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8407.0, 'bodies_tr': 8407.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11157.0, 'rules_normal': 10991.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11157.0, 'rules_tr_normal': 10991.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5159.0, 'eqs_atom': 1047.0, 'eqs_body': 111.0, 'eqs_other': 4001.0}, 'generator': {'vars': 13312.0, 'vars_eliminated': 0.0, 'vars_frozen': 9066.0, 'constraints': 1832.0, 'constraints_binary': 37713.0, 'constraints_ternary': 9162.0, 'acyc_edges': 0.0, 'complexity': 49107.0}}, 'solving': {'solvers': {'choices': 2117.0, 'conflicts': 186.0, 'conflicts_analyzed': 173.0, 'restarts': 0.0, 'restarts_last': 48.0, 'extra': {'domain_choices': 185.0, 'models': 2.0, 'models_level': 457.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 162.0, 'distributed_sum_lbd': 377.0, 'integrated': 962.0, 'lemmas': 1557.0, 'lits_learnt': 14685.0, 'lemmas_binary': 122.0, 'lemmas_ternary': 89.0, 'cpu_time': 0.140625, 'integrated_imps': 414.0, 'integrated_jumps': 650.0, 'guiding_paths_lits': 917.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 163.0, 'lemmas_loop': 607.0, 'lemmas_other': 787.0, 'lits_conflict': 1744.0, 'lits_loop': 5085.0, 'lits_other': 7856.0, 'jumps': {'jumps': 173.0, 'jumps_bounded': 46.0, 'levels': 1799.0, 'levels_bounded': 1098.0, 'max': 303.0, 'max_executed': 303.0, 'max_bounded': 302.0}}}}, 'summary': {'call': 12.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [19.0, 0.0], 'lower': [19.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.2049579620361328, 'cpu': 0.3125, 'solve': 0.03787040710449219, 'unsat': 0.008975982666015625, 'sat': 0.012939453125}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.0099010467529297, 'cpu': 2.25, 'solve': 0.1375255584716797, 'unsat': 0.045810699462890625, 'sat': 0.0198974609375}, 'models': {'enumerated': 9.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 6802.0, 'conflicts': 818.0, 'conflicts_analyzed': 717.0, 'restarts': 0.0, 'restarts_last': 48.0, 'extra': {'domain_choices': 582.0, 'models': 9.0, 'models_level': 1457.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 613.0, 'distributed_sum_lbd': 1236.0, 'integrated': 3298.0, 'lemmas': 4763.0, 'lits_learnt': 31158.0, 'lemmas_binary': 595.0, 'lemmas_ternary': 191.0, 'cpu_time': 0.40625, 'integrated_imps': 1840.0, 'integrated_jumps': 2083.0, 'guiding_paths_lits': 6258.0, 'guiding_paths': 130.0, 'splits': 0.0, 'lemmas_conflict': 630.0, 'lemmas_loop': 1361.0, 'lemmas_other': 2772.0, 'lits_conflict': 4149.0, 'lits_loop': 10666.0, 'lits_other': 16343.0, 'jumps': {'jumps': 717.0, 'jumps_bounded': 269.0, 'levels': 13807.0, 'levels_bounded': 11990.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12}

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 4 ( 50.00% solved)

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 12)', truth=True, inc_range=None)

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 12]:
sub_goal(3, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 4)

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.172017s.

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 13: original = External(symbol='current_last_sgoals(4, 12)', truth=True, inc_range=None), conversion = current_last_sgoals(4,12).

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013685s with result Unsatisfiable.

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1857023, Incremental time limit = None
Running cumulative time = 2.134547599999996, Cumulative time limit = 3600
Used memory = (RSS = 170.808594Mb, VMS = 160.847656Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.9058588999999984, solving_time=0.22868869999999752, total_time=2.134547599999996, memory=Memory(rss=170.80859375, vms=160.84765625), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17201719999999998, solving_time=0.013685100000000006, total_time=0.1857023, memory=Memory(rss=170.80859375, vms=160.84765625), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 35406.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 101177.0, 'bodies_tr': 101177.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2386.0, 'count_bodies_tr': 2386.0, 'sccs': 194.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3193.0, 'rules': 139265.0, 'rules_normal': 136928.0, 'rules_choice': 2155.0, 'rules_minimize': 26.0, 'rules_acyc': 0.0, 'rules_heuristic': 156.0, 'rules_tr': 139203.0, 'rules_tr_normal': 136928.0, 'rules_tr_choice': 2155.0, 'rules_tr_minimize': 26.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 94.0, 'eqs': 73632.0, 'eqs_atom': 15033.0, 'eqs_body': 4663.0, 'eqs_other': 53936.0}, 'lpStep': {'atoms': 2419.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8435.0, 'bodies_tr': 8435.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11216.0, 'rules_normal': 11050.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11216.0, 'rules_tr_normal': 11050.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5216.0, 'eqs_atom': 1057.0, 'eqs_body': 116.0, 'eqs_other': 4043.0}, 'generator': {'vars': 15211.0, 'vars_eliminated': 0.0, 'vars_frozen': 10305.0, 'constraints': 2314.0, 'constraints_binary': 47322.0, 'constraints_ternary': 11557.0, 'acyc_edges': 0.0, 'complexity': 61661.0}}, 'solving': {'solvers': {'choices': 8.0, 'conflicts': 18.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 8.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 5.0, 'integrated': 1.0, 'lemmas': 16.0, 'lits_learnt': 126.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 1.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 987.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 13.0, 'lemmas_other': 1.0, 'lits_conflict': 19.0, 'lits_loop': 105.0, 'lits_other': 2.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 5.0, 'levels': 14.0, 'levels_bounded': 8.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 13.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [6.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.18770599365234375, 'cpu': 0.28125, 'solve': 0.005016326904296875, 'unsat': 0.005016326904296875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.1976070404052734, 'cpu': 2.53125, 'solve': 0.14254188537597656, 'unsat': 0.0508270263671875, 'sat': 0.0198974609375}, 'models': {'enumerated': 9.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 6810.0, 'conflicts': 836.0, 'conflicts_analyzed': 723.0, 'restarts': 0.0, 'restarts_last': 48.0, 'extra': {'domain_choices': 590.0, 'models': 9.0, 'models_level': 1457.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 615.0, 'distributed_sum_lbd': 1241.0, 'integrated': 3299.0, 'lemmas': 4779.0, 'lits_learnt': 31284.0, 'lemmas_binary': 597.0, 'lemmas_ternary': 191.0, 'cpu_time': 0.515625, 'integrated_imps': 1841.0, 'integrated_jumps': 2083.0, 'guiding_paths_lits': 7245.0, 'guiding_paths': 143.0, 'splits': 0.0, 'lemmas_conflict': 632.0, 'lemmas_loop': 1374.0, 'lemmas_other': 2773.0, 'lits_conflict': 4168.0, 'lits_loop': 10771.0, 'lits_other': 16345.0, 'jumps': {'jumps': 723.0, 'jumps_bounded': 274.0, 'levels': 13821.0, 'levels_bounded': 11998.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.152825s.

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.057880s with result Satisfiable.

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2107051000000002, Incremental time limit = None
Running cumulative time = 2.345252699999996, Cumulative time limit = 3600
Used memory = (RSS = 175.238281Mb, VMS = 164.496094Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.058684s, Solving = 0.286568s, Total = 2.345253s, Memory = (RSS = 175.238281Mb, VMS = 164.496094Mb)), Calls = 14
Final Model :: Total atoms = 7971, Cost = (21, 0), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.0586841999999983, solving_time=0.2865684999999978, total_time=2.345252699999996, memory=Memory(rss=175.23828125, vms=164.49609375), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15282529999999994, solving_time=0.05787980000000026, total_time=0.2107051000000002, memory=Memory(rss=175.23828125, vms=164.49609375), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 37842.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 109642.0, 'bodies_tr': 109642.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2566.0, 'count_bodies_tr': 2566.0, 'sccs': 214.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3629.0, 'rules': 150543.0, 'rules_normal': 148040.0, 'rules_choice': 2307.0, 'rules_minimize': 28.0, 'rules_acyc': 0.0, 'rules_heuristic': 168.0, 'rules_tr': 150481.0, 'rules_tr_normal': 148040.0, 'rules_tr_choice': 2307.0, 'rules_tr_minimize': 28.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 106.0, 'eqs': 78902.0, 'eqs_atom': 16100.0, 'eqs_body': 4778.0, 'eqs_other': 58024.0}, 'lpStep': {'atoms': 2436.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8465.0, 'bodies_tr': 8465.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11278.0, 'rules_normal': 11112.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11278.0, 'rules_tr_normal': 11112.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5270.0, 'eqs_atom': 1067.0, 'eqs_body': 115.0, 'eqs_other': 4088.0}, 'generator': {'vars': 17126.0, 'vars_eliminated': 0.0, 'vars_frozen': 11551.0, 'constraints': 2799.0, 'constraints_binary': 57007.0, 'constraints_ternary': 13957.0, 'acyc_edges': 0.0, 'complexity': 74299.0}}, 'solving': {'solvers': {'choices': 2679.0, 'conflicts': 306.0, 'conflicts_analyzed': 285.0, 'restarts': 1.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 467.0, 'models': 2.0, 'models_level': 554.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 252.0, 'distributed_sum_lbd': 584.0, 'integrated': 1496.0, 'lemmas': 2212.0, 'lits_learnt': 17836.0, 'lemmas_binary': 325.0, 'lemmas_ternary': 140.0, 'cpu_time': 0.359375, 'integrated_imps': 648.0, 'integrated_jumps': 1322.0, 'guiding_paths_lits': 1057.0, 'guiding_paths': 21.0, 'splits': 0.0, 'lemmas_conflict': 263.0, 'lemmas_loop': 674.0, 'lemmas_other': 1275.0, 'lits_conflict': 2271.0, 'lits_loop': 5534.0, 'lits_other': 10031.0, 'jumps': {'jumps': 285.0, 'jumps_bounded': 65.0, 'levels': 2311.0, 'levels_bounded': 1745.0, 'max': 311.0, 'max_executed': 311.0, 'max_bounded': 310.0}}}}, 'summary': {'call': 14.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [21.0, 0.0], 'lower': [21.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.21296119689941406, 'cpu': 0.5, 'solve': 0.048381805419921875, 'unsat': 0.0104827880859375, 'sat': 0.027927398681640625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.4105682373046875, 'cpu': 3.03125, 'solve': 0.19092369079589844, 'unsat': 0.061309814453125, 'sat': 0.047824859619140625}, 'models': {'enumerated': 11.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 9489.0, 'conflicts': 1142.0, 'conflicts_analyzed': 1008.0, 'restarts': 1.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 1057.0, 'models': 11.0, 'models_level': 2011.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 867.0, 'distributed_sum_lbd': 1825.0, 'integrated': 4795.0, 'lemmas': 6991.0, 'lits_learnt': 49120.0, 'lemmas_binary': 922.0, 'lemmas_ternary': 331.0, 'cpu_time': 0.875, 'integrated_imps': 2489.0, 'integrated_jumps': 3405.0, 'guiding_paths_lits': 8302.0, 'guiding_paths': 164.0, 'splits': 0.0, 'lemmas_conflict': 895.0, 'lemmas_loop': 2048.0, 'lemmas_other': 4048.0, 'lits_conflict': 6439.0, 'lits_loop': 16305.0, 'lits_other': 26376.0, 'jumps': {'jumps': 1008.0, 'jumps_bounded': 339.0, 'levels': 16132.0, 'levels_bounded': 13743.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14}

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 5 ( 62.50% solved)

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 14)', truth=True, inc_range=None)

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 14]:
sub_goal(3, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 5)

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.157241s.

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 15: original = External(symbol='current_last_sgoals(5, 14)', truth=True, inc_range=None), conversion = current_last_sgoals(5,14).

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031573s with result Satisfiable.

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.18881329999999963, Incremental time limit = None
Running cumulative time = 2.5340659999999957, Cumulative time limit = 3600
Used memory = (RSS = 180.140625Mb, VMS = 168.878906Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 12
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.215925s, Solving = 0.318141s, Total = 2.534066s, Memory = (RSS = 180.140625Mb, VMS = 168.878906Mb)), Calls = 15
Final Model :: Total atoms = 8309, Cost = (22, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.2159246999999986, solving_time=0.3181412999999971, total_time=2.5340659999999957, memory=Memory(rss=180.140625, vms=168.87890625), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15724050000000034, solving_time=0.03157279999999929, total_time=0.18881329999999963, memory=Memory(rss=180.140625, vms=168.87890625), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 40297.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 118137.0, 'bodies_tr': 118137.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2746.0, 'count_bodies_tr': 2746.0, 'sccs': 234.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4065.0, 'rules': 161883.0, 'rules_normal': 159214.0, 'rules_choice': 2459.0, 'rules_minimize': 30.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 161821.0, 'rules_tr_normal': 159214.0, 'rules_tr_choice': 2459.0, 'rules_tr_minimize': 30.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 118.0, 'eqs': 84233.0, 'eqs_atom': 17179.0, 'eqs_body': 4893.0, 'eqs_other': 62161.0}, 'lpStep': {'atoms': 2455.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8495.0, 'bodies_tr': 8495.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11340.0, 'rules_normal': 11174.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11340.0, 'rules_tr_normal': 11174.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5331.0, 'eqs_atom': 1079.0, 'eqs_body': 115.0, 'eqs_other': 4137.0}, 'generator': {'vars': 19056.0, 'vars_eliminated': 0.0, 'vars_frozen': 12804.0, 'constraints': 3286.0, 'constraints_binary': 66662.0, 'constraints_ternary': 16334.0, 'acyc_edges': 0.0, 'complexity': 86886.0}}, 'solving': {'solvers': {'choices': 765.0, 'conflicts': 36.0, 'conflicts_analyzed': 22.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 28.0, 'models': 1.0, 'models_level': 297.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 41.0, 'integrated': 103.0, 'lemmas': 228.0, 'lits_learnt': 2059.0, 'lemmas_binary': 27.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 20.0, 'integrated_jumps': 10.0, 'guiding_paths_lits': 1127.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 18.0, 'lemmas_loop': 133.0, 'lemmas_other': 77.0, 'lits_conflict': 189.0, 'lits_loop': 1062.0, 'lits_other': 808.0, 'jumps': {'jumps': 22.0, 'jumps_bounded': 1.0, 'levels': 26.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [22.0, 0.0], 'lower': [22.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.19146347045898438, 'cpu': 0.1875, 'solve': 0.02094268798828125, 'unsat': 0.014955520629882812, 'sat': 0.0059871673583984375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.602031707763672, 'cpu': 3.21875, 'solve': 0.2118663787841797, 'unsat': 0.07626533508300781, 'sat': 0.05381202697753906}, 'models': {'enumerated': 12.0, 'optimal': 5.0}, 'solving': {'solvers': {'choices': 10254.0, 'conflicts': 1178.0, 'conflicts_analyzed': 1030.0, 'restarts': 1.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 1085.0, 'models': 12.0, 'models_level': 2308.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 885.0, 'distributed_sum_lbd': 1866.0, 'integrated': 4898.0, 'lemmas': 7219.0, 'lits_learnt': 51179.0, 'lemmas_binary': 949.0, 'lemmas_ternary': 331.0, 'cpu_time': 0.890625, 'integrated_imps': 2509.0, 'integrated_jumps': 3415.0, 'guiding_paths_lits': 9429.0, 'guiding_paths': 184.0, 'splits': 0.0, 'lemmas_conflict': 913.0, 'lemmas_loop': 2181.0, 'lemmas_other': 4125.0, 'lits_conflict': 6628.0, 'lits_loop': 17367.0, 'lits_other': 27184.0, 'jumps': {'jumps': 1030.0, 'jumps_bounded': 340.0, 'levels': 16158.0, 'levels_bounded': 13745.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15}

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 6 ( 75.00% solved)

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 15)', truth=True, inc_range=None)

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 15]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 6)
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 6)

[13-11-2021_23-27-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.150084s.

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(6, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(6,15).

[13-11-2021_23-27-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044803s with result Satisfiable.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.19488709999999987, Incremental time limit = None
Running cumulative time = 2.7289530999999956, Cumulative time limit = 3600
Used memory = (RSS = 189.730469Mb, VMS = 181.843750Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 14
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.366009s, Solving = 0.362944s, Total = 2.728953s, Memory = (RSS = 189.730469Mb, VMS = 181.843750Mb)), Calls = 16
Final Model :: Total atoms = 8654, Cost = (25, 0), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.366008899999999, solving_time=0.3629441999999967, total_time=2.7289530999999956, memory=Memory(rss=189.73046875, vms=181.84375), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15008420000000022, solving_time=0.044802899999999646, total_time=0.19488709999999987, memory=Memory(rss=189.73046875, vms=181.84375), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 42764.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 126654.0, 'bodies_tr': 126654.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2926.0, 'count_bodies_tr': 2926.0, 'sccs': 254.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4501.0, 'rules': 173274.0, 'rules_normal': 170439.0, 'rules_choice': 2611.0, 'rules_minimize': 32.0, 'rules_acyc': 0.0, 'rules_heuristic': 192.0, 'rules_tr': 173212.0, 'rules_tr_normal': 170439.0, 'rules_tr_choice': 2611.0, 'rules_tr_minimize': 32.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 130.0, 'eqs': 89609.0, 'eqs_atom': 18268.0, 'eqs_body': 5004.0, 'eqs_other': 66337.0}, 'lpStep': {'atoms': 2467.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8517.0, 'bodies_tr': 8517.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11391.0, 'rules_normal': 11225.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11391.0, 'rules_tr_normal': 11225.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5376.0, 'eqs_atom': 1089.0, 'eqs_body': 111.0, 'eqs_other': 4176.0}, 'generator': {'vars': 20993.0, 'vars_eliminated': 0.0, 'vars_frozen': 14059.0, 'constraints': 3776.0, 'constraints_binary': 76473.0, 'constraints_ternary': 18752.0, 'acyc_edges': 0.0, 'complexity': 99673.0}}, 'solving': {'solvers': {'choices': 1093.0, 'conflicts': 18.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 633.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 18.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 213.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1197.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 1.0, 'lemmas_other': 0.0, 'lits_conflict': 208.0, 'lits_loop': 5.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 1.0, 'levels': 8.0, 'levels_bounded': 1.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [25.0, 0.0], 'lower': [25.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.19644927978515625, 'cpu': 0.203125, 'solve': 0.023937225341796875, 'unsat': 0.008975982666015625, 'sat': 0.005985260009765625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.798480987548828, 'cpu': 3.421875, 'solve': 0.23580360412597656, 'unsat': 0.08524131774902344, 'sat': 0.05979728698730469}, 'models': {'enumerated': 14.0, 'optimal': 6.0}, 'solving': {'solvers': {'choices': 11347.0, 'conflicts': 1196.0, 'conflicts_analyzed': 1037.0, 'restarts': 1.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 1085.0, 'models': 14.0, 'models_level': 2941.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 892.0, 'distributed_sum_lbd': 1884.0, 'integrated': 4898.0, 'lemmas': 7227.0, 'lits_learnt': 51392.0, 'lemmas_binary': 949.0, 'lemmas_ternary': 331.0, 'cpu_time': 0.921875, 'integrated_imps': 2509.0, 'integrated_jumps': 3415.0, 'guiding_paths_lits': 10626.0, 'guiding_paths': 201.0, 'splits': 0.0, 'lemmas_conflict': 920.0, 'lemmas_loop': 2182.0, 'lemmas_other': 4125.0, 'lits_conflict': 6836.0, 'lits_loop': 17372.0, 'lits_other': 27184.0, 'jumps': {'jumps': 1037.0, 'jumps_bounded': 341.0, 'levels': 16166.0, 'levels_bounded': 13746.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 7 ( 87.50% solved)

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 16)', truth=True, inc_range=None)

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 16]:
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 7)
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 7)

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.161985s.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 17: original = External(symbol='current_last_sgoals(7, 16)', truth=True, inc_range=None), conversion = current_last_sgoals(7,16).

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043007s with result Satisfiable.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.20499120000000026, Incremental time limit = None
Running cumulative time = 2.933944299999996, Cumulative time limit = 3600
Used memory = (RSS = 194.683594Mb, VMS = 186.023438Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 16
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.527993s, Solving = 0.405951s, Total = 2.933944s, Memory = (RSS = 194.683594Mb, VMS = 186.023438Mb)), Calls = 17
Final Model :: Total atoms = 8998, Cost = (27, 0), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.527993499999999, solving_time=0.4059507999999967, total_time=2.933944299999996, memory=Memory(rss=194.68359375, vms=186.0234375), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16198460000000026, solving_time=0.043006600000000006, total_time=0.20499120000000026, memory=Memory(rss=194.68359375, vms=186.0234375), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 45243.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 135192.0, 'bodies_tr': 135192.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3106.0, 'count_bodies_tr': 3106.0, 'sccs': 274.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4937.0, 'rules': 184714.0, 'rules_normal': 181713.0, 'rules_choice': 2763.0, 'rules_minimize': 34.0, 'rules_acyc': 0.0, 'rules_heuristic': 204.0, 'rules_tr': 184652.0, 'rules_tr_normal': 181713.0, 'rules_tr_choice': 2763.0, 'rules_tr_minimize': 34.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 142.0, 'eqs': 95040.0, 'eqs_atom': 19369.0, 'eqs_body': 5116.0, 'eqs_other': 70555.0}, 'lpStep': {'atoms': 2479.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8538.0, 'bodies_tr': 8538.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11440.0, 'rules_normal': 11274.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11440.0, 'rules_tr_normal': 11274.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5431.0, 'eqs_atom': 1101.0, 'eqs_body': 112.0, 'eqs_other': 4218.0}, 'generator': {'vars': 22930.0, 'vars_eliminated': 0.0, 'vars_frozen': 15314.0, 'constraints': 4266.0, 'constraints_binary': 86321.0, 'constraints_ternary': 21169.0, 'acyc_edges': 0.0, 'complexity': 112496.0}}, 'solving': {'solvers': {'choices': 1070.0, 'conflicts': 16.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 687.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 6.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 106.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.15625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1267.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 106.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 0.0, 'levels': 3.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [27.0, 0.0], 'lower': [27.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.20844078063964844, 'cpu': 0.328125, 'solve': 0.029920578002929688, 'unsat': 0.009950637817382812, 'sat': 0.005985260009765625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.0069217681884766, 'cpu': 3.75, 'solve': 0.26572418212890625, 'unsat': 0.09519195556640625, 'sat': 0.06578254699707031}, 'models': {'enumerated': 16.0, 'optimal': 7.0}, 'solving': {'solvers': {'choices': 12417.0, 'conflicts': 1212.0, 'conflicts_analyzed': 1040.0, 'restarts': 1.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 1085.0, 'models': 16.0, 'models_level': 3628.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 895.0, 'distributed_sum_lbd': 1890.0, 'integrated': 4898.0, 'lemmas': 7230.0, 'lits_learnt': 51498.0, 'lemmas_binary': 949.0, 'lemmas_ternary': 331.0, 'cpu_time': 1.078125, 'integrated_imps': 2509.0, 'integrated_jumps': 3415.0, 'guiding_paths_lits': 11893.0, 'guiding_paths': 218.0, 'splits': 0.0, 'lemmas_conflict': 923.0, 'lemmas_loop': 2182.0, 'lemmas_other': 4125.0, 'lits_conflict': 6942.0, 'lits_loop': 17372.0, 'lits_other': 27184.0, 'jumps': {'jumps': 1040.0, 'jumps_bounded': 341.0, 'levels': 16169.0, 'levels_bounded': 13746.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 8 (100.00% solved)

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 17)', truth=True, inc_range=None)

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 17]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 8)
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 8)

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.161625s.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 18: original = External(symbol='current_last_sgoals(8, 17)', truth=True, inc_range=None), conversion = current_last_sgoals(8,17).

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.072401s with result Satisfiable.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2340257999999995, Incremental time limit = None
Running cumulative time = 3.1679700999999953, Cumulative time limit = 3600
Used memory = (RSS = 199.324219Mb, VMS = 190.058594Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 17
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.689618s, Solving = 0.478352s, Total = 3.167970s, Memory = (RSS = 199.324219Mb, VMS = 190.058594Mb)), Calls = 18
Final Model :: Total atoms = 9343, Cost = (29, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.689618199999999, solving_time=0.4783518999999963, total_time=3.1679700999999953, memory=Memory(rss=199.32421875, vms=190.05859375), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16162469999999995, solving_time=0.07240109999999955, total_time=0.2340257999999995, memory=Memory(rss=199.32421875, vms=190.05859375), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 47734.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 143751.0, 'bodies_tr': 143751.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3286.0, 'count_bodies_tr': 3286.0, 'sccs': 294.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5373.0, 'rules': 196203.0, 'rules_normal': 193036.0, 'rules_choice': 2915.0, 'rules_minimize': 36.0, 'rules_acyc': 0.0, 'rules_heuristic': 216.0, 'rules_tr': 196141.0, 'rules_tr_normal': 193036.0, 'rules_tr_choice': 2915.0, 'rules_tr_minimize': 36.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 154.0, 'eqs': 100524.0, 'eqs_atom': 20482.0, 'eqs_body': 5227.0, 'eqs_other': 74815.0}, 'lpStep': {'atoms': 2491.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8559.0, 'bodies_tr': 8559.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11489.0, 'rules_normal': 11323.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11489.0, 'rules_tr_normal': 11323.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5484.0, 'eqs_atom': 1113.0, 'eqs_body': 111.0, 'eqs_other': 4260.0}, 'generator': {'vars': 24867.0, 'vars_eliminated': 0.0, 'vars_frozen': 16569.0, 'constraints': 4756.0, 'constraints_binary': 96206.0, 'constraints_ternary': 23586.0, 'acyc_edges': 0.0, 'complexity': 125356.0}}, 'solving': {'solvers': {'choices': 1047.0, 'conflicts': 15.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 364.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5.0, 'distributed_sum_lbd': 10.0, 'integrated': 0.0, 'lemmas': 27.0, 'lits_learnt': 455.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.171875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1337.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 16.0, 'lemmas_other': 0.0, 'lits_conflict': 353.0, 'lits_loop': 102.0, 'lits_other': 0.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 2.0, 'levels': 16.0, 'levels_bounded': 3.0, 'max': 5.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [29.0, 0.0], 'lower': [29.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.23833465576171875, 'cpu': 0.34375, 'solve': 0.0608367919921875, 'unsat': 0.054851531982421875, 'sat': 0.005985260009765625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.2452564239501953, 'cpu': 4.09375, 'solve': 0.32656097412109375, 'unsat': 0.15004348754882812, 'sat': 0.07176780700683594}, 'models': {'enumerated': 17.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 13464.0, 'conflicts': 1227.0, 'conflicts_analyzed': 1051.0, 'restarts': 1.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 1085.0, 'models': 17.0, 'models_level': 3992.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 900.0, 'distributed_sum_lbd': 1900.0, 'integrated': 4898.0, 'lemmas': 7257.0, 'lits_learnt': 51953.0, 'lemmas_binary': 949.0, 'lemmas_ternary': 331.0, 'cpu_time': 1.25, 'integrated_imps': 2509.0, 'integrated_jumps': 3415.0, 'guiding_paths_lits': 13230.0, 'guiding_paths': 225.0, 'splits': 0.0, 'lemmas_conflict': 934.0, 'lemmas_loop': 2198.0, 'lemmas_other': 4125.0, 'lits_conflict': 7295.0, 'lits_loop': 17474.0, 'lits_other': 27184.0, 'jumps': {'jumps': 1051.0, 'jumps_bounded': 343.0, 'levels': 16185.0, 'levels_bounded': 13749.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18}

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 9 (112.50% solved)

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 8 was achieved successfully.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.159854s, Solving = 0.008733s, Total = 0.168588s, Memory = (RSS = 126.300781Mb, VMS = 115.476562Mb)
2 : Statistics :: Grounding = 0.111839s, Solving = 0.004315s, Total = 0.116154s, Memory = (RSS = 128.250000Mb, VMS = 117.433594Mb)
3 : Statistics :: Grounding = 0.136421s, Solving = 0.005483s, Total = 0.141904s, Memory = (RSS = 130.261719Mb, VMS = 119.281250Mb)
4 : Statistics :: Grounding = 0.148550s, Solving = 0.009006s, Total = 0.157557s, Memory = (RSS = 133.375000Mb, VMS = 123.851562Mb)
5 : Statistics :: Grounding = 0.155644s, Solving = 0.008008s, Total = 0.163653s, Memory = (RSS = 138.414062Mb, VMS = 128.765625Mb)
6 : Statistics :: Grounding = 0.132372s, Solving = 0.007898s, Total = 0.140270s, Memory = (RSS = 139.828125Mb, VMS = 129.414062Mb)
7 : Statistics :: Grounding = 0.159243s, Solving = 0.023340s, Total = 0.182583s, Memory = (RSS = 141.179688Mb, VMS = 128.582031Mb)
8 : Statistics :: Grounding = 0.145588s, Solving = 0.007494s, Total = 0.153083s, Memory = (RSS = 144.410156Mb, VMS = 132.789062Mb)
9 : Statistics :: Grounding = 0.147020s, Solving = 0.064003s, Total = 0.211024s, Memory = (RSS = 149.660156Mb, VMS = 137.531250Mb)
10 : Statistics :: Grounding = 0.147331s, Solving = 0.013374s, Total = 0.160704s, Memory = (RSS = 154.734375Mb, VMS = 143.820312Mb)
11 : Statistics :: Grounding = 0.133671s, Solving = 0.015985s, Total = 0.149656s, Memory = (RSS = 157.394531Mb, VMS = 145.691406Mb)
12 : Statistics :: Grounding = 0.156307s, Solving = 0.047363s, Total = 0.203670s, Memory = (RSS = 163.386719Mb, VMS = 151.394531Mb)
13 : Statistics :: Grounding = 0.172017s, Solving = 0.013685s, Total = 0.185702s, Memory = (RSS = 170.808594Mb, VMS = 160.847656Mb)
14 : Statistics :: Grounding = 0.152825s, Solving = 0.057880s, Total = 0.210705s, Memory = (RSS = 175.238281Mb, VMS = 164.496094Mb)
15 : Statistics :: Grounding = 0.157241s, Solving = 0.031573s, Total = 0.188813s, Memory = (RSS = 180.140625Mb, VMS = 168.878906Mb)
16 : Statistics :: Grounding = 0.150084s, Solving = 0.044803s, Total = 0.194887s, Memory = (RSS = 189.730469Mb, VMS = 181.843750Mb)
17 : Statistics :: Grounding = 0.161985s, Solving = 0.043007s, Total = 0.204991s, Memory = (RSS = 194.683594Mb, VMS = 186.023438Mb)
18 : Statistics :: Grounding = 0.161625s, Solving = 0.072401s, Total = 0.234026s, Memory = (RSS = 199.324219Mb, VMS = 190.058594Mb)

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.167970s due to: External generator exit.

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 2.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-27-30] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 8, Last requested goal index = 8 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-27-30] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.689618s, Solving = 0.478352s, Total = 3.167970s, Memory = (RSS = 199.324219Mb, VMS = 190.058594Mb)), Calls = 18
Model :: Total atoms = 9343, Cost = (29, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-27-30] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 18 :: Actions = 30                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
        talos : grasp(manipulator_arm_2,(block,5))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 13:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 15:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 16:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 17:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_2,(block,5))
Step 18:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 8] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 8] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
        talos : release(manipulator_arm_1,(block,3))

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=18, step_range=range(0, 18)

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 0, Actions = 0
Level [2]: Length = 18, Actions = 30
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-27-30] INFO :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   3.204s (Gro =   2.720s, Sea =   0.484s), Expan (2.43, 2.80) (Dev = (2.15, 3.95), Bal = (0.88, 1.41))

[13-11-2021_23-27-30] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=17, start_step=0, blend=Blend(left=0, right=0.2)

[13-11-2021_23-27-30] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=8, large_group_size=9

[13-11-2021_23-27-30] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=8, blend=Blend(left=0, right=1), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[13-11-2021_23-27-30] INFO :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   3.204s (Gro =   2.720s, Sea =   0.484s), Expan (2.43, 2.80) (Dev = (2.15, 3.95), Bal = (0.88, 1.41))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-27-30] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 1:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   3.204s (Gro =   2.720s, Sea =   0.484s), Expan (2.43, 2.80) (Dev = (2.15, 3.95), Bal = (0.88, 1.41))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-27-30] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-9]

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-9], problem number = 1, increment number = 1

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 9)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016425336EA0>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-27-30] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 9
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 8

[13-11-2021_23-27-30] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [1-9] : Minimum search length bound = disabled with value = 8

[13-11-2021_23-27-30] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = True, chosen = True

[13-11-2021_23-27-30] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-11-2021_23-27-30] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete(blue), false, 0).
holds(1, complete(red), false, 0).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(1, configuration(manipulator_limb_1), retracted, 0).
holds(1, configuration(manipulator_limb_2), retracted, 0).
holds(1, configuration(puzzle_room_door), closed, 0).
holds(1, configuration(starting_room_door), closed, 0).
holds(1, configuration(store_room_door), closed, 0).
holds(1, grasping(manipulator_arm_1), nothing, 0).
holds(1, grasping(manipulator_arm_2), nothing, 0).
holds(1, grasping(manipulator_end_1), nothing, 0).
holds(1, grasping(manipulator_end_2), nothing, 0).
holds(1, in((block,1)), (puzzle_room,1), 0).
holds(1, in((block,2)), (puzzle_room,1), 0).
holds(1, in((block,3)), (puzzle_room,1), 0).
holds(1, in((block,4)), (store_room,0), 0).
holds(1, in((block,5)), (store_room,0), 0).
holds(1, in((block,6)), (store_room,0), 0).
holds(1, in(manipulator_arm_1), (starting_room,0), 0).
holds(1, in(manipulator_arm_2), (starting_room,0), 0).
holds(1, in(manipulator_end_1), (starting_room,0), 0).
holds(1, in(manipulator_end_2), (starting_room,0), 0).
holds(1, in(manipulator_limb_1), (starting_room,0), 0).
holds(1, in(manipulator_limb_2), (starting_room,0), 0).
holds(1, in(puzzle_room_table), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0).
holds(1, in(talos), (starting_room,0), 0).
holds(1, in_tower((block,1),(block,1)), true, 0).
holds(1, in_tower((block,1),(block,2)), false, 0).
holds(1, in_tower((block,1),(block,3)), true, 0).
holds(1, in_tower((block,1),(block,4)), false, 0).
holds(1, in_tower((block,1),(block,5)), false, 0).
holds(1, in_tower((block,1),(block,6)), false, 0).
holds(1, in_tower((block,2),(block,1)), false, 0).
holds(1, in_tower((block,2),(block,2)), true, 0).
holds(1, in_tower((block,2),(block,3)), false, 0).
holds(1, in_tower((block,2),(block,4)), false, 0).
holds(1, in_tower((block,2),(block,5)), false, 0).
holds(1, in_tower((block,2),(block,6)), false, 0).
holds(1, in_tower((block,3),(block,1)), false, 0).
holds(1, in_tower((block,3),(block,2)), false, 0).
holds(1, in_tower((block,3),(block,3)), false, 0).
holds(1, in_tower((block,3),(block,4)), false, 0).
holds(1, in_tower((block,3),(block,5)), false, 0).
holds(1, in_tower((block,3),(block,6)), false, 0).
holds(1, in_tower((block,4),(block,1)), false, 0).
holds(1, in_tower((block,4),(block,2)), false, 0).
holds(1, in_tower((block,4),(block,3)), false, 0).
holds(1, in_tower((block,4),(block,4)), false, 0).
holds(1, in_tower((block,4),(block,5)), false, 0).
holds(1, in_tower((block,4),(block,6)), false, 0).
holds(1, in_tower((block,5),(block,1)), false, 0).
holds(1, in_tower((block,5),(block,2)), false, 0).
holds(1, in_tower((block,5),(block,3)), false, 0).
holds(1, in_tower((block,5),(block,4)), false, 0).
holds(1, in_tower((block,5),(block,5)), false, 0).
holds(1, in_tower((block,5),(block,6)), false, 0).
holds(1, in_tower((block,6),(block,1)), false, 0).
holds(1, in_tower((block,6),(block,2)), false, 0).
holds(1, in_tower((block,6),(block,3)), false, 0).
holds(1, in_tower((block,6),(block,4)), false, 0).
holds(1, in_tower((block,6),(block,5)), false, 0).
holds(1, in_tower((block,6),(block,6)), false, 0).
holds(1, on((block,1)), puzzle_room_table_left, 0).
holds(1, on((block,2)), puzzle_room_table_right, 0).
holds(1, on((block,3)), (block,1), 0).
holds(1, on((block,4)), nothing, 0).
holds(1, on((block,5)), nothing, 0).
holds(1, on((block,6)), nothing, 0).
holds(1, tower_base((block,1)), true, 0).
holds(1, tower_base((block,2)), true, 0).
holds(1, tower_base((block,3)), false, 0).
holds(1, tower_base((block,4)), false, 0).
holds(1, tower_base((block,5)), false, 0).
holds(1, tower_base((block,6)), false, 0).
holds(1, unordered_tower((block,1)), true, 0).
holds(1, unordered_tower((block,2)), false, 0).
holds(1, unordered_tower((block,3)), false, 0).
holds(1, unordered_tower((block,4)), false, 0).
holds(1, unordered_tower((block,5)), false, 0).
holds(1, unordered_tower((block,6)), false, 0).
holds(2, complete(blue), false, 0).
holds(2, complete(red), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1)), true, 0).
holds(2, tower_base((block,2)), true, 0).
holds(2, tower_base((block,3)), false, 0).
holds(2, tower_base((block,4)), false, 0).
holds(2, tower_base((block,5)), false, 0).
holds(2, tower_base((block,6)), false, 0).
holds(2, unordered_tower((block,1)), true, 0).
holds(2, unordered_tower((block,2)), false, 0).
holds(2, unordered_tower((block,3)), false, 0).
holds(2, unordered_tower((block,4)), false, 0).
holds(2, unordered_tower((block,5)), false, 0).
holds(2, unordered_tower((block,6)), false, 0).

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete(blue), false, false).
final_goal(1, complete(blue), true, true).
final_goal(1, complete(red), false, false).
final_goal(1, complete(red), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1)), false, true).
final_goal(1, tower_base((block,1)), true, false).
final_goal(1, tower_base((block,2)), false, true).
final_goal(1, tower_base((block,2)), true, false).
final_goal(1, tower_base((block,3)), false, false).
final_goal(1, tower_base((block,3)), true, true).
final_goal(1, tower_base((block,4)), false, true).
final_goal(1, tower_base((block,4)), true, false).
final_goal(1, tower_base((block,5)), false, true).
final_goal(1, tower_base((block,5)), true, false).
final_goal(1, tower_base((block,6)), false, false).
final_goal(1, tower_base((block,6)), true, true).
final_goal(1, unordered_tower((block,1)), false, true).
final_goal(1, unordered_tower((block,1)), true, false).
final_goal(1, unordered_tower((block,2)), false, true).
final_goal(1, unordered_tower((block,2)), true, false).
final_goal(1, unordered_tower((block,3)), false, true).
final_goal(1, unordered_tower((block,3)), true, false).
final_goal(1, unordered_tower((block,4)), false, true).
final_goal(1, unordered_tower((block,4)), true, false).
final_goal(1, unordered_tower((block,5)), false, true).
final_goal(1, unordered_tower((block,5)), true, false).
final_goal(1, unordered_tower((block,6)), false, true).
final_goal(1, unordered_tower((block,6)), true, false).
final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 1})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'puzzle_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'store_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_2,store_room_door)', 'F': 'configuration(store_room_door)', 'V': 'open', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 7})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 9})

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 16 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 1).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 2).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 2).
sub_goal(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3).
sub_goal(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), store_room_door_handle_outer, 3).
sub_goal(2, talos, actuate(manipulator_arm_1,puzzle_room_door), configuration(puzzle_room_door), open, 4).
sub_goal(2, talos, actuate(manipulator_arm_2,store_room_door), configuration(store_room_door), open, 4).
sub_goal(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 5).
sub_goal(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 5).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 6).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 6).
sub_goal(2, talos, move(store_room), in(talos), store_room, 7).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 8).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 8).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 9).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 9).

[13-11-2021_23-27-30] INFO :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001642432CE50>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 'none', 'sequential', 'true'), range_=None)]

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 817 rules

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.010820499999999456s

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.030560s.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006620s with result Satisfiable.

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000016429E03540>

[13-11-2021_23-27-30] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 0)
	('last_sgoals', 9)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000016425336EA0>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000016429E03540>)

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.330039s.

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012285s with result Unsatisfiable.

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3423234000000006, Incremental time limit = None
Running cumulative time = 0.3423234000000006, Cumulative time limit = 3600
Used memory = (RSS = 209.152344Mb, VMS = 200.636719Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-31] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.33003870000000024, solving_time=0.01228470000000037, total_time=0.3423234000000006, memory=Memory(rss=209.15234375, vms=200.63671875), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.33003870000000024, solving_time=0.01228470000000037, total_time=0.3423234000000006, memory=Memory(rss=209.15234375, vms=200.63671875), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 12427.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16672.0, 'bodies_tr': 16672.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 592.0, 'rules': 28740.0, 'rules_normal': 28183.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28728.0, 'rules_tr_normal': 28183.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 27428.0, 'eqs_atom': 7036.0, 'eqs_body': 1888.0, 'eqs_other': 18504.0}, 'lpStep': {'atoms': 5900.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14069.0, 'bodies_tr': 14069.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 592.0, 'rules': 21303.0, 'rules_normal': 20746.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21291.0, 'rules_tr_normal': 20746.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 14420.0, 'eqs_atom': 2126.0, 'eqs_body': 379.0, 'eqs_other': 11915.0}, 'generator': {'vars': 2759.0, 'vars_eliminated': 0.0, 'vars_frozen': 1725.0, 'constraints': 29.0, 'constraints_binary': 936.0, 'constraints_ternary': 143.0, 'acyc_edges': 0.0, 'complexity': 1122.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 92.0, 'guiding_paths': 4.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.3412914276123047, 'cpu': 0.34375, 'solve': 0.0019969940185546875, 'unsat': 0.0019969940185546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3891334533691406, 'cpu': 0.390625, 'solve': 0.0059871673583984375, 'unsat': 0.0019969940185546875, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 100.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.148494s.

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009500s with result Satisfiable.

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15799370000000046, Incremental time limit = None
Running cumulative time = 0.5003171000000011, Cumulative time limit = 3600
Used memory = (RSS = 212.683594Mb, VMS = 204.320312Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.478533s, Solving = 0.021784s, Total = 0.500317s, Memory = (RSS = 212.683594Mb, VMS = 204.320312Mb)), Calls = 2
Final Model :: Total atoms = 4541, Cost = (1, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-27-31] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.47853280000000087, solving_time=0.0217843000000002, total_time=0.5003171000000011, memory=Memory(rss=212.68359375, vms=204.3203125), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14849410000000063, solving_time=0.00949959999999983, total_time=0.15799370000000046, memory=Memory(rss=212.68359375, vms=204.3203125), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 14269.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26073.0, 'bodies_tr': 26073.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 462.0, 'count_bodies_tr': 462.0, 'sccs': 47.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 768.0, 'rules': 41252.0, 'rules_normal': 40486.0, 'rules_choice': 738.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 41228.0, 'rules_tr_normal': 40486.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 31159.0, 'eqs_atom': 7801.0, 'eqs_body': 2322.0, 'eqs_other': 21036.0}, 'lpStep': {'atoms': 1842.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9401.0, 'bodies_tr': 9401.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176.0, 'rules': 12512.0, 'rules_normal': 12303.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12500.0, 'rules_tr_normal': 12303.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3731.0, 'eqs_atom': 765.0, 'eqs_body': 434.0, 'eqs_other': 2532.0}, 'generator': {'vars': 3013.0, 'vars_eliminated': 0.0, 'vars_frozen': 1947.0, 'constraints': 116.0, 'constraints_binary': 2190.0, 'constraints_ternary': 233.0, 'acyc_edges': 0.0, 'complexity': 2577.0}}, 'solving': {'solvers': {'choices': 226.0, 'conflicts': 12.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 53.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 27.0, 'integrated': 81.0, 'lemmas': 77.0, 'lits_learnt': 172.0, 'lemmas_binary': 30.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 35.0, 'integrated_jumps': 113.0, 'guiding_paths_lits': 238.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 12.0, 'lemmas_other': 55.0, 'lits_conflict': 16.0, 'lits_loop': 49.0, 'lits_other': 107.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 3.0, 'levels': 83.0, 'levels_bounded': 71.0, 'max': 37.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [1.0, 0.0], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.15808486938476562, 'cpu': 0.1875, 'solve': 0.0049839019775390625, 'unsat': 0.0039882659912109375, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.5472183227539062, 'cpu': 0.578125, 'solve': 0.0109710693359375, 'unsat': 0.005985260009765625, 'sat': 0.00299072265625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 226.0, 'conflicts': 12.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 54.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 27.0, 'integrated': 81.0, 'lemmas': 80.0, 'lits_learnt': 175.0, 'lemmas_binary': 30.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 35.0, 'integrated_jumps': 113.0, 'guiding_paths_lits': 338.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 15.0, 'lemmas_other': 55.0, 'lits_conflict': 16.0, 'lits_loop': 52.0, 'lits_other': 107.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 3.0, 'levels': 83.0, 'levels_bounded': 71.0, 'max': 37.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-31] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2}

[13-11-2021_23-27-31] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 2 ( 22.22% solved)

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None)

[13-11-2021_23-27-31] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 2]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 2)
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 2)

[13-11-2021_23-27-31] DEBUG :: ASH Planner Main #1 >> Reaction at search length 2:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.214504s.

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 3: original = External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None), conversion = current_last_sgoals(2,2).

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009812s with result Satisfiable.

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.22431590000000057, Incremental time limit = None
Running cumulative time = 0.7246330000000016, Cumulative time limit = 3600
Used memory = (RSS = 214.164062Mb, VMS = 205.687500Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.693037s, Solving = 0.031596s, Total = 0.724633s, Memory = (RSS = 214.164062Mb, VMS = 205.687500Mb)), Calls = 3
Final Model :: Total atoms = 4918, Cost = (3, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-31] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.6930366000000001, solving_time=0.03159640000000152, total_time=0.7246330000000016, memory=Memory(rss=214.1640625, vms=205.6875), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21450379999999925, solving_time=0.009812100000001323, total_time=0.22431590000000057, memory=Memory(rss=214.1640625, vms=205.6875), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 17057.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 35775.0, 'bodies_tr': 35775.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 663.0, 'count_bodies_tr': 663.0, 'sccs': 60.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 954.0, 'rules': 54196.0, 'rules_normal': 53221.0, 'rules_choice': 933.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 54160.0, 'rules_tr_normal': 53221.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 35955.0, 'eqs_atom': 8661.0, 'eqs_body': 2756.0, 'eqs_other': 24538.0}, 'lpStep': {'atoms': 2788.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9702.0, 'bodies_tr': 9702.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 12944.0, 'rules_normal': 12735.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12932.0, 'rules_tr_normal': 12735.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4796.0, 'eqs_atom': 860.0, 'eqs_body': 434.0, 'eqs_other': 3502.0}, 'generator': {'vars': 3337.0, 'vars_eliminated': 0.0, 'vars_frozen': 2235.0, 'constraints': 165.0, 'constraints_binary': 2645.0, 'constraints_ternary': 239.0, 'acyc_edges': 0.0, 'complexity': 3107.0}}, 'solving': {'solvers': {'choices': 131.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 75.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 12.0, 'integrated': 30.0, 'lemmas': 22.0, 'lits_learnt': 156.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 315.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 22.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 156.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [3.0, 0.0], 'lower': [3.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2254180908203125, 'cpu': 0.234375, 'solve': 0.0059833526611328125, 'unsat': 0.0049877166748046875, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.7726364135742188, 'cpu': 0.8125, 'solve': 0.016954421997070312, 'unsat': 0.010972976684570312, 'sat': 0.003986358642578125}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 357.0, 'conflicts': 12.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 39.0, 'integrated': 111.0, 'lemmas': 102.0, 'lits_learnt': 331.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 35.0, 'integrated_jumps': 113.0, 'guiding_paths_lits': 653.0, 'guiding_paths': 26.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 37.0, 'lemmas_other': 55.0, 'lits_conflict': 16.0, 'lits_loop': 208.0, 'lits_other': 107.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 3.0, 'levels': 83.0, 'levels_bounded': 71.0, 'max': 37.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-31] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3}

[13-11-2021_23-27-31] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 3 ( 33.33% solved)

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 3)', truth=True, inc_range=None)

[13-11-2021_23-27-31] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 3]:
sub_goal(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3)
sub_goal(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), store_room_door_handle_outer, 3)

[13-11-2021_23-27-31] DEBUG :: ASH Planner Main #1 >> Reaction at search length 3:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.220404s.

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 4: original = External(symbol='current_last_sgoals(3, 3)', truth=True, inc_range=None), conversion = current_last_sgoals(3,3).

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008128s with result Unsatisfiable.

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2285319999999995, Incremental time limit = None
Running cumulative time = 0.9531650000000012, Cumulative time limit = 3600
Used memory = (RSS = 215.964844Mb, VMS = 207.398438Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-31] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.9134401999999993, solving_time=0.03972480000000189, total_time=0.9531650000000012, memory=Memory(rss=215.96484375, vms=207.3984375), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.22040359999999914, solving_time=0.008128400000000369, total_time=0.2285319999999995, memory=Memory(rss=215.96484375, vms=207.3984375), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 19857.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 45765.0, 'bodies_tr': 45765.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 864.0, 'count_bodies_tr': 864.0, 'sccs': 73.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1188.0, 'rules': 68042.0, 'rules_normal': 66858.0, 'rules_choice': 1128.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 48.0, 'rules_tr': 67994.0, 'rules_tr_normal': 66858.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 43351.0, 'eqs_atom': 10123.0, 'eqs_body': 3390.0, 'eqs_other': 29838.0}, 'lpStep': {'atoms': 2800.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9990.0, 'bodies_tr': 9990.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 13846.0, 'rules_normal': 13637.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 13834.0, 'rules_tr_normal': 13637.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7396.0, 'eqs_atom': 1462.0, 'eqs_body': 634.0, 'eqs_other': 5300.0}, 'generator': {'vars': 4025.0, 'vars_eliminated': 0.0, 'vars_frozen': 2730.0, 'constraints': 325.0, 'constraints_binary': 5808.0, 'constraints_ternary': 925.0, 'acyc_edges': 0.0, 'complexity': 7164.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 5.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 392.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.22937774658203125, 'cpu': 0.234375, 'solve': 0.001983642578125, 'unsat': 0.001983642578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.00201416015625, 'cpu': 1.046875, 'solve': 0.018938064575195312, 'unsat': 0.012956619262695312, 'sat': 0.003986358642578125}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 357.0, 'conflicts': 17.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 39.0, 'integrated': 111.0, 'lemmas': 102.0, 'lits_learnt': 331.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 35.0, 'integrated_jumps': 113.0, 'guiding_paths_lits': 1045.0, 'guiding_paths': 33.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 37.0, 'lemmas_other': 55.0, 'lits_conflict': 16.0, 'lits_loop': 208.0, 'lits_other': 107.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 3.0, 'levels': 83.0, 'levels_bounded': 71.0, 'max': 37.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-31] DEBUG :: ASH Planner Main #1 >> Reaction at search length 4:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.265620s.

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011737s with result Unsatisfiable.

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2773571999999991, Incremental time limit = None
Running cumulative time = 1.2305222000000002, Cumulative time limit = 3600
Used memory = (RSS = 221.015625Mb, VMS = 212.339844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-32] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.1790605999999988, solving_time=0.05146160000000144, total_time=1.2305222000000002, memory=Memory(rss=221.015625, vms=212.33984375), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26562039999999953, solving_time=0.011736799999999548, total_time=0.2773571999999991, memory=Memory(rss=221.015625, vms=212.33984375), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 23058.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 57054.0, 'bodies_tr': 57054.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1065.0, 'count_bodies_tr': 1065.0, 'sccs': 98.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1674.0, 'rules': 83460.0, 'rules_normal': 82067.0, 'rules_choice': 1323.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 60.0, 'rules_tr': 83410.0, 'rules_tr_normal': 82067.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 51353.0, 'eqs_atom': 11632.0, 'eqs_body': 3541.0, 'eqs_other': 36180.0}, 'lpStep': {'atoms': 3201.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11289.0, 'bodies_tr': 11289.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 15418.0, 'rules_normal': 15209.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 15416.0, 'rules_tr_normal': 15209.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8002.0, 'eqs_atom': 1509.0, 'eqs_body': 151.0, 'eqs_other': 6342.0}, 'generator': {'vars': 6059.0, 'vars_eliminated': 0.0, 'vars_frozen': 4021.0, 'constraints': 788.0, 'constraints_binary': 15949.0, 'constraints_ternary': 3544.0, 'acyc_edges': 0.0, 'complexity': 20463.0}}, 'solving': {'solvers': {'choices': 110.0, 'conflicts': 62.0, 'conflicts_analyzed': 51.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 46.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 48.0, 'distributed_sum_lbd': 50.0, 'integrated': 232.0, 'lemmas': 327.0, 'lits_learnt': 625.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.0, 'integrated_imps': 232.0, 'integrated_jumps': 17.0, 'guiding_paths_lits': 469.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 48.0, 'lemmas_loop': 47.0, 'lemmas_other': 232.0, 'lits_conflict': 52.0, 'lits_loop': 337.0, 'lits_other': 236.0, 'jumps': {'jumps': 51.0, 'jumps_bounded': 51.0, 'levels': 3206.0, 'levels_bounded': 3113.0, 'max': 69.0, 'max_executed': 12.0, 'max_bounded': 68.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [2.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.2782573699951172, 'cpu': 0.28125, 'solve': 0.0029926300048828125, 'unsat': 0.0029926300048828125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.2802715301513672, 'cpu': 1.328125, 'solve': 0.021930694580078125, 'unsat': 0.015949249267578125, 'sat': 0.003986358642578125}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 467.0, 'conflicts': 79.0, 'conflicts_analyzed': 61.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 46.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 72.0, 'distributed_sum_lbd': 89.0, 'integrated': 343.0, 'lemmas': 429.0, 'lits_learnt': 956.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.0625, 'integrated_imps': 267.0, 'integrated_jumps': 130.0, 'guiding_paths_lits': 1514.0, 'guiding_paths': 41.0, 'splits': 0.0, 'lemmas_conflict': 58.0, 'lemmas_loop': 84.0, 'lemmas_other': 287.0, 'lits_conflict': 68.0, 'lits_loop': 545.0, 'lits_other': 343.0, 'jumps': {'jumps': 61.0, 'jumps_bounded': 54.0, 'levels': 3289.0, 'levels_bounded': 3184.0, 'max': 69.0, 'max_executed': 12.0, 'max_bounded': 68.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-32] DEBUG :: ASH Planner Main #1 >> Reaction at search length 5:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.227756s.

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014098s with result Unsatisfiable.

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.24185440000000114, Incremental time limit = None
Running cumulative time = 1.4723766000000014, Cumulative time limit = 3600
Used memory = (RSS = 226.097656Mb, VMS = 217.667969Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-32] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.4068166, solving_time=0.0655600000000014, total_time=1.4723766000000014, memory=Memory(rss=226.09765625, vms=217.66796875), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.22775600000000118, solving_time=0.014098399999999955, total_time=0.24185440000000114, memory=Memory(rss=226.09765625, vms=217.66796875), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 26546.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68643.0, 'bodies_tr': 68643.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1266.0, 'count_bodies_tr': 1266.0, 'sccs': 123.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2160.0, 'rules': 99218.0, 'rules_normal': 97616.0, 'rules_choice': 1518.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 99166.0, 'rules_tr_normal': 97616.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 20.0, 'eqs': 59812.0, 'eqs_atom': 13176.0, 'eqs_body': 3716.0, 'eqs_other': 42920.0}, 'lpStep': {'atoms': 3488.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11589.0, 'bodies_tr': 11589.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 15758.0, 'rules_normal': 15549.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 15756.0, 'rules_tr_normal': 15549.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8459.0, 'eqs_atom': 1544.0, 'eqs_body': 175.0, 'eqs_other': 6740.0}, 'generator': {'vars': 8116.0, 'vars_eliminated': 0.0, 'vars_frozen': 5317.0, 'constraints': 996.0, 'constraints_binary': 20853.0, 'constraints_ternary': 4531.0, 'acyc_edges': 0.0, 'complexity': 26606.0}}, 'solving': {'solvers': {'choices': 119.0, 'conflicts': 104.0, 'conflicts_analyzed': 93.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 51.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 85.0, 'distributed_sum_lbd': 168.0, 'integrated': 443.0, 'lemmas': 601.0, 'lits_learnt': 5978.0, 'lemmas_binary': 24.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.0, 'integrated_imps': 348.0, 'integrated_jumps': 12.0, 'guiding_paths_lits': 546.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 85.0, 'lemmas_loop': 107.0, 'lemmas_other': 409.0, 'lits_conflict': 1131.0, 'lits_loop': 977.0, 'lits_other': 3870.0, 'jumps': {'jumps': 93.0, 'jumps_bounded': 51.0, 'levels': 1343.0, 'levels_bounded': 1227.0, 'max': 254.0, 'max_executed': 254.0, 'max_bounded': 252.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [4.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.2453441619873047, 'cpu': 0.25, 'solve': 0.0039920806884765625, 'unsat': 0.0039920806884765625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.5256156921386719, 'cpu': 1.578125, 'solve': 0.025922775268554688, 'unsat': 0.019941329956054688, 'sat': 0.003986358642578125}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 586.0, 'conflicts': 183.0, 'conflicts_analyzed': 154.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 97.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 157.0, 'distributed_sum_lbd': 257.0, 'integrated': 786.0, 'lemmas': 1030.0, 'lits_learnt': 6934.0, 'lemmas_binary': 60.0, 'lemmas_ternary': 12.0, 'cpu_time': 0.0625, 'integrated_imps': 615.0, 'integrated_jumps': 142.0, 'guiding_paths_lits': 2060.0, 'guiding_paths': 52.0, 'splits': 0.0, 'lemmas_conflict': 143.0, 'lemmas_loop': 191.0, 'lemmas_other': 696.0, 'lits_conflict': 1199.0, 'lits_loop': 1522.0, 'lits_other': 4213.0, 'jumps': {'jumps': 154.0, 'jumps_bounded': 105.0, 'levels': 4632.0, 'levels_bounded': 4411.0, 'max': 254.0, 'max_executed': 254.0, 'max_bounded': 252.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-32] DEBUG :: ASH Planner Main #1 >> Reaction at search length 6:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.250622s.

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027322s with result Unsatisfiable.

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2779443000000015, Incremental time limit = None
Running cumulative time = 1.7503209000000028, Cumulative time limit = 3600
Used memory = (RSS = 232.062500Mb, VMS = 224.382812Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-32] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.6574388000000004, solving_time=0.09288210000000241, total_time=1.7503209000000028, memory=Memory(rss=232.0625, vms=224.3828125), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.25062220000000046, solving_time=0.027322100000001015, total_time=0.2779443000000015, memory=Memory(rss=232.0625, vms=224.3828125), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 30052.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 80714.0, 'bodies_tr': 80714.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1467.0, 'count_bodies_tr': 1467.0, 'sccs': 148.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2650.0, 'rules': 115672.0, 'rules_normal': 113861.0, 'rules_choice': 1713.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 84.0, 'rules_tr': 115618.0, 'rules_tr_normal': 113861.0, 'rules_tr_choice': 1713.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 30.0, 'eqs': 72433.0, 'eqs_atom': 14913.0, 'eqs_body': 3897.0, 'eqs_other': 53623.0}, 'lpStep': {'atoms': 3506.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12071.0, 'bodies_tr': 12071.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 16454.0, 'rules_normal': 16245.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16452.0, 'rules_tr_normal': 16245.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 12621.0, 'eqs_atom': 1737.0, 'eqs_body': 181.0, 'eqs_other': 10703.0}, 'generator': {'vars': 10366.0, 'vars_eliminated': 0.0, 'vars_frozen': 6679.0, 'constraints': 1472.0, 'constraints_binary': 30617.0, 'constraints_ternary': 7292.0, 'acyc_edges': 0.0, 'complexity': 39675.0}}, 'solving': {'solvers': {'choices': 234.0, 'conflicts': 194.0, 'conflicts_analyzed': 189.0, 'restarts': 0.0, 'restarts_last': 31.0, 'extra': {'domain_choices': 132.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 164.0, 'distributed_sum_lbd': 341.0, 'integrated': 777.0, 'lemmas': 976.0, 'lits_learnt': 10758.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 60.0, 'cpu_time': 0.0, 'integrated_imps': 506.0, 'integrated_jumps': 49.0, 'guiding_paths_lits': 534.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 164.0, 'lemmas_loop': 157.0, 'lemmas_other': 655.0, 'lits_conflict': 2577.0, 'lits_loop': 1041.0, 'lits_other': 7140.0, 'jumps': {'jumps': 189.0, 'jumps_bounded': 63.0, 'levels': 1014.0, 'levels_bounded': 800.0, 'max': 91.0, 'max_executed': 91.0, 'max_bounded': 90.0}}}}, 'summary': {'call': 7.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.2792549133300781, 'cpu': 0.28125, 'solve': 0.007982254028320312, 'unsat': 0.007982254028320312, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.80487060546875, 'cpu': 1.859375, 'solve': 0.033905029296875, 'unsat': 0.027923583984375, 'sat': 0.003986358642578125}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 820.0, 'conflicts': 377.0, 'conflicts_analyzed': 343.0, 'restarts': 0.0, 'restarts_last': 31.0, 'extra': {'domain_choices': 229.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 321.0, 'distributed_sum_lbd': 598.0, 'integrated': 1563.0, 'lemmas': 2006.0, 'lits_learnt': 17692.0, 'lemmas_binary': 72.0, 'lemmas_ternary': 72.0, 'cpu_time': 0.0625, 'integrated_imps': 1121.0, 'integrated_jumps': 191.0, 'guiding_paths_lits': 2594.0, 'guiding_paths': 58.0, 'splits': 0.0, 'lemmas_conflict': 307.0, 'lemmas_loop': 348.0, 'lemmas_other': 1351.0, 'lits_conflict': 3776.0, 'lits_loop': 2563.0, 'lits_other': 11353.0, 'jumps': {'jumps': 343.0, 'jumps_bounded': 168.0, 'levels': 5646.0, 'levels_bounded': 5211.0, 'max': 254.0, 'max_executed': 254.0, 'max_bounded': 252.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-32] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.234885s.

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019379s with result Unsatisfiable.

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.254264899999999, Incremental time limit = None
Running cumulative time = 2.004585800000002, Cumulative time limit = 3600
Used memory = (RSS = 235.679688Mb, VMS = 227.308594Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.8923242999999994, solving_time=0.11226150000000246, total_time=2.004585800000002, memory=Memory(rss=235.6796875, vms=227.30859375), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23488549999999897, solving_time=0.019379400000000047, total_time=0.254264899999999, memory=Memory(rss=235.6796875, vms=227.30859375), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 33589.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 93134.0, 'bodies_tr': 93134.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1668.0, 'count_bodies_tr': 1668.0, 'sccs': 173.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3244.0, 'rules': 132513.0, 'rules_normal': 130493.0, 'rules_choice': 1908.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 96.0, 'rules_tr': 132459.0, 'rules_tr_normal': 130493.0, 'rules_tr_choice': 1908.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 42.0, 'eqs': 79972.0, 'eqs_atom': 16619.0, 'eqs_body': 3964.0, 'eqs_other': 59389.0}, 'lpStep': {'atoms': 3537.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12420.0, 'bodies_tr': 12420.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 16841.0, 'rules_normal': 16632.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16841.0, 'rules_tr_normal': 16632.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7539.0, 'eqs_atom': 1706.0, 'eqs_body': 67.0, 'eqs_other': 5766.0}, 'generator': {'vars': 12968.0, 'vars_eliminated': 0.0, 'vars_frozen': 8256.0, 'constraints': 2042.0, 'constraints_binary': 40311.0, 'constraints_ternary': 10429.0, 'acyc_edges': 0.0, 'complexity': 53160.0}}, 'solving': {'solvers': {'choices': 157.0, 'conflicts': 129.0, 'conflicts_analyzed': 116.0, 'restarts': 0.0, 'restarts_last': 19.0, 'extra': {'domain_choices': 100.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 110.0, 'distributed_sum_lbd': 224.0, 'integrated': 659.0, 'lemmas': 709.0, 'lits_learnt': 13142.0, 'lemmas_binary': 42.0, 'lemmas_ternary': 27.0, 'cpu_time': 0.109375, 'integrated_imps': 354.0, 'integrated_jumps': 26.0, 'guiding_paths_lits': 700.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 110.0, 'lemmas_loop': 142.0, 'lemmas_other': 457.0, 'lits_conflict': 2482.0, 'lits_loop': 1284.0, 'lits_other': 9376.0, 'jumps': {'jumps': 116.0, 'jumps_bounded': 54.0, 'levels': 3217.0, 'levels_bounded': 3087.0, 'max': 476.0, 'max_executed': 476.0, 'max_bounded': 475.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [7.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.2563133239746094, 'cpu': 0.34375, 'solve': 0.008975982666015625, 'unsat': 0.008975982666015625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.0611839294433594, 'cpu': 2.203125, 'solve': 0.042881011962890625, 'unsat': 0.036899566650390625, 'sat': 0.003986358642578125}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 977.0, 'conflicts': 506.0, 'conflicts_analyzed': 459.0, 'restarts': 0.0, 'restarts_last': 31.0, 'extra': {'domain_choices': 329.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 431.0, 'distributed_sum_lbd': 822.0, 'integrated': 2222.0, 'lemmas': 2715.0, 'lits_learnt': 30834.0, 'lemmas_binary': 114.0, 'lemmas_ternary': 99.0, 'cpu_time': 0.171875, 'integrated_imps': 1475.0, 'integrated_jumps': 217.0, 'guiding_paths_lits': 3294.0, 'guiding_paths': 72.0, 'splits': 0.0, 'lemmas_conflict': 417.0, 'lemmas_loop': 490.0, 'lemmas_other': 1808.0, 'lits_conflict': 6258.0, 'lits_loop': 3847.0, 'lits_other': 20729.0, 'jumps': {'jumps': 459.0, 'jumps_bounded': 222.0, 'levels': 8863.0, 'levels_bounded': 8298.0, 'max': 476.0, 'max_executed': 476.0, 'max_bounded': 475.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.262118s.

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027527s with result Unsatisfiable.

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.289644899999999, Incremental time limit = None
Running cumulative time = 2.294230700000001, Cumulative time limit = 3600
Used memory = (RSS = 242.960938Mb, VMS = 236.089844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.154442199999999, solving_time=0.13978850000000165, total_time=2.294230700000001, memory=Memory(rss=242.9609375, vms=236.08984375), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2621178999999998, solving_time=0.02752699999999919, total_time=0.289644899999999, memory=Memory(rss=242.9609375, vms=236.08984375), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 37265.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 105709.0, 'bodies_tr': 105709.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1869.0, 'count_bodies_tr': 1869.0, 'sccs': 198.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3838.0, 'rules': 149548.0, 'rules_normal': 147319.0, 'rules_choice': 2103.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 149494.0, 'rules_tr_normal': 147319.0, 'rules_tr_choice': 2103.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 54.0, 'eqs': 87669.0, 'eqs_atom': 18343.0, 'eqs_body': 4041.0, 'eqs_other': 65285.0}, 'lpStep': {'atoms': 3676.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12575.0, 'bodies_tr': 12575.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17035.0, 'rules_normal': 16826.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17035.0, 'rules_tr_normal': 16826.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7697.0, 'eqs_atom': 1724.0, 'eqs_body': 77.0, 'eqs_other': 5896.0}, 'generator': {'vars': 15582.0, 'vars_eliminated': 0.0, 'vars_frozen': 9840.0, 'constraints': 2366.0, 'constraints_binary': 49298.0, 'constraints_ternary': 12827.0, 'acyc_edges': 0.0, 'complexity': 64929.0}}, 'solving': {'solvers': {'choices': 331.0, 'conflicts': 175.0, 'conflicts_analyzed': 172.0, 'restarts': 0.0, 'restarts_last': 30.0, 'extra': {'domain_choices': 120.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 164.0, 'distributed_sum_lbd': 350.0, 'integrated': 828.0, 'lemmas': 1315.0, 'lits_learnt': 27354.0, 'lemmas_binary': 119.0, 'lemmas_ternary': 59.0, 'cpu_time': 0.109375, 'integrated_imps': 543.0, 'integrated_jumps': 118.0, 'guiding_paths_lits': 666.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 158.0, 'lemmas_loop': 373.0, 'lemmas_other': 784.0, 'lits_conflict': 4273.0, 'lits_loop': 2906.0, 'lits_other': 20175.0, 'jumps': {'jumps': 172.0, 'jumps_bounded': 85.0, 'levels': 351.0, 'levels_bounded': 128.0, 'max': 11.0, 'max_executed': 11.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 9.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.29321861267089844, 'cpu': 0.375, 'solve': 0.015960693359375, 'unsat': 0.015960693359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.354402542114258, 'cpu': 2.578125, 'solve': 0.058841705322265625, 'unsat': 0.052860260009765625, 'sat': 0.003986358642578125}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 1308.0, 'conflicts': 681.0, 'conflicts_analyzed': 631.0, 'restarts': 0.0, 'restarts_last': 31.0, 'extra': {'domain_choices': 449.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 595.0, 'distributed_sum_lbd': 1172.0, 'integrated': 3050.0, 'lemmas': 4030.0, 'lits_learnt': 58188.0, 'lemmas_binary': 233.0, 'lemmas_ternary': 158.0, 'cpu_time': 0.28125, 'integrated_imps': 2018.0, 'integrated_jumps': 335.0, 'guiding_paths_lits': 3960.0, 'guiding_paths': 78.0, 'splits': 0.0, 'lemmas_conflict': 575.0, 'lemmas_loop': 863.0, 'lemmas_other': 2592.0, 'lits_conflict': 10531.0, 'lits_loop': 6753.0, 'lits_other': 40904.0, 'jumps': {'jumps': 631.0, 'jumps_bounded': 307.0, 'levels': 9214.0, 'levels_bounded': 8426.0, 'max': 476.0, 'max_executed': 476.0, 'max_bounded': 475.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.249473s.

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029974s with result Unsatisfiable.

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2794477000000004, Incremental time limit = None
Running cumulative time = 2.5736784000000013, Cumulative time limit = 3600
Used memory = (RSS = 246.707031Mb, VMS = 239.019531Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.4039155999999986, solving_time=0.16976280000000266, total_time=2.5736784000000013, memory=Memory(rss=246.70703125, vms=239.01953125), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2494733999999994, solving_time=0.02997430000000101, total_time=0.2794477000000004, memory=Memory(rss=246.70703125, vms=239.01953125), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 40962.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 118423.0, 'bodies_tr': 118423.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2070.0, 'count_bodies_tr': 2070.0, 'sccs': 223.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4432.0, 'rules': 166848.0, 'rules_normal': 164410.0, 'rules_choice': 2298.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 120.0, 'rules_tr': 166794.0, 'rules_tr_normal': 164410.0, 'rules_tr_choice': 2298.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 66.0, 'eqs': 95652.0, 'eqs_atom': 20177.0, 'eqs_body': 4111.0, 'eqs_other': 71364.0}, 'lpStep': {'atoms': 3697.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12714.0, 'bodies_tr': 12714.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17300.0, 'rules_normal': 17091.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17300.0, 'rules_tr_normal': 17091.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7983.0, 'eqs_atom': 1834.0, 'eqs_body': 70.0, 'eqs_other': 6079.0}, 'generator': {'vars': 18245.0, 'vars_eliminated': 0.0, 'vars_frozen': 11437.0, 'constraints': 2865.0, 'constraints_binary': 60493.0, 'constraints_ternary': 16053.0, 'acyc_edges': 0.0, 'complexity': 79909.0}}, 'solving': {'solvers': {'choices': 244.0, 'conflicts': 174.0, 'conflicts_analyzed': 162.0, 'restarts': 0.0, 'restarts_last': 27.0, 'extra': {'domain_choices': 158.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 152.0, 'distributed_sum_lbd': 322.0, 'integrated': 846.0, 'lemmas': 1160.0, 'lits_learnt': 28514.0, 'lemmas_binary': 75.0, 'lemmas_ternary': 63.0, 'cpu_time': 0.109375, 'integrated_imps': 405.0, 'integrated_jumps': 62.0, 'guiding_paths_lits': 854.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 155.0, 'lemmas_loop': 297.0, 'lemmas_other': 708.0, 'lits_conflict': 5764.0, 'lits_loop': 2442.0, 'lits_other': 20308.0, 'jumps': {'jumps': 162.0, 'jumps_bounded': 66.0, 'levels': 8691.0, 'levels_bounded': 8518.0, 'max': 910.0, 'max_executed': 910.0, 'max_bounded': 909.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [7.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.28225135803222656, 'cpu': 0.375, 'solve': 0.01496124267578125, 'unsat': 0.01496124267578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.6366539001464844, 'cpu': 2.953125, 'solve': 0.07380294799804688, 'unsat': 0.06782150268554688, 'sat': 0.003986358642578125}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 1552.0, 'conflicts': 855.0, 'conflicts_analyzed': 793.0, 'restarts': 0.0, 'restarts_last': 31.0, 'extra': {'domain_choices': 607.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 747.0, 'distributed_sum_lbd': 1494.0, 'integrated': 3896.0, 'lemmas': 5190.0, 'lits_learnt': 86702.0, 'lemmas_binary': 308.0, 'lemmas_ternary': 221.0, 'cpu_time': 0.390625, 'integrated_imps': 2423.0, 'integrated_jumps': 397.0, 'guiding_paths_lits': 4814.0, 'guiding_paths': 92.0, 'splits': 0.0, 'lemmas_conflict': 730.0, 'lemmas_loop': 1160.0, 'lemmas_other': 3300.0, 'lits_conflict': 16295.0, 'lits_loop': 9195.0, 'lits_other': 61212.0, 'jumps': {'jumps': 793.0, 'jumps_bounded': 373.0, 'levels': 17905.0, 'levels_bounded': 16944.0, 'max': 910.0, 'max_executed': 910.0, 'max_bounded': 909.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.265225s.

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045070s with result Unsatisfiable.

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3102947000000018, Incremental time limit = None
Running cumulative time = 2.883973100000003, Cumulative time limit = 3600
Used memory = (RSS = 252.351562Mb, VMS = 244.429688Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.6691405999999995, solving_time=0.21483250000000353, total_time=2.883973100000003, memory=Memory(rss=252.3515625, vms=244.4296875), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26522500000000093, solving_time=0.04506970000000088, total_time=0.3102947000000018, memory=Memory(rss=252.3515625, vms=244.4296875), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 44673.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 131162.0, 'bodies_tr': 131162.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2271.0, 'count_bodies_tr': 2271.0, 'sccs': 248.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5026.0, 'rules': 184210.0, 'rules_normal': 181563.0, 'rules_choice': 2493.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 132.0, 'rules_tr': 184156.0, 'rules_tr_normal': 181563.0, 'rules_tr_choice': 2493.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 78.0, 'eqs': 103689.0, 'eqs_atom': 22023.0, 'eqs_body': 4178.0, 'eqs_other': 77488.0}, 'lpStep': {'atoms': 3711.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12739.0, 'bodies_tr': 12739.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17362.0, 'rules_normal': 17153.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17362.0, 'rules_tr_normal': 17153.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8037.0, 'eqs_atom': 1846.0, 'eqs_body': 67.0, 'eqs_other': 6124.0}, 'generator': {'vars': 20915.0, 'vars_eliminated': 0.0, 'vars_frozen': 13036.0, 'constraints': 3505.0, 'constraints_binary': 73889.0, 'constraints_ternary': 19939.0, 'acyc_edges': 0.0, 'complexity': 97915.0}}, 'solving': {'solvers': {'choices': 450.0, 'conflicts': 260.0, 'conflicts_analyzed': 245.0, 'restarts': 0.0, 'restarts_last': 46.0, 'extra': {'domain_choices': 288.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 241.0, 'distributed_sum_lbd': 531.0, 'integrated': 1208.0, 'lemmas': 1764.0, 'lits_learnt': 64890.0, 'lemmas_binary': 117.0, 'lemmas_ternary': 46.0, 'cpu_time': 0.171875, 'integrated_imps': 477.0, 'integrated_jumps': 139.0, 'guiding_paths_lits': 798.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 242.0, 'lemmas_loop': 450.0, 'lemmas_other': 1072.0, 'lits_conflict': 12634.0, 'lits_loop': 3593.0, 'lits_other': 48663.0, 'jumps': {'jumps': 245.0, 'jumps_bounded': 71.0, 'levels': 5063.0, 'levels_bounded': 4741.0, 'max': 539.0, 'max_executed': 539.0, 'max_bounded': 538.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [9.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.31197357177734375, 'cpu': 0.453125, 'solve': 0.029920578002929688, 'unsat': 0.029920578002929688, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.948627471923828, 'cpu': 3.40625, 'solve': 0.10372352600097656, 'unsat': 0.09774208068847656, 'sat': 0.003986358642578125}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 2002.0, 'conflicts': 1115.0, 'conflicts_analyzed': 1038.0, 'restarts': 0.0, 'restarts_last': 46.0, 'extra': {'domain_choices': 895.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 988.0, 'distributed_sum_lbd': 2025.0, 'integrated': 5104.0, 'lemmas': 6954.0, 'lits_learnt': 151592.0, 'lemmas_binary': 425.0, 'lemmas_ternary': 267.0, 'cpu_time': 0.5625, 'integrated_imps': 2900.0, 'integrated_jumps': 536.0, 'guiding_paths_lits': 5612.0, 'guiding_paths': 107.0, 'splits': 0.0, 'lemmas_conflict': 972.0, 'lemmas_loop': 1610.0, 'lemmas_other': 4372.0, 'lits_conflict': 28929.0, 'lits_loop': 12788.0, 'lits_other': 109875.0, 'jumps': {'jumps': 1038.0, 'jumps_bounded': 444.0, 'levels': 22968.0, 'levels_bounded': 21685.0, 'max': 910.0, 'max_executed': 910.0, 'max_bounded': 909.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.256257s.

[13-11-2021_23-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.081174s with result Unsatisfiable.

[13-11-2021_23-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.33743059999999936, Incremental time limit = None
Running cumulative time = 3.2214037000000024, Cumulative time limit = 3600
Used memory = (RSS = 265.171875Mb, VMS = 260.195312Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-34] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.9253972999999993, solving_time=0.2960064000000031, total_time=3.2214037000000024, memory=Memory(rss=265.171875, vms=260.1953125), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2562566999999998, solving_time=0.08117389999999958, total_time=0.33743059999999936, memory=Memory(rss=265.171875, vms=260.1953125), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 48398.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 143925.0, 'bodies_tr': 143925.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2472.0, 'count_bodies_tr': 2472.0, 'sccs': 273.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5620.0, 'rules': 201632.0, 'rules_normal': 198776.0, 'rules_choice': 2688.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 201578.0, 'rules_tr_normal': 198776.0, 'rules_tr_choice': 2688.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 90.0, 'eqs': 111788.0, 'eqs_atom': 23883.0, 'eqs_body': 4245.0, 'eqs_other': 83660.0}, 'lpStep': {'atoms': 3725.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12763.0, 'bodies_tr': 12763.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17422.0, 'rules_normal': 17213.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17422.0, 'rules_tr_normal': 17213.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8099.0, 'eqs_atom': 1860.0, 'eqs_body': 67.0, 'eqs_other': 6172.0}, 'generator': {'vars': 23585.0, 'vars_eliminated': 0.0, 'vars_frozen': 14635.0, 'constraints': 3769.0, 'constraints_binary': 79524.0, 'constraints_ternary': 21355.0, 'acyc_edges': 0.0, 'complexity': 105290.0}}, 'solving': {'solvers': {'choices': 1441.0, 'conflicts': 580.0, 'conflicts_analyzed': 563.0, 'restarts': 1.0, 'restarts_last': 86.0, 'extra': {'domain_choices': 704.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 540.0, 'distributed_sum_lbd': 1383.0, 'integrated': 3250.0, 'lemmas': 4376.0, 'lits_learnt': 137954.0, 'lemmas_binary': 512.0, 'lemmas_ternary': 247.0, 'cpu_time': 0.484375, 'integrated_imps': 752.0, 'integrated_jumps': 634.0, 'guiding_paths_lits': 1008.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 559.0, 'lemmas_loop': 794.0, 'lemmas_other': 3023.0, 'lits_conflict': 20755.0, 'lits_loop': 6984.0, 'lits_other': 110215.0, 'jumps': {'jumps': 563.0, 'jumps_bounded': 38.0, 'levels': 8009.0, 'levels_bounded': 7176.0, 'max': 495.0, 'max_executed': 495.0, 'max_bounded': 494.0}}}}, 'summary': {'call': 12.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [9.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.34308624267578125, 'cpu': 0.75, 'solve': 0.06682205200195312, 'unsat': 0.06682205200195312, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.2917137145996094, 'cpu': 4.15625, 'solve': 0.1705455780029297, 'unsat': 0.1645641326904297, 'sat': 0.003986358642578125}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 3443.0, 'conflicts': 1695.0, 'conflicts_analyzed': 1601.0, 'restarts': 1.0, 'restarts_last': 86.0, 'extra': {'domain_choices': 1599.0, 'models': 3.0, 'models_level': 129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1528.0, 'distributed_sum_lbd': 3408.0, 'integrated': 8354.0, 'lemmas': 11330.0, 'lits_learnt': 289546.0, 'lemmas_binary': 937.0, 'lemmas_ternary': 514.0, 'cpu_time': 1.046875, 'integrated_imps': 3652.0, 'integrated_jumps': 1170.0, 'guiding_paths_lits': 6620.0, 'guiding_paths': 123.0, 'splits': 0.0, 'lemmas_conflict': 1531.0, 'lemmas_loop': 2404.0, 'lemmas_other': 7395.0, 'lits_conflict': 49684.0, 'lits_loop': 19772.0, 'lits_other': 220090.0, 'jumps': {'jumps': 1601.0, 'jumps_bounded': 482.0, 'levels': 30977.0, 'levels_bounded': 28861.0, 'max': 910.0, 'max_executed': 910.0, 'max_bounded': 909.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-34] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.265735s.

[13-11-2021_23-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.158324s with result Satisfiable.

[13-11-2021_23-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4240593999999991, Incremental time limit = None
Running cumulative time = 3.6454631000000015, Cumulative time limit = 3600
Used memory = (RSS = 270.472656Mb, VMS = 263.996094Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.191133s, Solving = 0.454330s, Total = 3.645463s, Memory = (RSS = 270.472656Mb, VMS = 263.996094Mb)), Calls = 13
Final Model :: Total atoms = 8654, Cost = (14, 0), Optimality proven = False, Number = 4, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-34] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.1911327, solving_time=0.4543304000000017, total_time=3.6454631000000015, memory=Memory(rss=270.47265625, vms=263.99609375), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2657354000000005, solving_time=0.15832399999999858, total_time=0.4240593999999991, memory=Memory(rss=270.47265625, vms=263.99609375), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 52137.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 156707.0, 'bodies_tr': 156707.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2673.0, 'count_bodies_tr': 2673.0, 'sccs': 298.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6214.0, 'rules': 219105.0, 'rules_normal': 216040.0, 'rules_choice': 2883.0, 'rules_minimize': 26.0, 'rules_acyc': 0.0, 'rules_heuristic': 156.0, 'rules_tr': 219051.0, 'rules_tr_normal': 216040.0, 'rules_tr_choice': 2883.0, 'rules_tr_minimize': 26.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 102.0, 'eqs': 119926.0, 'eqs_atom': 25748.0, 'eqs_body': 4312.0, 'eqs_other': 89866.0}, 'lpStep': {'atoms': 3739.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12782.0, 'bodies_tr': 12782.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17473.0, 'rules_normal': 17264.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17473.0, 'rules_tr_normal': 17264.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8138.0, 'eqs_atom': 1865.0, 'eqs_body': 67.0, 'eqs_other': 6206.0}, 'generator': {'vars': 26255.0, 'vars_eliminated': 0.0, 'vars_frozen': 16234.0, 'constraints': 3734.0, 'constraints_binary': 79392.0, 'constraints_ternary': 20914.0, 'acyc_edges': 0.0, 'complexity': 105290.0}}, 'solving': {'solvers': {'choices': 4465.0, 'conflicts': 581.0, 'conflicts_analyzed': 565.0, 'restarts': 1.0, 'restarts_last': 79.0, 'extra': {'domain_choices': 517.0, 'models': 4.0, 'models_level': 1060.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 526.0, 'distributed_sum_lbd': 1190.0, 'integrated': 3223.0, 'lemmas': 4127.0, 'lits_learnt': 245308.0, 'lemmas_binary': 348.0, 'lemmas_ternary': 337.0, 'cpu_time': 0.59375, 'integrated_imps': 1181.0, 'integrated_jumps': 1107.0, 'guiding_paths_lits': 1085.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 560.0, 'lemmas_loop': 632.0, 'lemmas_other': 2935.0, 'lits_conflict': 44022.0, 'lits_loop': 5428.0, 'lits_other': 195858.0, 'jumps': {'jumps': 565.0, 'jumps_bounded': 55.0, 'levels': 6610.0, 'levels_bounded': 5399.0, 'max': 379.0, 'max_executed': 379.0, 'max_bounded': 378.0}}}}, 'summary': {'call': 13.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [14.0, 0.0], 'lower': [14.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.4338417053222656, 'cpu': 0.890625, 'solve': 0.1326465606689453, 'unsat': 0.021942138671875, 'sat': 0.05585289001464844}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.725555419921875, 'cpu': 5.046875, 'solve': 0.303192138671875, 'unsat': 0.1865062713623047, 'sat': 0.05983924865722656}, 'models': {'enumerated': 7.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 7908.0, 'conflicts': 2276.0, 'conflicts_analyzed': 2166.0, 'restarts': 2.0, 'restarts_last': 86.0, 'extra': {'domain_choices': 2116.0, 'models': 7.0, 'models_level': 1189.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2054.0, 'distributed_sum_lbd': 4598.0, 'integrated': 11577.0, 'lemmas': 15457.0, 'lits_learnt': 534854.0, 'lemmas_binary': 1285.0, 'lemmas_ternary': 851.0, 'cpu_time': 1.640625, 'integrated_imps': 4833.0, 'integrated_jumps': 2277.0, 'guiding_paths_lits': 7705.0, 'guiding_paths': 142.0, 'splits': 0.0, 'lemmas_conflict': 2091.0, 'lemmas_loop': 3036.0, 'lemmas_other': 10330.0, 'lits_conflict': 93706.0, 'lits_loop': 25200.0, 'lits_other': 415948.0, 'jumps': {'jumps': 2166.0, 'jumps_bounded': 537.0, 'levels': 37587.0, 'levels_bounded': 34260.0, 'max': 910.0, 'max_executed': 910.0, 'max_bounded': 909.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-34] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13}

[13-11-2021_23-27-34] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 4 ( 44.44% solved)

[13-11-2021_23-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 13)', truth=True, inc_range=None)

[13-11-2021_23-27-34] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 13]:
sub_goal(2, talos, actuate(manipulator_arm_1,puzzle_room_door), configuration(puzzle_room_door), open, 4)
sub_goal(2, talos, actuate(manipulator_arm_2,store_room_door), configuration(store_room_door), open, 4)

[13-11-2021_23-27-34] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.332795s.

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 14: original = External(symbol='current_last_sgoals(4, 13)', truth=True, inc_range=None), conversion = current_last_sgoals(4,13).

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029703s with result Unsatisfiable.

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.362498399999998, Incremental time limit = None
Running cumulative time = 4.0079614999999995, Cumulative time limit = 3600
Used memory = (RSS = 273.578125Mb, VMS = 266.320312Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.523927699999999, solving_time=0.4840338000000006, total_time=4.0079614999999995, memory=Memory(rss=273.578125, vms=266.3203125), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.33279499999999906, solving_time=0.029703399999998936, total_time=0.362498399999998, memory=Memory(rss=273.578125, vms=266.3203125), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 55881.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 169399.0, 'bodies_tr': 169399.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2874.0, 'count_bodies_tr': 2874.0, 'sccs': 323.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6808.0, 'rules': 236437.0, 'rules_normal': 233163.0, 'rules_choice': 3078.0, 'rules_minimize': 28.0, 'rules_acyc': 0.0, 'rules_heuristic': 168.0, 'rules_tr': 236383.0, 'rules_tr_normal': 233163.0, 'rules_tr_choice': 3078.0, 'rules_tr_minimize': 28.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 114.0, 'eqs': 127882.0, 'eqs_atom': 27522.0, 'eqs_body': 4385.0, 'eqs_other': 95975.0}, 'lpStep': {'atoms': 3744.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12692.0, 'bodies_tr': 12692.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17332.0, 'rules_normal': 17123.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17332.0, 'rules_tr_normal': 17123.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7956.0, 'eqs_atom': 1774.0, 'eqs_body': 73.0, 'eqs_other': 6109.0}, 'generator': {'vars': 28891.0, 'vars_eliminated': 0.0, 'vars_frozen': 17827.0, 'constraints': 2845.0, 'constraints_binary': 59883.0, 'constraints_ternary': 14009.0, 'acyc_edges': 0.0, 'complexity': 105290.0}}, 'solving': {'solvers': {'choices': 897.0, 'conflicts': 114.0, 'conflicts_analyzed': 96.0, 'restarts': 0.0, 'restarts_last': 22.0, 'extra': {'domain_choices': 75.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 91.0, 'distributed_sum_lbd': 194.0, 'integrated': 537.0, 'lemmas': 583.0, 'lits_learnt': 65149.0, 'lemmas_binary': 47.0, 'lemmas_ternary': 67.0, 'cpu_time': 0.109375, 'integrated_imps': 320.0, 'integrated_jumps': 406.0, 'guiding_paths_lits': 1162.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 91.0, 'lemmas_loop': 72.0, 'lemmas_other': 420.0, 'lits_conflict': 11781.0, 'lits_loop': 635.0, 'lits_other': 52733.0, 'jumps': {'jumps': 96.0, 'jumps_bounded': 46.0, 'levels': 1717.0, 'levels_bounded': 1228.0, 'max': 376.0, 'max_executed': 376.0, 'max_bounded': 375.0}}}}, 'summary': {'call': 14.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [12.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.3798065185546875, 'cpu': 0.46875, 'solve': 0.013963699340820312, 'unsat': 0.013963699340820312, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.1053619384765625, 'cpu': 5.515625, 'solve': 0.3171558380126953, 'unsat': 0.200469970703125, 'sat': 0.05983924865722656}, 'models': {'enumerated': 7.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 8805.0, 'conflicts': 2390.0, 'conflicts_analyzed': 2262.0, 'restarts': 2.0, 'restarts_last': 86.0, 'extra': {'domain_choices': 2191.0, 'models': 7.0, 'models_level': 1189.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2145.0, 'distributed_sum_lbd': 4792.0, 'integrated': 12114.0, 'lemmas': 16040.0, 'lits_learnt': 600003.0, 'lemmas_binary': 1332.0, 'lemmas_ternary': 918.0, 'cpu_time': 1.75, 'integrated_imps': 5153.0, 'integrated_jumps': 2683.0, 'guiding_paths_lits': 8867.0, 'guiding_paths': 161.0, 'splits': 0.0, 'lemmas_conflict': 2182.0, 'lemmas_loop': 3108.0, 'lemmas_other': 10750.0, 'lits_conflict': 105487.0, 'lits_loop': 25835.0, 'lits_other': 468681.0, 'jumps': {'jumps': 2262.0, 'jumps_bounded': 583.0, 'levels': 39304.0, 'levels_bounded': 35488.0, 'max': 910.0, 'max_executed': 910.0, 'max_bounded': 909.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-35] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.257947s.

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.183665s with result Satisfiable.

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4416121000000004, Incremental time limit = None
Running cumulative time = 4.4495736, Cumulative time limit = 3600
Used memory = (RSS = 288.308594Mb, VMS = 288.320312Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 12
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.781875s, Solving = 0.667699s, Total = 4.449574s, Memory = (RSS = 288.308594Mb, VMS = 288.320312Mb)), Calls = 15
Final Model :: Total atoms = 9405, Cost = (16, 0), Optimality proven = False, Number = 5, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-27-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.7818749999999985, solving_time=0.6676986000000014, total_time=4.4495736, memory=Memory(rss=288.30859375, vms=288.3203125), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.25794729999999966, solving_time=0.18366480000000074, total_time=0.4416121000000004, memory=Memory(rss=288.30859375, vms=288.3203125), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 59630.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 182220.0, 'bodies_tr': 182220.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3075.0, 'count_bodies_tr': 3075.0, 'sccs': 348.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7402.0, 'rules': 254021.0, 'rules_normal': 250538.0, 'rules_choice': 3273.0, 'rules_minimize': 30.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 253967.0, 'rules_tr_normal': 250538.0, 'rules_tr_choice': 3273.0, 'rules_tr_minimize': 30.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 126.0, 'eqs': 136117.0, 'eqs_atom': 29406.0, 'eqs_body': 4452.0, 'eqs_other': 102259.0}, 'lpStep': {'atoms': 3749.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12821.0, 'bodies_tr': 12821.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17584.0, 'rules_normal': 17375.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17584.0, 'rules_tr_normal': 17375.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8235.0, 'eqs_atom': 1884.0, 'eqs_body': 67.0, 'eqs_other': 6284.0}, 'generator': {'vars': 31561.0, 'vars_eliminated': 0.0, 'vars_frozen': 19426.0, 'constraints': 3488.0, 'constraints_binary': 73876.0, 'constraints_ternary': 18381.0, 'acyc_edges': 0.0, 'complexity': 105290.0}}, 'solving': {'solvers': {'choices': 4146.0, 'conflicts': 712.0, 'conflicts_analyzed': 692.0, 'restarts': 1.0, 'restarts_last': 133.0, 'extra': {'domain_choices': 383.0, 'models': 5.0, 'models_level': 1499.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 551.0, 'distributed_sum_lbd': 1371.0, 'integrated': 3261.0, 'lemmas': 4734.0, 'lits_learnt': 316650.0, 'lemmas_binary': 684.0, 'lemmas_ternary': 291.0, 'cpu_time': 0.703125, 'integrated_imps': 877.0, 'integrated_jumps': 992.0, 'guiding_paths_lits': 1239.0, 'guiding_paths': 21.0, 'splits': 0.0, 'lemmas_conflict': 676.0, 'lemmas_loop': 1013.0, 'lemmas_other': 3045.0, 'lits_conflict': 59455.0, 'lits_loop': 8499.0, 'lits_other': 248696.0, 'jumps': {'jumps': 692.0, 'jumps_bounded': 110.0, 'levels': 14689.0, 'levels_bounded': 13340.0, 'max': 648.0, 'max_executed': 648.0, 'max_bounded': 647.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [16.0, 0.0], 'lower': [16.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.44436073303222656, 'cpu': 0.984375, 'solve': 0.16633224487304688, 'unsat': 0.018951416015625, 'sat': 0.03989410400390625}, 'models': {'enumerated': 5.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.549722671508789, 'cpu': 6.5, 'solve': 0.4834880828857422, 'unsat': 0.21942138671875, 'sat': 0.09973335266113281}, 'models': {'enumerated': 12.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 12951.0, 'conflicts': 3102.0, 'conflicts_analyzed': 2954.0, 'restarts': 3.0, 'restarts_last': 133.0, 'extra': {'domain_choices': 2574.0, 'models': 12.0, 'models_level': 2688.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2696.0, 'distributed_sum_lbd': 6163.0, 'integrated': 15375.0, 'lemmas': 20774.0, 'lits_learnt': 916653.0, 'lemmas_binary': 2016.0, 'lemmas_ternary': 1209.0, 'cpu_time': 2.453125, 'integrated_imps': 6030.0, 'integrated_jumps': 3675.0, 'guiding_paths_lits': 10106.0, 'guiding_paths': 182.0, 'splits': 0.0, 'lemmas_conflict': 2858.0, 'lemmas_loop': 4121.0, 'lemmas_other': 13795.0, 'lits_conflict': 164942.0, 'lits_loop': 34334.0, 'lits_other': 717377.0, 'jumps': {'jumps': 2954.0, 'jumps_bounded': 693.0, 'levels': 53993.0, 'levels_bounded': 48828.0, 'max': 910.0, 'max_executed': 910.0, 'max_bounded': 909.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-35] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15}

[13-11-2021_23-27-35] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 5 ( 55.56% solved)

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 15)', truth=True, inc_range=None)

[13-11-2021_23-27-35] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 15]:
sub_goal(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 5)
sub_goal(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 5)

[13-11-2021_23-27-35] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.268652s.

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(5, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(5,15).

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.086167s with result Satisfiable.

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.35481929999999906, Incremental time limit = None
Running cumulative time = 4.804392899999999, Cumulative time limit = 3600
Used memory = (RSS = 296.921875Mb, VMS = 295.464844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 16
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.050527s, Solving = 0.753866s, Total = 4.804393s, Memory = (RSS = 296.921875Mb, VMS = 295.464844Mb)), Calls = 16
Final Model :: Total atoms = 9783, Cost = (17, 0), Optimality proven = False, Number = 4, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-27-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.050527399999997, solving_time=0.7538655000000016, total_time=4.804392899999999, memory=Memory(rss=296.921875, vms=295.46484375), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2686523999999988, solving_time=0.08616690000000027, total_time=0.35481929999999906, memory=Memory(rss=296.921875, vms=295.46484375), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 63393.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 195065.0, 'bodies_tr': 195065.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3276.0, 'count_bodies_tr': 3276.0, 'sccs': 373.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7996.0, 'rules': 271665.0, 'rules_normal': 267973.0, 'rules_choice': 3468.0, 'rules_minimize': 32.0, 'rules_acyc': 0.0, 'rules_heuristic': 192.0, 'rules_tr': 271611.0, 'rules_tr_normal': 267973.0, 'rules_tr_choice': 3468.0, 'rules_tr_minimize': 32.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 138.0, 'eqs': 144414.0, 'eqs_atom': 31304.0, 'eqs_body': 4519.0, 'eqs_other': 108591.0}, 'lpStep': {'atoms': 3763.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12845.0, 'bodies_tr': 12845.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17644.0, 'rules_normal': 17435.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17644.0, 'rules_tr_normal': 17435.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8297.0, 'eqs_atom': 1898.0, 'eqs_body': 67.0, 'eqs_other': 6332.0}, 'generator': {'vars': 34231.0, 'vars_eliminated': 0.0, 'vars_frozen': 21025.0, 'constraints': 4128.0, 'constraints_binary': 87202.0, 'constraints_ternary': 22226.0, 'acyc_edges': 0.0, 'complexity': 114318.0}}, 'solving': {'solvers': {'choices': 2275.0, 'conflicts': 263.0, 'conflicts_analyzed': 247.0, 'restarts': 0.0, 'restarts_last': 59.0, 'extra': {'domain_choices': 110.0, 'models': 4.0, 'models_level': 1275.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 133.0, 'distributed_sum_lbd': 301.0, 'integrated': 701.0, 'lemmas': 1061.0, 'lits_learnt': 137399.0, 'lemmas_binary': 28.0, 'lemmas_ternary': 7.0, 'cpu_time': 0.28125, 'integrated_imps': 551.0, 'integrated_jumps': 436.0, 'guiding_paths_lits': 1316.0, 'guiding_paths': 22.0, 'splits': 0.0, 'lemmas_conflict': 246.0, 'lemmas_loop': 124.0, 'lemmas_other': 691.0, 'lits_conflict': 30123.0, 'lits_loop': 1148.0, 'lits_other': 106128.0, 'jumps': {'jumps': 247.0, 'jumps_bounded': 81.0, 'levels': 1355.0, 'levels_bounded': 1013.0, 'max': 532.0, 'max_executed': 532.0, 'max_bounded': 531.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [17.0, 0.0], 'lower': [17.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.3585491180419922, 'cpu': 0.578125, 'solve': 0.06881523132324219, 'unsat': 0.014959335327148438, 'sat': 0.00997161865234375}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.908271789550781, 'cpu': 7.078125, 'solve': 0.5523033142089844, 'unsat': 0.23438072204589844, 'sat': 0.10970497131347656}, 'models': {'enumerated': 16.0, 'optimal': 5.0}, 'solving': {'solvers': {'choices': 15226.0, 'conflicts': 3365.0, 'conflicts_analyzed': 3201.0, 'restarts': 3.0, 'restarts_last': 133.0, 'extra': {'domain_choices': 2684.0, 'models': 16.0, 'models_level': 3963.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2829.0, 'distributed_sum_lbd': 6464.0, 'integrated': 16076.0, 'lemmas': 21835.0, 'lits_learnt': 1054052.0, 'lemmas_binary': 2044.0, 'lemmas_ternary': 1216.0, 'cpu_time': 2.734375, 'integrated_imps': 6581.0, 'integrated_jumps': 4111.0, 'guiding_paths_lits': 11422.0, 'guiding_paths': 204.0, 'splits': 0.0, 'lemmas_conflict': 3104.0, 'lemmas_loop': 4245.0, 'lemmas_other': 14486.0, 'lits_conflict': 195065.0, 'lits_loop': 35482.0, 'lits_other': 823505.0, 'jumps': {'jumps': 3201.0, 'jumps_bounded': 774.0, 'levels': 55348.0, 'levels_bounded': 49841.0, 'max': 910.0, 'max_executed': 910.0, 'max_bounded': 909.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-35] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16}

[13-11-2021_23-27-35] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 6 ( 66.67% solved)

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 16)', truth=True, inc_range=None)

[13-11-2021_23-27-35] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 16]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 6)
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 6)

[13-11-2021_23-27-35] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.266591s.

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 17: original = External(symbol='current_last_sgoals(6, 16)', truth=True, inc_range=None), conversion = current_last_sgoals(6,16).

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.066746s with result Satisfiable.

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3333364000000003, Incremental time limit = None
Running cumulative time = 5.137729299999999, Cumulative time limit = 3600
Used memory = (RSS = 305.765625Mb, VMS = 303.003906Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 19
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.317118s, Solving = 0.820611s, Total = 5.137729s, Memory = (RSS = 305.765625Mb, VMS = 303.003906Mb)), Calls = 17
Final Model :: Total atoms = 10164, Cost = (18, 0), Optimality proven = False, Number = 3, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-27-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.317118199999997, solving_time=0.8206111000000025, total_time=5.137729299999999, memory=Memory(rss=305.765625, vms=303.00390625), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26659079999999946, solving_time=0.06674560000000085, total_time=0.3333364000000003, memory=Memory(rss=305.765625, vms=303.00390625), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 67170.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 207927.0, 'bodies_tr': 207927.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3477.0, 'count_bodies_tr': 3477.0, 'sccs': 398.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8590.0, 'rules': 289362.0, 'rules_normal': 285461.0, 'rules_choice': 3663.0, 'rules_minimize': 34.0, 'rules_acyc': 0.0, 'rules_heuristic': 204.0, 'rules_tr': 289308.0, 'rules_tr_normal': 285461.0, 'rules_tr_choice': 3663.0, 'rules_tr_minimize': 34.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 150.0, 'eqs': 152752.0, 'eqs_atom': 33209.0, 'eqs_body': 4586.0, 'eqs_other': 114957.0}, 'lpStep': {'atoms': 3777.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12862.0, 'bodies_tr': 12862.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17697.0, 'rules_normal': 17488.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17697.0, 'rules_tr_normal': 17488.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8338.0, 'eqs_atom': 1905.0, 'eqs_body': 67.0, 'eqs_other': 6366.0}, 'generator': {'vars': 36901.0, 'vars_eliminated': 0.0, 'vars_frozen': 22624.0, 'constraints': 4596.0, 'constraints_binary': 97291.0, 'constraints_ternary': 25097.0, 'acyc_edges': 0.0, 'complexity': 127822.0}}, 'solving': {'solvers': {'choices': 1610.0, 'conflicts': 132.0, 'conflicts_analyzed': 123.0, 'restarts': 0.0, 'restarts_last': 39.0, 'extra': {'domain_choices': 28.0, 'models': 3.0, 'models_level': 1060.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 70.0, 'distributed_sum_lbd': 203.0, 'integrated': 201.0, 'lemmas': 383.0, 'lits_learnt': 43941.0, 'lemmas_binary': 25.0, 'lemmas_ternary': 3.0, 'cpu_time': 0.265625, 'integrated_imps': 34.0, 'integrated_jumps': 75.0, 'guiding_paths_lits': 1393.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 123.0, 'lemmas_loop': 84.0, 'lemmas_other': 176.0, 'lits_conflict': 20224.0, 'lits_loop': 774.0, 'lits_other': 22943.0, 'jumps': {'jumps': 123.0, 'jumps_bounded': 2.0, 'levels': 172.0, 'levels_bounded': 2.0, 'max': 13.0, 'max_executed': 13.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [18.0, 0.0], 'lower': [18.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.33809852600097656, 'cpu': 0.5625, 'solve': 0.04984474182128906, 'unsat': 0.018922805786132812, 'sat': 0.009952545166015625}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 5.246370315551758, 'cpu': 7.640625, 'solve': 0.6021480560302734, 'unsat': 0.25330352783203125, 'sat': 0.11965751647949219}, 'models': {'enumerated': 19.0, 'optimal': 6.0}, 'solving': {'solvers': {'choices': 16836.0, 'conflicts': 3497.0, 'conflicts_analyzed': 3324.0, 'restarts': 3.0, 'restarts_last': 133.0, 'extra': {'domain_choices': 2712.0, 'models': 19.0, 'models_level': 5023.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2899.0, 'distributed_sum_lbd': 6667.0, 'integrated': 16277.0, 'lemmas': 22218.0, 'lits_learnt': 1097993.0, 'lemmas_binary': 2069.0, 'lemmas_ternary': 1219.0, 'cpu_time': 3.0, 'integrated_imps': 6615.0, 'integrated_jumps': 4186.0, 'guiding_paths_lits': 12815.0, 'guiding_paths': 215.0, 'splits': 0.0, 'lemmas_conflict': 3227.0, 'lemmas_loop': 4329.0, 'lemmas_other': 14662.0, 'lits_conflict': 215289.0, 'lits_loop': 36256.0, 'lits_other': 846448.0, 'jumps': {'jumps': 3324.0, 'jumps_bounded': 776.0, 'levels': 55520.0, 'levels_bounded': 49843.0, 'max': 910.0, 'max_executed': 910.0, 'max_bounded': 909.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-36] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17}

[13-11-2021_23-27-36] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 7 ( 77.78% solved)

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 17)', truth=True, inc_range=None)

[13-11-2021_23-27-36] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 17]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 7)

[13-11-2021_23-27-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.254563s.

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 18: original = External(symbol='current_last_sgoals(7, 17)', truth=True, inc_range=None), conversion = current_last_sgoals(7,17).

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.193084s with result Satisfiable.

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4476469999999999, Incremental time limit = None
Running cumulative time = 5.585376299999999, Cumulative time limit = 3600
Used memory = (RSS = 318.281250Mb, VMS = 314.070312Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 26
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.571681s, Solving = 1.013696s, Total = 5.585376s, Memory = (RSS = 318.281250Mb, VMS = 314.070312Mb)), Calls = 18
Final Model :: Total atoms = 10544, Cost = (19, 0), Optimality proven = False, Number = 7, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-27-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.571680799999997, solving_time=1.0136955000000025, total_time=5.585376299999999, memory=Memory(rss=318.28125, vms=314.0703125), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.25456259999999986, solving_time=0.19308440000000004, total_time=0.4476469999999999, memory=Memory(rss=318.28125, vms=314.0703125), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 70954.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 220813.0, 'bodies_tr': 220813.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3678.0, 'count_bodies_tr': 3678.0, 'sccs': 423.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9184.0, 'rules': 307119.0, 'rules_normal': 303009.0, 'rules_choice': 3858.0, 'rules_minimize': 36.0, 'rules_acyc': 0.0, 'rules_heuristic': 216.0, 'rules_tr': 307065.0, 'rules_tr_normal': 303009.0, 'rules_tr_choice': 3858.0, 'rules_tr_minimize': 36.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 162.0, 'eqs': 161152.0, 'eqs_atom': 35128.0, 'eqs_body': 4653.0, 'eqs_other': 121371.0}, 'lpStep': {'atoms': 3784.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12886.0, 'bodies_tr': 12886.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17757.0, 'rules_normal': 17548.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17757.0, 'rules_tr_normal': 17548.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8400.0, 'eqs_atom': 1919.0, 'eqs_body': 67.0, 'eqs_other': 6414.0}, 'generator': {'vars': 39571.0, 'vars_eliminated': 0.0, 'vars_frozen': 24223.0, 'constraints': 5239.0, 'constraints_binary': 111410.0, 'constraints_ternary': 29229.0, 'acyc_edges': 0.0, 'complexity': 146800.0}}, 'solving': {'solvers': {'choices': 4005.0, 'conflicts': 175.0, 'conflicts_analyzed': 160.0, 'restarts': 0.0, 'restarts_last': 24.0, 'extra': {'domain_choices': 34.0, 'models': 7.0, 'models_level': 2479.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 41.0, 'distributed_sum_lbd': 119.0, 'integrated': 178.0, 'lemmas': 428.0, 'lits_learnt': 36711.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.53125, 'integrated_imps': 59.0, 'integrated_jumps': 330.0, 'guiding_paths_lits': 1470.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 160.0, 'lemmas_loop': 105.0, 'lemmas_other': 163.0, 'lits_conflict': 15874.0, 'lits_loop': 924.0, 'lits_other': 19913.0, 'jumps': {'jumps': 160.0, 'jumps_bounded': 1.0, 'levels': 233.0, 'levels_bounded': 1.0, 'max': 7.0, 'max_executed': 7.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [19.0, 0.0], 'lower': [19.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.4518146514892578, 'cpu': 0.8125, 'solve': 0.17553138732910156, 'unsat': 0.012968063354492188, 'sat': 0.011949539184570312}, 'models': {'enumerated': 7.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 5.698184967041016, 'cpu': 8.453125, 'solve': 0.777679443359375, 'unsat': 0.26627159118652344, 'sat': 0.1316070556640625}, 'models': {'enumerated': 26.0, 'optimal': 7.0}, 'solving': {'solvers': {'choices': 20841.0, 'conflicts': 3672.0, 'conflicts_analyzed': 3484.0, 'restarts': 3.0, 'restarts_last': 133.0, 'extra': {'domain_choices': 2746.0, 'models': 26.0, 'models_level': 7502.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2940.0, 'distributed_sum_lbd': 6786.0, 'integrated': 16455.0, 'lemmas': 22646.0, 'lits_learnt': 1134704.0, 'lemmas_binary': 2069.0, 'lemmas_ternary': 1225.0, 'cpu_time': 3.53125, 'integrated_imps': 6674.0, 'integrated_jumps': 4516.0, 'guiding_paths_lits': 14285.0, 'guiding_paths': 232.0, 'splits': 0.0, 'lemmas_conflict': 3387.0, 'lemmas_loop': 4434.0, 'lemmas_other': 14825.0, 'lits_conflict': 231163.0, 'lits_loop': 37180.0, 'lits_other': 866361.0, 'jumps': {'jumps': 3484.0, 'jumps_bounded': 777.0, 'levels': 55753.0, 'levels_bounded': 49844.0, 'max': 910.0, 'max_executed': 910.0, 'max_bounded': 909.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-36] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17, 7: 18}

[13-11-2021_23-27-36] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 8 ( 88.89% solved)

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 18)', truth=True, inc_range=None)

[13-11-2021_23-27-36] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 18]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 8)
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 8)

[13-11-2021_23-27-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 18:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.266068s.

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(8, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(8,18).

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.171681s with result Satisfiable.

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.43774900000000017, Incremental time limit = None
Running cumulative time = 6.023125299999999, Cumulative time limit = 3600
Used memory = (RSS = 330.425781Mb, VMS = 325.500000Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 30
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.837749s, Solving = 1.185376s, Total = 6.023125s, Memory = (RSS = 330.425781Mb, VMS = 325.500000Mb)), Calls = 19
Final Model :: Total atoms = 10929, Cost = (21, 0), Optimality proven = False, Number = 4, Thread ID = 4, Model type = ModelType.StableModel

[13-11-2021_23-27-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.837748899999997, solving_time=1.1853764000000027, total_time=6.023125299999999, memory=Memory(rss=330.42578125, vms=325.5), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26606810000000003, solving_time=0.17168090000000014, total_time=0.43774900000000017, memory=Memory(rss=330.42578125, vms=325.5), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 74752.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 233723.0, 'bodies_tr': 233723.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3879.0, 'count_bodies_tr': 3879.0, 'sccs': 448.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9778.0, 'rules': 324936.0, 'rules_normal': 320617.0, 'rules_choice': 4053.0, 'rules_minimize': 38.0, 'rules_acyc': 0.0, 'rules_heuristic': 228.0, 'rules_tr': 324882.0, 'rules_tr_normal': 320617.0, 'rules_tr_choice': 4053.0, 'rules_tr_minimize': 38.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 174.0, 'eqs': 169614.0, 'eqs_atom': 37061.0, 'eqs_body': 4720.0, 'eqs_other': 127833.0}, 'lpStep': {'atoms': 3798.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12910.0, 'bodies_tr': 12910.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17817.0, 'rules_normal': 17608.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17817.0, 'rules_tr_normal': 17608.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8462.0, 'eqs_atom': 1933.0, 'eqs_body': 67.0, 'eqs_other': 6462.0}, 'generator': {'vars': 42241.0, 'vars_eliminated': 0.0, 'vars_frozen': 25822.0, 'constraints': 5734.0, 'constraints_binary': 123475.0, 'constraints_ternary': 32566.0, 'acyc_edges': 0.0, 'complexity': 162765.0}}, 'solving': {'solvers': {'choices': 3038.0, 'conflicts': 86.0, 'conflicts_analyzed': 77.0, 'restarts': 0.0, 'restarts_last': 22.0, 'extra': {'domain_choices': 36.0, 'models': 4.0, 'models_level': 1486.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 26.0, 'distributed_sum_lbd': 71.0, 'integrated': 100.0, 'lemmas': 218.0, 'lits_learnt': 18418.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.4375, 'integrated_imps': 30.0, 'integrated_jumps': 121.0, 'guiding_paths_lits': 1547.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 77.0, 'lemmas_loop': 66.0, 'lemmas_other': 75.0, 'lits_conflict': 7423.0, 'lits_loop': 630.0, 'lits_other': 10365.0, 'jumps': {'jumps': 77.0, 'jumps_bounded': 0.0, 'levels': 133.0, 'levels_bounded': 0.0, 'max': 11.0, 'max_executed': 11.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 19.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [21.0, 0.0], 'lower': [21.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.4433250427246094, 'cpu': 0.71875, 'solve': 0.1540966033935547, 'unsat': 0.017461776733398438, 'sat': 0.00897979736328125}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 6.141510009765625, 'cpu': 9.171875, 'solve': 0.9317760467529297, 'unsat': 0.2837333679199219, 'sat': 0.14058685302734375}, 'models': {'enumerated': 30.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 23879.0, 'conflicts': 3758.0, 'conflicts_analyzed': 3561.0, 'restarts': 3.0, 'restarts_last': 133.0, 'extra': {'domain_choices': 2782.0, 'models': 30.0, 'models_level': 8988.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2966.0, 'distributed_sum_lbd': 6857.0, 'integrated': 16555.0, 'lemmas': 22864.0, 'lits_learnt': 1153122.0, 'lemmas_binary': 2069.0, 'lemmas_ternary': 1225.0, 'cpu_time': 3.96875, 'integrated_imps': 6704.0, 'integrated_jumps': 4637.0, 'guiding_paths_lits': 15832.0, 'guiding_paths': 244.0, 'splits': 0.0, 'lemmas_conflict': 3464.0, 'lemmas_loop': 4500.0, 'lemmas_other': 14900.0, 'lits_conflict': 238586.0, 'lits_loop': 37810.0, 'lits_other': 876726.0, 'jumps': {'jumps': 3561.0, 'jumps_bounded': 777.0, 'levels': 55886.0, 'levels_bounded': 49844.0, 'max': 910.0, 'max_executed': 910.0, 'max_bounded': 909.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-37] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17, 7: 18, 8: 19}

[13-11-2021_23-27-37] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 9 (100.00% solved)

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 19)', truth=True, inc_range=None)

[13-11-2021_23-27-37] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 19]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 9)
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 9)

[13-11-2021_23-27-37] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.261717s.

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 20: original = External(symbol='current_last_sgoals(9, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(9,19).

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028983s with result Unsatisfiable.

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2906998999999981, Incremental time limit = None
Running cumulative time = 6.3138251999999975, Cumulative time limit = 3600
Used memory = (RSS = 334.027344Mb, VMS = 327.703125Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=5.099465799999996, solving_time=1.214359400000001, total_time=6.3138251999999975, memory=Memory(rss=334.02734375, vms=327.703125), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2617168999999997, solving_time=0.028982999999998427, total_time=0.2906998999999981, memory=Memory(rss=334.02734375, vms=327.703125), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 78564.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 246657.0, 'bodies_tr': 246657.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4080.0, 'count_bodies_tr': 4080.0, 'sccs': 473.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10372.0, 'rules': 342813.0, 'rules_normal': 338285.0, 'rules_choice': 4248.0, 'rules_minimize': 40.0, 'rules_acyc': 0.0, 'rules_heuristic': 240.0, 'rules_tr': 342759.0, 'rules_tr_normal': 338285.0, 'rules_tr_choice': 4248.0, 'rules_tr_minimize': 40.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 186.0, 'eqs': 178138.0, 'eqs_atom': 39008.0, 'eqs_body': 4787.0, 'eqs_other': 134343.0}, 'lpStep': {'atoms': 3812.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12934.0, 'bodies_tr': 12934.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17877.0, 'rules_normal': 17668.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17877.0, 'rules_tr_normal': 17668.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8524.0, 'eqs_atom': 1947.0, 'eqs_body': 67.0, 'eqs_other': 6510.0}, 'generator': {'vars': 44911.0, 'vars_eliminated': 0.0, 'vars_frozen': 27421.0, 'constraints': 6377.0, 'constraints_binary': 137696.0, 'constraints_ternary': 36600.0, 'acyc_edges': 0.0, 'complexity': 181747.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 12.0, 'lits_learnt': 108.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1624.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 12.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 108.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 20.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [4.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.2947196960449219, 'cpu': 0.28125, 'solve': 0.010000228881835938, 'unsat': 0.010000228881835938, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 6.436229705810547, 'cpu': 9.453125, 'solve': 0.9417762756347656, 'unsat': 0.2937335968017578, 'sat': 0.14058685302734375}, 'models': {'enumerated': 30.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 23879.0, 'conflicts': 3766.0, 'conflicts_analyzed': 3561.0, 'restarts': 3.0, 'restarts_last': 133.0, 'extra': {'domain_choices': 2782.0, 'models': 30.0, 'models_level': 8988.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2966.0, 'distributed_sum_lbd': 6857.0, 'integrated': 16555.0, 'lemmas': 22876.0, 'lits_learnt': 1153230.0, 'lemmas_binary': 2069.0, 'lemmas_ternary': 1225.0, 'cpu_time': 3.96875, 'integrated_imps': 6704.0, 'integrated_jumps': 4637.0, 'guiding_paths_lits': 17456.0, 'guiding_paths': 252.0, 'splits': 0.0, 'lemmas_conflict': 3464.0, 'lemmas_loop': 4512.0, 'lemmas_other': 14900.0, 'lits_conflict': 238586.0, 'lits_loop': 37918.0, 'lits_other': 876726.0, 'jumps': {'jumps': 3561.0, 'jumps_bounded': 777.0, 'levels': 55886.0, 'levels_bounded': 49844.0, 'max': 910.0, 'max_executed': 910.0, 'max_bounded': 909.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-37] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.253094s.

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.166728s with result Unsatisfiable.

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.41982250000000043, Incremental time limit = None
Running cumulative time = 6.733647699999998, Cumulative time limit = 3600
Used memory = (RSS = 346.914062Mb, VMS = 351.960938Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=20, end_step=21, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=5.3525601999999965, solving_time=1.3810875000000014, total_time=6.733647699999998, memory=Memory(rss=346.9140625, vms=351.9609375), step_range=range(0, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.25309440000000016, solving_time=0.16672810000000027, total_time=0.41982250000000043, memory=Memory(rss=346.9140625, vms=351.9609375), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 82390.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 259615.0, 'bodies_tr': 259615.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4281.0, 'count_bodies_tr': 4281.0, 'sccs': 498.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10966.0, 'rules': 360750.0, 'rules_normal': 356013.0, 'rules_choice': 4443.0, 'rules_minimize': 42.0, 'rules_acyc': 0.0, 'rules_heuristic': 252.0, 'rules_tr': 360696.0, 'rules_tr_normal': 356013.0, 'rules_tr_choice': 4443.0, 'rules_tr_minimize': 42.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 198.0, 'eqs': 186724.0, 'eqs_atom': 40969.0, 'eqs_body': 4854.0, 'eqs_other': 140901.0}, 'lpStep': {'atoms': 3826.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12958.0, 'bodies_tr': 12958.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17937.0, 'rules_normal': 17728.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17937.0, 'rules_tr_normal': 17728.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8586.0, 'eqs_atom': 1961.0, 'eqs_body': 67.0, 'eqs_other': 6558.0}, 'generator': {'vars': 47581.0, 'vars_eliminated': 0.0, 'vars_frozen': 29020.0, 'constraints': 7020.0, 'constraints_binary': 151953.0, 'constraints_ternary': 40612.0, 'acyc_edges': 0.0, 'complexity': 200743.0}}, 'solving': {'solvers': {'choices': 2299.0, 'conflicts': 738.0, 'conflicts_analyzed': 713.0, 'restarts': 2.0, 'restarts_last': 90.0, 'extra': {'domain_choices': 684.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 649.0, 'distributed_sum_lbd': 1582.0, 'integrated': 3885.0, 'lemmas': 6753.0, 'lits_learnt': 552435.0, 'lemmas_binary': 397.0, 'lemmas_ternary': 237.0, 'cpu_time': 1.109375, 'integrated_imps': 1176.0, 'integrated_jumps': 938.0, 'guiding_paths_lits': 1701.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 707.0, 'lemmas_loop': 2383.0, 'lemmas_other': 3663.0, 'lits_conflict': 92343.0, 'lits_loop': 19737.0, 'lits_other': 440355.0, 'jumps': {'jumps': 713.0, 'jumps_bounded': 168.0, 'levels': 67449.0, 'levels_bounded': 66101.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}, 'summary': {'call': 21.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [17.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.42386627197265625, 'cpu': 1.390625, 'solve': 0.14458656311035156, 'unsat': 0.14458656311035156, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 6.860095977783203, 'cpu': 10.84375, 'solve': 1.0863628387451172, 'unsat': 0.4383201599121094, 'sat': 0.14058685302734375}, 'models': {'enumerated': 30.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 26178.0, 'conflicts': 4504.0, 'conflicts_analyzed': 4274.0, 'restarts': 5.0, 'restarts_last': 133.0, 'extra': {'domain_choices': 3466.0, 'models': 30.0, 'models_level': 8988.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3615.0, 'distributed_sum_lbd': 8439.0, 'integrated': 20440.0, 'lemmas': 29629.0, 'lits_learnt': 1705665.0, 'lemmas_binary': 2466.0, 'lemmas_ternary': 1462.0, 'cpu_time': 5.078125, 'integrated_imps': 7880.0, 'integrated_jumps': 5575.0, 'guiding_paths_lits': 19157.0, 'guiding_paths': 276.0, 'splits': 0.0, 'lemmas_conflict': 4171.0, 'lemmas_loop': 6895.0, 'lemmas_other': 18563.0, 'lits_conflict': 330929.0, 'lits_loop': 57655.0, 'lits_other': 1317081.0, 'jumps': {'jumps': 4274.0, 'jumps_bounded': 945.0, 'levels': 123335.0, 'levels_bounded': 115945.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-37] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.291204s.

[13-11-2021_23-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.341370s with result Satisfiable.

[13-11-2021_23-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.6325733999999983, Incremental time limit = None
Running cumulative time = 7.366221099999996, Cumulative time limit = 3600
Used memory = (RSS = 354.136719Mb, VMS = 357.792969Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 31
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.643764s, Solving = 1.722457s, Total = 7.366221s, Memory = (RSS = 354.136719Mb, VMS = 357.792969Mb)), Calls = 22
Final Model :: Total atoms = 12072, Cost = (26, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-38] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=21, end_step=22, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=5.643763799999996, solving_time=1.7224573000000003, total_time=7.366221099999996, memory=Memory(rss=354.13671875, vms=357.79296875), step_range=range(0, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.29120359999999934, solving_time=0.34136979999999895, total_time=0.6325733999999983, memory=Memory(rss=354.13671875, vms=357.79296875), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 86230.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 272597.0, 'bodies_tr': 272597.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4482.0, 'count_bodies_tr': 4482.0, 'sccs': 523.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11560.0, 'rules': 378747.0, 'rules_normal': 373801.0, 'rules_choice': 4638.0, 'rules_minimize': 44.0, 'rules_acyc': 0.0, 'rules_heuristic': 264.0, 'rules_tr': 378693.0, 'rules_tr_normal': 373801.0, 'rules_tr_choice': 4638.0, 'rules_tr_minimize': 44.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 210.0, 'eqs': 195372.0, 'eqs_atom': 42944.0, 'eqs_body': 4921.0, 'eqs_other': 147507.0}, 'lpStep': {'atoms': 3840.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12982.0, 'bodies_tr': 12982.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17997.0, 'rules_normal': 17788.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17997.0, 'rules_tr_normal': 17788.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8648.0, 'eqs_atom': 1975.0, 'eqs_body': 67.0, 'eqs_other': 6606.0}, 'generator': {'vars': 50251.0, 'vars_eliminated': 0.0, 'vars_frozen': 30619.0, 'constraints': 7660.0, 'constraints_binary': 165845.0, 'constraints_ternary': 44475.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 4757.0, 'conflicts': 1767.0, 'conflicts_analyzed': 1746.0, 'restarts': 9.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 1812.0, 'models': 1.0, 'models_level': 471.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1382.0, 'distributed_sum_lbd': 4045.0, 'integrated': 8281.0, 'lemmas': 11159.0, 'lits_learnt': 1843596.0, 'lemmas_binary': 1172.0, 'lemmas_ternary': 371.0, 'cpu_time': 2.3125, 'integrated_imps': 1311.0, 'integrated_jumps': 1625.0, 'guiding_paths_lits': 1778.0, 'guiding_paths': 25.0, 'splits': 0.0, 'lemmas_conflict': 1743.0, 'lemmas_loop': 1400.0, 'lemmas_other': 8016.0, 'lits_conflict': 370419.0, 'lits_loop': 12086.0, 'lits_other': 1461091.0, 'jumps': {'jumps': 1746.0, 'jumps_bounded': 134.0, 'levels': 37647.0, 'levels_bounded': 35108.0, 'max': 1629.0, 'max_executed': 1629.0, 'max_bounded': 1628.0}}}}, 'summary': {'call': 22.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [26.0, 0.0], 'lower': [26.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.6392955780029297, 'cpu': 2.640625, 'solve': 0.3221111297607422, 'unsat': 0.048870086669921875, 'sat': 0.2732410430908203}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 7.499391555786133, 'cpu': 13.484375, 'solve': 1.4084739685058594, 'unsat': 0.48719024658203125, 'sat': 0.41382789611816406}, 'models': {'enumerated': 31.0, 'optimal': 9.0}, 'solving': {'solvers': {'choices': 30935.0, 'conflicts': 6271.0, 'conflicts_analyzed': 6020.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 5278.0, 'models': 31.0, 'models_level': 9459.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4997.0, 'distributed_sum_lbd': 12484.0, 'integrated': 28721.0, 'lemmas': 40788.0, 'lits_learnt': 3549261.0, 'lemmas_binary': 3638.0, 'lemmas_ternary': 1833.0, 'cpu_time': 7.390625, 'integrated_imps': 9191.0, 'integrated_jumps': 7200.0, 'guiding_paths_lits': 20935.0, 'guiding_paths': 301.0, 'splits': 0.0, 'lemmas_conflict': 5914.0, 'lemmas_loop': 8295.0, 'lemmas_other': 26579.0, 'lits_conflict': 701348.0, 'lits_loop': 69741.0, 'lits_other': 2778172.0, 'jumps': {'jumps': 6020.0, 'jumps_bounded': 1079.0, 'levels': 160982.0, 'levels_bounded': 151053.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-38] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17, 7: 18, 8: 19, 9: 22}

[13-11-2021_23-27-38] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 10 (111.11% solved)

[13-11-2021_23-27-38] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 9 was achieved successfully.

[13-11-2021_23-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.330039s, Solving = 0.012285s, Total = 0.342323s, Memory = (RSS = 209.152344Mb, VMS = 200.636719Mb)
2 : Statistics :: Grounding = 0.148494s, Solving = 0.009500s, Total = 0.157994s, Memory = (RSS = 212.683594Mb, VMS = 204.320312Mb)
3 : Statistics :: Grounding = 0.214504s, Solving = 0.009812s, Total = 0.224316s, Memory = (RSS = 214.164062Mb, VMS = 205.687500Mb)
4 : Statistics :: Grounding = 0.220404s, Solving = 0.008128s, Total = 0.228532s, Memory = (RSS = 215.964844Mb, VMS = 207.398438Mb)
5 : Statistics :: Grounding = 0.265620s, Solving = 0.011737s, Total = 0.277357s, Memory = (RSS = 221.015625Mb, VMS = 212.339844Mb)
6 : Statistics :: Grounding = 0.227756s, Solving = 0.014098s, Total = 0.241854s, Memory = (RSS = 226.097656Mb, VMS = 217.667969Mb)
7 : Statistics :: Grounding = 0.250622s, Solving = 0.027322s, Total = 0.277944s, Memory = (RSS = 232.062500Mb, VMS = 224.382812Mb)
8 : Statistics :: Grounding = 0.234885s, Solving = 0.019379s, Total = 0.254265s, Memory = (RSS = 235.679688Mb, VMS = 227.308594Mb)
9 : Statistics :: Grounding = 0.262118s, Solving = 0.027527s, Total = 0.289645s, Memory = (RSS = 242.960938Mb, VMS = 236.089844Mb)
10 : Statistics :: Grounding = 0.249473s, Solving = 0.029974s, Total = 0.279448s, Memory = (RSS = 246.707031Mb, VMS = 239.019531Mb)
11 : Statistics :: Grounding = 0.265225s, Solving = 0.045070s, Total = 0.310295s, Memory = (RSS = 252.351562Mb, VMS = 244.429688Mb)
12 : Statistics :: Grounding = 0.256257s, Solving = 0.081174s, Total = 0.337431s, Memory = (RSS = 265.171875Mb, VMS = 260.195312Mb)
13 : Statistics :: Grounding = 0.265735s, Solving = 0.158324s, Total = 0.424059s, Memory = (RSS = 270.472656Mb, VMS = 263.996094Mb)
14 : Statistics :: Grounding = 0.332795s, Solving = 0.029703s, Total = 0.362498s, Memory = (RSS = 273.578125Mb, VMS = 266.320312Mb)
15 : Statistics :: Grounding = 0.257947s, Solving = 0.183665s, Total = 0.441612s, Memory = (RSS = 288.308594Mb, VMS = 288.320312Mb)
16 : Statistics :: Grounding = 0.268652s, Solving = 0.086167s, Total = 0.354819s, Memory = (RSS = 296.921875Mb, VMS = 295.464844Mb)
17 : Statistics :: Grounding = 0.266591s, Solving = 0.066746s, Total = 0.333336s, Memory = (RSS = 305.765625Mb, VMS = 303.003906Mb)
18 : Statistics :: Grounding = 0.254563s, Solving = 0.193084s, Total = 0.447647s, Memory = (RSS = 318.281250Mb, VMS = 314.070312Mb)
19 : Statistics :: Grounding = 0.266068s, Solving = 0.171681s, Total = 0.437749s, Memory = (RSS = 330.425781Mb, VMS = 325.500000Mb)
20 : Statistics :: Grounding = 0.261717s, Solving = 0.028983s, Total = 0.290700s, Memory = (RSS = 334.027344Mb, VMS = 327.703125Mb)
21 : Statistics :: Grounding = 0.253094s, Solving = 0.166728s, Total = 0.419823s, Memory = (RSS = 346.914062Mb, VMS = 351.960938Mb)
22 : Statistics :: Grounding = 0.291204s, Solving = 0.341370s, Total = 0.632573s, Memory = (RSS = 354.136719Mb, VMS = 357.792969Mb)

[13-11-2021_23-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 7.366221s due to: External generator exit.

[13-11-2021_23-27-38] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[13-11-2021_23-27-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[13-11-2021_23-27-39] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-27-39] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-27-39] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 9, Last requested goal index = 9 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-27-39] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.643764s, Solving = 1.722457s, Total = 7.366221s, Memory = (RSS = 354.136719Mb, VMS = 357.792969Mb)), Calls = 22
Model :: Total atoms = 12072, Cost = (26, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-39] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 22 :: Actions = 27                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))

[13-11-2021_23-27-39] INFO :: ASH Planner Main #1 >> Online planning increment 1 finished.

[13-11-2021_23-27-39] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 1 : Total constraining sgoals = 14 : Achieved sgoals = 8 : Unachieved sgoals = 6
Level = 1 : Solved problems = 1 : Total constraining sgoals = 17 : Achieved sgoals = 9 : Unachieved sgoals = 8

[13-11-2021_23-27-39] INFO :: ASH Planner Main #1 >> Current valid planning level range: [1-2]

[13-11-2021_23-27-39] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 2 by method ground-first: [1-1]

[13-11-2021_23-27-39] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 2:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   3.204s (Gro =   2.720s, Sea =   0.484s), Expan (2.43, 2.80) (Dev = (2.15, 3.95), Bal = (0.88, 1.41))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-27-39] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [9-17]

[13-11-2021_23-27-39] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [9-17], problem number = 2, increment number = 2

[13-11-2021_23-27-39] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 9)
	('last_sgoals', 17)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016425336EA0>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-27-39] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 9
last_sgoals = 17
start_step = 20
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 28

[13-11-2021_23-27-39] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [9-17] : Minimum search length bound = disabled with value = 28

[13-11-2021_23-27-39] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-27-39] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = True, chosen = True

[13-11-2021_23-27-39] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-27-39] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 12})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 17})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 17})

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 12 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 10).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 10).
sub_goal(2, talos, move(hallway), in(talos), hallway, 11).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 12).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 13).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 14).
sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 14).
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 15).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 16).
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 16).
sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 17).
sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 17).

[13-11-2021_23-27-39] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000016429E03540>

[13-11-2021_23-27-39] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[13-11-2021_23-27-39] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000016429E03540> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,2)), 3)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 4)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 4)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)), 5)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,puzzle_room_door_handle_outer), 6)).
fix_action(occurs(1, talos, actuate(manipulator_end_1,puzzle_room_door), 7)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 8)).
fix_action(occurs(1, talos, release(manipulator_end_1,puzzle_room_door_handle_outer), 8)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 9)).
fix_action(occurs(1, talos, move((hallway,1)), 10)).
fix_action(occurs(1, talos, move((hallway,0)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 12)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)), 13)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,store_room_door_handle_outer), 14)).
fix_action(occurs(1, talos, actuate(manipulator_end_2,store_room_door), 15)).
fix_action(occurs(1, talos, release(manipulator_end_2,store_room_door_handle_outer), 16)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 17)).
fix_action(occurs(1, talos, move((store_room,1)), 18)).
fix_action(occurs(1, talos, move((store_room,0)), 19)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 20)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[13-11-2021_23-27-39] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000016429E03540> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), nothing, 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), nothing, 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), nothing, 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,2), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), nothing, 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (hallway,2), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), nothing, 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (hallway,2), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), nothing, 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (hallway,2), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), nothing, 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (hallway,2), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), nothing, 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), hallway, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (hallway,2), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), nothing, 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), hallway, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (hallway,2), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), nothing, 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), hallway, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (hallway,1), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), nothing, 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), hallway, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (hallway,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), nothing, 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (hallway,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), nothing, 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), hallway, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (hallway,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), nothing, 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), hallway, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(1, complete(blue), false, 14)).
fix_fluent(holds(1, complete(red), false, 14)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 14)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 14)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 14)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 14)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(1, configuration(store_room_door), closed, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 14)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(talos), (hallway,0), 14)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 14)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 14)).
fix_fluent(holds(1, on((block,3)), (block,1), 14)).
fix_fluent(holds(1, on((block,4)), nothing, 14)).
fix_fluent(holds(1, on((block,5)), nothing, 14)).
fix_fluent(holds(1, on((block,6)), nothing, 14)).
fix_fluent(holds(1, tower_base((block,1)), true, 14)).
fix_fluent(holds(1, tower_base((block,2)), true, 14)).
fix_fluent(holds(1, tower_base((block,3)), false, 14)).
fix_fluent(holds(1, tower_base((block,4)), false, 14)).
fix_fluent(holds(1, tower_base((block,5)), false, 14)).
fix_fluent(holds(1, tower_base((block,6)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), closed, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), store_room, 14)).
fix_fluent(holds(2, in((block,6)), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), hallway, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), nothing, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(1, complete(blue), false, 15)).
fix_fluent(holds(1, complete(red), false, 15)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 15)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 15)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 15)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 15)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(1, configuration(store_room_door), open, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 15)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(talos), (hallway,0), 15)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 15)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 15)).
fix_fluent(holds(1, on((block,3)), (block,1), 15)).
fix_fluent(holds(1, on((block,4)), nothing, 15)).
fix_fluent(holds(1, on((block,5)), nothing, 15)).
fix_fluent(holds(1, on((block,6)), nothing, 15)).
fix_fluent(holds(1, tower_base((block,1)), true, 15)).
fix_fluent(holds(1, tower_base((block,2)), true, 15)).
fix_fluent(holds(1, tower_base((block,3)), false, 15)).
fix_fluent(holds(1, tower_base((block,4)), false, 15)).
fix_fluent(holds(1, tower_base((block,5)), false, 15)).
fix_fluent(holds(1, tower_base((block,6)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), store_room, 15)).
fix_fluent(holds(2, in((block,6)), store_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), hallway, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), nothing, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(1, complete(blue), false, 16)).
fix_fluent(holds(1, complete(red), false, 16)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 16)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 16)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(1, configuration(store_room_door), open, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 16)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 16)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(talos), (hallway,0), 16)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 16)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 16)).
fix_fluent(holds(1, on((block,3)), (block,1), 16)).
fix_fluent(holds(1, on((block,4)), nothing, 16)).
fix_fluent(holds(1, on((block,5)), nothing, 16)).
fix_fluent(holds(1, on((block,6)), nothing, 16)).
fix_fluent(holds(1, tower_base((block,1)), true, 16)).
fix_fluent(holds(1, tower_base((block,2)), true, 16)).
fix_fluent(holds(1, tower_base((block,3)), false, 16)).
fix_fluent(holds(1, tower_base((block,4)), false, 16)).
fix_fluent(holds(1, tower_base((block,5)), false, 16)).
fix_fluent(holds(1, tower_base((block,6)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), store_room, 16)).
fix_fluent(holds(2, in((block,6)), store_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), hallway, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), nothing, 16)).
fix_fluent(holds(2, on((block,6)), nothing, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(1, complete(blue), false, 17)).
fix_fluent(holds(1, complete(red), false, 17)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 17)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 17)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(1, configuration(store_room_door), open, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 17)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 17)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(talos), (hallway,0), 17)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 17)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 17)).
fix_fluent(holds(1, on((block,3)), (block,1), 17)).
fix_fluent(holds(1, on((block,4)), nothing, 17)).
fix_fluent(holds(1, on((block,5)), nothing, 17)).
fix_fluent(holds(1, on((block,6)), nothing, 17)).
fix_fluent(holds(1, tower_base((block,1)), true, 17)).
fix_fluent(holds(1, tower_base((block,2)), true, 17)).
fix_fluent(holds(1, tower_base((block,3)), false, 17)).
fix_fluent(holds(1, tower_base((block,4)), false, 17)).
fix_fluent(holds(1, tower_base((block,5)), false, 17)).
fix_fluent(holds(1, tower_base((block,6)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), store_room, 17)).
fix_fluent(holds(2, in((block,6)), store_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), hallway, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), (block,1), 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), nothing, 17)).
fix_fluent(holds(2, on((block,6)), nothing, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), false, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(1, complete(blue), false, 18)).
fix_fluent(holds(1, complete(red), false, 18)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 18)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 18)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(1, configuration(store_room_door), open, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 18)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(talos), (store_room,1), 18)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 18)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 18)).
fix_fluent(holds(1, on((block,3)), (block,1), 18)).
fix_fluent(holds(1, on((block,4)), nothing, 18)).
fix_fluent(holds(1, on((block,5)), nothing, 18)).
fix_fluent(holds(1, on((block,6)), nothing, 18)).
fix_fluent(holds(1, tower_base((block,1)), true, 18)).
fix_fluent(holds(1, tower_base((block,2)), true, 18)).
fix_fluent(holds(1, tower_base((block,3)), false, 18)).
fix_fluent(holds(1, tower_base((block,4)), false, 18)).
fix_fluent(holds(1, tower_base((block,5)), false, 18)).
fix_fluent(holds(1, tower_base((block,6)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), open, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), store_room, 18)).
fix_fluent(holds(2, in((block,5)), store_room, 18)).
fix_fluent(holds(2, in((block,6)), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), store_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), (block,1), 18)).
fix_fluent(holds(2, on((block,4)), nothing, 18)).
fix_fluent(holds(2, on((block,5)), nothing, 18)).
fix_fluent(holds(2, on((block,6)), nothing, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), false, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(1, complete(blue), false, 19)).
fix_fluent(holds(1, complete(red), false, 19)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 19)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 19)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(1, configuration(store_room_door), open, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 19)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 19)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(talos), (store_room,0), 19)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 19)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 19)).
fix_fluent(holds(1, on((block,3)), (block,1), 19)).
fix_fluent(holds(1, on((block,4)), nothing, 19)).
fix_fluent(holds(1, on((block,5)), nothing, 19)).
fix_fluent(holds(1, on((block,6)), nothing, 19)).
fix_fluent(holds(1, tower_base((block,1)), true, 19)).
fix_fluent(holds(1, tower_base((block,2)), true, 19)).
fix_fluent(holds(1, tower_base((block,3)), false, 19)).
fix_fluent(holds(1, tower_base((block,4)), false, 19)).
fix_fluent(holds(1, tower_base((block,5)), false, 19)).
fix_fluent(holds(1, tower_base((block,6)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(2, complete(blue), false, 19)).
fix_fluent(holds(2, complete(red), false, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 19)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(2, configuration(store_room_door), open, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,4)), store_room, 19)).
fix_fluent(holds(2, in((block,5)), store_room, 19)).
fix_fluent(holds(2, in((block,6)), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 19)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 19)).
fix_fluent(holds(2, in(talos), store_room, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,3)), (block,1), 19)).
fix_fluent(holds(2, on((block,4)), nothing, 19)).
fix_fluent(holds(2, on((block,5)), nothing, 19)).
fix_fluent(holds(2, on((block,6)), nothing, 19)).
fix_fluent(holds(2, tower_base((block,1)), true, 19)).
fix_fluent(holds(2, tower_base((block,2)), true, 19)).
fix_fluent(holds(2, tower_base((block,3)), false, 19)).
fix_fluent(holds(2, tower_base((block,4)), false, 19)).
fix_fluent(holds(2, tower_base((block,5)), false, 19)).
fix_fluent(holds(2, tower_base((block,6)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(1, complete(blue), false, 20)).
fix_fluent(holds(1, complete(red), false, 20)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 20)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 20)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(1, configuration(store_room_door), open, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 20)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 20)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(talos), (store_room,0), 20)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 20)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 20)).
fix_fluent(holds(1, on((block,3)), (block,1), 20)).
fix_fluent(holds(1, on((block,4)), nothing, 20)).
fix_fluent(holds(1, on((block,5)), nothing, 20)).
fix_fluent(holds(1, on((block,6)), nothing, 20)).
fix_fluent(holds(1, tower_base((block,1)), true, 20)).
fix_fluent(holds(1, tower_base((block,2)), true, 20)).
fix_fluent(holds(1, tower_base((block,3)), false, 20)).
fix_fluent(holds(1, tower_base((block,4)), false, 20)).
fix_fluent(holds(1, tower_base((block,5)), false, 20)).
fix_fluent(holds(1, tower_base((block,6)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(2, complete(blue), false, 20)).
fix_fluent(holds(2, complete(red), false, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 20)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(2, configuration(store_room_door), open, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,4)), store_room, 20)).
fix_fluent(holds(2, in((block,5)), store_room, 20)).
fix_fluent(holds(2, in((block,6)), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 20)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 20)).
fix_fluent(holds(2, in(talos), store_room, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,3)), (block,1), 20)).
fix_fluent(holds(2, on((block,4)), nothing, 20)).
fix_fluent(holds(2, on((block,5)), nothing, 20)).
fix_fluent(holds(2, on((block,6)), nothing, 20)).
fix_fluent(holds(2, tower_base((block,1)), true, 20)).
fix_fluent(holds(2, tower_base((block,2)), true, 20)).
fix_fluent(holds(2, tower_base((block,3)), false, 20)).
fix_fluent(holds(2, tower_base((block,4)), false, 20)).
fix_fluent(holds(2, tower_base((block,5)), false, 20)).
fix_fluent(holds(2, tower_base((block,6)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 20)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[13-11-2021_23-27-39] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 20)
	('last_sgoals', 17)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000016425336EA0>)
	('first_sgoals', 10)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000016429E03540>)

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 21)', truth=True, inc_range=None)

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.285397s.

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 23: original = External(symbol='current_last_sgoals(10, 21)', truth=True, inc_range=None), conversion = current_last_sgoals(10,21).

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.100111s with result Satisfiable.

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3855077999999992, Incremental time limit = None
Running cumulative time = 7.751728899999995, Cumulative time limit = 3600
Used memory = (RSS = 368.179688Mb, VMS = 370.566406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 34
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.929161s, Solving = 1.822568s, Total = 7.751729s, Memory = (RSS = 368.179688Mb, VMS = 370.566406Mb)), Calls = 23
Final Model :: Total atoms = 15765, Cost = (26, 0), Optimality proven = False, Number = 3, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-27-39] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=22, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=5.929160599999997, solving_time=1.8225682999999986, total_time=7.751728899999995, memory=Memory(rss=368.1796875, vms=370.56640625), step_range=range(0, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2853968000000009, solving_time=0.10011099999999828, total_time=0.3855077999999992, memory=Memory(rss=368.1796875, vms=370.56640625), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 94074.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 286273.0, 'bodies_tr': 286273.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4683.0, 'count_bodies_tr': 4683.0, 'sccs': 548.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12154.0, 'rules': 401704.0, 'rules_normal': 396549.0, 'rules_choice': 4833.0, 'rules_minimize': 46.0, 'rules_acyc': 0.0, 'rules_heuristic': 276.0, 'rules_tr': 401650.0, 'rules_tr_normal': 396549.0, 'rules_tr_choice': 4833.0, 'rules_tr_minimize': 46.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 222.0, 'eqs': 206058.0, 'eqs_atom': 45582.0, 'eqs_body': 5640.0, 'eqs_other': 154836.0}, 'lpStep': {'atoms': 7844.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13676.0, 'bodies_tr': 13676.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 22957.0, 'rules_normal': 22748.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22957.0, 'rules_tr_normal': 22748.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10686.0, 'eqs_atom': 2638.0, 'eqs_body': 719.0, 'eqs_other': 7329.0}, 'generator': {'vars': 52948.0, 'vars_eliminated': 0.0, 'vars_frozen': 32240.0, 'constraints': 730.0, 'constraints_binary': 33884.0, 'constraints_ternary': 3971.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 2605.0, 'conflicts': 106.0, 'conflicts_analyzed': 99.0, 'restarts': 0.0, 'restarts_last': 15.0, 'extra': {'domain_choices': 13.0, 'models': 3.0, 'models_level': 1347.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 97.0, 'distributed_sum_lbd': 128.0, 'integrated': 601.0, 'lemmas': 728.0, 'lits_learnt': 4167.0, 'lemmas_binary': 43.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.21875, 'integrated_imps': 534.0, 'integrated_jumps': 90.0, 'guiding_paths_lits': 2184.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 99.0, 'lemmas_loop': 37.0, 'lemmas_other': 592.0, 'lits_conflict': 2277.0, 'lits_loop': 258.0, 'lits_other': 1632.0, 'jumps': {'jumps': 99.0, 'jumps_bounded': 13.0, 'levels': 3950.0, 'levels_bounded': 3562.0, 'max': 313.0, 'max_executed': 313.0, 'max_bounded': 274.0}}}}, 'summary': {'call': 23.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [26.0, 0.0], 'lower': [26.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.480743408203125, 'cpu': 0.640625, 'solve': 0.0637969970703125, 'unsat': 0.023935317993164062, 'sat': 0.007944107055664062}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 7.980134963989258, 'cpu': 14.125, 'solve': 1.4722709655761719, 'unsat': 0.5111255645751953, 'sat': 0.4217720031738281}, 'models': {'enumerated': 34.0, 'optimal': 10.0}, 'solving': {'solvers': {'choices': 33540.0, 'conflicts': 6377.0, 'conflicts_analyzed': 6119.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 5291.0, 'models': 34.0, 'models_level': 10806.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5094.0, 'distributed_sum_lbd': 12612.0, 'integrated': 29322.0, 'lemmas': 41516.0, 'lits_learnt': 3553428.0, 'lemmas_binary': 3681.0, 'lemmas_ternary': 1833.0, 'cpu_time': 7.609375, 'integrated_imps': 9725.0, 'integrated_jumps': 7290.0, 'guiding_paths_lits': 23119.0, 'guiding_paths': 314.0, 'splits': 0.0, 'lemmas_conflict': 6013.0, 'lemmas_loop': 8332.0, 'lemmas_other': 27171.0, 'lits_conflict': 703625.0, 'lits_loop': 69999.0, 'lits_other': 2779804.0, 'jumps': {'jumps': 6119.0, 'jumps_bounded': 1092.0, 'levels': 164932.0, 'levels_bounded': 154615.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-39] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23}

[13-11-2021_23-27-39] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 2 ( 25.00% solved)

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 23)', truth=True, inc_range=None)

[13-11-2021_23-27-39] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 11, step = 23]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 11)

[13-11-2021_23-27-39] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.219505s.

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(11, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(11,23).

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023644s with result Unsatisfiable.

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.24314849999999666, Incremental time limit = None
Running cumulative time = 7.994877399999992, Cumulative time limit = 3600
Used memory = (RSS = 369.480469Mb, VMS = 371.554688Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-39] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=23, end_step=24, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=6.148665299999995, solving_time=1.8462120999999971, total_time=7.994877399999992, memory=Memory(rss=369.48046875, vms=371.5546875), step_range=range(0, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2195046999999981, solving_time=0.02364379999999855, total_time=0.24314849999999666, memory=Memory(rss=369.48046875, vms=371.5546875), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 97507.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 296885.0, 'bodies_tr': 296885.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4884.0, 'count_bodies_tr': 4884.0, 'sccs': 561.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12340.0, 'rules': 416540.0, 'rules_normal': 411176.0, 'rules_choice': 5028.0, 'rules_minimize': 48.0, 'rules_acyc': 0.0, 'rules_heuristic': 288.0, 'rules_tr': 416478.0, 'rules_tr_normal': 411176.0, 'rules_tr_choice': 5028.0, 'rules_tr_minimize': 48.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 226.0, 'eqs': 213041.0, 'eqs_atom': 46520.0, 'eqs_body': 6040.0, 'eqs_other': 160481.0}, 'lpStep': {'atoms': 3433.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10612.0, 'bodies_tr': 10612.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 14836.0, 'rules_normal': 14627.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 14828.0, 'rules_tr_normal': 14627.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 6983.0, 'eqs_atom': 938.0, 'eqs_body': 400.0, 'eqs_other': 5645.0}, 'generator': {'vars': 53694.0, 'vars_eliminated': 0.0, 'vars_frozen': 32725.0, 'constraints': 593.0, 'constraints_binary': 31513.0, 'constraints_ternary': 2956.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 2.0, 'lits_learnt': 11.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.078125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2044.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 2.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 11.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 24.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2483386993408203, 'cpu': 0.3125, 'solve': 0.002994537353515625, 'unsat': 0.002994537353515625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 8.228473663330078, 'cpu': 14.4375, 'solve': 1.4752655029296875, 'unsat': 0.5141201019287109, 'sat': 0.4217720031738281}, 'models': {'enumerated': 34.0, 'optimal': 10.0}, 'solving': {'solvers': {'choices': 33540.0, 'conflicts': 6379.0, 'conflicts_analyzed': 6119.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 5291.0, 'models': 34.0, 'models_level': 10806.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5095.0, 'distributed_sum_lbd': 12614.0, 'integrated': 29322.0, 'lemmas': 41518.0, 'lits_learnt': 3553439.0, 'lemmas_binary': 3682.0, 'lemmas_ternary': 1833.0, 'cpu_time': 7.6875, 'integrated_imps': 9725.0, 'integrated_jumps': 7290.0, 'guiding_paths_lits': 25163.0, 'guiding_paths': 321.0, 'splits': 0.0, 'lemmas_conflict': 6013.0, 'lemmas_loop': 8334.0, 'lemmas_other': 27171.0, 'lits_conflict': 703625.0, 'lits_loop': 70010.0, 'lits_other': 2779804.0, 'jumps': {'jumps': 6119.0, 'jumps_bounded': 1092.0, 'levels': 164932.0, 'levels_bounded': 154615.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-39] DEBUG :: ASH Planner Main #1 >> Reaction at search length 24:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.229740s.

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.056139s with result Satisfiable.

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2858793000000013, Incremental time limit = None
Running cumulative time = 8.280756699999994, Cumulative time limit = 3600
Used memory = (RSS = 374.851562Mb, VMS = 376.257812Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 36
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.378405s, Solving = 1.902351s, Total = 8.280757s, Memory = (RSS = 374.851562Mb, VMS = 376.257812Mb)), Calls = 25
Final Model :: Total atoms = 16531, Cost = (28, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-40] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=25, start_step=24, end_step=25, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=6.3784052999999945, solving_time=1.9023513999999988, total_time=8.280756699999994, memory=Memory(rss=374.8515625, vms=376.2578125), step_range=range(0, 26), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2297399999999996, solving_time=0.05613930000000167, total_time=0.2858793000000013, memory=Memory(rss=374.8515625, vms=376.2578125), step_range=range(25, 26), clingo_stats={'problem': {'lp': {'atoms': 100723.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 308032.0, 'bodies_tr': 308032.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5085.0, 'count_bodies_tr': 5085.0, 'sccs': 584.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12652.0, 'rules': 432832.0, 'rules_normal': 427259.0, 'rules_choice': 5223.0, 'rules_minimize': 50.0, 'rules_acyc': 0.0, 'rules_heuristic': 300.0, 'rules_tr': 432764.0, 'rules_tr_normal': 427259.0, 'rules_tr_choice': 5223.0, 'rules_tr_minimize': 50.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 232.0, 'eqs': 224078.0, 'eqs_atom': 48199.0, 'eqs_body': 6417.0, 'eqs_other': 169462.0}, 'lpStep': {'atoms': 3216.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11147.0, 'bodies_tr': 11147.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 312.0, 'rules': 16292.0, 'rules_normal': 16083.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16286.0, 'rules_tr_normal': 16083.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 11037.0, 'eqs_atom': 1679.0, 'eqs_body': 377.0, 'eqs_other': 8981.0}, 'generator': {'vars': 55061.0, 'vars_eliminated': 0.0, 'vars_frozen': 33599.0, 'constraints': 883.0, 'constraints_binary': 39125.0, 'constraints_ternary': 4636.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 1737.0, 'conflicts': 121.0, 'conflicts_analyzed': 115.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 64.0, 'models': 2.0, 'models_level': 989.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 105.0, 'distributed_sum_lbd': 143.0, 'integrated': 344.0, 'lemmas': 474.0, 'lits_learnt': 2561.0, 'lemmas_binary': 46.0, 'lemmas_ternary': 22.0, 'cpu_time': 0.0625, 'integrated_imps': 210.0, 'integrated_jumps': 107.0, 'guiding_paths_lits': 2177.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 94.0, 'lemmas_loop': 116.0, 'lemmas_other': 264.0, 'lits_conflict': 313.0, 'lits_loop': 848.0, 'lits_other': 1400.0, 'jumps': {'jumps': 115.0, 'jumps_bounded': 23.0, 'levels': 4505.0, 'levels_bounded': 4374.0, 'max': 313.0, 'max_executed': 313.0, 'max_bounded': 312.0}}}}, 'summary': {'call': 25.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [28.0, 0.0], 'lower': [28.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.2892284393310547, 'cpu': 0.328125, 'solve': 0.03288459777832031, 'unsat': 0.013963699340820312, 'sat': 0.0049610137939453125}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 8.517702102661133, 'cpu': 14.765625, 'solve': 1.5081501007080078, 'unsat': 0.5280838012695312, 'sat': 0.42673301696777344}, 'models': {'enumerated': 36.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 35277.0, 'conflicts': 6500.0, 'conflicts_analyzed': 6234.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 5355.0, 'models': 36.0, 'models_level': 11795.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5200.0, 'distributed_sum_lbd': 12757.0, 'integrated': 29666.0, 'lemmas': 41992.0, 'lits_learnt': 3556000.0, 'lemmas_binary': 3728.0, 'lemmas_ternary': 1855.0, 'cpu_time': 7.75, 'integrated_imps': 9935.0, 'integrated_jumps': 7397.0, 'guiding_paths_lits': 27340.0, 'guiding_paths': 334.0, 'splits': 0.0, 'lemmas_conflict': 6107.0, 'lemmas_loop': 8450.0, 'lemmas_other': 27435.0, 'lits_conflict': 703938.0, 'lits_loop': 70858.0, 'lits_other': 2781204.0, 'jumps': {'jumps': 6234.0, 'jumps_bounded': 1115.0, 'levels': 169437.0, 'levels_bounded': 158989.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-40] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25}

[13-11-2021_23-27-40] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 3 ( 37.50% solved)

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 25)', truth=True, inc_range=None)

[13-11-2021_23-27-40] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 25]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 12)

[13-11-2021_23-27-40] DEBUG :: ASH Planner Main #1 >> Reaction at search length 25:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.224896s.

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 26: original = External(symbol='current_last_sgoals(12, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(12,25).

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026877s with result Unsatisfiable.

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.25177380000000227, Incremental time limit = None
Running cumulative time = 8.532530499999996, Cumulative time limit = 3600
Used memory = (RSS = 379.433594Mb, VMS = 380.734375Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-40] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=26, start_step=25, end_step=26, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=6.603301699999997, solving_time=1.9292287999999989, total_time=8.532530499999996, memory=Memory(rss=379.43359375, vms=380.734375), step_range=range(0, 27), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.22489640000000222, solving_time=0.02687740000000005, total_time=0.25177380000000227, memory=Memory(rss=379.43359375, vms=380.734375), step_range=range(26, 27), clingo_stats={'problem': {'lp': {'atoms': 104014.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 318809.0, 'bodies_tr': 318809.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5286.0, 'count_bodies_tr': 5286.0, 'sccs': 597.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12862.0, 'rules': 448478.0, 'rules_normal': 442696.0, 'rules_choice': 5418.0, 'rules_minimize': 52.0, 'rules_acyc': 0.0, 'rules_heuristic': 312.0, 'rules_tr': 448402.0, 'rules_tr_normal': 442696.0, 'rules_tr_choice': 5418.0, 'rules_tr_minimize': 52.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 236.0, 'eqs': 232469.0, 'eqs_atom': 49598.0, 'eqs_body': 6868.0, 'eqs_other': 176003.0}, 'lpStep': {'atoms': 3291.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10777.0, 'bodies_tr': 10777.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 210.0, 'rules': 15646.0, 'rules_normal': 15437.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 15638.0, 'rules_tr_normal': 15437.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 8391.0, 'eqs_atom': 1399.0, 'eqs_body': 451.0, 'eqs_other': 6541.0}, 'generator': {'vars': 55919.0, 'vars_eliminated': 0.0, 'vars_frozen': 34149.0, 'constraints': 887.0, 'constraints_binary': 38642.0, 'constraints_ternary': 4179.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 11.0, 'conflicts': 16.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 7.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 10.0, 'distributed_sum_lbd': 15.0, 'integrated': 52.0, 'lemmas': 49.0, 'lits_learnt': 63.0, 'lemmas_binary': 14.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 37.0, 'integrated_jumps': 3.0, 'guiding_paths_lits': 2310.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 2.0, 'lemmas_other': 39.0, 'lits_conflict': 11.0, 'lits_loop': 4.0, 'lits_other': 48.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 6.0, 'levels': 1663.0, 'levels_bounded': 1655.0, 'max': 332.0, 'max_executed': 1.0, 'max_bounded': 331.0}}}}, 'summary': {'call': 26.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [26.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.25531959533691406, 'cpu': 0.3125, 'solve': 0.004962921142578125, 'unsat': 0.004962921142578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 8.773021697998047, 'cpu': 15.078125, 'solve': 1.513113021850586, 'unsat': 0.5330467224121094, 'sat': 0.42673301696777344}, 'models': {'enumerated': 36.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 35288.0, 'conflicts': 6516.0, 'conflicts_analyzed': 6242.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 5362.0, 'models': 36.0, 'models_level': 11795.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5210.0, 'distributed_sum_lbd': 12772.0, 'integrated': 29718.0, 'lemmas': 42041.0, 'lits_learnt': 3556063.0, 'lemmas_binary': 3742.0, 'lemmas_ternary': 1855.0, 'cpu_time': 7.8125, 'integrated_imps': 9972.0, 'integrated_jumps': 7400.0, 'guiding_paths_lits': 29650.0, 'guiding_paths': 345.0, 'splits': 0.0, 'lemmas_conflict': 6115.0, 'lemmas_loop': 8452.0, 'lemmas_other': 27474.0, 'lits_conflict': 703949.0, 'lits_loop': 70862.0, 'lits_other': 2781252.0, 'jumps': {'jumps': 6242.0, 'jumps_bounded': 1121.0, 'levels': 171100.0, 'levels_bounded': 160644.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-40] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.231321s.

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030014s with result Unsatisfiable.

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2613354000000001, Incremental time limit = None
Running cumulative time = 8.793865899999997, Cumulative time limit = 3600
Used memory = (RSS = 380.363281Mb, VMS = 380.882812Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-40] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=27, start_step=26, end_step=27, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=6.834622999999998, solving_time=1.9592428999999978, total_time=8.793865899999997, memory=Memory(rss=380.36328125, vms=380.8828125), step_range=range(0, 28), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23132130000000117, solving_time=0.030014099999998933, total_time=0.2613354000000001, memory=Memory(rss=380.36328125, vms=380.8828125), step_range=range(27, 28), clingo_stats={'problem': {'lp': {'atoms': 107270.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 330026.0, 'bodies_tr': 330026.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5487.0, 'count_bodies_tr': 5487.0, 'sccs': 620.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 13174.0, 'rules': 465116.0, 'rules_normal': 459125.0, 'rules_choice': 5613.0, 'rules_minimize': 54.0, 'rules_acyc': 0.0, 'rules_heuristic': 324.0, 'rules_tr': 465034.0, 'rules_tr_normal': 459125.0, 'rules_tr_choice': 5613.0, 'rules_tr_minimize': 54.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 242.0, 'eqs': 243925.0, 'eqs_atom': 51288.0, 'eqs_body': 7244.0, 'eqs_other': 185393.0}, 'lpStep': {'atoms': 3256.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11217.0, 'bodies_tr': 11217.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 312.0, 'rules': 16638.0, 'rules_normal': 16429.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16632.0, 'rules_tr_normal': 16429.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 11456.0, 'eqs_atom': 1690.0, 'eqs_body': 376.0, 'eqs_other': 9390.0}, 'generator': {'vars': 57329.0, 'vars_eliminated': 0.0, 'vars_frozen': 35050.0, 'constraints': 1181.0, 'constraints_binary': 46734.0, 'constraints_ternary': 5841.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 296.0, 'conflicts': 74.0, 'conflicts_analyzed': 66.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 21.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 78.0, 'distributed_sum_lbd': 182.0, 'integrated': 444.0, 'lemmas': 523.0, 'lits_learnt': 7149.0, 'lemmas_binary': 49.0, 'lemmas_ternary': 57.0, 'cpu_time': 0.0, 'integrated_imps': 114.0, 'integrated_jumps': 177.0, 'guiding_paths_lits': 2443.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 66.0, 'lemmas_loop': 115.0, 'lemmas_other': 342.0, 'lits_conflict': 1191.0, 'lits_loop': 686.0, 'lits_other': 5272.0, 'jumps': {'jumps': 66.0, 'jumps_bounded': 14.0, 'levels': 4911.0, 'levels_bounded': 4795.0, 'max': 351.0, 'max_executed': 351.0, 'max_bounded': 350.0}}}}, 'summary': {'call': 27.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [26.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.26535797119140625, 'cpu': 0.265625, 'solve': 0.005985260009765625, 'unsat': 0.005985260009765625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 9.038379669189453, 'cpu': 15.34375, 'solve': 1.5190982818603516, 'unsat': 0.539031982421875, 'sat': 0.42673301696777344}, 'models': {'enumerated': 36.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 35584.0, 'conflicts': 6590.0, 'conflicts_analyzed': 6308.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 5383.0, 'models': 36.0, 'models_level': 11795.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5288.0, 'distributed_sum_lbd': 12954.0, 'integrated': 30162.0, 'lemmas': 42564.0, 'lits_learnt': 3563212.0, 'lemmas_binary': 3791.0, 'lemmas_ternary': 1912.0, 'cpu_time': 7.8125, 'integrated_imps': 10086.0, 'integrated_jumps': 7577.0, 'guiding_paths_lits': 32093.0, 'guiding_paths': 356.0, 'splits': 0.0, 'lemmas_conflict': 6181.0, 'lemmas_loop': 8567.0, 'lemmas_other': 27816.0, 'lits_conflict': 705140.0, 'lits_loop': 71548.0, 'lits_other': 2786524.0, 'jumps': {'jumps': 6308.0, 'jumps_bounded': 1135.0, 'levels': 176011.0, 'levels_bounded': 165439.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-40] DEBUG :: ASH Planner Main #1 >> Reaction at search length 27:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.223761s.

[13-11-2021_23-27-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.178525s with result Satisfiable.

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.402285899999999, Incremental time limit = None
Running cumulative time = 9.196151799999996, Cumulative time limit = 3600
Used memory = (RSS = 384.871094Mb, VMS = 384.496094Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 38
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 7.058384s, Solving = 2.137767s, Total = 9.196152s, Memory = (RSS = 384.871094Mb, VMS = 384.496094Mb)), Calls = 28
Final Model :: Total atoms = 17673, Cost = (31, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-41] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=28, start_step=27, end_step=28, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=7.0583842999999975, solving_time=2.137767499999997, total_time=9.196151799999996, memory=Memory(rss=384.87109375, vms=384.49609375), step_range=range(0, 29), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2237612999999996, solving_time=0.17852459999999937, total_time=0.402285899999999, memory=Memory(rss=384.87109375, vms=384.49609375), step_range=range(28, 29), clingo_stats={'problem': {'lp': {'atoms': 110592.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 341352.0, 'bodies_tr': 341352.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5688.0, 'count_bodies_tr': 5688.0, 'sccs': 643.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 13486.0, 'rules': 482002.0, 'rules_normal': 475802.0, 'rules_choice': 5808.0, 'rules_minimize': 56.0, 'rules_acyc': 0.0, 'rules_heuristic': 336.0, 'rules_tr': 481914.0, 'rules_tr_normal': 475802.0, 'rules_tr_choice': 5808.0, 'rules_tr_minimize': 56.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 248.0, 'eqs': 255987.0, 'eqs_atom': 52989.0, 'eqs_body': 7628.0, 'eqs_other': 195370.0}, 'lpStep': {'atoms': 3322.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11326.0, 'bodies_tr': 11326.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 312.0, 'rules': 16886.0, 'rules_normal': 16677.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16880.0, 'rules_tr_normal': 16677.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 12062.0, 'eqs_atom': 1701.0, 'eqs_body': 384.0, 'eqs_other': 9977.0}, 'generator': {'vars': 58796.0, 'vars_eliminated': 0.0, 'vars_frozen': 35984.0, 'constraints': 1408.0, 'constraints_binary': 53405.0, 'constraints_ternary': 7219.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 2047.0, 'conflicts': 247.0, 'conflicts_analyzed': 236.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 54.0, 'models': 2.0, 'models_level': 1147.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 208.0, 'distributed_sum_lbd': 409.0, 'integrated': 1266.0, 'lemmas': 1616.0, 'lits_learnt': 22035.0, 'lemmas_binary': 99.0, 'lemmas_ternary': 66.0, 'cpu_time': 0.328125, 'integrated_imps': 633.0, 'integrated_jumps': 154.0, 'guiding_paths_lits': 2944.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 227.0, 'lemmas_loop': 166.0, 'lemmas_other': 1223.0, 'lits_conflict': 4782.0, 'lits_loop': 1371.0, 'lits_other': 15882.0, 'jumps': {'jumps': 236.0, 'jumps_bounded': 32.0, 'levels': 9341.0, 'levels_bounded': 8925.0, 'max': 370.0, 'max_executed': 370.0, 'max_bounded': 369.0}}}}, 'summary': {'call': 28.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [31.0, 0.0], 'lower': [31.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.4063129425048828, 'cpu': 0.578125, 'solve': 0.15339088439941406, 'unsat': 0.016927719116210938, 'sat': 0.0049896240234375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 9.444692611694336, 'cpu': 15.921875, 'solve': 1.6724891662597656, 'unsat': 0.5559597015380859, 'sat': 0.43172264099121094}, 'models': {'enumerated': 38.0, 'optimal': 12.0}, 'solving': {'solvers': {'choices': 37631.0, 'conflicts': 6837.0, 'conflicts_analyzed': 6544.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 5437.0, 'models': 38.0, 'models_level': 12942.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5496.0, 'distributed_sum_lbd': 13363.0, 'integrated': 31428.0, 'lemmas': 44180.0, 'lits_learnt': 3585247.0, 'lemmas_binary': 3890.0, 'lemmas_ternary': 1978.0, 'cpu_time': 8.140625, 'integrated_imps': 10719.0, 'integrated_jumps': 7731.0, 'guiding_paths_lits': 35037.0, 'guiding_paths': 371.0, 'splits': 0.0, 'lemmas_conflict': 6408.0, 'lemmas_loop': 8733.0, 'lemmas_other': 29039.0, 'lits_conflict': 709922.0, 'lits_loop': 72919.0, 'lits_other': 2802406.0, 'jumps': {'jumps': 6544.0, 'jumps_bounded': 1167.0, 'levels': 185352.0, 'levels_bounded': 174364.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-41] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28}

[13-11-2021_23-27-41] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 4 ( 50.00% solved)

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 28)', truth=True, inc_range=None)

[13-11-2021_23-27-41] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 28]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 13)

[13-11-2021_23-27-41] DEBUG :: ASH Planner Main #1 >> Reaction at search length 28:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.277033s.

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 29: original = External(symbol='current_last_sgoals(13, 28)', truth=True, inc_range=None), conversion = current_last_sgoals(13,28).

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.064505s with result Satisfiable.

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.341538400000001, Incremental time limit = None
Running cumulative time = 9.537690199999997, Cumulative time limit = 3600
Used memory = (RSS = 393.437500Mb, VMS = 392.472656Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 40
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 7.335418s, Solving = 2.202273s, Total = 9.537690s, Memory = (RSS = 393.437500Mb, VMS = 392.472656Mb)), Calls = 29
Final Model :: Total atoms = 18057, Cost = (32, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-41] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=29, start_step=28, end_step=29, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=7.335417599999997, solving_time=2.202272599999999, total_time=9.537690199999997, memory=Memory(rss=393.4375, vms=392.47265625), step_range=range(0, 30), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27703329999999937, solving_time=0.06450510000000165, total_time=0.341538400000001, memory=Memory(rss=393.4375, vms=392.47265625), step_range=range(29, 30), clingo_stats={'problem': {'lp': {'atoms': 113932.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 352658.0, 'bodies_tr': 352658.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5889.0, 'count_bodies_tr': 5889.0, 'sccs': 666.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 13798.0, 'rules': 499005.0, 'rules_normal': 492596.0, 'rules_choice': 6003.0, 'rules_minimize': 58.0, 'rules_acyc': 0.0, 'rules_heuristic': 348.0, 'rules_tr': 498911.0, 'rules_tr_normal': 492596.0, 'rules_tr_choice': 6003.0, 'rules_tr_minimize': 58.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 254.0, 'eqs': 268155.0, 'eqs_atom': 54704.0, 'eqs_body': 8019.0, 'eqs_other': 205432.0}, 'lpStep': {'atoms': 3340.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11306.0, 'bodies_tr': 11306.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 312.0, 'rules': 17003.0, 'rules_normal': 16794.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16997.0, 'rules_tr_normal': 16794.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 12168.0, 'eqs_atom': 1715.0, 'eqs_body': 391.0, 'eqs_other': 10062.0}, 'generator': {'vars': 60245.0, 'vars_eliminated': 0.0, 'vars_frozen': 36914.0, 'constraints': 1596.0, 'constraints_binary': 58005.0, 'constraints_ternary': 7702.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 1712.0, 'conflicts': 42.0, 'conflicts_analyzed': 36.0, 'restarts': 0.0, 'restarts_last': 10.0, 'extra': {'domain_choices': 46.0, 'models': 2.0, 'models_level': 1209.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 27.0, 'distributed_sum_lbd': 53.0, 'integrated': 152.0, 'lemmas': 237.0, 'lits_learnt': 2584.0, 'lemmas_binary': 22.0, 'lemmas_ternary': 16.0, 'cpu_time': 0.1875, 'integrated_imps': 86.0, 'integrated_jumps': 10.0, 'guiding_paths_lits': 2709.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 23.0, 'lemmas_loop': 80.0, 'lemmas_other': 134.0, 'lits_conflict': 280.0, 'lits_loop': 659.0, 'lits_other': 1645.0, 'jumps': {'jumps': 36.0, 'jumps_bounded': 14.0, 'levels': 1619.0, 'levels_bounded': 1576.0, 'max': 389.0, 'max_executed': 389.0, 'max_bounded': 388.0}}}}, 'summary': {'call': 29.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [32.0, 0.0], 'lower': [32.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.3465118408203125, 'cpu': 0.5, 'solve': 0.036411285400390625, 'unsat': 0.015956878662109375, 'sat': 0.005496978759765625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 9.791204452514648, 'cpu': 16.421875, 'solve': 1.7089004516601562, 'unsat': 0.5719165802001953, 'sat': 0.43721961975097656}, 'models': {'enumerated': 40.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 39343.0, 'conflicts': 6879.0, 'conflicts_analyzed': 6580.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 5483.0, 'models': 40.0, 'models_level': 14151.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5523.0, 'distributed_sum_lbd': 13416.0, 'integrated': 31580.0, 'lemmas': 44417.0, 'lits_learnt': 3587831.0, 'lemmas_binary': 3912.0, 'lemmas_ternary': 1994.0, 'cpu_time': 8.328125, 'integrated_imps': 10805.0, 'integrated_jumps': 7741.0, 'guiding_paths_lits': 37746.0, 'guiding_paths': 384.0, 'splits': 0.0, 'lemmas_conflict': 6431.0, 'lemmas_loop': 8813.0, 'lemmas_other': 29173.0, 'lits_conflict': 710202.0, 'lits_loop': 73578.0, 'lits_other': 2804051.0, 'jumps': {'jumps': 6580.0, 'jumps_bounded': 1181.0, 'levels': 186971.0, 'levels_bounded': 175940.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-41] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29}

[13-11-2021_23-27-41] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 5 ( 62.50% solved)

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 29)', truth=True, inc_range=None)

[13-11-2021_23-27-41] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 14, step = 29]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 14)
sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 14)

[13-11-2021_23-27-41] DEBUG :: ASH Planner Main #1 >> Reaction at search length 29:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [30]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.227125s.

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 30: original = External(symbol='current_last_sgoals(14, 29)', truth=True, inc_range=None), conversion = current_last_sgoals(14,29).

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029483s with result Unsatisfiable.

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [30]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.25660799999999995, Incremental time limit = None
Running cumulative time = 9.794298199999997, Cumulative time limit = 3600
Used memory = (RSS = 395.531250Mb, VMS = 393.246094Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-41] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=30, start_step=29, end_step=30, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=7.562542999999995, solving_time=2.2317552000000003, total_time=9.794298199999997, memory=Memory(rss=395.53125, vms=393.24609375), step_range=range(0, 31), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.22712539999999848, solving_time=0.02948260000000147, total_time=0.25660799999999995, memory=Memory(rss=395.53125, vms=393.24609375), step_range=range(30, 31), clingo_stats={'problem': {'lp': {'atoms': 117279.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 364580.0, 'bodies_tr': 364580.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6090.0, 'count_bodies_tr': 6090.0, 'sccs': 691.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 14284.0, 'rules': 516760.0, 'rules_normal': 510142.0, 'rules_choice': 6198.0, 'rules_minimize': 60.0, 'rules_acyc': 0.0, 'rules_heuristic': 360.0, 'rules_tr': 516664.0, 'rules_tr_normal': 510142.0, 'rules_tr_choice': 6198.0, 'rules_tr_minimize': 60.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 264.0, 'eqs': 277512.0, 'eqs_atom': 56285.0, 'eqs_body': 8150.0, 'eqs_other': 213077.0}, 'lpStep': {'atoms': 3347.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11922.0, 'bodies_tr': 11922.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 17755.0, 'rules_normal': 17546.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17753.0, 'rules_tr_normal': 17546.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9357.0, 'eqs_atom': 1581.0, 'eqs_body': 131.0, 'eqs_other': 7645.0}, 'generator': {'vars': 62379.0, 'vars_eliminated': 0.0, 'vars_frozen': 38249.0, 'constraints': 2097.0, 'constraints_binary': 70490.0, 'constraints_ternary': 10364.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2842.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 30.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.261810302734375, 'cpu': 0.265625, 'solve': 0.006984710693359375, 'unsat': 0.006984710693359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 10.053014755249023, 'cpu': 16.6875, 'solve': 1.7158851623535156, 'unsat': 0.5789012908935547, 'sat': 0.43721961975097656}, 'models': {'enumerated': 40.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 39343.0, 'conflicts': 6887.0, 'conflicts_analyzed': 6580.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 5483.0, 'models': 40.0, 'models_level': 14151.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5523.0, 'distributed_sum_lbd': 13416.0, 'integrated': 31580.0, 'lemmas': 44417.0, 'lits_learnt': 3587831.0, 'lemmas_binary': 3912.0, 'lemmas_ternary': 1994.0, 'cpu_time': 8.328125, 'integrated_imps': 10805.0, 'integrated_jumps': 7741.0, 'guiding_paths_lits': 40588.0, 'guiding_paths': 391.0, 'splits': 0.0, 'lemmas_conflict': 6431.0, 'lemmas_loop': 8813.0, 'lemmas_other': 29173.0, 'lits_conflict': 710202.0, 'lits_loop': 73578.0, 'lits_other': 2804051.0, 'jumps': {'jumps': 6580.0, 'jumps_bounded': 1181.0, 'levels': 186971.0, 'levels_bounded': 175940.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-41] DEBUG :: ASH Planner Main #1 >> Reaction at search length 30:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [31]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(0)]), ('plan_module', [Number(31), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.229255s.

[13-11-2021_23-27-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.076908s with result Satisfiable.

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [31]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.30616290000000035, Incremental time limit = None
Running cumulative time = 10.100461099999997, Cumulative time limit = 3600
Used memory = (RSS = 403.421875Mb, VMS = 400.292969Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 42
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 7.791798s, Solving = 2.308663s, Total = 10.100461s, Memory = (RSS = 403.421875Mb, VMS = 400.292969Mb)), Calls = 31
Final Model :: Total atoms = 18825, Cost = (35, 0), Optimality proven = False, Number = 2, Thread ID = 4, Model type = ModelType.StableModel

[13-11-2021_23-27-42] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=31, start_step=30, end_step=31, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=7.791797599999996, solving_time=2.3086634999999998, total_time=10.100461099999997, memory=Memory(rss=403.421875, vms=400.29296875), step_range=range(0, 32), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.22925460000000086, solving_time=0.07690829999999949, total_time=0.30616290000000035, memory=Memory(rss=403.421875, vms=400.29296875), step_range=range(31, 32), clingo_stats={'problem': {'lp': {'atoms': 120885.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 377053.0, 'bodies_tr': 377053.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6291.0, 'count_bodies_tr': 6291.0, 'sccs': 716.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 14774.0, 'rules': 535380.0, 'rules_normal': 528553.0, 'rules_choice': 6393.0, 'rules_minimize': 62.0, 'rules_acyc': 0.0, 'rules_heuristic': 372.0, 'rules_tr': 535282.0, 'rules_tr_normal': 528553.0, 'rules_tr_choice': 6393.0, 'rules_tr_minimize': 62.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 274.0, 'eqs': 291953.0, 'eqs_atom': 58094.0, 'eqs_body': 8334.0, 'eqs_other': 225525.0}, 'lpStep': {'atoms': 3606.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12473.0, 'bodies_tr': 12473.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 18620.0, 'rules_normal': 18411.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 18618.0, 'rules_tr_normal': 18411.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 14441.0, 'eqs_atom': 1809.0, 'eqs_body': 184.0, 'eqs_other': 12448.0}, 'generator': {'vars': 64664.0, 'vars_eliminated': 0.0, 'vars_frozen': 39639.0, 'constraints': 2622.0, 'constraints_binary': 84042.0, 'constraints_ternary': 13513.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 2351.0, 'conflicts': 142.0, 'conflicts_analyzed': 133.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 175.0, 'models': 2.0, 'models_level': 1287.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 120.0, 'distributed_sum_lbd': 293.0, 'integrated': 675.0, 'lemmas': 976.0, 'lits_learnt': 18090.0, 'lemmas_binary': 21.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.25, 'integrated_imps': 354.0, 'integrated_jumps': 391.0, 'guiding_paths_lits': 2975.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 131.0, 'lemmas_loop': 230.0, 'lemmas_other': 615.0, 'lits_conflict': 3117.0, 'lits_loop': 1539.0, 'lits_other': 13434.0, 'jumps': {'jumps': 133.0, 'jumps_bounded': 42.0, 'levels': 4417.0, 'levels_bounded': 4145.0, 'max': 468.0, 'max_executed': 468.0, 'max_bounded': 467.0}}}}, 'summary': {'call': 31.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [35.0, 0.0], 'lower': [35.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.31119346618652344, 'cpu': 0.5, 'solve': 0.0478973388671875, 'unsat': 0.018976211547851562, 'sat': 0.01197052001953125}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 10.364208221435547, 'cpu': 17.1875, 'solve': 1.7637825012207031, 'unsat': 0.5978775024414062, 'sat': 0.4491901397705078}, 'models': {'enumerated': 42.0, 'optimal': 14.0}, 'solving': {'solvers': {'choices': 41694.0, 'conflicts': 7029.0, 'conflicts_analyzed': 6713.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 5658.0, 'models': 42.0, 'models_level': 15438.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5643.0, 'distributed_sum_lbd': 13709.0, 'integrated': 32255.0, 'lemmas': 45393.0, 'lits_learnt': 3605921.0, 'lemmas_binary': 3933.0, 'lemmas_ternary': 2015.0, 'cpu_time': 8.578125, 'integrated_imps': 11159.0, 'integrated_jumps': 8132.0, 'guiding_paths_lits': 43563.0, 'guiding_paths': 406.0, 'splits': 0.0, 'lemmas_conflict': 6562.0, 'lemmas_loop': 9043.0, 'lemmas_other': 29788.0, 'lits_conflict': 713319.0, 'lits_loop': 75117.0, 'lits_other': 2817485.0, 'jumps': {'jumps': 6713.0, 'jumps_bounded': 1223.0, 'levels': 191388.0, 'levels_bounded': 180085.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-42] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31}

[13-11-2021_23-27-42] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 6 ( 75.00% solved)

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(15, 31)', truth=True, inc_range=None)

[13-11-2021_23-27-42] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 15, step = 31]:
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 15)

[13-11-2021_23-27-42] DEBUG :: ASH Planner Main #1 >> Reaction at search length 31:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [32]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(32), Number(0)]), ('plan_module', [Number(32), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.239840s.

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 32: original = External(symbol='current_last_sgoals(15, 31)', truth=True, inc_range=None), conversion = current_last_sgoals(15,31).

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.252808s with result Satisfiable.

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [32]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4926482000000014, Incremental time limit = None
Running cumulative time = 10.593109299999997, Cumulative time limit = 3600
Used memory = (RSS = 415.003906Mb, VMS = 410.554688Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 46
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.031638s, Solving = 2.561471s, Total = 10.593109s, Memory = (RSS = 415.003906Mb, VMS = 410.554688Mb)), Calls = 32
Final Model :: Total atoms = 19210, Cost = (36, 0), Optimality proven = False, Number = 4, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-27-42] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=32, start_step=31, end_step=32, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=8.031637899999996, solving_time=2.5614714000000003, total_time=10.593109299999997, memory=Memory(rss=415.00390625, vms=410.5546875), step_range=range(0, 33), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2398403000000009, solving_time=0.25280790000000053, total_time=0.4926482000000014, memory=Memory(rss=415.00390625, vms=410.5546875), step_range=range(32, 33), clingo_stats={'problem': {'lp': {'atoms': 124519.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 389879.0, 'bodies_tr': 389879.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6492.0, 'count_bodies_tr': 6492.0, 'sccs': 741.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 15368.0, 'rules': 554490.0, 'rules_normal': 547454.0, 'rules_choice': 6588.0, 'rules_minimize': 64.0, 'rules_acyc': 0.0, 'rules_heuristic': 384.0, 'rules_tr': 554392.0, 'rules_tr_normal': 547454.0, 'rules_tr_choice': 6588.0, 'rules_tr_minimize': 64.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 286.0, 'eqs': 300364.0, 'eqs_atom': 59873.0, 'eqs_body': 8404.0, 'eqs_other': 232087.0}, 'lpStep': {'atoms': 3634.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12826.0, 'bodies_tr': 12826.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19110.0, 'rules_normal': 18901.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19110.0, 'rules_tr_normal': 18901.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8411.0, 'eqs_atom': 1779.0, 'eqs_body': 70.0, 'eqs_other': 6562.0}, 'generator': {'vars': 67295.0, 'vars_eliminated': 0.0, 'vars_frozen': 41240.0, 'constraints': 3248.0, 'constraints_binary': 99581.0, 'constraints_ternary': 17217.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 4153.0, 'conflicts': 36.0, 'conflicts_analyzed': 26.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 55.0, 'models': 4.0, 'models_level': 2700.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 16.0, 'distributed_sum_lbd': 35.0, 'integrated': 44.0, 'lemmas': 169.0, 'lits_learnt': 4721.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.265625, 'integrated_imps': 6.0, 'integrated_jumps': 58.0, 'guiding_paths_lits': 3108.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 26.0, 'lemmas_loop': 99.0, 'lemmas_other': 44.0, 'lits_conflict': 2278.0, 'lits_loop': 897.0, 'lits_other': 1546.0, 'jumps': {'jumps': 26.0, 'jumps_bounded': 7.0, 'levels': 178.0, 'levels_bounded': 43.0, 'max': 62.0, 'max_executed': 62.0, 'max_bounded': 16.0}}}}, 'summary': {'call': 32.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [36.0, 0.0], 'lower': [36.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.4976692199707031, 'cpu': 0.53125, 'solve': 0.2234020233154297, 'unsat': 0.15854644775390625, 'sat': 0.0069828033447265625}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 10.86187744140625, 'cpu': 17.71875, 'solve': 1.9871845245361328, 'unsat': 0.7564239501953125, 'sat': 0.4561729431152344}, 'models': {'enumerated': 46.0, 'optimal': 15.0}, 'solving': {'solvers': {'choices': 45847.0, 'conflicts': 7065.0, 'conflicts_analyzed': 6739.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 5713.0, 'models': 46.0, 'models_level': 18138.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5659.0, 'distributed_sum_lbd': 13744.0, 'integrated': 32299.0, 'lemmas': 45562.0, 'lits_learnt': 3610642.0, 'lemmas_binary': 3933.0, 'lemmas_ternary': 2015.0, 'cpu_time': 8.84375, 'integrated_imps': 11165.0, 'integrated_jumps': 8190.0, 'guiding_paths_lits': 46671.0, 'guiding_paths': 422.0, 'splits': 0.0, 'lemmas_conflict': 6588.0, 'lemmas_loop': 9142.0, 'lemmas_other': 29832.0, 'lits_conflict': 715597.0, 'lits_loop': 76014.0, 'lits_other': 2819031.0, 'jumps': {'jumps': 6739.0, 'jumps_bounded': 1230.0, 'levels': 191566.0, 'levels_bounded': 180128.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-42] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31, 15: 32}

[13-11-2021_23-27-42] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 16 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 7 ( 87.50% solved)

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(16, 32)', truth=True, inc_range=None)

[13-11-2021_23-27-42] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 16, step = 32]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 16)
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 16)

[13-11-2021_23-27-42] DEBUG :: ASH Planner Main #1 >> Reaction at search length 32:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [33]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(33), Number(0)]), ('plan_module', [Number(33), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.244780s.

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 33: original = External(symbol='current_last_sgoals(16, 32)', truth=True, inc_range=None), conversion = current_last_sgoals(16,32).

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034794s with result Unsatisfiable.

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [33]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.27957440000000133, Incremental time limit = None
Running cumulative time = 10.872683699999998, Cumulative time limit = 3600
Used memory = (RSS = 418.855469Mb, VMS = 413.242188Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-42] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=33, start_step=32, end_step=33, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=8.276418299999996, solving_time=2.596265400000002, total_time=10.872683699999998, memory=Memory(rss=418.85546875, vms=413.2421875), step_range=range(0, 34), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2447803999999998, solving_time=0.034794000000001546, total_time=0.27957440000000133, memory=Memory(rss=418.85546875, vms=413.2421875), step_range=range(33, 34), clingo_stats={'problem': {'lp': {'atoms': 128287.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 402962.0, 'bodies_tr': 402962.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6693.0, 'count_bodies_tr': 6693.0, 'sccs': 766.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 15962.0, 'rules': 574080.0, 'rules_normal': 566835.0, 'rules_choice': 6783.0, 'rules_minimize': 66.0, 'rules_acyc': 0.0, 'rules_heuristic': 396.0, 'rules_tr': 573982.0, 'rules_tr_normal': 566835.0, 'rules_tr_choice': 6783.0, 'rules_tr_minimize': 66.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 298.0, 'eqs': 309160.0, 'eqs_atom': 61768.0, 'eqs_body': 8474.0, 'eqs_other': 238918.0}, 'lpStep': {'atoms': 3768.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13083.0, 'bodies_tr': 13083.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19590.0, 'rules_normal': 19381.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19590.0, 'rules_tr_normal': 19381.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8796.0, 'eqs_atom': 1895.0, 'eqs_body': 70.0, 'eqs_other': 6831.0}, 'generator': {'vars': 69960.0, 'vars_eliminated': 0.0, 'vars_frozen': 42847.0, 'constraints': 3895.0, 'constraints_binary': 115528.0, 'constraints_ternary': 21222.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 50.0, 'conflicts': 36.0, 'conflicts_analyzed': 27.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 49.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 27.0, 'distributed_sum_lbd': 55.0, 'integrated': 126.0, 'lemmas': 269.0, 'lits_learnt': 3639.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 40.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 3241.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 27.0, 'lemmas_loop': 196.0, 'lemmas_other': 46.0, 'lits_conflict': 645.0, 'lits_loop': 1757.0, 'lits_other': 1237.0, 'jumps': {'jumps': 27.0, 'jumps_bounded': 5.0, 'levels': 45.0, 'levels_bounded': 9.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 33.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [28.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.2842063903808594, 'cpu': 0.390625, 'solve': 0.008878707885742188, 'unsat': 0.008878707885742188, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 11.14608383178711, 'cpu': 18.109375, 'solve': 1.996063232421875, 'unsat': 0.7653026580810547, 'sat': 0.4561729431152344}, 'models': {'enumerated': 46.0, 'optimal': 15.0}, 'solving': {'solvers': {'choices': 45897.0, 'conflicts': 7101.0, 'conflicts_analyzed': 6766.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 5762.0, 'models': 46.0, 'models_level': 18138.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5686.0, 'distributed_sum_lbd': 13799.0, 'integrated': 32425.0, 'lemmas': 45831.0, 'lits_learnt': 3614281.0, 'lemmas_binary': 3940.0, 'lemmas_ternary': 2015.0, 'cpu_time': 8.96875, 'integrated_imps': 11205.0, 'integrated_jumps': 8197.0, 'guiding_paths_lits': 49912.0, 'guiding_paths': 435.0, 'splits': 0.0, 'lemmas_conflict': 6615.0, 'lemmas_loop': 9338.0, 'lemmas_other': 29878.0, 'lits_conflict': 716242.0, 'lits_loop': 77771.0, 'lits_other': 2820268.0, 'jumps': {'jumps': 6766.0, 'jumps_bounded': 1235.0, 'levels': 191611.0, 'levels_bounded': 180137.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-42] DEBUG :: ASH Planner Main #1 >> Reaction at search length 33:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [34]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(34), Number(0)]), ('plan_module', [Number(34), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.259712s.

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.147569s with result Satisfiable.

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [34]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4072812999999975, Incremental time limit = None
Running cumulative time = 11.279964999999995, Cumulative time limit = 3600
Used memory = (RSS = 440.753906Mb, VMS = 452.945312Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 50
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.536130s, Solving = 2.743835s, Total = 11.279965s, Memory = (RSS = 440.753906Mb, VMS = 452.945312Mb)), Calls = 34
Final Model :: Total atoms = 19984, Cost = (39, 0), Optimality proven = False, Number = 4, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-27-43] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=34, start_step=33, end_step=34, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=8.536130499999995, solving_time=2.7438345, total_time=11.279964999999995, memory=Memory(rss=440.75390625, vms=452.9453125), step_range=range(0, 35), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.25971219999999917, solving_time=0.14756909999999834, total_time=0.4072812999999975, memory=Memory(rss=440.75390625, vms=452.9453125), step_range=range(34, 35), clingo_stats={'problem': {'lp': {'atoms': 132069.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 416077.0, 'bodies_tr': 416077.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6894.0, 'count_bodies_tr': 6894.0, 'sccs': 791.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 16556.0, 'rules': 593838.0, 'rules_normal': 586384.0, 'rules_choice': 6978.0, 'rules_minimize': 68.0, 'rules_acyc': 0.0, 'rules_heuristic': 408.0, 'rules_tr': 593740.0, 'rules_tr_normal': 586384.0, 'rules_tr_choice': 6978.0, 'rules_tr_minimize': 68.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 310.0, 'eqs': 318034.0, 'eqs_atom': 63677.0, 'eqs_body': 8544.0, 'eqs_other': 245813.0}, 'lpStep': {'atoms': 3782.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13115.0, 'bodies_tr': 13115.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19758.0, 'rules_normal': 19549.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19758.0, 'rules_tr_normal': 19549.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8874.0, 'eqs_atom': 1909.0, 'eqs_body': 70.0, 'eqs_other': 6895.0}, 'generator': {'vars': 72625.0, 'vars_eliminated': 0.0, 'vars_frozen': 44454.0, 'constraints': 4542.0, 'constraints_binary': 131629.0, 'constraints_ternary': 25217.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 6390.0, 'conflicts': 335.0, 'conflicts_analyzed': 319.0, 'restarts': 0.0, 'restarts_last': 20.0, 'extra': {'domain_choices': 570.0, 'models': 4.0, 'models_level': 2928.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 217.0, 'distributed_sum_lbd': 578.0, 'integrated': 1260.0, 'lemmas': 2199.0, 'lits_learnt': 155448.0, 'lemmas_binary': 206.0, 'lemmas_ternary': 132.0, 'cpu_time': 0.515625, 'integrated_imps': 195.0, 'integrated_jumps': 1350.0, 'guiding_paths_lits': 3374.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 318.0, 'lemmas_loop': 661.0, 'lemmas_other': 1220.0, 'lits_conflict': 40742.0, 'lits_loop': 5710.0, 'lits_other': 108996.0, 'jumps': {'jumps': 319.0, 'jumps_bounded': 22.0, 'levels': 6361.0, 'levels_bounded': 5629.0, 'max': 1032.0, 'max_executed': 1032.0, 'max_bounded': 1031.0}}}}, 'summary': {'call': 34.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [39.0, 0.0], 'lower': [39.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.4123859405517578, 'cpu': 0.8125, 'solve': 0.12164306640625, 'unsat': 0.04288482666015625, 'sat': 0.01593017578125}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 11.558469772338867, 'cpu': 18.921875, 'solve': 2.117706298828125, 'unsat': 0.8081874847412109, 'sat': 0.4721031188964844}, 'models': {'enumerated': 50.0, 'optimal': 16.0}, 'solving': {'solvers': {'choices': 52287.0, 'conflicts': 7436.0, 'conflicts_analyzed': 7085.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 6332.0, 'models': 50.0, 'models_level': 21066.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5903.0, 'distributed_sum_lbd': 14377.0, 'integrated': 33685.0, 'lemmas': 48030.0, 'lits_learnt': 3769729.0, 'lemmas_binary': 4146.0, 'lemmas_ternary': 2147.0, 'cpu_time': 9.484375, 'integrated_imps': 11400.0, 'integrated_jumps': 9547.0, 'guiding_paths_lits': 53286.0, 'guiding_paths': 453.0, 'splits': 0.0, 'lemmas_conflict': 6933.0, 'lemmas_loop': 9999.0, 'lemmas_other': 31098.0, 'lits_conflict': 756984.0, 'lits_loop': 83481.0, 'lits_other': 2929264.0, 'jumps': {'jumps': 7085.0, 'jumps_bounded': 1257.0, 'levels': 197972.0, 'levels_bounded': 185766.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-43] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31, 15: 32, 16: 34}

[13-11-2021_23-27-43] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 17 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 8 (100.00% solved)

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(17, 34)', truth=True, inc_range=None)

[13-11-2021_23-27-43] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 17, step = 34]:
sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 17)
sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 17)

[13-11-2021_23-27-43] DEBUG :: ASH Planner Main #1 >> Reaction at search length 34:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [35]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(0)]), ('plan_module', [Number(35), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.274845s.

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 35: original = External(symbol='current_last_sgoals(17, 34)', truth=True, inc_range=None), conversion = current_last_sgoals(17,34).

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.112882s with result Satisfiable.

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [35]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3877272000000005, Incremental time limit = None
Running cumulative time = 11.667692199999996, Cumulative time limit = 3600
Used memory = (RSS = 454.980469Mb, VMS = 465.398438Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 53
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.810975s, Solving = 2.856717s, Total = 11.667692s, Memory = (RSS = 454.980469Mb, VMS = 465.398438Mb)), Calls = 35
Final Model :: Total atoms = 20375, Cost = (41, 0), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-27-43] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=35, start_step=34, end_step=35, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=8.810975299999996, solving_time=2.8567169000000003, total_time=11.667692199999996, memory=Memory(rss=454.98046875, vms=465.3984375), step_range=range(0, 36), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27484480000000033, solving_time=0.11288240000000016, total_time=0.3877272000000005, memory=Memory(rss=454.98046875, vms=465.3984375), step_range=range(35, 36), clingo_stats={'problem': {'lp': {'atoms': 135865.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 429224.0, 'bodies_tr': 429224.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7095.0, 'count_bodies_tr': 7095.0, 'sccs': 816.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 17150.0, 'rules': 613764.0, 'rules_normal': 606101.0, 'rules_choice': 7173.0, 'rules_minimize': 70.0, 'rules_acyc': 0.0, 'rules_heuristic': 420.0, 'rules_tr': 613666.0, 'rules_tr_normal': 606101.0, 'rules_tr_choice': 7173.0, 'rules_tr_minimize': 70.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 322.0, 'eqs': 326986.0, 'eqs_atom': 65600.0, 'eqs_body': 8614.0, 'eqs_other': 252772.0}, 'lpStep': {'atoms': 3796.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13147.0, 'bodies_tr': 13147.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19926.0, 'rules_normal': 19717.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19926.0, 'rules_tr_normal': 19717.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8952.0, 'eqs_atom': 1923.0, 'eqs_body': 70.0, 'eqs_other': 6959.0}, 'generator': {'vars': 75290.0, 'vars_eliminated': 0.0, 'vars_frozen': 46061.0, 'constraints': 5189.0, 'constraints_binary': 147884.0, 'constraints_ternary': 29212.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 4248.0, 'conflicts': 100.0, 'conflicts_analyzed': 87.0, 'restarts': 0.0, 'restarts_last': 10.0, 'extra': {'domain_choices': 193.0, 'models': 3.0, 'models_level': 2244.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 45.0, 'distributed_sum_lbd': 130.0, 'integrated': 264.0, 'lemmas': 551.0, 'lits_learnt': 65925.0, 'lemmas_binary': 28.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.25, 'integrated_imps': 87.0, 'integrated_jumps': 357.0, 'guiding_paths_lits': 3507.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 87.0, 'lemmas_loop': 206.0, 'lemmas_other': 258.0, 'lits_conflict': 16719.0, 'lits_loop': 1850.0, 'lits_other': 47356.0, 'jumps': {'jumps': 87.0, 'jumps_bounded': 9.0, 'levels': 1093.0, 'levels_bounded': 800.0, 'max': 471.0, 'max_executed': 471.0, 'max_bounded': 468.0}}}}, 'summary': {'call': 35.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [41.0, 0.0], 'lower': [41.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.3939628601074219, 'cpu': 0.5625, 'solve': 0.08876419067382812, 'unsat': 0.019945144653320312, 'sat': 0.014963150024414062}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 11.952432632446289, 'cpu': 19.484375, 'solve': 2.206470489501953, 'unsat': 0.8281326293945312, 'sat': 0.48706626892089844}, 'models': {'enumerated': 53.0, 'optimal': 17.0}, 'solving': {'solvers': {'choices': 56535.0, 'conflicts': 7536.0, 'conflicts_analyzed': 7172.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 6525.0, 'models': 53.0, 'models_level': 23310.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5948.0, 'distributed_sum_lbd': 14507.0, 'integrated': 33949.0, 'lemmas': 48581.0, 'lits_learnt': 3835654.0, 'lemmas_binary': 4174.0, 'lemmas_ternary': 2168.0, 'cpu_time': 9.734375, 'integrated_imps': 11487.0, 'integrated_jumps': 9904.0, 'guiding_paths_lits': 56793.0, 'guiding_paths': 473.0, 'splits': 0.0, 'lemmas_conflict': 7020.0, 'lemmas_loop': 10205.0, 'lemmas_other': 31356.0, 'lits_conflict': 773703.0, 'lits_loop': 85331.0, 'lits_other': 2976620.0, 'jumps': {'jumps': 7172.0, 'jumps_bounded': 1266.0, 'levels': 199065.0, 'levels_bounded': 186566.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-43] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31, 15: 32, 16: 34, 17: 35}

[13-11-2021_23-27-43] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 18 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 9 (112.50% solved)

[13-11-2021_23-27-43] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 17 was achieved successfully.

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.330039s, Solving = 0.012285s, Total = 0.342323s, Memory = (RSS = 209.152344Mb, VMS = 200.636719Mb)
2 : Statistics :: Grounding = 0.148494s, Solving = 0.009500s, Total = 0.157994s, Memory = (RSS = 212.683594Mb, VMS = 204.320312Mb)
3 : Statistics :: Grounding = 0.214504s, Solving = 0.009812s, Total = 0.224316s, Memory = (RSS = 214.164062Mb, VMS = 205.687500Mb)
4 : Statistics :: Grounding = 0.220404s, Solving = 0.008128s, Total = 0.228532s, Memory = (RSS = 215.964844Mb, VMS = 207.398438Mb)
5 : Statistics :: Grounding = 0.265620s, Solving = 0.011737s, Total = 0.277357s, Memory = (RSS = 221.015625Mb, VMS = 212.339844Mb)
6 : Statistics :: Grounding = 0.227756s, Solving = 0.014098s, Total = 0.241854s, Memory = (RSS = 226.097656Mb, VMS = 217.667969Mb)
7 : Statistics :: Grounding = 0.250622s, Solving = 0.027322s, Total = 0.277944s, Memory = (RSS = 232.062500Mb, VMS = 224.382812Mb)
8 : Statistics :: Grounding = 0.234885s, Solving = 0.019379s, Total = 0.254265s, Memory = (RSS = 235.679688Mb, VMS = 227.308594Mb)
9 : Statistics :: Grounding = 0.262118s, Solving = 0.027527s, Total = 0.289645s, Memory = (RSS = 242.960938Mb, VMS = 236.089844Mb)
10 : Statistics :: Grounding = 0.249473s, Solving = 0.029974s, Total = 0.279448s, Memory = (RSS = 246.707031Mb, VMS = 239.019531Mb)
11 : Statistics :: Grounding = 0.265225s, Solving = 0.045070s, Total = 0.310295s, Memory = (RSS = 252.351562Mb, VMS = 244.429688Mb)
12 : Statistics :: Grounding = 0.256257s, Solving = 0.081174s, Total = 0.337431s, Memory = (RSS = 265.171875Mb, VMS = 260.195312Mb)
13 : Statistics :: Grounding = 0.265735s, Solving = 0.158324s, Total = 0.424059s, Memory = (RSS = 270.472656Mb, VMS = 263.996094Mb)
14 : Statistics :: Grounding = 0.332795s, Solving = 0.029703s, Total = 0.362498s, Memory = (RSS = 273.578125Mb, VMS = 266.320312Mb)
15 : Statistics :: Grounding = 0.257947s, Solving = 0.183665s, Total = 0.441612s, Memory = (RSS = 288.308594Mb, VMS = 288.320312Mb)
16 : Statistics :: Grounding = 0.268652s, Solving = 0.086167s, Total = 0.354819s, Memory = (RSS = 296.921875Mb, VMS = 295.464844Mb)
17 : Statistics :: Grounding = 0.266591s, Solving = 0.066746s, Total = 0.333336s, Memory = (RSS = 305.765625Mb, VMS = 303.003906Mb)
18 : Statistics :: Grounding = 0.254563s, Solving = 0.193084s, Total = 0.447647s, Memory = (RSS = 318.281250Mb, VMS = 314.070312Mb)
19 : Statistics :: Grounding = 0.266068s, Solving = 0.171681s, Total = 0.437749s, Memory = (RSS = 330.425781Mb, VMS = 325.500000Mb)
20 : Statistics :: Grounding = 0.261717s, Solving = 0.028983s, Total = 0.290700s, Memory = (RSS = 334.027344Mb, VMS = 327.703125Mb)
21 : Statistics :: Grounding = 0.253094s, Solving = 0.166728s, Total = 0.419823s, Memory = (RSS = 346.914062Mb, VMS = 351.960938Mb)
22 : Statistics :: Grounding = 0.291204s, Solving = 0.341370s, Total = 0.632573s, Memory = (RSS = 354.136719Mb, VMS = 357.792969Mb)
23 : Statistics :: Grounding = 0.285397s, Solving = 0.100111s, Total = 0.385508s, Memory = (RSS = 368.179688Mb, VMS = 370.566406Mb)
24 : Statistics :: Grounding = 0.219505s, Solving = 0.023644s, Total = 0.243148s, Memory = (RSS = 369.480469Mb, VMS = 371.554688Mb)
25 : Statistics :: Grounding = 0.229740s, Solving = 0.056139s, Total = 0.285879s, Memory = (RSS = 374.851562Mb, VMS = 376.257812Mb)
26 : Statistics :: Grounding = 0.224896s, Solving = 0.026877s, Total = 0.251774s, Memory = (RSS = 379.433594Mb, VMS = 380.734375Mb)
27 : Statistics :: Grounding = 0.231321s, Solving = 0.030014s, Total = 0.261335s, Memory = (RSS = 380.363281Mb, VMS = 380.882812Mb)
28 : Statistics :: Grounding = 0.223761s, Solving = 0.178525s, Total = 0.402286s, Memory = (RSS = 384.871094Mb, VMS = 384.496094Mb)
29 : Statistics :: Grounding = 0.277033s, Solving = 0.064505s, Total = 0.341538s, Memory = (RSS = 393.437500Mb, VMS = 392.472656Mb)
30 : Statistics :: Grounding = 0.227125s, Solving = 0.029483s, Total = 0.256608s, Memory = (RSS = 395.531250Mb, VMS = 393.246094Mb)
31 : Statistics :: Grounding = 0.229255s, Solving = 0.076908s, Total = 0.306163s, Memory = (RSS = 403.421875Mb, VMS = 400.292969Mb)
32 : Statistics :: Grounding = 0.239840s, Solving = 0.252808s, Total = 0.492648s, Memory = (RSS = 415.003906Mb, VMS = 410.554688Mb)
33 : Statistics :: Grounding = 0.244780s, Solving = 0.034794s, Total = 0.279574s, Memory = (RSS = 418.855469Mb, VMS = 413.242188Mb)
34 : Statistics :: Grounding = 0.259712s, Solving = 0.147569s, Total = 0.407281s, Memory = (RSS = 440.753906Mb, VMS = 452.945312Mb)
35 : Statistics :: Grounding = 0.274845s, Solving = 0.112882s, Total = 0.387727s, Memory = (RSS = 454.980469Mb, VMS = 465.398438Mb)

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 11.667692s due to: External generator exit.

[13-11-2021_23-27-43] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[13-11-2021_23-27-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[13-11-2021_23-27-44] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-27-44] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 15, 33: 16, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 31, 15: 32, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-27-44] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 17, Last requested goal index = 17 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-27-44] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.810975s, Solving = 2.856717s, Total = 11.667692s, Memory = (RSS = 454.980469Mb, VMS = 465.398438Mb)), Calls = 35
Model :: Total atoms = 20375, Cost = (41, 0), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-27-44] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 35 :: Actions = 44                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 23:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 25:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 30:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 31:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 32:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 33:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 34:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 35:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))

[13-11-2021_23-27-44] INFO :: ASH Planner Main #1 >> Online planning increment 2 finished.

[13-11-2021_23-27-44] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 1 : Total constraining sgoals = 14 : Achieved sgoals = 8 : Unachieved sgoals = 6
Level = 1 : Solved problems = 2 : Total constraining sgoals = 17 : Achieved sgoals = 17 : Unachieved sgoals = 0

[13-11-2021_23-27-44] INFO :: ASH Planner Main #1 >> Current valid planning level range: [2-2]

[13-11-2021_23-27-44] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 3 by method ground-first: [1-2]

[13-11-2021_23-27-44] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning at level 2 for problem 2:
Divided plan : Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.642s (Gro =   1.404s, Sea =   0.237s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 7, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-27-44] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [8-14]

[13-11-2021_23-27-44] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [8-14], problem number = 2, increment number = 3

[13-11-2021_23-27-44] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 8)
	('last_sgoals', 14)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016425336EA0>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-27-44] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 8
last_sgoals = 14
start_step = 17
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 23

[13-11-2021_23-27-44] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [2] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [8-14] : Minimum search length bound = disabled with value = 23

[13-11-2021_23-27-44] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-27-44] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = False, chosen = False

[13-11-2021_23-27-44] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-27-44] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[13-11-2021_23-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'lift(manipulator_arm_1,(block,1))', 'F': 'on((block,1))', 'V': 'nothing', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 13})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 14})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 14})

[13-11-2021_23-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[13-11-2021_23-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 9 rules into program part base:

sub_goal(3, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 9).
sub_goal(3, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 9).
sub_goal(3, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 10).
sub_goal(3, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 10).
sub_goal(3, talos, move(store_room), in(talos), store_room, 11).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 12).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 13).
sub_goal(3, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 14).
sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 14).

[13-11-2021_23-27-44] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[13-11-2021_23-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000016429E03540>

[13-11-2021_23-27-44] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[13-11-2021_23-27-44] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000016429E03540> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(2, talos, move(hallway), 1)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,extended), 2)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,extended), 2)).
fix_action(occurs(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), 3)).
fix_action(occurs(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), 3)).
fix_action(occurs(2, talos, actuate(manipulator_arm_1,puzzle_room_door), 4)).
fix_action(occurs(2, talos, actuate(manipulator_arm_2,store_room_door), 4)).
fix_action(occurs(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), 5)).
fix_action(occurs(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), 5)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,retracted), 6)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,retracted), 6)).
fix_action(occurs(2, talos, move(store_room), 7)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,extended), 8)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,extended), 8)).
fix_action(occurs(2, talos, grasp(manipulator_arm_1,(block,6)), 9)).
fix_action(occurs(2, talos, grasp(manipulator_arm_2,(block,5)), 9)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,retracted), 10)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,retracted), 10)).
fix_action(occurs(2, talos, move(hallway), 11)).
fix_action(occurs(2, talos, move(puzzle_room), 12)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,extended), 13)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,extended), 14)).
fix_action(occurs(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), 14)).
fix_action(occurs(2, talos, release(manipulator_arm_1,(block,6)), 15)).
fix_action(occurs(2, talos, grasp(manipulator_arm_1,(block,3)), 16)).
fix_action(occurs(2, talos, put(manipulator_arm_2,(block,5),(block,6)), 16)).
fix_action(occurs(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), 17)).
fix_action(occurs(2, talos, release(manipulator_arm_2,(block,5)), 17)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[13-11-2021_23-27-44] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000016429E03540> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(3, complete(blue), false, 0)).
fix_fluent(holds(3, complete(red), false, 0)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,4)), store_room, 0)).
fix_fluent(holds(3, in((block,5)), store_room, 0)).
fix_fluent(holds(3, in((block,6)), store_room, 0)).
fix_fluent(holds(3, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(3, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(3, in(talos), starting_room, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(3, on((block,3)), (block,1), 0)).
fix_fluent(holds(3, on((block,4)), nothing, 0)).
fix_fluent(holds(3, on((block,5)), nothing, 0)).
fix_fluent(holds(3, on((block,6)), nothing, 0)).
fix_fluent(holds(3, tower_base((block,1)), true, 0)).
fix_fluent(holds(3, tower_base((block,2)), true, 0)).
fix_fluent(holds(3, tower_base((block,3)), false, 0)).
fix_fluent(holds(3, tower_base((block,4)), false, 0)).
fix_fluent(holds(3, tower_base((block,5)), false, 0)).
fix_fluent(holds(3, tower_base((block,6)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), hallway, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(3, complete(blue), false, 1)).
fix_fluent(holds(3, complete(red), false, 1)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,4)), store_room, 1)).
fix_fluent(holds(3, in((block,5)), store_room, 1)).
fix_fluent(holds(3, in((block,6)), store_room, 1)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 1)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 1)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(3, in(talos), hallway, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(3, on((block,3)), (block,1), 1)).
fix_fluent(holds(3, on((block,4)), nothing, 1)).
fix_fluent(holds(3, on((block,5)), nothing, 1)).
fix_fluent(holds(3, on((block,6)), nothing, 1)).
fix_fluent(holds(3, tower_base((block,1)), true, 1)).
fix_fluent(holds(3, tower_base((block,2)), true, 1)).
fix_fluent(holds(3, tower_base((block,3)), false, 1)).
fix_fluent(holds(3, tower_base((block,4)), false, 1)).
fix_fluent(holds(3, tower_base((block,5)), false, 1)).
fix_fluent(holds(3, tower_base((block,6)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(3, complete(blue), false, 2)).
fix_fluent(holds(3, complete(red), false, 2)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,4)), store_room, 2)).
fix_fluent(holds(3, in((block,5)), store_room, 2)).
fix_fluent(holds(3, in((block,6)), store_room, 2)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(3, in(talos), hallway, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(3, on((block,3)), (block,1), 2)).
fix_fluent(holds(3, on((block,4)), nothing, 2)).
fix_fluent(holds(3, on((block,5)), nothing, 2)).
fix_fluent(holds(3, on((block,6)), nothing, 2)).
fix_fluent(holds(3, tower_base((block,1)), true, 2)).
fix_fluent(holds(3, tower_base((block,2)), true, 2)).
fix_fluent(holds(3, tower_base((block,3)), false, 2)).
fix_fluent(holds(3, tower_base((block,4)), false, 2)).
fix_fluent(holds(3, tower_base((block,5)), false, 2)).
fix_fluent(holds(3, tower_base((block,6)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(3, complete(blue), false, 3)).
fix_fluent(holds(3, complete(red), false, 3)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,4)), store_room, 3)).
fix_fluent(holds(3, in((block,5)), store_room, 3)).
fix_fluent(holds(3, in((block,6)), store_room, 3)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(3, in(talos), hallway, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(3, on((block,3)), (block,1), 3)).
fix_fluent(holds(3, on((block,4)), nothing, 3)).
fix_fluent(holds(3, on((block,5)), nothing, 3)).
fix_fluent(holds(3, on((block,6)), nothing, 3)).
fix_fluent(holds(3, tower_base((block,1)), true, 3)).
fix_fluent(holds(3, tower_base((block,2)), true, 3)).
fix_fluent(holds(3, tower_base((block,3)), false, 3)).
fix_fluent(holds(3, tower_base((block,4)), false, 3)).
fix_fluent(holds(3, tower_base((block,5)), false, 3)).
fix_fluent(holds(3, tower_base((block,6)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), open, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(3, complete(blue), false, 4)).
fix_fluent(holds(3, complete(red), false, 4)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,4)), store_room, 4)).
fix_fluent(holds(3, in((block,5)), store_room, 4)).
fix_fluent(holds(3, in((block,6)), store_room, 4)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(3, in(talos), hallway, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(3, on((block,3)), (block,1), 4)).
fix_fluent(holds(3, on((block,4)), nothing, 4)).
fix_fluent(holds(3, on((block,5)), nothing, 4)).
fix_fluent(holds(3, on((block,6)), nothing, 4)).
fix_fluent(holds(3, tower_base((block,1)), true, 4)).
fix_fluent(holds(3, tower_base((block,2)), true, 4)).
fix_fluent(holds(3, tower_base((block,3)), false, 4)).
fix_fluent(holds(3, tower_base((block,4)), false, 4)).
fix_fluent(holds(3, tower_base((block,5)), false, 4)).
fix_fluent(holds(3, tower_base((block,6)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), open, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(3, complete(blue), false, 5)).
fix_fluent(holds(3, complete(red), false, 5)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,4)), store_room, 5)).
fix_fluent(holds(3, in((block,5)), store_room, 5)).
fix_fluent(holds(3, in((block,6)), store_room, 5)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(3, in(talos), hallway, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(3, on((block,3)), (block,1), 5)).
fix_fluent(holds(3, on((block,4)), nothing, 5)).
fix_fluent(holds(3, on((block,5)), nothing, 5)).
fix_fluent(holds(3, on((block,6)), nothing, 5)).
fix_fluent(holds(3, tower_base((block,1)), true, 5)).
fix_fluent(holds(3, tower_base((block,2)), true, 5)).
fix_fluent(holds(3, tower_base((block,3)), false, 5)).
fix_fluent(holds(3, tower_base((block,4)), false, 5)).
fix_fluent(holds(3, tower_base((block,5)), false, 5)).
fix_fluent(holds(3, tower_base((block,6)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), open, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(3, complete(blue), false, 6)).
fix_fluent(holds(3, complete(red), false, 6)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,4)), store_room, 6)).
fix_fluent(holds(3, in((block,5)), store_room, 6)).
fix_fluent(holds(3, in((block,6)), store_room, 6)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(3, in(talos), hallway, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(3, on((block,3)), (block,1), 6)).
fix_fluent(holds(3, on((block,4)), nothing, 6)).
fix_fluent(holds(3, on((block,5)), nothing, 6)).
fix_fluent(holds(3, on((block,6)), nothing, 6)).
fix_fluent(holds(3, tower_base((block,1)), true, 6)).
fix_fluent(holds(3, tower_base((block,2)), true, 6)).
fix_fluent(holds(3, tower_base((block,3)), false, 6)).
fix_fluent(holds(3, tower_base((block,4)), false, 6)).
fix_fluent(holds(3, tower_base((block,5)), false, 6)).
fix_fluent(holds(3, tower_base((block,6)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), open, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), store_room, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(3, complete(blue), false, 7)).
fix_fluent(holds(3, complete(red), false, 7)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,4)), store_room, 7)).
fix_fluent(holds(3, in((block,5)), store_room, 7)).
fix_fluent(holds(3, in((block,6)), store_room, 7)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 7)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 7)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(3, in(talos), store_room, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(3, on((block,3)), (block,1), 7)).
fix_fluent(holds(3, on((block,4)), nothing, 7)).
fix_fluent(holds(3, on((block,5)), nothing, 7)).
fix_fluent(holds(3, on((block,6)), nothing, 7)).
fix_fluent(holds(3, tower_base((block,1)), true, 7)).
fix_fluent(holds(3, tower_base((block,2)), true, 7)).
fix_fluent(holds(3, tower_base((block,3)), false, 7)).
fix_fluent(holds(3, tower_base((block,4)), false, 7)).
fix_fluent(holds(3, tower_base((block,5)), false, 7)).
fix_fluent(holds(3, tower_base((block,6)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), open, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), store_room, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(3, complete(blue), false, 8)).
fix_fluent(holds(3, complete(red), false, 8)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,4)), store_room, 8)).
fix_fluent(holds(3, in((block,5)), store_room, 8)).
fix_fluent(holds(3, in((block,6)), store_room, 8)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 8)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 8)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(3, in(talos), store_room, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(3, on((block,3)), (block,1), 8)).
fix_fluent(holds(3, on((block,4)), nothing, 8)).
fix_fluent(holds(3, on((block,5)), nothing, 8)).
fix_fluent(holds(3, on((block,6)), nothing, 8)).
fix_fluent(holds(3, tower_base((block,1)), true, 8)).
fix_fluent(holds(3, tower_base((block,2)), true, 8)).
fix_fluent(holds(3, tower_base((block,3)), false, 8)).
fix_fluent(holds(3, tower_base((block,4)), false, 8)).
fix_fluent(holds(3, tower_base((block,5)), false, 8)).
fix_fluent(holds(3, tower_base((block,6)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), open, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), store_room, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(3, complete(blue), false, 9)).
fix_fluent(holds(3, complete(red), false, 9)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 9)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 9)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,4)), store_room, 9)).
fix_fluent(holds(3, in((block,5)), store_room, 9)).
fix_fluent(holds(3, in((block,6)), store_room, 9)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 9)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 9)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(3, in(talos), store_room, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(3, on((block,3)), (block,1), 9)).
fix_fluent(holds(3, on((block,4)), nothing, 9)).
fix_fluent(holds(3, on((block,5)), nothing, 9)).
fix_fluent(holds(3, on((block,6)), nothing, 9)).
fix_fluent(holds(3, tower_base((block,1)), true, 9)).
fix_fluent(holds(3, tower_base((block,2)), true, 9)).
fix_fluent(holds(3, tower_base((block,3)), false, 9)).
fix_fluent(holds(3, tower_base((block,4)), false, 9)).
fix_fluent(holds(3, tower_base((block,5)), false, 9)).
fix_fluent(holds(3, tower_base((block,6)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), open, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), store_room, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(3, complete(blue), false, 10)).
fix_fluent(holds(3, complete(red), false, 10)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 10)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 10)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,4)), store_room, 10)).
fix_fluent(holds(3, in((block,5)), store_room, 10)).
fix_fluent(holds(3, in((block,6)), store_room, 10)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 10)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 10)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(3, in(talos), store_room, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(3, on((block,3)), (block,1), 10)).
fix_fluent(holds(3, on((block,4)), nothing, 10)).
fix_fluent(holds(3, on((block,5)), nothing, 10)).
fix_fluent(holds(3, on((block,6)), nothing, 10)).
fix_fluent(holds(3, tower_base((block,1)), true, 10)).
fix_fluent(holds(3, tower_base((block,2)), true, 10)).
fix_fluent(holds(3, tower_base((block,3)), false, 10)).
fix_fluent(holds(3, tower_base((block,4)), false, 10)).
fix_fluent(holds(3, tower_base((block,5)), false, 10)).
fix_fluent(holds(3, tower_base((block,6)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), open, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), hallway, 11)).
fix_fluent(holds(2, in((block,6)), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(3, complete(blue), false, 11)).
fix_fluent(holds(3, complete(red), false, 11)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 11)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 11)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,4)), store_room, 11)).
fix_fluent(holds(3, in((block,5)), hallway, 11)).
fix_fluent(holds(3, in((block,6)), hallway, 11)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(3, in(talos), hallway, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(3, on((block,3)), (block,1), 11)).
fix_fluent(holds(3, on((block,4)), nothing, 11)).
fix_fluent(holds(3, on((block,5)), nothing, 11)).
fix_fluent(holds(3, on((block,6)), nothing, 11)).
fix_fluent(holds(3, tower_base((block,1)), true, 11)).
fix_fluent(holds(3, tower_base((block,2)), true, 11)).
fix_fluent(holds(3, tower_base((block,3)), false, 11)).
fix_fluent(holds(3, tower_base((block,4)), false, 11)).
fix_fluent(holds(3, tower_base((block,5)), false, 11)).
fix_fluent(holds(3, tower_base((block,6)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), open, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), puzzle_room, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(3, complete(blue), false, 12)).
fix_fluent(holds(3, complete(red), false, 12)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 12)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 12)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,4)), store_room, 12)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 12)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 12)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 12)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(3, in(talos), puzzle_room, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(3, on((block,3)), (block,1), 12)).
fix_fluent(holds(3, on((block,4)), nothing, 12)).
fix_fluent(holds(3, on((block,5)), nothing, 12)).
fix_fluent(holds(3, on((block,6)), nothing, 12)).
fix_fluent(holds(3, tower_base((block,1)), true, 12)).
fix_fluent(holds(3, tower_base((block,2)), true, 12)).
fix_fluent(holds(3, tower_base((block,3)), false, 12)).
fix_fluent(holds(3, tower_base((block,4)), false, 12)).
fix_fluent(holds(3, tower_base((block,5)), false, 12)).
fix_fluent(holds(3, tower_base((block,6)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), open, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), puzzle_room, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(3, complete(blue), false, 13)).
fix_fluent(holds(3, complete(red), false, 13)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 13)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 13)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,4)), store_room, 13)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 13)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 13)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 13)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(3, in(talos), puzzle_room, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(3, on((block,3)), (block,1), 13)).
fix_fluent(holds(3, on((block,4)), nothing, 13)).
fix_fluent(holds(3, on((block,5)), nothing, 13)).
fix_fluent(holds(3, on((block,6)), nothing, 13)).
fix_fluent(holds(3, tower_base((block,1)), true, 13)).
fix_fluent(holds(3, tower_base((block,2)), true, 13)).
fix_fluent(holds(3, tower_base((block,3)), false, 13)).
fix_fluent(holds(3, tower_base((block,4)), false, 13)).
fix_fluent(holds(3, tower_base((block,5)), false, 13)).
fix_fluent(holds(3, tower_base((block,6)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), open, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), puzzle_room, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(3, complete(blue), false, 14)).
fix_fluent(holds(3, complete(red), false, 14)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 14)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 14)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,4)), store_room, 14)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 14)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 14)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 14)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(3, in(talos), puzzle_room, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 14)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(3, on((block,3)), (block,1), 14)).
fix_fluent(holds(3, on((block,4)), nothing, 14)).
fix_fluent(holds(3, on((block,5)), nothing, 14)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 14)).
fix_fluent(holds(3, tower_base((block,1)), true, 14)).
fix_fluent(holds(3, tower_base((block,2)), true, 14)).
fix_fluent(holds(3, tower_base((block,3)), false, 14)).
fix_fluent(holds(3, tower_base((block,4)), false, 14)).
fix_fluent(holds(3, tower_base((block,5)), false, 14)).
fix_fluent(holds(3, tower_base((block,6)), true, 14)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), puzzle_room, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(3, complete(blue), false, 15)).
fix_fluent(holds(3, complete(red), false, 15)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 15)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,4)), store_room, 15)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 15)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 15)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 15)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(3, in(talos), puzzle_room, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 15)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(3, on((block,3)), (block,1), 15)).
fix_fluent(holds(3, on((block,4)), nothing, 15)).
fix_fluent(holds(3, on((block,5)), nothing, 15)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 15)).
fix_fluent(holds(3, tower_base((block,1)), true, 15)).
fix_fluent(holds(3, tower_base((block,2)), true, 15)).
fix_fluent(holds(3, tower_base((block,3)), false, 15)).
fix_fluent(holds(3, tower_base((block,4)), false, 15)).
fix_fluent(holds(3, tower_base((block,5)), false, 15)).
fix_fluent(holds(3, tower_base((block,6)), true, 15)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), puzzle_room, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), (block,6), 16)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(3, complete(blue), false, 16)).
fix_fluent(holds(3, complete(red), false, 16)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,3), 16)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 16)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,4)), store_room, 16)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 16)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 16)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 16)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(3, in(talos), puzzle_room, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), true, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 16)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(3, on((block,3)), (block,1), 16)).
fix_fluent(holds(3, on((block,4)), nothing, 16)).
fix_fluent(holds(3, on((block,5)), (block,6), 16)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 16)).
fix_fluent(holds(3, tower_base((block,1)), true, 16)).
fix_fluent(holds(3, tower_base((block,2)), true, 16)).
fix_fluent(holds(3, tower_base((block,3)), false, 16)).
fix_fluent(holds(3, tower_base((block,4)), false, 16)).
fix_fluent(holds(3, tower_base((block,5)), false, 16)).
fix_fluent(holds(3, tower_base((block,6)), true, 16)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), puzzle_room, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), (block,6), 17)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), true, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(3, complete(blue), false, 17)).
fix_fluent(holds(3, complete(red), false, 17)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,3), 17)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,4)), store_room, 17)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 17)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 17)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 17)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(3, in(talos), puzzle_room, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), true, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), true, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 17)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(3, on((block,3)), puzzle_room_table, 17)).
fix_fluent(holds(3, on((block,4)), nothing, 17)).
fix_fluent(holds(3, on((block,5)), (block,6), 17)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 17)).
fix_fluent(holds(3, tower_base((block,1)), true, 17)).
fix_fluent(holds(3, tower_base((block,2)), true, 17)).
fix_fluent(holds(3, tower_base((block,3)), true, 17)).
fix_fluent(holds(3, tower_base((block,4)), false, 17)).
fix_fluent(holds(3, tower_base((block,5)), false, 17)).
fix_fluent(holds(3, tower_base((block,6)), true, 17)).
fix_fluent(holds(3, unordered_tower((block,1)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 17)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[13-11-2021_23-27-44] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 2)
	('start_step', 17)
	('last_sgoals', 14)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000016425336EA0>)
	('first_sgoals', 9)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000016429E03540>)

[13-11-2021_23-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 18)', truth=True, inc_range=None)

[13-11-2021_23-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.149013s.

[13-11-2021_23-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(9, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(9,18).

[13-11-2021_23-27-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.239080s with result Satisfiable.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.38809309999999897, Incremental time limit = None
Running cumulative time = 3.5560631999999943, Cumulative time limit = 3600
Used memory = (RSS = 464.941406Mb, VMS = 474.746094Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 20
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.838631s, Solving = 0.717432s, Total = 3.556063s, Memory = (RSS = 464.941406Mb, VMS = 474.746094Mb)), Calls = 19
Final Model :: Total atoms = 12262, Cost = (29, 0), Optimality proven = False, Number = 3, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.838630999999997, solving_time=0.7174321999999975, total_time=3.5560631999999943, memory=Memory(rss=464.94140625, vms=474.74609375), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14901279999999772, solving_time=0.23908030000000124, total_time=0.38809309999999897, memory=Memory(rss=464.94140625, vms=474.74609375), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 53100.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 152612.0, 'bodies_tr': 152612.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3466.0, 'count_bodies_tr': 3466.0, 'sccs': 314.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5809.0, 'rules': 211299.0, 'rules_normal': 207966.0, 'rules_choice': 3067.0, 'rules_minimize': 38.0, 'rules_acyc': 0.0, 'rules_heuristic': 228.0, 'rules_tr': 211237.0, 'rules_tr_normal': 207966.0, 'rules_tr_choice': 3067.0, 'rules_tr_minimize': 38.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 166.0, 'eqs': 106882.0, 'eqs_atom': 21873.0, 'eqs_body': 5604.0, 'eqs_other': 79405.0}, 'lpStep': {'atoms': 5366.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8861.0, 'bodies_tr': 8861.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 15096.0, 'rules_normal': 14930.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 15096.0, 'rules_tr_normal': 14930.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 6358.0, 'eqs_atom': 1391.0, 'eqs_body': 377.0, 'eqs_other': 4590.0}, 'generator': {'vars': 26825.0, 'vars_eliminated': 0.0, 'vars_frozen': 17840.0, 'constraints': 469.0, 'constraints_binary': 18519.0, 'constraints_ternary': 1972.0, 'acyc_edges': 0.0, 'complexity': 125356.0}}, 'solving': {'solvers': {'choices': 1887.0, 'conflicts': 44.0, 'conflicts_analyzed': 41.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 26.0, 'models': 3.0, 'models_level': 1066.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 37.0, 'distributed_sum_lbd': 49.0, 'integrated': 229.0, 'lemmas': 304.0, 'lits_learnt': 1032.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.28125, 'integrated_imps': 181.0, 'integrated_jumps': 73.0, 'guiding_paths_lits': 1656.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 41.0, 'lemmas_loop': 62.0, 'lemmas_other': 201.0, 'lits_conflict': 319.0, 'lits_loop': 248.0, 'lits_other': 465.0, 'jumps': {'jumps': 41.0, 'jumps_bounded': 5.0, 'levels': 71.0, 'levels_bounded': 25.0, 'max': 18.0, 'max_executed': 18.0, 'max_bounded': 17.0}}}}, 'summary': {'call': 19.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [29.0, 0.0], 'lower': [29.0, 0.0], 'concurrency': 8.0, 'winner': 6.0, 'times': {'total': 0.4614238739013672, 'cpu': 0.53125, 'solve': 0.22104263305664062, 'unsat': 0.19108963012695312, 'sat': 0.0049648284912109375}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.7066802978515625, 'cpu': 4.625, 'solve': 0.5476036071777344, 'unsat': 0.34113311767578125, 'sat': 0.07673263549804688}, 'models': {'enumerated': 20.0, 'optimal': 9.0}, 'solving': {'solvers': {'choices': 15351.0, 'conflicts': 1271.0, 'conflicts_analyzed': 1092.0, 'restarts': 1.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 1111.0, 'models': 20.0, 'models_level': 5058.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 937.0, 'distributed_sum_lbd': 1949.0, 'integrated': 5127.0, 'lemmas': 7561.0, 'lits_learnt': 52985.0, 'lemmas_binary': 957.0, 'lemmas_ternary': 345.0, 'cpu_time': 1.53125, 'integrated_imps': 2690.0, 'integrated_jumps': 3488.0, 'guiding_paths_lits': 14886.0, 'guiding_paths': 235.0, 'splits': 0.0, 'lemmas_conflict': 975.0, 'lemmas_loop': 2260.0, 'lemmas_other': 4326.0, 'lits_conflict': 7614.0, 'lits_loop': 17722.0, 'lits_other': 27649.0, 'jumps': {'jumps': 1092.0, 'jumps_bounded': 348.0, 'levels': 16256.0, 'levels_bounded': 13774.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 19}

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 2 ( 33.33% solved)

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 19)', truth=True, inc_range=None)

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 10, step = 19]:
sub_goal(3, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 10)
sub_goal(3, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 10)

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.115741s.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 20: original = External(symbol='current_last_sgoals(10, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(10,19).

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053030s with result Satisfiable.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.16877159999999947, Incremental time limit = None
Running cumulative time = 3.724834799999994, Cumulative time limit = 3600
Used memory = (RSS = 470.531250Mb, VMS = 479.972656Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 23
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.954372s, Solving = 0.770463s, Total = 3.724835s, Memory = (RSS = 470.531250Mb, VMS = 479.972656Mb)), Calls = 20
Final Model :: Total atoms = 12616, Cost = (31, 0), Optimality proven = False, Number = 3, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.954372099999998, solving_time=0.770462699999996, total_time=3.724834799999994, memory=Memory(rss=470.53125, vms=479.97265625), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11574110000000104, solving_time=0.053030499999998426, total_time=0.16877159999999947, memory=Memory(rss=470.53125, vms=479.97265625), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 55168.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 160150.0, 'bodies_tr': 160150.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3646.0, 'count_bodies_tr': 3646.0, 'sccs': 330.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5994.0, 'rules': 221601.0, 'rules_normal': 218102.0, 'rules_choice': 3219.0, 'rules_minimize': 40.0, 'rules_acyc': 0.0, 'rules_heuristic': 240.0, 'rules_tr': 221535.0, 'rules_tr_normal': 218102.0, 'rules_tr_choice': 3219.0, 'rules_tr_minimize': 40.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 174.0, 'eqs': 111694.0, 'eqs_atom': 22562.0, 'eqs_body': 5894.0, 'eqs_other': 83238.0}, 'lpStep': {'atoms': 2068.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7538.0, 'bodies_tr': 7538.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 16.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 185.0, 'rules': 10302.0, 'rules_normal': 10136.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 10298.0, 'rules_tr_normal': 10136.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 4812.0, 'eqs_atom': 689.0, 'eqs_body': 290.0, 'eqs_other': 3833.0}, 'generator': {'vars': 27860.0, 'vars_eliminated': 0.0, 'vars_frozen': 18540.0, 'constraints': 649.0, 'constraints_binary': 21737.0, 'constraints_ternary': 2166.0, 'acyc_edges': 0.0, 'complexity': 125356.0}}, 'solving': {'solvers': {'choices': 1491.0, 'conflicts': 12.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 1151.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 17.0, 'integrated': 41.0, 'lemmas': 141.0, 'lits_learnt': 548.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 32.0, 'integrated_jumps': 60.0, 'guiding_paths_lits': 1784.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 98.0, 'lemmas_other': 32.0, 'lits_conflict': 11.0, 'lits_loop': 505.0, 'lits_other': 32.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 0.0, 'levels': 11.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 20.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [31.0, 0.0], 'lower': [31.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.1705474853515625, 'cpu': 0.203125, 'solve': 0.0388946533203125, 'unsat': 0.010969161987304688, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.877227783203125, 'cpu': 4.828125, 'solve': 0.5864982604980469, 'unsat': 0.35210227966308594, 'sat': 0.07972526550292969}, 'models': {'enumerated': 23.0, 'optimal': 10.0}, 'solving': {'solvers': {'choices': 16842.0, 'conflicts': 1283.0, 'conflicts_analyzed': 1103.0, 'restarts': 1.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 1111.0, 'models': 23.0, 'models_level': 6209.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 951.0, 'distributed_sum_lbd': 1966.0, 'integrated': 5168.0, 'lemmas': 7702.0, 'lits_learnt': 53533.0, 'lemmas_binary': 960.0, 'lemmas_ternary': 345.0, 'cpu_time': 1.59375, 'integrated_imps': 2722.0, 'integrated_jumps': 3548.0, 'guiding_paths_lits': 16670.0, 'guiding_paths': 243.0, 'splits': 0.0, 'lemmas_conflict': 986.0, 'lemmas_loop': 2358.0, 'lemmas_other': 4358.0, 'lits_conflict': 7625.0, 'lits_loop': 18227.0, 'lits_other': 27681.0, 'jumps': {'jumps': 1103.0, 'jumps_bounded': 348.0, 'levels': 16267.0, 'levels_bounded': 13774.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 19, 10: 20}

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 3 ( 50.00% solved)

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 20)', truth=True, inc_range=None)

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 11, step = 20]:
sub_goal(3, talos, move(store_room), in(talos), store_room, 11)

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.137867s.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 21: original = External(symbol='current_last_sgoals(11, 20)', truth=True, inc_range=None), conversion = current_last_sgoals(11,20).

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014762s with result Unsatisfiable.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.15262930000000097, Incremental time limit = None
Running cumulative time = 3.8774640999999948, Cumulative time limit = 3600
Used memory = (RSS = 471.589844Mb, VMS = 480.359375Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=20, end_step=21, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.0922393999999978, solving_time=0.785224699999997, total_time=3.8774640999999948, memory=Memory(rss=471.58984375, vms=480.359375), step_range=range(0, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13786729999999991, solving_time=0.014762000000001052, total_time=0.15262930000000097, memory=Memory(rss=471.58984375, vms=480.359375), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 57465.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 168153.0, 'bodies_tr': 168153.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3826.0, 'count_bodies_tr': 3826.0, 'sccs': 348.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6270.0, 'rules': 232739.0, 'rules_normal': 229074.0, 'rules_choice': 3371.0, 'rules_minimize': 42.0, 'rules_acyc': 0.0, 'rules_heuristic': 252.0, 'rules_tr': 232671.0, 'rules_tr_normal': 229074.0, 'rules_tr_choice': 3371.0, 'rules_tr_minimize': 42.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 184.0, 'eqs': 116607.0, 'eqs_atom': 23585.0, 'eqs_body': 6116.0, 'eqs_other': 86906.0}, 'lpStep': {'atoms': 2297.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8003.0, 'bodies_tr': 8003.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 18.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 276.0, 'rules': 11138.0, 'rules_normal': 10972.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11136.0, 'rules_tr_normal': 10972.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 4913.0, 'eqs_atom': 1023.0, 'eqs_body': 222.0, 'eqs_other': 3668.0}, 'generator': {'vars': 29249.0, 'vars_eliminated': 0.0, 'vars_frozen': 19461.0, 'constraints': 990.0, 'constraints_binary': 28147.0, 'constraints_ternary': 3692.0, 'acyc_edges': 0.0, 'complexity': 125356.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1673.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 21.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [11.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.15509986877441406, 'cpu': 0.15625, 'solve': 0.0039653778076171875, 'unsat': 0.0039653778076171875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.032327651977539, 'cpu': 4.984375, 'solve': 0.5904636383056641, 'unsat': 0.3560676574707031, 'sat': 0.07972526550292969}, 'models': {'enumerated': 23.0, 'optimal': 10.0}, 'solving': {'solvers': {'choices': 16842.0, 'conflicts': 1290.0, 'conflicts_analyzed': 1103.0, 'restarts': 1.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 1111.0, 'models': 23.0, 'models_level': 6209.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 951.0, 'distributed_sum_lbd': 1966.0, 'integrated': 5168.0, 'lemmas': 7702.0, 'lits_learnt': 53533.0, 'lemmas_binary': 960.0, 'lemmas_ternary': 345.0, 'cpu_time': 1.59375, 'integrated_imps': 2722.0, 'integrated_jumps': 3548.0, 'guiding_paths_lits': 18343.0, 'guiding_paths': 250.0, 'splits': 0.0, 'lemmas_conflict': 986.0, 'lemmas_loop': 2358.0, 'lemmas_other': 4358.0, 'lits_conflict': 7625.0, 'lits_loop': 18227.0, 'lits_other': 27681.0, 'jumps': {'jumps': 1103.0, 'jumps_bounded': 348.0, 'levels': 16267.0, 'levels_bounded': 13774.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.147012s.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017208s with result Unsatisfiable.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1642203000000002, Incremental time limit = None
Running cumulative time = 4.041684399999995, Cumulative time limit = 3600
Used memory = (RSS = 473.066406Mb, VMS = 481.792969Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=21, end_step=22, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.239251799999999, solving_time=0.8024325999999959, total_time=4.041684399999995, memory=Memory(rss=473.06640625, vms=481.79296875), step_range=range(0, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14701240000000126, solving_time=0.017207899999998943, total_time=0.1642203000000002, memory=Memory(rss=473.06640625, vms=481.79296875), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 59883.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 176538.0, 'bodies_tr': 176538.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4006.0, 'count_bodies_tr': 4006.0, 'sccs': 368.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6701.0, 'rules': 244411.0, 'rules_normal': 240580.0, 'rules_choice': 3523.0, 'rules_minimize': 44.0, 'rules_acyc': 0.0, 'rules_heuristic': 264.0, 'rules_tr': 244343.0, 'rules_tr_normal': 240580.0, 'rules_tr_choice': 3523.0, 'rules_tr_minimize': 44.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 196.0, 'eqs': 121992.0, 'eqs_atom': 24659.0, 'eqs_body': 6239.0, 'eqs_other': 91094.0}, 'lpStep': {'atoms': 2418.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8385.0, 'bodies_tr': 8385.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 431.0, 'rules': 11672.0, 'rules_normal': 11506.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11672.0, 'rules_tr_normal': 11506.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5385.0, 'eqs_atom': 1074.0, 'eqs_body': 123.0, 'eqs_other': 4188.0}, 'generator': {'vars': 31129.0, 'vars_eliminated': 0.0, 'vars_frozen': 20698.0, 'constraints': 1469.0, 'constraints_binary': 38165.0, 'constraints_ternary': 6055.0, 'acyc_edges': 0.0, 'complexity': 125356.0}}, 'solving': {'solvers': {'choices': 42.0, 'conflicts': 41.0, 'conflicts_analyzed': 30.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 42.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 30.0, 'distributed_sum_lbd': 65.0, 'integrated': 121.0, 'lemmas': 356.0, 'lits_learnt': 2926.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 106.0, 'integrated_jumps': 11.0, 'guiding_paths_lits': 1785.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 30.0, 'lemmas_loop': 205.0, 'lemmas_other': 121.0, 'lits_conflict': 349.0, 'lits_loop': 1190.0, 'lits_other': 1387.0, 'jumps': {'jumps': 30.0, 'jumps_bounded': 22.0, 'levels': 442.0, 'levels_bounded': 412.0, 'max': 383.0, 'max_executed': 383.0, 'max_bounded': 382.0}}}}, 'summary': {'call': 22.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [30.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.16756057739257812, 'cpu': 0.171875, 'solve': 0.00499725341796875, 'unsat': 0.00499725341796875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.199888229370117, 'cpu': 5.15625, 'solve': 0.5954608917236328, 'unsat': 0.3610649108886719, 'sat': 0.07972526550292969}, 'models': {'enumerated': 23.0, 'optimal': 10.0}, 'solving': {'solvers': {'choices': 16884.0, 'conflicts': 1331.0, 'conflicts_analyzed': 1133.0, 'restarts': 1.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 1153.0, 'models': 23.0, 'models_level': 6209.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 981.0, 'distributed_sum_lbd': 2031.0, 'integrated': 5289.0, 'lemmas': 8058.0, 'lits_learnt': 56459.0, 'lemmas_binary': 967.0, 'lemmas_ternary': 345.0, 'cpu_time': 1.59375, 'integrated_imps': 2828.0, 'integrated_jumps': 3559.0, 'guiding_paths_lits': 20128.0, 'guiding_paths': 260.0, 'splits': 0.0, 'lemmas_conflict': 1016.0, 'lemmas_loop': 2563.0, 'lemmas_other': 4479.0, 'lits_conflict': 7974.0, 'lits_loop': 19417.0, 'lits_other': 29068.0, 'jumps': {'jumps': 1133.0, 'jumps_bounded': 370.0, 'levels': 16709.0, 'levels_bounded': 14186.0, 'max': 415.0, 'max_executed': 415.0, 'max_bounded': 414.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Reaction at search length 22:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.136782s.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042850s with result Satisfiable.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1796319000000004, Incremental time limit = None
Running cumulative time = 4.221316299999995, Cumulative time limit = 3600
Used memory = (RSS = 481.628906Mb, VMS = 497.648438Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 24
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.376033s, Solving = 0.845283s, Total = 4.221316s, Memory = (RSS = 481.628906Mb, VMS = 497.648438Mb)), Calls = 23
Final Model :: Total atoms = 13645, Cost = (35, 0), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=22, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.376033399999998, solving_time=0.8452828999999973, total_time=4.221316299999995, memory=Memory(rss=481.62890625, vms=497.6484375), step_range=range(0, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13678159999999906, solving_time=0.04285030000000134, total_time=0.1796319000000004, memory=Memory(rss=481.62890625, vms=497.6484375), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 62337.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 185118.0, 'bodies_tr': 185118.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4186.0, 'count_bodies_tr': 4186.0, 'sccs': 388.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7137.0, 'rules': 256370.0, 'rules_normal': 252373.0, 'rules_choice': 3675.0, 'rules_minimize': 46.0, 'rules_acyc': 0.0, 'rules_heuristic': 276.0, 'rules_tr': 256302.0, 'rules_tr_normal': 252373.0, 'rules_tr_choice': 3675.0, 'rules_tr_minimize': 46.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 208.0, 'eqs': 127503.0, 'eqs_atom': 25734.0, 'eqs_body': 6351.0, 'eqs_other': 95418.0}, 'lpStep': {'atoms': 2454.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8580.0, 'bodies_tr': 8580.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11959.0, 'rules_normal': 11793.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11959.0, 'rules_tr_normal': 11793.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5511.0, 'eqs_atom': 1075.0, 'eqs_body': 112.0, 'eqs_other': 4324.0}, 'generator': {'vars': 33054.0, 'vars_eliminated': 0.0, 'vars_frozen': 21954.0, 'constraints': 1961.0, 'constraints_binary': 48524.0, 'constraints_ternary': 8452.0, 'acyc_edges': 0.0, 'complexity': 125356.0}}, 'solving': {'solvers': {'choices': 2827.0, 'conflicts': 274.0, 'conflicts_analyzed': 262.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 267.0, 'models': 1.0, 'models_level': 648.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 218.0, 'distributed_sum_lbd': 622.0, 'integrated': 1242.0, 'lemmas': 1845.0, 'lits_learnt': 29434.0, 'lemmas_binary': 147.0, 'lemmas_ternary': 71.0, 'cpu_time': 0.15625, 'integrated_imps': 303.0, 'integrated_jumps': 1225.0, 'guiding_paths_lits': 1897.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 255.0, 'lemmas_loop': 386.0, 'lemmas_other': 1204.0, 'lits_conflict': 5524.0, 'lits_loop': 3118.0, 'lits_other': 20792.0, 'jumps': {'jumps': 262.0, 'jumps_bounded': 22.0, 'levels': 5847.0, 'levels_bounded': 5432.0, 'max': 746.0, 'max_executed': 746.0, 'max_bounded': 745.0}}}}, 'summary': {'call': 23.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [35.0, 0.0], 'lower': [35.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.1815166473388672, 'cpu': 0.3125, 'solve': 0.028924942016601562, 'unsat': 0.013963699340820312, 'sat': 0.01496124267578125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.381404876708984, 'cpu': 5.46875, 'solve': 0.6243858337402344, 'unsat': 0.3750286102294922, 'sat': 0.09468650817871094}, 'models': {'enumerated': 24.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 19711.0, 'conflicts': 1605.0, 'conflicts_analyzed': 1395.0, 'restarts': 1.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 1420.0, 'models': 24.0, 'models_level': 6857.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1199.0, 'distributed_sum_lbd': 2653.0, 'integrated': 6531.0, 'lemmas': 9903.0, 'lits_learnt': 85893.0, 'lemmas_binary': 1114.0, 'lemmas_ternary': 416.0, 'cpu_time': 1.75, 'integrated_imps': 3131.0, 'integrated_jumps': 4784.0, 'guiding_paths_lits': 22025.0, 'guiding_paths': 272.0, 'splits': 0.0, 'lemmas_conflict': 1271.0, 'lemmas_loop': 2949.0, 'lemmas_other': 5683.0, 'lits_conflict': 13498.0, 'lits_loop': 22535.0, 'lits_other': 49860.0, 'jumps': {'jumps': 1395.0, 'jumps_bounded': 392.0, 'levels': 22556.0, 'levels_bounded': 19618.0, 'max': 746.0, 'max_executed': 746.0, 'max_bounded': 745.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 19, 10: 20, 11: 23}

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 4 ( 66.67% solved)

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 23)', truth=True, inc_range=None)

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 23]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 12)

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.139078s.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(12, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(12,23).

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017996s with result Unsatisfiable.

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.15707319999999925, Incremental time limit = None
Running cumulative time = 4.378389499999995, Cumulative time limit = 3600
Used memory = (RSS = 483.457031Mb, VMS = 498.207031Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=23, end_step=24, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.5151109999999983, solving_time=0.8632784999999963, total_time=4.378389499999995, memory=Memory(rss=483.45703125, vms=498.20703125), step_range=range(0, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13907760000000025, solving_time=0.017995599999999, total_time=0.15707319999999925, memory=Memory(rss=483.45703125, vms=498.20703125), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 64809.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 193733.0, 'bodies_tr': 193733.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4366.0, 'count_bodies_tr': 4366.0, 'sccs': 408.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7573.0, 'rules': 268458.0, 'rules_normal': 264295.0, 'rules_choice': 3827.0, 'rules_minimize': 48.0, 'rules_acyc': 0.0, 'rules_heuristic': 288.0, 'rules_tr': 268390.0, 'rules_tr_normal': 264295.0, 'rules_tr_choice': 3827.0, 'rules_tr_minimize': 48.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 220.0, 'eqs': 133089.0, 'eqs_atom': 26822.0, 'eqs_body': 6465.0, 'eqs_other': 99802.0}, 'lpStep': {'atoms': 2472.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8615.0, 'bodies_tr': 8615.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12088.0, 'rules_normal': 11922.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12088.0, 'rules_tr_normal': 11922.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5586.0, 'eqs_atom': 1088.0, 'eqs_body': 114.0, 'eqs_other': 4384.0}, 'generator': {'vars': 34988.0, 'vars_eliminated': 0.0, 'vars_frozen': 23215.0, 'constraints': 2314.0, 'constraints_binary': 56468.0, 'constraints_ternary': 10285.0, 'acyc_edges': 0.0, 'complexity': 125356.0}}, 'solving': {'solvers': {'choices': 12.0, 'conflicts': 19.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 12.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 18.0, 'integrated': 27.0, 'lemmas': 36.0, 'lits_learnt': 480.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 27.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 2009.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 0.0, 'lemmas_other': 27.0, 'lits_conflict': 99.0, 'lits_loop': 0.0, 'lits_other': 381.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 11.0, 'levels': 28.0, 'levels_bounded': 17.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 24.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [28.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.16057395935058594, 'cpu': 0.15625, 'solve': 0.003963470458984375, 'unsat': 0.003963470458984375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.54197883605957, 'cpu': 5.625, 'solve': 0.6283493041992188, 'unsat': 0.37899208068847656, 'sat': 0.09468650817871094}, 'models': {'enumerated': 24.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 19723.0, 'conflicts': 1624.0, 'conflicts_analyzed': 1406.0, 'restarts': 1.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 1432.0, 'models': 24.0, 'models_level': 6857.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1208.0, 'distributed_sum_lbd': 2671.0, 'integrated': 6558.0, 'lemmas': 9939.0, 'lits_learnt': 86373.0, 'lemmas_binary': 1120.0, 'lemmas_ternary': 416.0, 'cpu_time': 1.75, 'integrated_imps': 3158.0, 'integrated_jumps': 4785.0, 'guiding_paths_lits': 24034.0, 'guiding_paths': 280.0, 'splits': 0.0, 'lemmas_conflict': 1280.0, 'lemmas_loop': 2949.0, 'lemmas_other': 5710.0, 'lits_conflict': 13597.0, 'lits_loop': 22535.0, 'lits_other': 50241.0, 'jumps': {'jumps': 1406.0, 'jumps_bounded': 403.0, 'levels': 22584.0, 'levels_bounded': 19635.0, 'max': 746.0, 'max_executed': 746.0, 'max_bounded': 745.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-45] DEBUG :: ASH Planner Main #1 >> Reaction at search length 24:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.144099s.

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.060624s with result Satisfiable.

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.20472240000000141, Incremental time limit = None
Running cumulative time = 4.583111899999996, Cumulative time limit = 3600
Used memory = (RSS = 488.070312Mb, VMS = 501.746094Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 26
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.659210s, Solving = 0.923902s, Total = 4.583112s, Memory = (RSS = 488.070312Mb, VMS = 501.746094Mb)), Calls = 25
Final Model :: Total atoms = 14330, Cost = (37, 0), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-27-46] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=25, start_step=24, end_step=25, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.659209599999998, solving_time=0.9239022999999982, total_time=4.583111899999996, memory=Memory(rss=488.0703125, vms=501.74609375), step_range=range(0, 26), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14409859999999952, solving_time=0.06062380000000189, total_time=0.20472240000000141, memory=Memory(rss=488.0703125, vms=501.74609375), step_range=range(25, 26), clingo_stats={'problem': {'lp': {'atoms': 67292.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 202375.0, 'bodies_tr': 202375.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4546.0, 'count_bodies_tr': 4546.0, 'sccs': 428.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8009.0, 'rules': 280665.0, 'rules_normal': 276336.0, 'rules_choice': 3979.0, 'rules_minimize': 50.0, 'rules_acyc': 0.0, 'rules_heuristic': 300.0, 'rules_tr': 280597.0, 'rules_tr_normal': 276336.0, 'rules_tr_choice': 3979.0, 'rules_tr_minimize': 50.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 232.0, 'eqs': 138731.0, 'eqs_atom': 27919.0, 'eqs_body': 6577.0, 'eqs_other': 104235.0}, 'lpStep': {'atoms': 2483.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8642.0, 'bodies_tr': 8642.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12207.0, 'rules_normal': 12041.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12207.0, 'rules_tr_normal': 12041.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5642.0, 'eqs_atom': 1097.0, 'eqs_body': 112.0, 'eqs_other': 4433.0}, 'generator': {'vars': 36929.0, 'vars_eliminated': 0.0, 'vars_frozen': 24478.0, 'constraints': 2809.0, 'constraints_binary': 67077.0, 'constraints_ternary': 12707.0, 'acyc_edges': 0.0, 'complexity': 125356.0}}, 'solving': {'solvers': {'choices': 2911.0, 'conflicts': 352.0, 'conflicts_analyzed': 339.0, 'restarts': 1.0, 'restarts_last': 53.0, 'extra': {'domain_choices': 606.0, 'models': 2.0, 'models_level': 961.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 311.0, 'distributed_sum_lbd': 908.0, 'integrated': 1832.0, 'lemmas': 3220.0, 'lits_learnt': 66714.0, 'lemmas_binary': 284.0, 'lemmas_ternary': 112.0, 'cpu_time': 0.28125, 'integrated_imps': 579.0, 'integrated_jumps': 366.0, 'guiding_paths_lits': 2121.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 335.0, 'lemmas_loop': 1125.0, 'lemmas_other': 1760.0, 'lits_conflict': 10146.0, 'lits_loop': 8875.0, 'lits_other': 47693.0, 'jumps': {'jumps': 339.0, 'jumps_bounded': 6.0, 'levels': 1597.0, 'levels_bounded': 1133.0, 'max': 439.0, 'max_executed': 439.0, 'max_bounded': 438.0}}}}, 'summary': {'call': 25.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [37.0, 0.0], 'lower': [37.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.20844268798828125, 'cpu': 0.453125, 'solve': 0.046875, 'unsat': 0.018947601318359375, 'sat': 0.012968063354492188}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.750421524047852, 'cpu': 6.078125, 'solve': 0.6752243041992188, 'unsat': 0.39793968200683594, 'sat': 0.10765457153320312}, 'models': {'enumerated': 26.0, 'optimal': 12.0}, 'solving': {'solvers': {'choices': 22634.0, 'conflicts': 1976.0, 'conflicts_analyzed': 1745.0, 'restarts': 2.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 2038.0, 'models': 26.0, 'models_level': 7818.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1519.0, 'distributed_sum_lbd': 3579.0, 'integrated': 8390.0, 'lemmas': 13159.0, 'lits_learnt': 153087.0, 'lemmas_binary': 1404.0, 'lemmas_ternary': 528.0, 'cpu_time': 2.03125, 'integrated_imps': 3737.0, 'integrated_jumps': 5151.0, 'guiding_paths_lits': 26155.0, 'guiding_paths': 293.0, 'splits': 0.0, 'lemmas_conflict': 1615.0, 'lemmas_loop': 4074.0, 'lemmas_other': 7470.0, 'lits_conflict': 23743.0, 'lits_loop': 31410.0, 'lits_other': 97934.0, 'jumps': {'jumps': 1745.0, 'jumps_bounded': 409.0, 'levels': 24181.0, 'levels_bounded': 20768.0, 'max': 746.0, 'max_executed': 746.0, 'max_bounded': 745.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-46] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 19, 10: 20, 11: 23, 12: 25}

[13-11-2021_23-27-46] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 5 ( 83.33% solved)

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 25)', truth=True, inc_range=None)

[13-11-2021_23-27-46] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 25]:
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 13)

[13-11-2021_23-27-46] DEBUG :: ASH Planner Main #1 >> Reaction at search length 25:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.147686s.

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 26: original = External(symbol='current_last_sgoals(13, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(13,25).

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021532s with result Unsatisfiable.

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16921829999999716, Incremental time limit = None
Running cumulative time = 4.752330199999993, Cumulative time limit = 3600
Used memory = (RSS = 490.292969Mb, VMS = 502.828125Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-46] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=26, start_step=25, end_step=26, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.806895799999997, solving_time=0.9454343999999963, total_time=4.752330199999993, memory=Memory(rss=490.29296875, vms=502.828125), step_range=range(0, 27), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.147686199999999, solving_time=0.021532099999998167, total_time=0.16921829999999716, memory=Memory(rss=490.29296875, vms=502.828125), step_range=range(26, 27), clingo_stats={'problem': {'lp': {'atoms': 69786.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 211043.0, 'bodies_tr': 211043.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4726.0, 'count_bodies_tr': 4726.0, 'sccs': 448.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8445.0, 'rules': 292989.0, 'rules_normal': 288494.0, 'rules_choice': 4131.0, 'rules_minimize': 52.0, 'rules_acyc': 0.0, 'rules_heuristic': 312.0, 'rules_tr': 292921.0, 'rules_tr_normal': 288494.0, 'rules_tr_choice': 4131.0, 'rules_tr_minimize': 52.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 244.0, 'eqs': 144435.0, 'eqs_atom': 29027.0, 'eqs_body': 6688.0, 'eqs_other': 108720.0}, 'lpStep': {'atoms': 2494.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8668.0, 'bodies_tr': 8668.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12324.0, 'rules_normal': 12158.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12324.0, 'rules_tr_normal': 12158.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5704.0, 'eqs_atom': 1108.0, 'eqs_body': 111.0, 'eqs_other': 4485.0}, 'generator': {'vars': 38870.0, 'vars_eliminated': 0.0, 'vars_frozen': 25741.0, 'constraints': 3304.0, 'constraints_binary': 77791.0, 'constraints_ternary': 15117.0, 'acyc_edges': 0.0, 'complexity': 125356.0}}, 'solving': {'solvers': {'choices': 13.0, 'conflicts': 25.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 13.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 18.0, 'integrated': 48.0, 'lemmas': 63.0, 'lits_learnt': 17260.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 42.0, 'integrated_jumps': 3.0, 'guiding_paths_lits': 2233.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 6.0, 'lemmas_other': 48.0, 'lits_conflict': 2641.0, 'lits_loop': 33.0, 'lits_other': 14586.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 9.0, 'levels': 461.0, 'levels_bounded': 451.0, 'max': 439.0, 'max_executed': 2.0, 'max_bounded': 438.0}}}}, 'summary': {'call': 26.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [33.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.17199325561523438, 'cpu': 0.171875, 'solve': 0.00598907470703125, 'unsat': 0.00598907470703125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.922414779663086, 'cpu': 6.25, 'solve': 0.68121337890625, 'unsat': 0.4039287567138672, 'sat': 0.10765457153320312}, 'models': {'enumerated': 26.0, 'optimal': 12.0}, 'solving': {'solvers': {'choices': 22647.0, 'conflicts': 2001.0, 'conflicts_analyzed': 1755.0, 'restarts': 2.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 2051.0, 'models': 26.0, 'models_level': 7818.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1528.0, 'distributed_sum_lbd': 3597.0, 'integrated': 8438.0, 'lemmas': 13222.0, 'lits_learnt': 170347.0, 'lemmas_binary': 1410.0, 'lemmas_ternary': 528.0, 'cpu_time': 2.03125, 'integrated_imps': 3779.0, 'integrated_jumps': 5154.0, 'guiding_paths_lits': 28388.0, 'guiding_paths': 305.0, 'splits': 0.0, 'lemmas_conflict': 1624.0, 'lemmas_loop': 4080.0, 'lemmas_other': 7518.0, 'lits_conflict': 26384.0, 'lits_loop': 31443.0, 'lits_other': 112520.0, 'jumps': {'jumps': 1755.0, 'jumps_bounded': 418.0, 'levels': 24642.0, 'levels_bounded': 21219.0, 'max': 746.0, 'max_executed': 746.0, 'max_bounded': 745.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-46] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.163967s.

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043088s with result Unsatisfiable.

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.20705560000000034, Incremental time limit = None
Running cumulative time = 4.9593857999999935, Cumulative time limit = 3600
Used memory = (RSS = 492.750000Mb, VMS = 504.250000Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-46] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=27, start_step=26, end_step=27, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.9708628999999975, solving_time=0.988522899999996, total_time=4.9593857999999935, memory=Memory(rss=492.75, vms=504.25), step_range=range(0, 28), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1639671000000007, solving_time=0.04308849999999964, total_time=0.20705560000000034, memory=Memory(rss=492.75, vms=504.25), step_range=range(27, 28), clingo_stats={'problem': {'lp': {'atoms': 72291.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 219737.0, 'bodies_tr': 219737.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4906.0, 'count_bodies_tr': 4906.0, 'sccs': 468.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8881.0, 'rules': 305430.0, 'rules_normal': 300769.0, 'rules_choice': 4283.0, 'rules_minimize': 54.0, 'rules_acyc': 0.0, 'rules_heuristic': 324.0, 'rules_tr': 305362.0, 'rules_tr_normal': 300769.0, 'rules_tr_choice': 4283.0, 'rules_tr_minimize': 54.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 256.0, 'eqs': 150203.0, 'eqs_atom': 30146.0, 'eqs_body': 6800.0, 'eqs_other': 113257.0}, 'lpStep': {'atoms': 2505.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8694.0, 'bodies_tr': 8694.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12441.0, 'rules_normal': 12275.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12441.0, 'rules_tr_normal': 12275.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5768.0, 'eqs_atom': 1119.0, 'eqs_body': 112.0, 'eqs_other': 4537.0}, 'generator': {'vars': 40811.0, 'vars_eliminated': 0.0, 'vars_frozen': 27004.0, 'constraints': 3799.0, 'constraints_binary': 88611.0, 'constraints_ternary': 17527.0, 'acyc_edges': 0.0, 'complexity': 125356.0}}, 'solving': {'solvers': {'choices': 615.0, 'conflicts': 330.0, 'conflicts_analyzed': 311.0, 'restarts': 0.0, 'restarts_last': 54.0, 'extra': {'domain_choices': 615.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 284.0, 'distributed_sum_lbd': 812.0, 'integrated': 1696.0, 'lemmas': 2445.0, 'lits_learnt': 122613.0, 'lemmas_binary': 98.0, 'lemmas_ternary': 91.0, 'cpu_time': 0.125, 'integrated_imps': 434.0, 'integrated_jumps': 264.0, 'guiding_paths_lits': 2345.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 306.0, 'lemmas_loop': 522.0, 'lemmas_other': 1617.0, 'lits_conflict': 20021.0, 'lits_loop': 4218.0, 'lits_other': 98374.0, 'jumps': {'jumps': 311.0, 'jumps_bounded': 13.0, 'levels': 3032.0, 'levels_bounded': 2681.0, 'max': 673.0, 'max_executed': 673.0, 'max_bounded': 672.0}}}}, 'summary': {'call': 27.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [36.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.21193885803222656, 'cpu': 0.3125, 'solve': 0.025930404663085938, 'unsat': 0.025930404663085938, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.1343536376953125, 'cpu': 6.5625, 'solve': 0.7071437835693359, 'unsat': 0.4298591613769531, 'sat': 0.10765457153320312}, 'models': {'enumerated': 26.0, 'optimal': 12.0}, 'solving': {'solvers': {'choices': 23262.0, 'conflicts': 2331.0, 'conflicts_analyzed': 2066.0, 'restarts': 2.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 2666.0, 'models': 26.0, 'models_level': 7818.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1812.0, 'distributed_sum_lbd': 4409.0, 'integrated': 10134.0, 'lemmas': 15667.0, 'lits_learnt': 292960.0, 'lemmas_binary': 1508.0, 'lemmas_ternary': 619.0, 'cpu_time': 2.15625, 'integrated_imps': 4213.0, 'integrated_jumps': 5418.0, 'guiding_paths_lits': 30733.0, 'guiding_paths': 320.0, 'splits': 0.0, 'lemmas_conflict': 1930.0, 'lemmas_loop': 4602.0, 'lemmas_other': 9135.0, 'lits_conflict': 46405.0, 'lits_loop': 35661.0, 'lits_other': 210894.0, 'jumps': {'jumps': 2066.0, 'jumps_bounded': 431.0, 'levels': 27674.0, 'levels_bounded': 23900.0, 'max': 746.0, 'max_executed': 746.0, 'max_bounded': 745.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-46] DEBUG :: ASH Planner Main #1 >> Reaction at search length 27:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.146240s.

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.194119s with result Satisfiable.

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.340359399999997, Incremental time limit = None
Running cumulative time = 5.2997451999999905, Cumulative time limit = 3600
Used memory = (RSS = 501.898438Mb, VMS = 512.242188Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 30
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.117103s, Solving = 1.182642s, Total = 5.299745s, Memory = (RSS = 501.898438Mb, VMS = 512.242188Mb)), Calls = 28
Final Model :: Total atoms = 15365, Cost = (40, 0), Optimality proven = False, Number = 4, Thread ID = 4, Model type = ModelType.StableModel

[13-11-2021_23-27-46] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=28, start_step=27, end_step=28, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.117102899999996, solving_time=1.1826422999999942, total_time=5.2997451999999905, memory=Memory(rss=501.8984375, vms=512.2421875), step_range=range(0, 29), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14623999999999882, solving_time=0.19411939999999817, total_time=0.340359399999997, memory=Memory(rss=501.8984375, vms=512.2421875), step_range=range(28, 29), clingo_stats={'problem': {'lp': {'atoms': 74807.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 228457.0, 'bodies_tr': 228457.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5086.0, 'count_bodies_tr': 5086.0, 'sccs': 488.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9317.0, 'rules': 317988.0, 'rules_normal': 313161.0, 'rules_choice': 4435.0, 'rules_minimize': 56.0, 'rules_acyc': 0.0, 'rules_heuristic': 336.0, 'rules_tr': 317920.0, 'rules_tr_normal': 313161.0, 'rules_tr_choice': 4435.0, 'rules_tr_minimize': 56.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 268.0, 'eqs': 156033.0, 'eqs_atom': 31276.0, 'eqs_body': 6911.0, 'eqs_other': 117846.0}, 'lpStep': {'atoms': 2516.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8720.0, 'bodies_tr': 8720.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12558.0, 'rules_normal': 12392.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12558.0, 'rules_tr_normal': 12392.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5830.0, 'eqs_atom': 1130.0, 'eqs_body': 111.0, 'eqs_other': 4589.0}, 'generator': {'vars': 42752.0, 'vars_eliminated': 0.0, 'vars_frozen': 28267.0, 'constraints': 4294.0, 'constraints_binary': 99537.0, 'constraints_ternary': 19937.0, 'acyc_edges': 0.0, 'complexity': 125356.0}}, 'solving': {'solvers': {'choices': 6654.0, 'conflicts': 1409.0, 'conflicts_analyzed': 1397.0, 'restarts': 4.0, 'restarts_last': 168.0, 'extra': {'domain_choices': 3107.0, 'models': 4.0, 'models_level': 2259.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1032.0, 'distributed_sum_lbd': 3046.0, 'integrated': 6164.0, 'lemmas': 8883.0, 'lits_learnt': 534180.0, 'lemmas_binary': 888.0, 'lemmas_ternary': 326.0, 'cpu_time': 1.0, 'integrated_imps': 1494.0, 'integrated_jumps': 2275.0, 'guiding_paths_lits': 2457.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 1392.0, 'lemmas_loop': 1747.0, 'lemmas_other': 5744.0, 'lits_conflict': 102334.0, 'lits_loop': 13861.0, 'lits_other': 417985.0, 'jumps': {'jumps': 1397.0, 'jumps_bounded': 10.0, 'levels': 2563.0, 'levels_bounded': 495.0, 'max': 171.0, 'max_executed': 171.0, 'max_bounded': 169.0}}}}, 'summary': {'call': 28.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [40.0, 0.0], 'lower': [40.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3436012268066406, 'cpu': 1.171875, 'solve': 0.17804527282714844, 'unsat': 0.06435012817382812, 'sat': 0.07181167602539062}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 5.477954864501953, 'cpu': 7.734375, 'solve': 0.8851890563964844, 'unsat': 0.49420928955078125, 'sat': 0.17946624755859375}, 'models': {'enumerated': 30.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 29916.0, 'conflicts': 3740.0, 'conflicts_analyzed': 3463.0, 'restarts': 6.0, 'restarts_last': 168.0, 'extra': {'domain_choices': 5773.0, 'models': 30.0, 'models_level': 10077.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2844.0, 'distributed_sum_lbd': 7455.0, 'integrated': 16298.0, 'lemmas': 24550.0, 'lits_learnt': 827140.0, 'lemmas_binary': 2396.0, 'lemmas_ternary': 945.0, 'cpu_time': 3.15625, 'integrated_imps': 5707.0, 'integrated_jumps': 7693.0, 'guiding_paths_lits': 33190.0, 'guiding_paths': 336.0, 'splits': 0.0, 'lemmas_conflict': 3322.0, 'lemmas_loop': 6349.0, 'lemmas_other': 14879.0, 'lits_conflict': 148739.0, 'lits_loop': 49522.0, 'lits_other': 628879.0, 'jumps': {'jumps': 3463.0, 'jumps_bounded': 441.0, 'levels': 30237.0, 'levels_bounded': 24395.0, 'max': 746.0, 'max_executed': 746.0, 'max_bounded': 745.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-46] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 19, 10: 20, 11: 23, 12: 25, 13: 28}

[13-11-2021_23-27-46] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 6 (100.00% solved)

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 28)', truth=True, inc_range=None)

[13-11-2021_23-27-46] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 14, step = 28]:
sub_goal(3, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 14)
sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 14)

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(28)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[13-11-2021_23-27-46] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(2, complete(blue), false, false)
final_goal(2, complete(blue), true, true)
final_goal(2, complete(red), false, false)
final_goal(2, complete(red), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, tower_base((block,1)), false, true)
final_goal(2, tower_base((block,1)), true, false)
final_goal(2, tower_base((block,2)), false, true)
final_goal(2, tower_base((block,2)), true, false)
final_goal(2, tower_base((block,3)), false, false)
final_goal(2, tower_base((block,3)), true, true)
final_goal(2, tower_base((block,4)), false, true)
final_goal(2, tower_base((block,4)), true, false)
final_goal(2, tower_base((block,5)), false, true)
final_goal(2, tower_base((block,5)), true, false)
final_goal(2, tower_base((block,6)), false, false)
final_goal(2, tower_base((block,6)), true, true)
final_goal(2, unordered_tower((block,1)), false, true)
final_goal(2, unordered_tower((block,1)), true, false)
final_goal(2, unordered_tower((block,2)), false, true)
final_goal(2, unordered_tower((block,2)), true, false)
final_goal(2, unordered_tower((block,3)), false, true)
final_goal(2, unordered_tower((block,3)), true, false)
final_goal(2, unordered_tower((block,4)), false, true)
final_goal(2, unordered_tower((block,4)), true, false)
final_goal(2, unordered_tower((block,5)), false, true)
final_goal(2, unordered_tower((block,5)), true, false)
final_goal(2, unordered_tower((block,6)), false, true)
final_goal(2, unordered_tower((block,6)), true, false)

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.147588s.

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 29: original = External(symbol='current_last_sgoals(14, 28)', truth=True, inc_range=None), conversion = current_last_sgoals(14,28).

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 29: original = External(symbol='seq_achieve_fgoals(28)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(28).

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024143s with result Unsatisfiable.

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1717302000000025, Incremental time limit = None
Running cumulative time = 5.471475399999993, Cumulative time limit = 3600
Used memory = (RSS = 504.734375Mb, VMS = 514.226562Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=29, start_step=28, end_step=29, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.264690499999998, solving_time=1.2067848999999953, total_time=5.471475399999993, memory=Memory(rss=504.734375, vms=514.2265625), step_range=range(0, 30), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14758760000000137, solving_time=0.024142600000001124, total_time=0.1717302000000025, memory=Memory(rss=504.734375, vms=514.2265625), step_range=range(29, 30), clingo_stats={'problem': {'lp': {'atoms': 77334.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 237200.0, 'bodies_tr': 237200.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5266.0, 'count_bodies_tr': 5266.0, 'sccs': 508.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9753.0, 'rules': 330659.0, 'rules_normal': 325666.0, 'rules_choice': 4587.0, 'rules_minimize': 58.0, 'rules_acyc': 0.0, 'rules_heuristic': 348.0, 'rules_tr': 330591.0, 'rules_tr_normal': 325666.0, 'rules_tr_choice': 4587.0, 'rules_tr_minimize': 58.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 280.0, 'eqs': 161916.0, 'eqs_atom': 32413.0, 'eqs_body': 7023.0, 'eqs_other': 122480.0}, 'lpStep': {'atoms': 2527.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8743.0, 'bodies_tr': 8743.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12671.0, 'rules_normal': 12505.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12671.0, 'rules_tr_normal': 12505.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5883.0, 'eqs_atom': 1137.0, 'eqs_body': 112.0, 'eqs_other': 4634.0}, 'generator': {'vars': 44693.0, 'vars_eliminated': 0.0, 'vars_frozen': 29530.0, 'constraints': 4649.0, 'constraints_binary': 107158.0, 'constraints_ternary': 21693.0, 'acyc_edges': 0.0, 'complexity': 134200.0}}, 'solving': {'solvers': {'choices': 49.0, 'conflicts': 43.0, 'conflicts_analyzed': 28.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 49.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 28.0, 'distributed_sum_lbd': 67.0, 'integrated': 125.0, 'lemmas': 141.0, 'lits_learnt': 31589.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 64.0, 'integrated_jumps': 18.0, 'guiding_paths_lits': 2569.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 6.0, 'lemmas_other': 107.0, 'lits_conflict': 7348.0, 'lits_loop': 35.0, 'lits_other': 24206.0, 'jumps': {'jumps': 28.0, 'jumps_bounded': 9.0, 'levels': 45.0, 'levels_bounded': 16.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 29.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [35.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.17897987365722656, 'cpu': 0.15625, 'solve': 0.008243560791015625, 'unsat': 0.008243560791015625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.65693473815918, 'cpu': 7.890625, 'solve': 0.8934326171875, 'unsat': 0.5024528503417969, 'sat': 0.17946624755859375}, 'models': {'enumerated': 30.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 29965.0, 'conflicts': 3783.0, 'conflicts_analyzed': 3491.0, 'restarts': 6.0, 'restarts_last': 168.0, 'extra': {'domain_choices': 5822.0, 'models': 30.0, 'models_level': 10077.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2872.0, 'distributed_sum_lbd': 7522.0, 'integrated': 16423.0, 'lemmas': 24691.0, 'lits_learnt': 858729.0, 'lemmas_binary': 2404.0, 'lemmas_ternary': 945.0, 'cpu_time': 3.15625, 'integrated_imps': 5771.0, 'integrated_jumps': 7711.0, 'guiding_paths_lits': 35759.0, 'guiding_paths': 351.0, 'splits': 0.0, 'lemmas_conflict': 3350.0, 'lemmas_loop': 6355.0, 'lemmas_other': 14986.0, 'lits_conflict': 156087.0, 'lits_loop': 49557.0, 'lits_other': 653085.0, 'jumps': {'jumps': 3491.0, 'jumps_bounded': 450.0, 'levels': 30282.0, 'levels_bounded': 24411.0, 'max': 746.0, 'max_executed': 746.0, 'max_bounded': 745.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [30]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.151205s.

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 30: original = External(symbol='seq_achieve_fgoals(28)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(28).

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.119184s with result Satisfiable.

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [30]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2703887999999992, Incremental time limit = None
Running cumulative time = 5.741864199999992, Cumulative time limit = 3600
Used memory = (RSS = 508.394531Mb, VMS = 516.960938Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 31
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.415895s, Solving = 1.325969s, Total = 5.741864s, Memory = (RSS = 508.394531Mb, VMS = 516.960938Mb)), Calls = 30
Final Model :: Total atoms = 16469, Cost = (44, 0), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-11-2021_23-27-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=30, start_step=29, end_step=30, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.415895499999999, solving_time=1.3259686999999936, total_time=5.741864199999992, memory=Memory(rss=508.39453125, vms=516.9609375), step_range=range(0, 31), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15120500000000092, solving_time=0.11918379999999829, total_time=0.2703887999999992, memory=Memory(rss=508.39453125, vms=516.9609375), step_range=range(30, 31), clingo_stats={'problem': {'lp': {'atoms': 79868.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 245969.0, 'bodies_tr': 245969.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5446.0, 'count_bodies_tr': 5446.0, 'sccs': 528.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10189.0, 'rules': 343447.0, 'rules_normal': 338288.0, 'rules_choice': 4739.0, 'rules_minimize': 60.0, 'rules_acyc': 0.0, 'rules_heuristic': 360.0, 'rules_tr': 343379.0, 'rules_tr_normal': 338288.0, 'rules_tr_choice': 4739.0, 'rules_tr_minimize': 60.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 292.0, 'eqs': 167861.0, 'eqs_atom': 33561.0, 'eqs_body': 7134.0, 'eqs_other': 127166.0}, 'lpStep': {'atoms': 2534.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8769.0, 'bodies_tr': 8769.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12788.0, 'rules_normal': 12622.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12788.0, 'rules_tr_normal': 12622.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5945.0, 'eqs_atom': 1148.0, 'eqs_body': 111.0, 'eqs_other': 4686.0}, 'generator': {'vars': 46634.0, 'vars_eliminated': 0.0, 'vars_frozen': 30793.0, 'constraints': 5144.0, 'constraints_binary': 118296.0, 'constraints_ternary': 24109.0, 'acyc_edges': 0.0, 'complexity': 148317.0}}, 'solving': {'solvers': {'choices': 3919.0, 'conflicts': 793.0, 'conflicts_analyzed': 775.0, 'restarts': 3.0, 'restarts_last': 110.0, 'extra': {'domain_choices': 1672.0, 'models': 1.0, 'models_level': 617.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 529.0, 'distributed_sum_lbd': 1611.0, 'integrated': 3147.0, 'lemmas': 4090.0, 'lits_learnt': 655714.0, 'lemmas_binary': 230.0, 'lemmas_ternary': 266.0, 'cpu_time': 0.625, 'integrated_imps': 778.0, 'integrated_jumps': 1039.0, 'guiding_paths_lits': 2681.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 774.0, 'lemmas_loop': 326.0, 'lemmas_other': 2990.0, 'lits_conflict': 142395.0, 'lits_loop': 2658.0, 'lits_other': 510661.0, 'jumps': {'jumps': 775.0, 'jumps_bounded': 9.0, 'levels': 1522.0, 'levels_bounded': 199.0, 'max': 92.0, 'max_executed': 92.0, 'max_bounded': 91.0}}}}, 'summary': {'call': 30.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [44.0, 0.0], 'lower': [44.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.2762908935546875, 'cpu': 0.8125, 'solve': 0.10272979736328125, 'unsat': 0.033908843994140625, 'sat': 0.06882095336914062}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 5.933225631713867, 'cpu': 8.703125, 'solve': 0.9961624145507812, 'unsat': 0.5363616943359375, 'sat': 0.24828720092773438}, 'models': {'enumerated': 31.0, 'optimal': 14.0}, 'solving': {'solvers': {'choices': 33884.0, 'conflicts': 4576.0, 'conflicts_analyzed': 4266.0, 'restarts': 9.0, 'restarts_last': 168.0, 'extra': {'domain_choices': 7494.0, 'models': 31.0, 'models_level': 10694.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3401.0, 'distributed_sum_lbd': 9133.0, 'integrated': 19570.0, 'lemmas': 28781.0, 'lits_learnt': 1514443.0, 'lemmas_binary': 2634.0, 'lemmas_ternary': 1211.0, 'cpu_time': 3.78125, 'integrated_imps': 6549.0, 'integrated_jumps': 8750.0, 'guiding_paths_lits': 38440.0, 'guiding_paths': 370.0, 'splits': 0.0, 'lemmas_conflict': 4124.0, 'lemmas_loop': 6681.0, 'lemmas_other': 17976.0, 'lits_conflict': 298482.0, 'lits_loop': 52215.0, 'lits_other': 1163746.0, 'jumps': {'jumps': 4266.0, 'jumps_bounded': 459.0, 'levels': 31804.0, 'levels_bounded': 24610.0, 'max': 746.0, 'max_executed': 746.0, 'max_bounded': 745.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-47] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}

[13-11-2021_23-27-47] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 7 (116.67% solved)

[13-11-2021_23-27-47] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 14 was achieved successfully.

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.159854s, Solving = 0.008733s, Total = 0.168588s, Memory = (RSS = 126.300781Mb, VMS = 115.476562Mb)
2 : Statistics :: Grounding = 0.111839s, Solving = 0.004315s, Total = 0.116154s, Memory = (RSS = 128.250000Mb, VMS = 117.433594Mb)
3 : Statistics :: Grounding = 0.136421s, Solving = 0.005483s, Total = 0.141904s, Memory = (RSS = 130.261719Mb, VMS = 119.281250Mb)
4 : Statistics :: Grounding = 0.148550s, Solving = 0.009006s, Total = 0.157557s, Memory = (RSS = 133.375000Mb, VMS = 123.851562Mb)
5 : Statistics :: Grounding = 0.155644s, Solving = 0.008008s, Total = 0.163653s, Memory = (RSS = 138.414062Mb, VMS = 128.765625Mb)
6 : Statistics :: Grounding = 0.132372s, Solving = 0.007898s, Total = 0.140270s, Memory = (RSS = 139.828125Mb, VMS = 129.414062Mb)
7 : Statistics :: Grounding = 0.159243s, Solving = 0.023340s, Total = 0.182583s, Memory = (RSS = 141.179688Mb, VMS = 128.582031Mb)
8 : Statistics :: Grounding = 0.145588s, Solving = 0.007494s, Total = 0.153083s, Memory = (RSS = 144.410156Mb, VMS = 132.789062Mb)
9 : Statistics :: Grounding = 0.147020s, Solving = 0.064003s, Total = 0.211024s, Memory = (RSS = 149.660156Mb, VMS = 137.531250Mb)
10 : Statistics :: Grounding = 0.147331s, Solving = 0.013374s, Total = 0.160704s, Memory = (RSS = 154.734375Mb, VMS = 143.820312Mb)
11 : Statistics :: Grounding = 0.133671s, Solving = 0.015985s, Total = 0.149656s, Memory = (RSS = 157.394531Mb, VMS = 145.691406Mb)
12 : Statistics :: Grounding = 0.156307s, Solving = 0.047363s, Total = 0.203670s, Memory = (RSS = 163.386719Mb, VMS = 151.394531Mb)
13 : Statistics :: Grounding = 0.172017s, Solving = 0.013685s, Total = 0.185702s, Memory = (RSS = 170.808594Mb, VMS = 160.847656Mb)
14 : Statistics :: Grounding = 0.152825s, Solving = 0.057880s, Total = 0.210705s, Memory = (RSS = 175.238281Mb, VMS = 164.496094Mb)
15 : Statistics :: Grounding = 0.157241s, Solving = 0.031573s, Total = 0.188813s, Memory = (RSS = 180.140625Mb, VMS = 168.878906Mb)
16 : Statistics :: Grounding = 0.150084s, Solving = 0.044803s, Total = 0.194887s, Memory = (RSS = 189.730469Mb, VMS = 181.843750Mb)
17 : Statistics :: Grounding = 0.161985s, Solving = 0.043007s, Total = 0.204991s, Memory = (RSS = 194.683594Mb, VMS = 186.023438Mb)
18 : Statistics :: Grounding = 0.161625s, Solving = 0.072401s, Total = 0.234026s, Memory = (RSS = 199.324219Mb, VMS = 190.058594Mb)
19 : Statistics :: Grounding = 0.149013s, Solving = 0.239080s, Total = 0.388093s, Memory = (RSS = 464.941406Mb, VMS = 474.746094Mb)
20 : Statistics :: Grounding = 0.115741s, Solving = 0.053030s, Total = 0.168772s, Memory = (RSS = 470.531250Mb, VMS = 479.972656Mb)
21 : Statistics :: Grounding = 0.137867s, Solving = 0.014762s, Total = 0.152629s, Memory = (RSS = 471.589844Mb, VMS = 480.359375Mb)
22 : Statistics :: Grounding = 0.147012s, Solving = 0.017208s, Total = 0.164220s, Memory = (RSS = 473.066406Mb, VMS = 481.792969Mb)
23 : Statistics :: Grounding = 0.136782s, Solving = 0.042850s, Total = 0.179632s, Memory = (RSS = 481.628906Mb, VMS = 497.648438Mb)
24 : Statistics :: Grounding = 0.139078s, Solving = 0.017996s, Total = 0.157073s, Memory = (RSS = 483.457031Mb, VMS = 498.207031Mb)
25 : Statistics :: Grounding = 0.144099s, Solving = 0.060624s, Total = 0.204722s, Memory = (RSS = 488.070312Mb, VMS = 501.746094Mb)
26 : Statistics :: Grounding = 0.147686s, Solving = 0.021532s, Total = 0.169218s, Memory = (RSS = 490.292969Mb, VMS = 502.828125Mb)
27 : Statistics :: Grounding = 0.163967s, Solving = 0.043088s, Total = 0.207056s, Memory = (RSS = 492.750000Mb, VMS = 504.250000Mb)
28 : Statistics :: Grounding = 0.146240s, Solving = 0.194119s, Total = 0.340359s, Memory = (RSS = 501.898438Mb, VMS = 512.242188Mb)
29 : Statistics :: Grounding = 0.147588s, Solving = 0.024143s, Total = 0.171730s, Memory = (RSS = 504.734375Mb, VMS = 514.226562Mb)
30 : Statistics :: Grounding = 0.151205s, Solving = 0.119184s, Total = 0.270389s, Memory = (RSS = 508.394531Mb, VMS = 516.960938Mb)

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.741864s due to: External generator exit.

[13-11-2021_23-27-47] DEBUG :: ASH Planner Main #1 >> Deleting program grounding at level 2.

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-27-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[13-11-2021_23-27-47] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 15, 33: 16, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 31, 15: 32, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-27-48] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 15, 33: 16, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 31, 15: 32, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-27-48] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 14, Last requested goal index = 14 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-27-48] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.415895s, Solving = 1.325969s, Total = 5.741864s, Memory = (RSS = 508.394531Mb, VMS = 516.960938Mb)), Calls = 30
Model :: Total atoms = 16469, Cost = (44, 0), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[13-11-2021_23-27-48] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 30 :: Actions = 48                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
        talos : grasp(manipulator_arm_2,(block,5))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 13:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 15:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 16:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 17:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_2,(block,5))
Step 18:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 8] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 8] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
        talos : release(manipulator_arm_1,(block,3))
Step 19:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 9] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 9] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
        talos : grasp(manipulator_arm_1,(block,1))
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : lift(manipulator_arm_1,(block,1))
        talos : release(manipulator_arm_2,(block,2))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 26:
    Current Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 29:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 14] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 30:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 14] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 14] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))
        talos : put(manipulator_arm_2,(block,4),(block,5))

[13-11-2021_23-27-48] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=17, total_plan_length=30, step_range=range(17, 31)

[13-11-2021_23-27-48] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 35, Actions = 44
Level [2]: Length = 30, Actions = 48
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-27-48] INFO :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  2 (par-ref), Length =  13, Actions =  20 (Com = 0.65), Sgs = 20, Time =   5.778s (Gro =   4.447s, Sea =   1.331s), Expan (1.86, 1.82) (Dev = (0.90, 1.10), Bal = (0.48, 0.60))

[13-11-2021_23-27-48] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=13, start_step=17, blend=Blend(left=0, right=0.2)

[13-11-2021_23-27-48] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=6, large_group_size=7

[13-11-2021_23-27-48] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=23, blend=Blend(left=0, right=1), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[13-11-2021_23-27-48] INFO :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  2 (par-ref), Length =  13, Actions =  20 (Com = 0.65), Sgs = 20, Time =   5.778s (Gro =   4.447s, Sea =   1.331s), Expan (1.86, 1.82) (Dev = (0.90, 1.10), Bal = (0.48, 0.60))
Division points [total=1] : [(Index = 23, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-27-48] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 3:
Divided plan : Level =  2 (par-ref), Length =  13, Actions =  20 (Com = 0.65), Sgs = 20, Time =   5.778s (Gro =   4.447s, Sea =   1.331s), Expan (1.86, 1.82) (Dev = (0.90, 1.10), Bal = (0.48, 0.60))
Division points [total=1] : [(Index = 23, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-27-48] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [18-24]

[13-11-2021_23-27-48] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [18-24], problem number = 3, increment number = 3

[13-11-2021_23-27-48] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 18)
	('last_sgoals', 24)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016425336EA0>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-27-48] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 18
last_sgoals = 24
start_step = 35
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 41

[13-11-2021_23-27-48] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [18-24] : Minimum search length bound = disabled with value = 41

[13-11-2021_23-27-48] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-27-48] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = True, chosen = True

[13-11-2021_23-27-48] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-27-48] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'lift(manipulator_arm_1,(block,1))', 'F': 'on((block,1))', 'V': 'nothing', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 24})

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 12 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 18).
sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 18).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 19).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 19).
sub_goal(2, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 19).
sub_goal(2, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 20).
sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 20).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 21).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 21).
sub_goal(2, talos, move(hallway), in(talos), hallway, 22).
sub_goal(2, talos, move(store_room), in(talos), store_room, 23).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 24).

[13-11-2021_23-27-48] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000016439A39BD0>

[13-11-2021_23-27-48] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[13-11-2021_23-27-48] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000016439A39BD0> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,2)), 3)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 4)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 4)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)), 5)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,puzzle_room_door_handle_outer), 6)).
fix_action(occurs(1, talos, actuate(manipulator_end_1,puzzle_room_door), 7)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 8)).
fix_action(occurs(1, talos, release(manipulator_end_1,puzzle_room_door_handle_outer), 8)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 9)).
fix_action(occurs(1, talos, move((hallway,1)), 10)).
fix_action(occurs(1, talos, move((hallway,0)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 12)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)), 13)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,store_room_door_handle_outer), 14)).
fix_action(occurs(1, talos, actuate(manipulator_end_2,store_room_door), 15)).
fix_action(occurs(1, talos, release(manipulator_end_2,store_room_door_handle_outer), 16)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 17)).
fix_action(occurs(1, talos, move((store_room,1)), 18)).
fix_action(occurs(1, talos, move((store_room,0)), 19)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,6))), 21)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,5))), 21)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,6)), 22)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,5)), 22)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 23)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 23)).
fix_action(occurs(1, talos, move((store_room,1)), 24)).
fix_action(occurs(1, talos, move((hallway,0)), 25)).
fix_action(occurs(1, talos, move((hallway,1)), 26)).
fix_action(occurs(1, talos, move((hallway,2)), 27)).
fix_action(occurs(1, talos, move((puzzle_room,0)), 28)).
fix_action(occurs(1, talos, move((puzzle_room,1)), 29)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 30)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 30)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,6),puzzle_room_table_right), 31)).
fix_action(occurs(1, talos, release(manipulator_end_1,(block,6)), 32)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,3))), 33)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,3)), 34)).
fix_action(occurs(1, talos, put(manipulator_end_2,(block,5),(block,6)), 34)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,3),puzzle_room_table_left), 35)).
fix_action(occurs(1, talos, release(manipulator_end_2,(block,5)), 35)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[13-11-2021_23-27-48] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000016439A39BD0> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), nothing, 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), nothing, 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), nothing, 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,2), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), nothing, 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (hallway,2), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), nothing, 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (hallway,2), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), nothing, 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (hallway,2), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), nothing, 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (hallway,2), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), nothing, 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), hallway, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (hallway,2), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), nothing, 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), hallway, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (hallway,2), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), nothing, 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), hallway, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (hallway,1), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), nothing, 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), hallway, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (hallway,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), nothing, 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (hallway,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), nothing, 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), hallway, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (hallway,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), nothing, 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), hallway, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(1, complete(blue), false, 14)).
fix_fluent(holds(1, complete(red), false, 14)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 14)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 14)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 14)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 14)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(1, configuration(store_room_door), closed, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 14)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(talos), (hallway,0), 14)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 14)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 14)).
fix_fluent(holds(1, on((block,3)), (block,1), 14)).
fix_fluent(holds(1, on((block,4)), nothing, 14)).
fix_fluent(holds(1, on((block,5)), nothing, 14)).
fix_fluent(holds(1, on((block,6)), nothing, 14)).
fix_fluent(holds(1, tower_base((block,1)), true, 14)).
fix_fluent(holds(1, tower_base((block,2)), true, 14)).
fix_fluent(holds(1, tower_base((block,3)), false, 14)).
fix_fluent(holds(1, tower_base((block,4)), false, 14)).
fix_fluent(holds(1, tower_base((block,5)), false, 14)).
fix_fluent(holds(1, tower_base((block,6)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), closed, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), store_room, 14)).
fix_fluent(holds(2, in((block,6)), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), hallway, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), nothing, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(1, complete(blue), false, 15)).
fix_fluent(holds(1, complete(red), false, 15)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 15)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 15)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 15)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 15)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(1, configuration(store_room_door), open, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 15)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(talos), (hallway,0), 15)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 15)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 15)).
fix_fluent(holds(1, on((block,3)), (block,1), 15)).
fix_fluent(holds(1, on((block,4)), nothing, 15)).
fix_fluent(holds(1, on((block,5)), nothing, 15)).
fix_fluent(holds(1, on((block,6)), nothing, 15)).
fix_fluent(holds(1, tower_base((block,1)), true, 15)).
fix_fluent(holds(1, tower_base((block,2)), true, 15)).
fix_fluent(holds(1, tower_base((block,3)), false, 15)).
fix_fluent(holds(1, tower_base((block,4)), false, 15)).
fix_fluent(holds(1, tower_base((block,5)), false, 15)).
fix_fluent(holds(1, tower_base((block,6)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), store_room, 15)).
fix_fluent(holds(2, in((block,6)), store_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), hallway, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), nothing, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(1, complete(blue), false, 16)).
fix_fluent(holds(1, complete(red), false, 16)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 16)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 16)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(1, configuration(store_room_door), open, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 16)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 16)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(talos), (hallway,0), 16)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 16)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 16)).
fix_fluent(holds(1, on((block,3)), (block,1), 16)).
fix_fluent(holds(1, on((block,4)), nothing, 16)).
fix_fluent(holds(1, on((block,5)), nothing, 16)).
fix_fluent(holds(1, on((block,6)), nothing, 16)).
fix_fluent(holds(1, tower_base((block,1)), true, 16)).
fix_fluent(holds(1, tower_base((block,2)), true, 16)).
fix_fluent(holds(1, tower_base((block,3)), false, 16)).
fix_fluent(holds(1, tower_base((block,4)), false, 16)).
fix_fluent(holds(1, tower_base((block,5)), false, 16)).
fix_fluent(holds(1, tower_base((block,6)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), store_room, 16)).
fix_fluent(holds(2, in((block,6)), store_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), hallway, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), nothing, 16)).
fix_fluent(holds(2, on((block,6)), nothing, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(1, complete(blue), false, 17)).
fix_fluent(holds(1, complete(red), false, 17)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 17)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 17)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(1, configuration(store_room_door), open, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 17)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 17)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(talos), (hallway,0), 17)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 17)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 17)).
fix_fluent(holds(1, on((block,3)), (block,1), 17)).
fix_fluent(holds(1, on((block,4)), nothing, 17)).
fix_fluent(holds(1, on((block,5)), nothing, 17)).
fix_fluent(holds(1, on((block,6)), nothing, 17)).
fix_fluent(holds(1, tower_base((block,1)), true, 17)).
fix_fluent(holds(1, tower_base((block,2)), true, 17)).
fix_fluent(holds(1, tower_base((block,3)), false, 17)).
fix_fluent(holds(1, tower_base((block,4)), false, 17)).
fix_fluent(holds(1, tower_base((block,5)), false, 17)).
fix_fluent(holds(1, tower_base((block,6)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), store_room, 17)).
fix_fluent(holds(2, in((block,6)), store_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), hallway, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), (block,1), 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), nothing, 17)).
fix_fluent(holds(2, on((block,6)), nothing, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), false, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(1, complete(blue), false, 18)).
fix_fluent(holds(1, complete(red), false, 18)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 18)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 18)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(1, configuration(store_room_door), open, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 18)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(talos), (store_room,1), 18)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 18)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 18)).
fix_fluent(holds(1, on((block,3)), (block,1), 18)).
fix_fluent(holds(1, on((block,4)), nothing, 18)).
fix_fluent(holds(1, on((block,5)), nothing, 18)).
fix_fluent(holds(1, on((block,6)), nothing, 18)).
fix_fluent(holds(1, tower_base((block,1)), true, 18)).
fix_fluent(holds(1, tower_base((block,2)), true, 18)).
fix_fluent(holds(1, tower_base((block,3)), false, 18)).
fix_fluent(holds(1, tower_base((block,4)), false, 18)).
fix_fluent(holds(1, tower_base((block,5)), false, 18)).
fix_fluent(holds(1, tower_base((block,6)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), open, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), store_room, 18)).
fix_fluent(holds(2, in((block,5)), store_room, 18)).
fix_fluent(holds(2, in((block,6)), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), store_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), (block,1), 18)).
fix_fluent(holds(2, on((block,4)), nothing, 18)).
fix_fluent(holds(2, on((block,5)), nothing, 18)).
fix_fluent(holds(2, on((block,6)), nothing, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), false, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(1, complete(blue), false, 19)).
fix_fluent(holds(1, complete(red), false, 19)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 19)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 19)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(1, configuration(store_room_door), open, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 19)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 19)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(talos), (store_room,0), 19)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 19)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 19)).
fix_fluent(holds(1, on((block,3)), (block,1), 19)).
fix_fluent(holds(1, on((block,4)), nothing, 19)).
fix_fluent(holds(1, on((block,5)), nothing, 19)).
fix_fluent(holds(1, on((block,6)), nothing, 19)).
fix_fluent(holds(1, tower_base((block,1)), true, 19)).
fix_fluent(holds(1, tower_base((block,2)), true, 19)).
fix_fluent(holds(1, tower_base((block,3)), false, 19)).
fix_fluent(holds(1, tower_base((block,4)), false, 19)).
fix_fluent(holds(1, tower_base((block,5)), false, 19)).
fix_fluent(holds(1, tower_base((block,6)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(2, complete(blue), false, 19)).
fix_fluent(holds(2, complete(red), false, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 19)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(2, configuration(store_room_door), open, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,4)), store_room, 19)).
fix_fluent(holds(2, in((block,5)), store_room, 19)).
fix_fluent(holds(2, in((block,6)), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 19)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 19)).
fix_fluent(holds(2, in(talos), store_room, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,3)), (block,1), 19)).
fix_fluent(holds(2, on((block,4)), nothing, 19)).
fix_fluent(holds(2, on((block,5)), nothing, 19)).
fix_fluent(holds(2, on((block,6)), nothing, 19)).
fix_fluent(holds(2, tower_base((block,1)), true, 19)).
fix_fluent(holds(2, tower_base((block,2)), true, 19)).
fix_fluent(holds(2, tower_base((block,3)), false, 19)).
fix_fluent(holds(2, tower_base((block,4)), false, 19)).
fix_fluent(holds(2, tower_base((block,5)), false, 19)).
fix_fluent(holds(2, tower_base((block,6)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(1, complete(blue), false, 20)).
fix_fluent(holds(1, complete(red), false, 20)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 20)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 20)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(1, configuration(store_room_door), open, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 20)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 20)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(talos), (store_room,0), 20)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 20)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 20)).
fix_fluent(holds(1, on((block,3)), (block,1), 20)).
fix_fluent(holds(1, on((block,4)), nothing, 20)).
fix_fluent(holds(1, on((block,5)), nothing, 20)).
fix_fluent(holds(1, on((block,6)), nothing, 20)).
fix_fluent(holds(1, tower_base((block,1)), true, 20)).
fix_fluent(holds(1, tower_base((block,2)), true, 20)).
fix_fluent(holds(1, tower_base((block,3)), false, 20)).
fix_fluent(holds(1, tower_base((block,4)), false, 20)).
fix_fluent(holds(1, tower_base((block,5)), false, 20)).
fix_fluent(holds(1, tower_base((block,6)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(2, complete(blue), false, 20)).
fix_fluent(holds(2, complete(red), false, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 20)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(2, configuration(store_room_door), open, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,4)), store_room, 20)).
fix_fluent(holds(2, in((block,5)), store_room, 20)).
fix_fluent(holds(2, in((block,6)), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 20)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 20)).
fix_fluent(holds(2, in(talos), store_room, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,3)), (block,1), 20)).
fix_fluent(holds(2, on((block,4)), nothing, 20)).
fix_fluent(holds(2, on((block,5)), nothing, 20)).
fix_fluent(holds(2, on((block,6)), nothing, 20)).
fix_fluent(holds(2, tower_base((block,1)), true, 20)).
fix_fluent(holds(2, tower_base((block,2)), true, 20)).
fix_fluent(holds(2, tower_base((block,3)), false, 20)).
fix_fluent(holds(2, tower_base((block,4)), false, 20)).
fix_fluent(holds(2, tower_base((block,5)), false, 20)).
fix_fluent(holds(2, tower_base((block,6)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(1, complete(blue), false, 21)).
fix_fluent(holds(1, complete(red), false, 21)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 21)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 21)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 21)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 21)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(1, configuration(store_room_door), open, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 21)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 21)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(talos), (store_room,0), 21)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 21)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 21)).
fix_fluent(holds(1, on((block,3)), (block,1), 21)).
fix_fluent(holds(1, on((block,4)), nothing, 21)).
fix_fluent(holds(1, on((block,5)), nothing, 21)).
fix_fluent(holds(1, on((block,6)), nothing, 21)).
fix_fluent(holds(1, tower_base((block,1)), true, 21)).
fix_fluent(holds(1, tower_base((block,2)), true, 21)).
fix_fluent(holds(1, tower_base((block,3)), false, 21)).
fix_fluent(holds(1, tower_base((block,4)), false, 21)).
fix_fluent(holds(1, tower_base((block,5)), false, 21)).
fix_fluent(holds(1, tower_base((block,6)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(2, complete(blue), false, 21)).
fix_fluent(holds(2, complete(red), false, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 21)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(2, configuration(store_room_door), open, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,4)), store_room, 21)).
fix_fluent(holds(2, in((block,5)), store_room, 21)).
fix_fluent(holds(2, in((block,6)), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 21)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 21)).
fix_fluent(holds(2, in(talos), store_room, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,3)), (block,1), 21)).
fix_fluent(holds(2, on((block,4)), nothing, 21)).
fix_fluent(holds(2, on((block,5)), nothing, 21)).
fix_fluent(holds(2, on((block,6)), nothing, 21)).
fix_fluent(holds(2, tower_base((block,1)), true, 21)).
fix_fluent(holds(2, tower_base((block,2)), true, 21)).
fix_fluent(holds(2, tower_base((block,3)), false, 21)).
fix_fluent(holds(2, tower_base((block,4)), false, 21)).
fix_fluent(holds(2, tower_base((block,5)), false, 21)).
fix_fluent(holds(2, tower_base((block,6)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(1, complete(blue), false, 22)).
fix_fluent(holds(1, complete(red), false, 22)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 22)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 22)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 22)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 22)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(1, configuration(store_room_door), open, 22)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 22)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 22)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(talos), (store_room,0), 22)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 22)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 22)).
fix_fluent(holds(1, on((block,3)), (block,1), 22)).
fix_fluent(holds(1, on((block,4)), nothing, 22)).
fix_fluent(holds(1, on((block,5)), nothing, 22)).
fix_fluent(holds(1, on((block,6)), nothing, 22)).
fix_fluent(holds(1, tower_base((block,1)), true, 22)).
fix_fluent(holds(1, tower_base((block,2)), true, 22)).
fix_fluent(holds(1, tower_base((block,3)), false, 22)).
fix_fluent(holds(1, tower_base((block,4)), false, 22)).
fix_fluent(holds(1, tower_base((block,5)), false, 22)).
fix_fluent(holds(1, tower_base((block,6)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(2, complete(blue), false, 22)).
fix_fluent(holds(2, complete(red), false, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 22)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(2, configuration(store_room_door), open, 22)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,4)), store_room, 22)).
fix_fluent(holds(2, in((block,5)), store_room, 22)).
fix_fluent(holds(2, in((block,6)), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 22)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 22)).
fix_fluent(holds(2, in(talos), store_room, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,3)), (block,1), 22)).
fix_fluent(holds(2, on((block,4)), nothing, 22)).
fix_fluent(holds(2, on((block,5)), nothing, 22)).
fix_fluent(holds(2, on((block,6)), nothing, 22)).
fix_fluent(holds(2, tower_base((block,1)), true, 22)).
fix_fluent(holds(2, tower_base((block,2)), true, 22)).
fix_fluent(holds(2, tower_base((block,3)), false, 22)).
fix_fluent(holds(2, tower_base((block,4)), false, 22)).
fix_fluent(holds(2, tower_base((block,5)), false, 22)).
fix_fluent(holds(2, tower_base((block,6)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(1, complete(blue), false, 23)).
fix_fluent(holds(1, complete(red), false, 23)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 23)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 23)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 23)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 23)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(1, configuration(store_room_door), open, 23)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 23)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 23)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 23)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 23)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(talos), (store_room,0), 23)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 23)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 23)).
fix_fluent(holds(1, on((block,3)), (block,1), 23)).
fix_fluent(holds(1, on((block,4)), nothing, 23)).
fix_fluent(holds(1, on((block,5)), nothing, 23)).
fix_fluent(holds(1, on((block,6)), nothing, 23)).
fix_fluent(holds(1, tower_base((block,1)), true, 23)).
fix_fluent(holds(1, tower_base((block,2)), true, 23)).
fix_fluent(holds(1, tower_base((block,3)), false, 23)).
fix_fluent(holds(1, tower_base((block,4)), false, 23)).
fix_fluent(holds(1, tower_base((block,5)), false, 23)).
fix_fluent(holds(1, tower_base((block,6)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(2, complete(blue), false, 23)).
fix_fluent(holds(2, complete(red), false, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 23)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(2, configuration(store_room_door), open, 23)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 23)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,4)), store_room, 23)).
fix_fluent(holds(2, in((block,5)), store_room, 23)).
fix_fluent(holds(2, in((block,6)), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 23)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 23)).
fix_fluent(holds(2, in(talos), store_room, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,3)), (block,1), 23)).
fix_fluent(holds(2, on((block,4)), nothing, 23)).
fix_fluent(holds(2, on((block,5)), nothing, 23)).
fix_fluent(holds(2, on((block,6)), nothing, 23)).
fix_fluent(holds(2, tower_base((block,1)), true, 23)).
fix_fluent(holds(2, tower_base((block,2)), true, 23)).
fix_fluent(holds(2, tower_base((block,3)), false, 23)).
fix_fluent(holds(2, tower_base((block,4)), false, 23)).
fix_fluent(holds(2, tower_base((block,5)), false, 23)).
fix_fluent(holds(2, tower_base((block,6)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(1, complete(blue), false, 24)).
fix_fluent(holds(1, complete(red), false, 24)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 24)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 24)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 24)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 24)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(1, configuration(store_room_door), open, 24)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 24)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 24)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 24)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 24)).
fix_fluent(holds(1, in((block,5)), (store_room,1), 24)).
fix_fluent(holds(1, in((block,6)), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(talos), (store_room,1), 24)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 24)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 24)).
fix_fluent(holds(1, on((block,3)), (block,1), 24)).
fix_fluent(holds(1, on((block,4)), nothing, 24)).
fix_fluent(holds(1, on((block,5)), nothing, 24)).
fix_fluent(holds(1, on((block,6)), nothing, 24)).
fix_fluent(holds(1, tower_base((block,1)), true, 24)).
fix_fluent(holds(1, tower_base((block,2)), true, 24)).
fix_fluent(holds(1, tower_base((block,3)), false, 24)).
fix_fluent(holds(1, tower_base((block,4)), false, 24)).
fix_fluent(holds(1, tower_base((block,5)), false, 24)).
fix_fluent(holds(1, tower_base((block,6)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(2, complete(blue), false, 24)).
fix_fluent(holds(2, complete(red), false, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 24)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(2, configuration(store_room_door), open, 24)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 24)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,4)), store_room, 24)).
fix_fluent(holds(2, in((block,5)), store_room, 24)).
fix_fluent(holds(2, in((block,6)), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 24)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 24)).
fix_fluent(holds(2, in(talos), store_room, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,3)), (block,1), 24)).
fix_fluent(holds(2, on((block,4)), nothing, 24)).
fix_fluent(holds(2, on((block,5)), nothing, 24)).
fix_fluent(holds(2, on((block,6)), nothing, 24)).
fix_fluent(holds(2, tower_base((block,1)), true, 24)).
fix_fluent(holds(2, tower_base((block,2)), true, 24)).
fix_fluent(holds(2, tower_base((block,3)), false, 24)).
fix_fluent(holds(2, tower_base((block,4)), false, 24)).
fix_fluent(holds(2, tower_base((block,5)), false, 24)).
fix_fluent(holds(2, tower_base((block,6)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(1, complete(blue), false, 25)).
fix_fluent(holds(1, complete(red), false, 25)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 25)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 25)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 25)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 25)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(1, configuration(store_room_door), open, 25)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 25)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 25)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 25)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 25)).
fix_fluent(holds(1, in((block,5)), (hallway,0), 25)).
fix_fluent(holds(1, in((block,6)), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 25)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(talos), (hallway,0), 25)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 25)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 25)).
fix_fluent(holds(1, on((block,3)), (block,1), 25)).
fix_fluent(holds(1, on((block,4)), nothing, 25)).
fix_fluent(holds(1, on((block,5)), nothing, 25)).
fix_fluent(holds(1, on((block,6)), nothing, 25)).
fix_fluent(holds(1, tower_base((block,1)), true, 25)).
fix_fluent(holds(1, tower_base((block,2)), true, 25)).
fix_fluent(holds(1, tower_base((block,3)), false, 25)).
fix_fluent(holds(1, tower_base((block,4)), false, 25)).
fix_fluent(holds(1, tower_base((block,5)), false, 25)).
fix_fluent(holds(1, tower_base((block,6)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(2, complete(blue), false, 25)).
fix_fluent(holds(2, complete(red), false, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 25)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(2, configuration(store_room_door), open, 25)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 25)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,4)), store_room, 25)).
fix_fluent(holds(2, in((block,5)), hallway, 25)).
fix_fluent(holds(2, in((block,6)), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 25)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 25)).
fix_fluent(holds(2, in(talos), hallway, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,3)), (block,1), 25)).
fix_fluent(holds(2, on((block,4)), nothing, 25)).
fix_fluent(holds(2, on((block,5)), nothing, 25)).
fix_fluent(holds(2, on((block,6)), nothing, 25)).
fix_fluent(holds(2, tower_base((block,1)), true, 25)).
fix_fluent(holds(2, tower_base((block,2)), true, 25)).
fix_fluent(holds(2, tower_base((block,3)), false, 25)).
fix_fluent(holds(2, tower_base((block,4)), false, 25)).
fix_fluent(holds(2, tower_base((block,5)), false, 25)).
fix_fluent(holds(2, tower_base((block,6)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(1, complete(blue), false, 26)).
fix_fluent(holds(1, complete(red), false, 26)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 26)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 26)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 26)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 26)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(1, configuration(store_room_door), open, 26)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 26)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 26)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 26)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 26)).
fix_fluent(holds(1, in((block,5)), (hallway,1), 26)).
fix_fluent(holds(1, in((block,6)), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(talos), (hallway,1), 26)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 26)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 26)).
fix_fluent(holds(1, on((block,3)), (block,1), 26)).
fix_fluent(holds(1, on((block,4)), nothing, 26)).
fix_fluent(holds(1, on((block,5)), nothing, 26)).
fix_fluent(holds(1, on((block,6)), nothing, 26)).
fix_fluent(holds(1, tower_base((block,1)), true, 26)).
fix_fluent(holds(1, tower_base((block,2)), true, 26)).
fix_fluent(holds(1, tower_base((block,3)), false, 26)).
fix_fluent(holds(1, tower_base((block,4)), false, 26)).
fix_fluent(holds(1, tower_base((block,5)), false, 26)).
fix_fluent(holds(1, tower_base((block,6)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(2, complete(blue), false, 26)).
fix_fluent(holds(2, complete(red), false, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 26)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(2, configuration(store_room_door), open, 26)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 26)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,4)), store_room, 26)).
fix_fluent(holds(2, in((block,5)), hallway, 26)).
fix_fluent(holds(2, in((block,6)), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 26)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 26)).
fix_fluent(holds(2, in(talos), hallway, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,3)), (block,1), 26)).
fix_fluent(holds(2, on((block,4)), nothing, 26)).
fix_fluent(holds(2, on((block,5)), nothing, 26)).
fix_fluent(holds(2, on((block,6)), nothing, 26)).
fix_fluent(holds(2, tower_base((block,1)), true, 26)).
fix_fluent(holds(2, tower_base((block,2)), true, 26)).
fix_fluent(holds(2, tower_base((block,3)), false, 26)).
fix_fluent(holds(2, tower_base((block,4)), false, 26)).
fix_fluent(holds(2, tower_base((block,5)), false, 26)).
fix_fluent(holds(2, tower_base((block,6)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(1, complete(blue), false, 27)).
fix_fluent(holds(1, complete(red), false, 27)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 27)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 27)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 27)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 27)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(1, configuration(store_room_door), open, 27)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 27)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 27)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 27)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 27)).
fix_fluent(holds(1, in((block,5)), (hallway,2), 27)).
fix_fluent(holds(1, in((block,6)), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 27)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(talos), (hallway,2), 27)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 27)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 27)).
fix_fluent(holds(1, on((block,3)), (block,1), 27)).
fix_fluent(holds(1, on((block,4)), nothing, 27)).
fix_fluent(holds(1, on((block,5)), nothing, 27)).
fix_fluent(holds(1, on((block,6)), nothing, 27)).
fix_fluent(holds(1, tower_base((block,1)), true, 27)).
fix_fluent(holds(1, tower_base((block,2)), true, 27)).
fix_fluent(holds(1, tower_base((block,3)), false, 27)).
fix_fluent(holds(1, tower_base((block,4)), false, 27)).
fix_fluent(holds(1, tower_base((block,5)), false, 27)).
fix_fluent(holds(1, tower_base((block,6)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(2, complete(blue), false, 27)).
fix_fluent(holds(2, complete(red), false, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 27)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(2, configuration(store_room_door), open, 27)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 27)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,4)), store_room, 27)).
fix_fluent(holds(2, in((block,5)), hallway, 27)).
fix_fluent(holds(2, in((block,6)), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 27)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 27)).
fix_fluent(holds(2, in(talos), hallway, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,3)), (block,1), 27)).
fix_fluent(holds(2, on((block,4)), nothing, 27)).
fix_fluent(holds(2, on((block,5)), nothing, 27)).
fix_fluent(holds(2, on((block,6)), nothing, 27)).
fix_fluent(holds(2, tower_base((block,1)), true, 27)).
fix_fluent(holds(2, tower_base((block,2)), true, 27)).
fix_fluent(holds(2, tower_base((block,3)), false, 27)).
fix_fluent(holds(2, tower_base((block,4)), false, 27)).
fix_fluent(holds(2, tower_base((block,5)), false, 27)).
fix_fluent(holds(2, tower_base((block,6)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(1, complete(blue), false, 28)).
fix_fluent(holds(1, complete(red), false, 28)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 28)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 28)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 28)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 28)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(1, configuration(store_room_door), open, 28)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 28)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 28)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 28)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 28)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 28)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(talos), (puzzle_room,0), 28)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 28)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 28)).
fix_fluent(holds(1, on((block,3)), (block,1), 28)).
fix_fluent(holds(1, on((block,4)), nothing, 28)).
fix_fluent(holds(1, on((block,5)), nothing, 28)).
fix_fluent(holds(1, on((block,6)), nothing, 28)).
fix_fluent(holds(1, tower_base((block,1)), true, 28)).
fix_fluent(holds(1, tower_base((block,2)), true, 28)).
fix_fluent(holds(1, tower_base((block,3)), false, 28)).
fix_fluent(holds(1, tower_base((block,4)), false, 28)).
fix_fluent(holds(1, tower_base((block,5)), false, 28)).
fix_fluent(holds(1, tower_base((block,6)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(2, complete(blue), false, 28)).
fix_fluent(holds(2, complete(red), false, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 28)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(2, configuration(store_room_door), open, 28)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 28)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 28)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,4)), store_room, 28)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 28)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 28)).
fix_fluent(holds(2, in(talos), puzzle_room, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,3)), (block,1), 28)).
fix_fluent(holds(2, on((block,4)), nothing, 28)).
fix_fluent(holds(2, on((block,5)), nothing, 28)).
fix_fluent(holds(2, on((block,6)), nothing, 28)).
fix_fluent(holds(2, tower_base((block,1)), true, 28)).
fix_fluent(holds(2, tower_base((block,2)), true, 28)).
fix_fluent(holds(2, tower_base((block,3)), false, 28)).
fix_fluent(holds(2, tower_base((block,4)), false, 28)).
fix_fluent(holds(2, tower_base((block,5)), false, 28)).
fix_fluent(holds(2, tower_base((block,6)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(1, complete(blue), false, 29)).
fix_fluent(holds(1, complete(red), false, 29)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 29)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 29)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 29)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 29)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(1, configuration(store_room_door), open, 29)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 29)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 29)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 29)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 29)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 29)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 29)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 29)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 29)).
fix_fluent(holds(1, on((block,3)), (block,1), 29)).
fix_fluent(holds(1, on((block,4)), nothing, 29)).
fix_fluent(holds(1, on((block,5)), nothing, 29)).
fix_fluent(holds(1, on((block,6)), nothing, 29)).
fix_fluent(holds(1, tower_base((block,1)), true, 29)).
fix_fluent(holds(1, tower_base((block,2)), true, 29)).
fix_fluent(holds(1, tower_base((block,3)), false, 29)).
fix_fluent(holds(1, tower_base((block,4)), false, 29)).
fix_fluent(holds(1, tower_base((block,5)), false, 29)).
fix_fluent(holds(1, tower_base((block,6)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(2, complete(blue), false, 29)).
fix_fluent(holds(2, complete(red), false, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 29)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(2, configuration(store_room_door), open, 29)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 29)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 29)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,4)), store_room, 29)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 29)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 29)).
fix_fluent(holds(2, in(talos), puzzle_room, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,3)), (block,1), 29)).
fix_fluent(holds(2, on((block,4)), nothing, 29)).
fix_fluent(holds(2, on((block,5)), nothing, 29)).
fix_fluent(holds(2, on((block,6)), nothing, 29)).
fix_fluent(holds(2, tower_base((block,1)), true, 29)).
fix_fluent(holds(2, tower_base((block,2)), true, 29)).
fix_fluent(holds(2, tower_base((block,3)), false, 29)).
fix_fluent(holds(2, tower_base((block,4)), false, 29)).
fix_fluent(holds(2, tower_base((block,5)), false, 29)).
fix_fluent(holds(2, tower_base((block,6)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(1, complete(blue), false, 30)).
fix_fluent(holds(1, complete(red), false, 30)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 30)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 30)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 30)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 30)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(1, configuration(store_room_door), open, 30)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 30)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 30)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 30)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 30)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 30)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 30)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 30)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 30)).
fix_fluent(holds(1, on((block,3)), (block,1), 30)).
fix_fluent(holds(1, on((block,4)), nothing, 30)).
fix_fluent(holds(1, on((block,5)), nothing, 30)).
fix_fluent(holds(1, on((block,6)), nothing, 30)).
fix_fluent(holds(1, tower_base((block,1)), true, 30)).
fix_fluent(holds(1, tower_base((block,2)), true, 30)).
fix_fluent(holds(1, tower_base((block,3)), false, 30)).
fix_fluent(holds(1, tower_base((block,4)), false, 30)).
fix_fluent(holds(1, tower_base((block,5)), false, 30)).
fix_fluent(holds(1, tower_base((block,6)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(2, complete(blue), false, 30)).
fix_fluent(holds(2, complete(red), false, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 30)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(2, configuration(store_room_door), open, 30)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 30)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 30)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,4)), store_room, 30)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 30)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 30)).
fix_fluent(holds(2, in(talos), puzzle_room, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,3)), (block,1), 30)).
fix_fluent(holds(2, on((block,4)), nothing, 30)).
fix_fluent(holds(2, on((block,5)), nothing, 30)).
fix_fluent(holds(2, on((block,6)), nothing, 30)).
fix_fluent(holds(2, tower_base((block,1)), true, 30)).
fix_fluent(holds(2, tower_base((block,2)), true, 30)).
fix_fluent(holds(2, tower_base((block,3)), false, 30)).
fix_fluent(holds(2, tower_base((block,4)), false, 30)).
fix_fluent(holds(2, tower_base((block,5)), false, 30)).
fix_fluent(holds(2, tower_base((block,6)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(1, complete(blue), false, 31)).
fix_fluent(holds(1, complete(red), false, 31)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 31)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 31)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 31)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 31)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(1, configuration(store_room_door), open, 31)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 31)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 31)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 31)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 31)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 31)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 31)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 31)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, on((block,3)), (block,1), 31)).
fix_fluent(holds(1, on((block,4)), nothing, 31)).
fix_fluent(holds(1, on((block,5)), nothing, 31)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, tower_base((block,1)), true, 31)).
fix_fluent(holds(1, tower_base((block,2)), true, 31)).
fix_fluent(holds(1, tower_base((block,3)), false, 31)).
fix_fluent(holds(1, tower_base((block,4)), false, 31)).
fix_fluent(holds(1, tower_base((block,5)), false, 31)).
fix_fluent(holds(1, tower_base((block,6)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(2, complete(blue), false, 31)).
fix_fluent(holds(2, complete(red), false, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 31)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(2, configuration(store_room_door), open, 31)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 31)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 31)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,4)), store_room, 31)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 31)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 31)).
fix_fluent(holds(2, in(talos), puzzle_room, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,3)), (block,1), 31)).
fix_fluent(holds(2, on((block,4)), nothing, 31)).
fix_fluent(holds(2, on((block,5)), nothing, 31)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 31)).
fix_fluent(holds(2, tower_base((block,1)), true, 31)).
fix_fluent(holds(2, tower_base((block,2)), true, 31)).
fix_fluent(holds(2, tower_base((block,3)), false, 31)).
fix_fluent(holds(2, tower_base((block,4)), false, 31)).
fix_fluent(holds(2, tower_base((block,5)), false, 31)).
fix_fluent(holds(2, tower_base((block,6)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(1, complete(blue), false, 32)).
fix_fluent(holds(1, complete(red), false, 32)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 32)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 32)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 32)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 32)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(1, configuration(store_room_door), open, 32)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 32)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 32)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 32)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 32)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 32)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 32)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 32)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, on((block,3)), (block,1), 32)).
fix_fluent(holds(1, on((block,4)), nothing, 32)).
fix_fluent(holds(1, on((block,5)), nothing, 32)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, tower_base((block,1)), true, 32)).
fix_fluent(holds(1, tower_base((block,2)), true, 32)).
fix_fluent(holds(1, tower_base((block,3)), false, 32)).
fix_fluent(holds(1, tower_base((block,4)), false, 32)).
fix_fluent(holds(1, tower_base((block,5)), false, 32)).
fix_fluent(holds(1, tower_base((block,6)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(2, complete(blue), false, 32)).
fix_fluent(holds(2, complete(red), false, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 32)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(2, configuration(store_room_door), open, 32)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 32)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 32)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,4)), store_room, 32)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 32)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 32)).
fix_fluent(holds(2, in(talos), puzzle_room, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,3)), (block,1), 32)).
fix_fluent(holds(2, on((block,4)), nothing, 32)).
fix_fluent(holds(2, on((block,5)), nothing, 32)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 32)).
fix_fluent(holds(2, tower_base((block,1)), true, 32)).
fix_fluent(holds(2, tower_base((block,2)), true, 32)).
fix_fluent(holds(2, tower_base((block,3)), false, 32)).
fix_fluent(holds(2, tower_base((block,4)), false, 32)).
fix_fluent(holds(2, tower_base((block,5)), false, 32)).
fix_fluent(holds(2, tower_base((block,6)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(1, complete(blue), false, 33)).
fix_fluent(holds(1, complete(red), false, 33)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 33)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 33)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 33)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 33)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(1, configuration(store_room_door), open, 33)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 33)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 33)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 33)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 33)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 33)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 33)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 33)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, on((block,3)), (block,1), 33)).
fix_fluent(holds(1, on((block,4)), nothing, 33)).
fix_fluent(holds(1, on((block,5)), nothing, 33)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, tower_base((block,1)), true, 33)).
fix_fluent(holds(1, tower_base((block,2)), true, 33)).
fix_fluent(holds(1, tower_base((block,3)), false, 33)).
fix_fluent(holds(1, tower_base((block,4)), false, 33)).
fix_fluent(holds(1, tower_base((block,5)), false, 33)).
fix_fluent(holds(1, tower_base((block,6)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(2, complete(blue), false, 33)).
fix_fluent(holds(2, complete(red), false, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 33)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(2, configuration(store_room_door), open, 33)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 33)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 33)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,4)), store_room, 33)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 33)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 33)).
fix_fluent(holds(2, in(talos), puzzle_room, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,3)), (block,1), 33)).
fix_fluent(holds(2, on((block,4)), nothing, 33)).
fix_fluent(holds(2, on((block,5)), nothing, 33)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 33)).
fix_fluent(holds(2, tower_base((block,1)), true, 33)).
fix_fluent(holds(2, tower_base((block,2)), true, 33)).
fix_fluent(holds(2, tower_base((block,3)), false, 33)).
fix_fluent(holds(2, tower_base((block,4)), false, 33)).
fix_fluent(holds(2, tower_base((block,5)), false, 33)).
fix_fluent(holds(2, tower_base((block,6)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(1, complete(blue), false, 34)).
fix_fluent(holds(1, complete(red), false, 34)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 34)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 34)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 34)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 34)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(1, configuration(store_room_door), open, 34)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 34)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 34)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 34)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 34)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 34)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 34)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 34)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, on((block,3)), (block,1), 34)).
fix_fluent(holds(1, on((block,4)), nothing, 34)).
fix_fluent(holds(1, on((block,5)), (block,6), 34)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, tower_base((block,1)), true, 34)).
fix_fluent(holds(1, tower_base((block,2)), true, 34)).
fix_fluent(holds(1, tower_base((block,3)), false, 34)).
fix_fluent(holds(1, tower_base((block,4)), false, 34)).
fix_fluent(holds(1, tower_base((block,5)), false, 34)).
fix_fluent(holds(1, tower_base((block,6)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(2, complete(blue), false, 34)).
fix_fluent(holds(2, complete(red), false, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 34)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(2, configuration(store_room_door), open, 34)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 34)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 34)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,4)), store_room, 34)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 34)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 34)).
fix_fluent(holds(2, in(talos), puzzle_room, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,3)), (block,1), 34)).
fix_fluent(holds(2, on((block,4)), nothing, 34)).
fix_fluent(holds(2, on((block,5)), (block,6), 34)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 34)).
fix_fluent(holds(2, tower_base((block,1)), true, 34)).
fix_fluent(holds(2, tower_base((block,2)), true, 34)).
fix_fluent(holds(2, tower_base((block,3)), false, 34)).
fix_fluent(holds(2, tower_base((block,4)), false, 34)).
fix_fluent(holds(2, tower_base((block,5)), false, 34)).
fix_fluent(holds(2, tower_base((block,6)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(1, complete(blue), false, 35)).
fix_fluent(holds(1, complete(red), false, 35)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 35)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 35)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 35)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 35)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(1, configuration(store_room_door), open, 35)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 35)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 35)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 35)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 35)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 35)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 35)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,4)), nothing, 35)).
fix_fluent(holds(1, on((block,5)), (block,6), 35)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, tower_base((block,1)), true, 35)).
fix_fluent(holds(1, tower_base((block,2)), true, 35)).
fix_fluent(holds(1, tower_base((block,3)), true, 35)).
fix_fluent(holds(1, tower_base((block,4)), false, 35)).
fix_fluent(holds(1, tower_base((block,5)), false, 35)).
fix_fluent(holds(1, tower_base((block,6)), true, 35)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 35)).
fix_fluent(holds(2, complete(blue), false, 35)).
fix_fluent(holds(2, complete(red), false, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 35)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(2, configuration(store_room_door), open, 35)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 35)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 35)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,4)), store_room, 35)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 35)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 35)).
fix_fluent(holds(2, in(talos), puzzle_room, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,4)), nothing, 35)).
fix_fluent(holds(2, on((block,5)), (block,6), 35)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 35)).
fix_fluent(holds(2, tower_base((block,1)), true, 35)).
fix_fluent(holds(2, tower_base((block,2)), true, 35)).
fix_fluent(holds(2, tower_base((block,3)), true, 35)).
fix_fluent(holds(2, tower_base((block,4)), false, 35)).
fix_fluent(holds(2, tower_base((block,5)), false, 35)).
fix_fluent(holds(2, tower_base((block,6)), true, 35)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 35)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[13-11-2021_23-27-48] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 35)
	('last_sgoals', 24)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000016425336EA0>)
	('first_sgoals', 18)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000016439A39BD0>)

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(18, 36)', truth=True, inc_range=None)

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [36]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(0)]), ('plan_module', [Number(36), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.269162s.

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 36: original = External(symbol='current_last_sgoals(18, 36)', truth=True, inc_range=None), conversion = current_last_sgoals(18,36).

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045034s with result Unsatisfiable.

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [36]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3141961999999978, Incremental time limit = None
Running cumulative time = 11.981888399999994, Cumulative time limit = 3600
Used memory = (RSS = 429.394531Mb, VMS = 437.675781Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=36, start_step=35, end_step=36, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=9.080136999999993, solving_time=2.9017514, total_time=11.981888399999994, memory=Memory(rss=454.98046875, vms=465.3984375), step_range=range(0, 37), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26916169999999795, solving_time=0.045034499999999866, total_time=0.3141961999999978, memory=Memory(rss=429.39453125, vms=437.67578125), step_range=range(36, 37), clingo_stats={'problem': {'lp': {'atoms': 142558.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 442119.0, 'bodies_tr': 442119.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7296.0, 'count_bodies_tr': 7296.0, 'sccs': 841.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 17737.0, 'rules': 636754.0, 'rules_normal': 628882.0, 'rules_choice': 7368.0, 'rules_minimize': 72.0, 'rules_acyc': 0.0, 'rules_heuristic': 432.0, 'rules_tr': 636655.0, 'rules_tr_normal': 628882.0, 'rules_tr_choice': 7368.0, 'rules_tr_minimize': 72.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 333.0, 'eqs': 337029.0, 'eqs_atom': 67847.0, 'eqs_body': 9175.0, 'eqs_other': 260007.0}, 'lpStep': {'atoms': 6693.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12895.0, 'bodies_tr': 12895.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 587.0, 'rules': 22990.0, 'rules_normal': 22781.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22989.0, 'rules_tr_normal': 22781.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 11.0, 'eqs': 10043.0, 'eqs_atom': 2247.0, 'eqs_body': 561.0, 'eqs_other': 7235.0}, 'generator': {'vars': 77927.0, 'vars_eliminated': 0.0, 'vars_frozen': 47672.0, 'constraints': 699.0, 'constraints_binary': 63441.0, 'constraints_ternary': 3267.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 527.0, 'guiding_paths': 1.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 36.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.46408843994140625, 'cpu': 0.5625, 'solve': 0.010004043579101562, 'unsat': 0.010004043579101562, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 12.416521072387695, 'cpu': 20.046875, 'solve': 2.2164745330810547, 'unsat': 0.8381366729736328, 'sat': 0.48706626892089844}, 'models': {'enumerated': 53.0, 'optimal': 17.0}, 'solving': {'solvers': {'choices': 56535.0, 'conflicts': 7536.0, 'conflicts_analyzed': 7172.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 6525.0, 'models': 53.0, 'models_level': 23310.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5948.0, 'distributed_sum_lbd': 14507.0, 'integrated': 33949.0, 'lemmas': 48581.0, 'lits_learnt': 3835654.0, 'lemmas_binary': 4174.0, 'lemmas_ternary': 2168.0, 'cpu_time': 9.84375, 'integrated_imps': 11487.0, 'integrated_jumps': 9904.0, 'guiding_paths_lits': 57320.0, 'guiding_paths': 474.0, 'splits': 0.0, 'lemmas_conflict': 7020.0, 'lemmas_loop': 10205.0, 'lemmas_other': 31356.0, 'lits_conflict': 773703.0, 'lits_loop': 85331.0, 'lits_other': 2976620.0, 'jumps': {'jumps': 7172.0, 'jumps_bounded': 1266.0, 'levels': 199065.0, 'levels_bounded': 186566.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [37]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(37), Number(0)]), ('plan_module', [Number(37), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.213702s.

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.074443s with result Satisfiable.

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [37]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.28814450000000136, Incremental time limit = None
Running cumulative time = 12.270032899999995, Cumulative time limit = 3600
Used memory = (RSS = 435.140625Mb, VMS = 443.035156Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 55
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.293839s, Solving = 2.976194s, Total = 12.270033s, Memory = (RSS = 454.980469Mb, VMS = 465.398438Mb)), Calls = 37
Final Model :: Total atoms = 23534, Cost = (42, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-27-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=37, start_step=36, end_step=37, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=9.293838699999995, solving_time=2.9761942, total_time=12.270032899999995, memory=Memory(rss=454.98046875, vms=465.3984375), step_range=range(0, 38), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21370170000000144, solving_time=0.07444279999999992, total_time=0.28814450000000136, memory=Memory(rss=435.140625, vms=443.03515625), step_range=range(37, 38), clingo_stats={'problem': {'lp': {'atoms': 144771.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 452539.0, 'bodies_tr': 452539.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7497.0, 'count_bodies_tr': 7497.0, 'sccs': 843.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 17774.0, 'rules': 653242.0, 'rules_normal': 645161.0, 'rules_choice': 7563.0, 'rules_minimize': 74.0, 'rules_acyc': 0.0, 'rules_heuristic': 444.0, 'rules_tr': 653132.0, 'rules_tr_normal': 645161.0, 'rules_tr_choice': 7563.0, 'rules_tr_minimize': 74.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 334.0, 'eqs': 342449.0, 'eqs_atom': 68607.0, 'eqs_body': 9632.0, 'eqs_other': 264210.0}, 'lpStep': {'atoms': 2213.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10420.0, 'bodies_tr': 10420.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 16488.0, 'rules_normal': 16279.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16477.0, 'rules_tr_normal': 16279.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 5420.0, 'eqs_atom': 760.0, 'eqs_body': 457.0, 'eqs_other': 4203.0}, 'generator': {'vars': 78406.0, 'vars_eliminated': 0.0, 'vars_frozen': 48019.0, 'constraints': 775.0, 'constraints_binary': 68267.0, 'constraints_ternary': 3800.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 6584.0, 'conflicts': 52.0, 'conflicts_analyzed': 51.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 117.0, 'models': 2.0, 'models_level': 1692.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 50.0, 'distributed_sum_lbd': 54.0, 'integrated': 162.0, 'lemmas': 207.0, 'lits_learnt': 260.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.09375, 'integrated_imps': 148.0, 'integrated_jumps': 2190.0, 'guiding_paths_lits': 4424.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 49.0, 'lemmas_loop': 1.0, 'lemmas_other': 157.0, 'lits_conflict': 56.0, 'lits_loop': 2.0, 'lits_other': 202.0, 'jumps': {'jumps': 51.0, 'jumps_bounded': 16.0, 'levels': 8026.0, 'levels_bounded': 6228.0, 'max': 818.0, 'max_executed': 264.0, 'max_bounded': 620.0}}}}, 'summary': {'call': 37.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [42.0, 0.0], 'lower': [42.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.2962074279785156, 'cpu': 0.34375, 'solve': 0.048858642578125, 'unsat': 0.022939682006835938, 'sat': 0.0049762725830078125}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 12.712728500366211, 'cpu': 20.390625, 'solve': 2.2653331756591797, 'unsat': 0.8610763549804688, 'sat': 0.49204254150390625}, 'models': {'enumerated': 55.0, 'optimal': 18.0}, 'solving': {'solvers': {'choices': 63119.0, 'conflicts': 7588.0, 'conflicts_analyzed': 7223.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 6642.0, 'models': 55.0, 'models_level': 25002.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5998.0, 'distributed_sum_lbd': 14561.0, 'integrated': 34111.0, 'lemmas': 48788.0, 'lits_learnt': 3835914.0, 'lemmas_binary': 4175.0, 'lemmas_ternary': 2182.0, 'cpu_time': 9.9375, 'integrated_imps': 11635.0, 'integrated_jumps': 12094.0, 'guiding_paths_lits': 61744.0, 'guiding_paths': 482.0, 'splits': 0.0, 'lemmas_conflict': 7069.0, 'lemmas_loop': 10206.0, 'lemmas_other': 31513.0, 'lits_conflict': 773759.0, 'lits_loop': 85333.0, 'lits_other': 2976822.0, 'jumps': {'jumps': 7223.0, 'jumps_bounded': 1282.0, 'levels': 207091.0, 'levels_bounded': 192794.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-48] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37}

[13-11-2021_23-27-48] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 19 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 2 ( 28.57% solved)

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(19, 37)', truth=True, inc_range=None)

[13-11-2021_23-27-48] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 19, step = 37]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 19)
sub_goal(2, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 19)
sub_goal(2, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 19)

[13-11-2021_23-27-48] DEBUG :: ASH Planner Main #1 >> Reaction at search length 37:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [38]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(0)]), ('plan_module', [Number(38), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.169038s.

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 38: original = External(symbol='current_last_sgoals(19, 37)', truth=True, inc_range=None), conversion = current_last_sgoals(19,37).

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.268956s with result Satisfiable.

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [38]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.43799439999999734, Incremental time limit = None
Running cumulative time = 12.708027299999992, Cumulative time limit = 3600
Used memory = (RSS = 441.187500Mb, VMS = 447.964844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 57
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.462877s, Solving = 3.245151s, Total = 12.708027s, Memory = (RSS = 454.980469Mb, VMS = 465.398438Mb)), Calls = 38
Final Model :: Total atoms = 23930, Cost = (45, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-27-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=38, start_step=37, end_step=38, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=9.462876699999992, solving_time=3.2451506000000006, total_time=12.708027299999992, memory=Memory(rss=454.98046875, vms=465.3984375), step_range=range(0, 39), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1690379999999969, solving_time=0.26895640000000043, total_time=0.43799439999999734, memory=Memory(rss=441.1875, vms=447.96484375), step_range=range(38, 39), clingo_stats={'problem': {'lp': {'atoms': 147157.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 463109.0, 'bodies_tr': 463109.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7698.0, 'count_bodies_tr': 7698.0, 'sccs': 866.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 18080.0, 'rules': 670248.0, 'rules_normal': 661958.0, 'rules_choice': 7758.0, 'rules_minimize': 76.0, 'rules_acyc': 0.0, 'rules_heuristic': 456.0, 'rules_tr': 670131.0, 'rules_tr_normal': 661958.0, 'rules_tr_choice': 7758.0, 'rules_tr_minimize': 76.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 339.0, 'eqs': 348743.0, 'eqs_atom': 69300.0, 'eqs_body': 9964.0, 'eqs_other': 269479.0}, 'lpStep': {'atoms': 2386.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10570.0, 'bodies_tr': 10570.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 306.0, 'rules': 17006.0, 'rules_normal': 16797.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16999.0, 'rules_tr_normal': 16797.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 5.0, 'eqs': 6294.0, 'eqs_atom': 693.0, 'eqs_body': 332.0, 'eqs_other': 5269.0}, 'generator': {'vars': 79611.0, 'vars_eliminated': 0.0, 'vars_frozen': 48821.0, 'constraints': 952.0, 'constraints_binary': 73255.0, 'constraints_ternary': 3769.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 2220.0, 'conflicts': 26.0, 'conflicts_analyzed': 25.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 15.0, 'models': 2.0, 'models_level': 1742.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 34.0, 'distributed_sum_lbd': 43.0, 'integrated': 25.0, 'lemmas': 79.0, 'lits_learnt': 196.0, 'lemmas_binary': 9.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.4375, 'integrated_imps': 18.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4632.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 25.0, 'lemmas_loop': 36.0, 'lemmas_other': 18.0, 'lits_conflict': 25.0, 'lits_loop': 153.0, 'lits_other': 18.0, 'jumps': {'jumps': 25.0, 'jumps_bounded': 0.0, 'levels': 25.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 38.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [45.0, 0.0], 'lower': [45.0, 0.0], 'concurrency': 8.0, 'winner': 6.0, 'times': {'total': 0.4448089599609375, 'cpu': 0.640625, 'solve': 0.2423248291015625, 'unsat': 0.2154254913330078, 'sat': 0.00595855712890625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 13.157537460327148, 'cpu': 21.03125, 'solve': 2.507658004760742, 'unsat': 1.0765018463134766, 'sat': 0.4980010986328125}, 'models': {'enumerated': 57.0, 'optimal': 19.0}, 'solving': {'solvers': {'choices': 65339.0, 'conflicts': 7614.0, 'conflicts_analyzed': 7248.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 6657.0, 'models': 57.0, 'models_level': 26744.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6032.0, 'distributed_sum_lbd': 14604.0, 'integrated': 34136.0, 'lemmas': 48867.0, 'lits_learnt': 3836110.0, 'lemmas_binary': 4184.0, 'lemmas_ternary': 2182.0, 'cpu_time': 10.375, 'integrated_imps': 11653.0, 'integrated_jumps': 12094.0, 'guiding_paths_lits': 66376.0, 'guiding_paths': 490.0, 'splits': 0.0, 'lemmas_conflict': 7094.0, 'lemmas_loop': 10242.0, 'lemmas_other': 31531.0, 'lits_conflict': 773784.0, 'lits_loop': 85486.0, 'lits_other': 2976840.0, 'jumps': {'jumps': 7248.0, 'jumps_bounded': 1282.0, 'levels': 207116.0, 'levels_bounded': 192794.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-49] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38}

[13-11-2021_23-27-49] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 20 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 3 ( 42.86% solved)

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(20, 38)', truth=True, inc_range=None)

[13-11-2021_23-27-49] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 20, step = 38]:
sub_goal(2, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 20)
sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 20)

[13-11-2021_23-27-49] DEBUG :: ASH Planner Main #1 >> Reaction at search length 38:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [39]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(0)]), ('plan_module', [Number(39), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.233282s.

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 39: original = External(symbol='current_last_sgoals(20, 38)', truth=True, inc_range=None), conversion = current_last_sgoals(20,38).

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.087867s with result Satisfiable.

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [39]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.321148400000002, Incremental time limit = None
Running cumulative time = 13.029175699999994, Cumulative time limit = 3600
Used memory = (RSS = 450.625000Mb, VMS = 456.445312Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 59
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.696158s, Solving = 3.333018s, Total = 13.029176s, Memory = (RSS = 454.980469Mb, VMS = 465.398438Mb)), Calls = 39
Final Model :: Total atoms = 24323, Cost = (47, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-27-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=39, start_step=38, end_step=39, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=9.696158199999992, solving_time=3.333017500000002, total_time=13.029175699999994, memory=Memory(rss=454.98046875, vms=465.3984375), step_range=range(0, 40), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23328150000000036, solving_time=0.08786690000000164, total_time=0.321148400000002, memory=Memory(rss=450.625, vms=456.4453125), step_range=range(39, 40), clingo_stats={'problem': {'lp': {'atoms': 150526.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 474762.0, 'bodies_tr': 474762.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7899.0, 'count_bodies_tr': 7899.0, 'sccs': 889.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 18399.0, 'rules': 688773.0, 'rules_normal': 680274.0, 'rules_choice': 7953.0, 'rules_minimize': 78.0, 'rules_acyc': 0.0, 'rules_heuristic': 468.0, 'rules_tr': 688652.0, 'rules_tr_normal': 680274.0, 'rules_tr_choice': 7953.0, 'rules_tr_minimize': 78.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 347.0, 'eqs': 359992.0, 'eqs_atom': 70191.0, 'eqs_body': 10239.0, 'eqs_other': 279562.0}, 'lpStep': {'atoms': 3369.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11653.0, 'bodies_tr': 11653.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 319.0, 'rules': 18525.0, 'rules_normal': 18316.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 18521.0, 'rules_tr_normal': 18316.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 11249.0, 'eqs_atom': 891.0, 'eqs_body': 275.0, 'eqs_other': 10083.0}, 'generator': {'vars': 81114.0, 'vars_eliminated': 0.0, 'vars_frozen': 49766.0, 'constraints': 1244.0, 'constraints_binary': 82009.0, 'constraints_ternary': 4970.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 3021.0, 'conflicts': 24.0, 'conflicts_analyzed': 23.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 15.0, 'models': 2.0, 'models_level': 1814.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 29.0, 'distributed_sum_lbd': 35.0, 'integrated': 36.0, 'lemmas': 133.0, 'lits_learnt': 663.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.21875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4235.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 23.0, 'lemmas_loop': 110.0, 'lemmas_other': 0.0, 'lits_conflict': 23.0, 'lits_loop': 640.0, 'lits_other': 0.0, 'jumps': {'jumps': 23.0, 'jumps_bounded': 0.0, 'levels': 23.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 39.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [47.0, 0.0], 'lower': [47.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.32663536071777344, 'cpu': 0.484375, 'solve': 0.05585289001464844, 'unsat': 0.027927398681640625, 'sat': 0.0059871673583984375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 13.484172821044922, 'cpu': 21.515625, 'solve': 2.5635108947753906, 'unsat': 1.1044292449951172, 'sat': 0.5039882659912109}, 'models': {'enumerated': 59.0, 'optimal': 20.0}, 'solving': {'solvers': {'choices': 68360.0, 'conflicts': 7638.0, 'conflicts_analyzed': 7271.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 6672.0, 'models': 59.0, 'models_level': 28558.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6061.0, 'distributed_sum_lbd': 14639.0, 'integrated': 34172.0, 'lemmas': 49000.0, 'lits_learnt': 3836773.0, 'lemmas_binary': 4190.0, 'lemmas_ternary': 2182.0, 'cpu_time': 10.59375, 'integrated_imps': 11653.0, 'integrated_jumps': 12094.0, 'guiding_paths_lits': 70611.0, 'guiding_paths': 497.0, 'splits': 0.0, 'lemmas_conflict': 7117.0, 'lemmas_loop': 10352.0, 'lemmas_other': 31531.0, 'lits_conflict': 773807.0, 'lits_loop': 86126.0, 'lits_other': 2976840.0, 'jumps': {'jumps': 7271.0, 'jumps_bounded': 1282.0, 'levels': 207139.0, 'levels_bounded': 192794.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-49] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39}

[13-11-2021_23-27-49] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 21 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 4 ( 57.14% solved)

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(21, 39)', truth=True, inc_range=None)

[13-11-2021_23-27-49] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 21, step = 39]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 21)
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 21)

[13-11-2021_23-27-49] DEBUG :: ASH Planner Main #1 >> Reaction at search length 39:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [40]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(0)]), ('plan_module', [Number(40), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.232907s.

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 40: original = External(symbol='current_last_sgoals(21, 39)', truth=True, inc_range=None), conversion = current_last_sgoals(21,39).

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055925s with result Satisfiable.

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [40]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.28883199999999576, Incremental time limit = None
Running cumulative time = 13.31800769999999, Cumulative time limit = 3600
Used memory = (RSS = 457.347656Mb, VMS = 462.128906Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 60
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.929065s, Solving = 3.388943s, Total = 13.318008s, Memory = (RSS = 457.347656Mb, VMS = 465.398438Mb)), Calls = 40
Final Model :: Total atoms = 24717, Cost = (49, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-27-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=40, start_step=39, end_step=40, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=9.92906499999999, solving_time=3.3889426999999994, total_time=13.31800769999999, memory=Memory(rss=457.34765625, vms=465.3984375), step_range=range(0, 41), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23290679999999853, solving_time=0.05592519999999723, total_time=0.28883199999999576, memory=Memory(rss=457.34765625, vms=462.12890625), step_range=range(40, 41), clingo_stats={'problem': {'lp': {'atoms': 153941.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 486678.0, 'bodies_tr': 486678.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8100.0, 'count_bodies_tr': 8100.0, 'sccs': 912.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 18792.0, 'rules': 707980.0, 'rules_normal': 699272.0, 'rules_choice': 8148.0, 'rules_minimize': 80.0, 'rules_acyc': 0.0, 'rules_heuristic': 480.0, 'rules_tr': 707856.0, 'rules_tr_normal': 699272.0, 'rules_tr_choice': 8148.0, 'rules_tr_minimize': 80.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 356.0, 'eqs': 368403.0, 'eqs_atom': 71198.0, 'eqs_body': 10443.0, 'eqs_other': 286762.0}, 'lpStep': {'atoms': 3415.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11916.0, 'bodies_tr': 11916.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 393.0, 'rules': 19207.0, 'rules_normal': 18998.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19204.0, 'rules_tr_normal': 18998.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 9.0, 'eqs': 8411.0, 'eqs_atom': 1007.0, 'eqs_body': 204.0, 'eqs_other': 7200.0}, 'generator': {'vars': 82884.0, 'vars_eliminated': 0.0, 'vars_frozen': 50869.0, 'constraints': 1636.0, 'constraints_binary': 92247.0, 'constraints_ternary': 6590.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 2025.0, 'conflicts': 8.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 19.0, 'models': 1.0, 'models_level': 940.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 10.0, 'distributed_sum_lbd': 20.0, 'integrated': 60.0, 'lemmas': 37.0, 'lits_learnt': 221.0, 'lemmas_binary': 16.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 6.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4417.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 30.0, 'lemmas_other': 6.0, 'lits_conflict': 2.0, 'lits_loop': 207.0, 'lits_other': 12.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 4.0, 'levels': 10.0, 'levels_bounded': 6.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 40.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [49.0, 0.0], 'lower': [49.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.29424285888671875, 'cpu': 0.375, 'solve': 0.02789306640625, 'unsat': 0.021938323974609375, 'sat': 0.005954742431640625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 13.77841567993164, 'cpu': 21.890625, 'solve': 2.5914039611816406, 'unsat': 1.1263675689697266, 'sat': 0.5099430084228516}, 'models': {'enumerated': 60.0, 'optimal': 21.0}, 'solving': {'solvers': {'choices': 70385.0, 'conflicts': 7646.0, 'conflicts_analyzed': 7275.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 6691.0, 'models': 60.0, 'models_level': 29498.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6071.0, 'distributed_sum_lbd': 14659.0, 'integrated': 34232.0, 'lemmas': 49037.0, 'lits_learnt': 3836994.0, 'lemmas_binary': 4206.0, 'lemmas_ternary': 2182.0, 'cpu_time': 10.703125, 'integrated_imps': 11659.0, 'integrated_jumps': 12094.0, 'guiding_paths_lits': 75028.0, 'guiding_paths': 505.0, 'splits': 0.0, 'lemmas_conflict': 7118.0, 'lemmas_loop': 10382.0, 'lemmas_other': 31537.0, 'lits_conflict': 773809.0, 'lits_loop': 86333.0, 'lits_other': 2976852.0, 'jumps': {'jumps': 7275.0, 'jumps_bounded': 1286.0, 'levels': 207149.0, 'levels_bounded': 192800.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-50] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40}

[13-11-2021_23-27-50] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 22 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 5 ( 71.43% solved)

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(22, 40)', truth=True, inc_range=None)

[13-11-2021_23-27-50] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 22, step = 40]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 22)

[13-11-2021_23-27-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 40:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [41]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(0)]), ('plan_module', [Number(41), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.242418s.

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 41: original = External(symbol='current_last_sgoals(22, 40)', truth=True, inc_range=None), conversion = current_last_sgoals(22,40).

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033763s with result Unsatisfiable.

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [41]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.276181600000001, Incremental time limit = None
Running cumulative time = 13.594189299999991, Cumulative time limit = 3600
Used memory = (RSS = 460.437500Mb, VMS = 464.632812Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=41, start_step=40, end_step=41, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=10.17148349999999, solving_time=3.422705800000001, total_time=13.594189299999991, memory=Memory(rss=460.4375, vms=465.3984375), step_range=range(0, 42), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24241849999999943, solving_time=0.0337631000000016, total_time=0.276181600000001, memory=Memory(rss=460.4375, vms=464.6328125), step_range=range(41, 42), clingo_stats={'problem': {'lp': {'atoms': 157495.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 499252.0, 'bodies_tr': 499252.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8301.0, 'count_bodies_tr': 8301.0, 'sccs': 935.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 19226.0, 'rules': 728901.0, 'rules_normal': 719984.0, 'rules_choice': 8343.0, 'rules_minimize': 82.0, 'rules_acyc': 0.0, 'rules_heuristic': 492.0, 'rules_tr': 728775.0, 'rules_tr_normal': 719984.0, 'rules_tr_choice': 8343.0, 'rules_tr_minimize': 82.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 366.0, 'eqs': 376989.0, 'eqs_atom': 73044.0, 'eqs_body': 10677.0, 'eqs_other': 293268.0}, 'lpStep': {'atoms': 3554.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12574.0, 'bodies_tr': 12574.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 434.0, 'rules': 20921.0, 'rules_normal': 20712.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 20919.0, 'rules_tr_normal': 20712.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8586.0, 'eqs_atom': 1846.0, 'eqs_body': 234.0, 'eqs_other': 6506.0}, 'generator': {'vars': 84972.0, 'vars_eliminated': 0.0, 'vars_frozen': 52137.0, 'constraints': 2133.0, 'constraints_binary': 106668.0, 'constraints_ternary': 9586.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 14.0, 'lits_learnt': 126.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4599.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 14.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 126.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 41.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.2812519073486328, 'cpu': 0.375, 'solve': 0.006984710693359375, 'unsat': 0.006984710693359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 14.059667587280273, 'cpu': 22.265625, 'solve': 2.598388671875, 'unsat': 1.133352279663086, 'sat': 0.5099430084228516}, 'models': {'enumerated': 60.0, 'optimal': 21.0}, 'solving': {'solvers': {'choices': 70385.0, 'conflicts': 7654.0, 'conflicts_analyzed': 7275.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 6691.0, 'models': 60.0, 'models_level': 29498.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6071.0, 'distributed_sum_lbd': 14659.0, 'integrated': 34232.0, 'lemmas': 49051.0, 'lits_learnt': 3837120.0, 'lemmas_binary': 4206.0, 'lemmas_ternary': 2182.0, 'cpu_time': 10.8125, 'integrated_imps': 11659.0, 'integrated_jumps': 12094.0, 'guiding_paths_lits': 79627.0, 'guiding_paths': 512.0, 'splits': 0.0, 'lemmas_conflict': 7118.0, 'lemmas_loop': 10396.0, 'lemmas_other': 31537.0, 'lits_conflict': 773809.0, 'lits_loop': 86459.0, 'lits_other': 2976852.0, 'jumps': {'jumps': 7275.0, 'jumps_bounded': 1286.0, 'levels': 207149.0, 'levels_bounded': 192800.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 41:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [42]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(0)]), ('plan_module', [Number(42), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.249392s.

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.124878s with result Satisfiable.

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [42]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.37427049999999795, Incremental time limit = None
Running cumulative time = 13.968459799999989, Cumulative time limit = 3600
Used memory = (RSS = 476.093750Mb, VMS = 478.664062Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 63
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 10.420876s, Solving = 3.547584s, Total = 13.968460s, Memory = (RSS = 476.093750Mb, VMS = 478.664062Mb)), Calls = 42
Final Model :: Total atoms = 25502, Cost = (51, 0), Optimality proven = False, Number = 3, Thread ID = 4, Model type = ModelType.StableModel

[13-11-2021_23-27-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=42, start_step=41, end_step=42, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=10.42087569999999, solving_time=3.5475841, total_time=13.968459799999989, memory=Memory(rss=476.09375, vms=478.6640625), step_range=range(0, 43), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24939219999999906, solving_time=0.12487829999999889, total_time=0.37427049999999795, memory=Memory(rss=476.09375, vms=478.6640625), step_range=range(42, 43), clingo_stats={'problem': {'lp': {'atoms': 161202.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 512320.0, 'bodies_tr': 512320.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8502.0, 'count_bodies_tr': 8502.0, 'sccs': 960.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 19820.0, 'rules': 750680.0, 'rules_normal': 741554.0, 'rules_choice': 8538.0, 'rules_minimize': 84.0, 'rules_acyc': 0.0, 'rules_heuristic': 504.0, 'rules_tr': 750554.0, 'rules_tr_normal': 741554.0, 'rules_tr_choice': 8538.0, 'rules_tr_minimize': 84.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 378.0, 'eqs': 386004.0, 'eqs_atom': 74908.0, 'eqs_body': 10752.0, 'eqs_other': 300344.0}, 'lpStep': {'atoms': 3707.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13068.0, 'bodies_tr': 13068.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 21779.0, 'rules_normal': 21570.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21779.0, 'rules_tr_normal': 21570.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9015.0, 'eqs_atom': 1864.0, 'eqs_body': 75.0, 'eqs_other': 7076.0}, 'generator': {'vars': 87593.0, 'vars_eliminated': 0.0, 'vars_frozen': 53736.0, 'constraints': 2771.0, 'constraints_binary': 124761.0, 'constraints_ternary': 13536.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 4533.0, 'conflicts': 149.0, 'conflicts_analyzed': 135.0, 'restarts': 0.0, 'restarts_last': 30.0, 'extra': {'domain_choices': 274.0, 'models': 3.0, 'models_level': 2999.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 116.0, 'distributed_sum_lbd': 269.0, 'integrated': 676.0, 'lemmas': 1222.0, 'lits_learnt': 22164.0, 'lemmas_binary': 62.0, 'lemmas_ternary': 35.0, 'cpu_time': 0.28125, 'integrated_imps': 351.0, 'integrated_jumps': 336.0, 'guiding_paths_lits': 4781.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 135.0, 'lemmas_loop': 442.0, 'lemmas_other': 645.0, 'lits_conflict': 4395.0, 'lits_loop': 3225.0, 'lits_other': 14544.0, 'jumps': {'jumps': 135.0, 'jumps_bounded': 50.0, 'levels': 2914.0, 'levels_bounded': 2721.0, 'max': 742.0, 'max_executed': 742.0, 'max_bounded': 741.0}}}}, 'summary': {'call': 42.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [51.0, 0.0], 'lower': [51.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.3809814453125, 'cpu': 0.578125, 'solve': 0.09774017333984375, 'unsat': 0.024932861328125, 'sat': 0.017953872680664062}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 14.440649032592773, 'cpu': 22.84375, 'solve': 2.6961288452148438, 'unsat': 1.158285140991211, 'sat': 0.5278968811035156}, 'models': {'enumerated': 63.0, 'optimal': 22.0}, 'solving': {'solvers': {'choices': 74918.0, 'conflicts': 7803.0, 'conflicts_analyzed': 7410.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 6965.0, 'models': 63.0, 'models_level': 32497.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6187.0, 'distributed_sum_lbd': 14928.0, 'integrated': 34908.0, 'lemmas': 50273.0, 'lits_learnt': 3859284.0, 'lemmas_binary': 4268.0, 'lemmas_ternary': 2217.0, 'cpu_time': 11.09375, 'integrated_imps': 12010.0, 'integrated_jumps': 12430.0, 'guiding_paths_lits': 84408.0, 'guiding_paths': 527.0, 'splits': 0.0, 'lemmas_conflict': 7253.0, 'lemmas_loop': 10838.0, 'lemmas_other': 32182.0, 'lits_conflict': 778204.0, 'lits_loop': 89684.0, 'lits_other': 2991396.0, 'jumps': {'jumps': 7410.0, 'jumps_bounded': 1336.0, 'levels': 210063.0, 'levels_bounded': 195521.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-50] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40, 22: 42}

[13-11-2021_23-27-50] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 23 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 6 ( 85.71% solved)

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(23, 42)', truth=True, inc_range=None)

[13-11-2021_23-27-50] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 23, step = 42]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 23)

[13-11-2021_23-27-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 42:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [43]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(0)]), ('plan_module', [Number(43), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.264782s.

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 43: original = External(symbol='current_last_sgoals(23, 42)', truth=True, inc_range=None), conversion = current_last_sgoals(23,42).

[13-11-2021_23-27-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040151s with result Unsatisfiable.

[13-11-2021_23-27-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [43]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3049330999999995, Incremental time limit = None
Running cumulative time = 14.273392899999989, Cumulative time limit = 3600
Used memory = (RSS = 478.683594Mb, VMS = 479.808594Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=43, start_step=42, end_step=43, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=10.68565799999999, solving_time=3.587734899999999, total_time=14.273392899999989, memory=Memory(rss=478.68359375, vms=479.80859375), step_range=range(0, 44), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26478230000000025, solving_time=0.040150799999999265, total_time=0.3049330999999995, memory=Memory(rss=478.68359375, vms=479.80859375), step_range=range(43, 44), clingo_stats={'problem': {'lp': {'atoms': 164948.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 525597.0, 'bodies_tr': 525597.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8703.0, 'count_bodies_tr': 8703.0, 'sccs': 985.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 20414.0, 'rules': 772945.0, 'rules_normal': 763610.0, 'rules_choice': 8733.0, 'rules_minimize': 86.0, 'rules_acyc': 0.0, 'rules_heuristic': 516.0, 'rules_tr': 772819.0, 'rules_tr_normal': 763610.0, 'rules_tr_choice': 8733.0, 'rules_tr_minimize': 86.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 390.0, 'eqs': 395179.0, 'eqs_atom': 76775.0, 'eqs_body': 10821.0, 'eqs_other': 307583.0}, 'lpStep': {'atoms': 3746.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13277.0, 'bodies_tr': 13277.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 22265.0, 'rules_normal': 22056.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22265.0, 'rules_tr_normal': 22056.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9175.0, 'eqs_atom': 1867.0, 'eqs_body': 69.0, 'eqs_other': 7239.0}, 'generator': {'vars': 90255.0, 'vars_eliminated': 0.0, 'vars_frozen': 55349.0, 'constraints': 3417.0, 'constraints_binary': 141444.0, 'constraints_ternary': 17264.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 123.0, 'conflicts': 106.0, 'conflicts_analyzed': 92.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 93.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 89.0, 'distributed_sum_lbd': 269.0, 'integrated': 415.0, 'lemmas': 683.0, 'lits_learnt': 17794.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.0, 'integrated_imps': 31.0, 'integrated_jumps': 22.0, 'guiding_paths_lits': 4963.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 89.0, 'lemmas_loop': 184.0, 'lemmas_other': 410.0, 'lits_conflict': 2793.0, 'lits_loop': 1586.0, 'lits_other': 13415.0, 'jumps': {'jumps': 92.0, 'jumps_bounded': 7.0, 'levels': 112.0, 'levels_bounded': 11.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 43.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [48.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.3111991882324219, 'cpu': 0.3125, 'solve': 0.011968612670898438, 'unsat': 0.011968612670898438, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 14.751848220825195, 'cpu': 23.15625, 'solve': 2.708097457885742, 'unsat': 1.1702537536621094, 'sat': 0.5278968811035156}, 'models': {'enumerated': 63.0, 'optimal': 22.0}, 'solving': {'solvers': {'choices': 75041.0, 'conflicts': 7909.0, 'conflicts_analyzed': 7502.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 7058.0, 'models': 63.0, 'models_level': 32497.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6276.0, 'distributed_sum_lbd': 15197.0, 'integrated': 35323.0, 'lemmas': 50956.0, 'lits_learnt': 3877078.0, 'lemmas_binary': 4269.0, 'lemmas_ternary': 2223.0, 'cpu_time': 11.09375, 'integrated_imps': 12041.0, 'integrated_jumps': 12452.0, 'guiding_paths_lits': 89371.0, 'guiding_paths': 540.0, 'splits': 0.0, 'lemmas_conflict': 7342.0, 'lemmas_loop': 11022.0, 'lemmas_other': 32592.0, 'lits_conflict': 780997.0, 'lits_loop': 91270.0, 'lits_other': 3004811.0, 'jumps': {'jumps': 7502.0, 'jumps_bounded': 1343.0, 'levels': 210175.0, 'levels_bounded': 195532.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 43:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [44]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(0)]), ('plan_module', [Number(44), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.261088s.

[13-11-2021_23-27-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.063243s with result Unsatisfiable.

[13-11-2021_23-27-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [44]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3243304000000009, Incremental time limit = None
Running cumulative time = 14.59772329999999, Cumulative time limit = 3600
Used memory = (RSS = 481.437500Mb, VMS = 481.687500Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=44, start_step=43, end_step=44, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=10.946745799999988, solving_time=3.6509775000000015, total_time=14.59772329999999, memory=Memory(rss=481.4375, vms=481.6875), step_range=range(0, 45), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26108779999999854, solving_time=0.06324260000000237, total_time=0.3243304000000009, memory=Memory(rss=481.4375, vms=481.6875), step_range=range(44, 45), clingo_stats={'problem': {'lp': {'atoms': 168705.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 538911.0, 'bodies_tr': 538911.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8904.0, 'count_bodies_tr': 8904.0, 'sccs': 1010.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 21008.0, 'rules': 795523.0, 'rules_normal': 785979.0, 'rules_choice': 8928.0, 'rules_minimize': 88.0, 'rules_acyc': 0.0, 'rules_heuristic': 528.0, 'rules_tr': 795397.0, 'rules_tr_normal': 785979.0, 'rules_tr_choice': 8928.0, 'rules_tr_minimize': 88.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 402.0, 'eqs': 404435.0, 'eqs_atom': 78653.0, 'eqs_body': 10890.0, 'eqs_other': 314892.0}, 'lpStep': {'atoms': 3757.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13314.0, 'bodies_tr': 13314.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 22578.0, 'rules_normal': 22369.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22578.0, 'rules_tr_normal': 22369.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9256.0, 'eqs_atom': 1878.0, 'eqs_body': 69.0, 'eqs_other': 7309.0}, 'generator': {'vars': 92919.0, 'vars_eliminated': 0.0, 'vars_frozen': 56962.0, 'constraints': 4070.0, 'constraints_binary': 160374.0, 'constraints_ternary': 21252.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 663.0, 'conflicts': 323.0, 'conflicts_analyzed': 311.0, 'restarts': 0.0, 'restarts_last': 62.0, 'extra': {'domain_choices': 604.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 272.0, 'distributed_sum_lbd': 782.0, 'integrated': 1613.0, 'lemmas': 2503.0, 'lits_learnt': 60048.0, 'lemmas_binary': 230.0, 'lemmas_ternary': 46.0, 'cpu_time': 0.25, 'integrated_imps': 548.0, 'integrated_jumps': 277.0, 'guiding_paths_lits': 5145.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 300.0, 'lemmas_loop': 723.0, 'lemmas_other': 1480.0, 'lits_conflict': 9605.0, 'lits_loop': 5919.0, 'lits_other': 44524.0, 'jumps': {'jumps': 311.0, 'jumps_bounded': 28.0, 'levels': 4309.0, 'levels_bounded': 3923.0, 'max': 700.0, 'max_executed': 700.0, 'max_bounded': 698.0}}}}, 'summary': {'call': 44.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [48.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.3307170867919922, 'cpu': 0.546875, 'solve': 0.03388404846191406, 'unsat': 0.03388404846191406, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 15.082565307617188, 'cpu': 23.703125, 'solve': 2.7419815063476562, 'unsat': 1.2041378021240234, 'sat': 0.5278968811035156}, 'models': {'enumerated': 63.0, 'optimal': 22.0}, 'solving': {'solvers': {'choices': 75704.0, 'conflicts': 8232.0, 'conflicts_analyzed': 7813.0, 'restarts': 14.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 7662.0, 'models': 63.0, 'models_level': 32497.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6548.0, 'distributed_sum_lbd': 15979.0, 'integrated': 36936.0, 'lemmas': 53459.0, 'lits_learnt': 3937126.0, 'lemmas_binary': 4499.0, 'lemmas_ternary': 2269.0, 'cpu_time': 11.34375, 'integrated_imps': 12589.0, 'integrated_jumps': 12729.0, 'guiding_paths_lits': 94516.0, 'guiding_paths': 554.0, 'splits': 0.0, 'lemmas_conflict': 7642.0, 'lemmas_loop': 11745.0, 'lemmas_other': 34072.0, 'lits_conflict': 790602.0, 'lits_loop': 97189.0, 'lits_other': 3049335.0, 'jumps': {'jumps': 7813.0, 'jumps_bounded': 1371.0, 'levels': 214484.0, 'levels_bounded': 199455.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 44:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [45]:
Running step bounds   | Previous =     44 : Current =     45
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(45), Number(0)]), ('plan_module', [Number(45), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.287032s.

[13-11-2021_23-27-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.420689s with result Satisfiable.

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [45]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.7077211999999982, Incremental time limit = None
Running cumulative time = 15.305444499999988, Cumulative time limit = 3600
Used memory = (RSS = 495.140625Mb, VMS = 493.722656Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 66
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 11.233778s, Solving = 4.071667s, Total = 15.305444s, Memory = (RSS = 495.140625Mb, VMS = 493.722656Mb)), Calls = 45
Final Model :: Total atoms = 26680, Cost = (54, 0), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-27-52] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=45, start_step=44, end_step=45, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=11.233777699999987, solving_time=4.071666800000001, total_time=15.305444499999988, memory=Memory(rss=495.140625, vms=493.72265625), step_range=range(0, 46), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2870318999999988, solving_time=0.4206892999999994, total_time=0.7077211999999982, memory=Memory(rss=495.140625, vms=493.72265625), step_range=range(45, 46), clingo_stats={'problem': {'lp': {'atoms': 172473.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 552261.0, 'bodies_tr': 552261.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9105.0, 'count_bodies_tr': 9105.0, 'sccs': 1035.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 21602.0, 'rules': 818413.0, 'rules_normal': 808660.0, 'rules_choice': 9123.0, 'rules_minimize': 90.0, 'rules_acyc': 0.0, 'rules_heuristic': 540.0, 'rules_tr': 818287.0, 'rules_tr_normal': 808660.0, 'rules_tr_choice': 9123.0, 'rules_tr_minimize': 90.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 414.0, 'eqs': 413774.0, 'eqs_atom': 80542.0, 'eqs_body': 10959.0, 'eqs_other': 322273.0}, 'lpStep': {'atoms': 3768.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13350.0, 'bodies_tr': 13350.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 22890.0, 'rules_normal': 22681.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22890.0, 'rules_tr_normal': 22681.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9339.0, 'eqs_atom': 1889.0, 'eqs_body': 69.0, 'eqs_other': 7381.0}, 'generator': {'vars': 95583.0, 'vars_eliminated': 0.0, 'vars_frozen': 58575.0, 'constraints': 4723.0, 'constraints_binary': 179605.0, 'constraints_ternary': 25233.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 5797.0, 'conflicts': 622.0, 'conflicts_analyzed': 613.0, 'restarts': 2.0, 'restarts_last': 103.0, 'extra': {'domain_choices': 927.0, 'models': 3.0, 'models_level': 3238.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 458.0, 'distributed_sum_lbd': 1323.0, 'integrated': 2322.0, 'lemmas': 4208.0, 'lits_learnt': 117828.0, 'lemmas_binary': 216.0, 'lemmas_ternary': 43.0, 'cpu_time': 1.203125, 'integrated_imps': 650.0, 'integrated_jumps': 628.0, 'guiding_paths_lits': 5327.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 607.0, 'lemmas_loop': 1303.0, 'lemmas_other': 2298.0, 'lits_conflict': 23919.0, 'lits_loop': 10373.0, 'lits_other': 83536.0, 'jumps': {'jumps': 613.0, 'jumps_bounded': 26.0, 'levels': 3869.0, 'levels_bounded': 2995.0, 'max': 890.0, 'max_executed': 890.0, 'max_bounded': 888.0}}}}, 'summary': {'call': 45.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [54.0, 0.0], 'lower': [54.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.7156524658203125, 'cpu': 1.546875, 'solve': 0.39044189453125, 'unsat': 0.2802467346191406, 'sat': 0.05035400390625}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 15.7982177734375, 'cpu': 25.25, 'solve': 3.1324234008789062, 'unsat': 1.484384536743164, 'sat': 0.5782508850097656}, 'models': {'enumerated': 66.0, 'optimal': 23.0}, 'solving': {'solvers': {'choices': 81501.0, 'conflicts': 8854.0, 'conflicts_analyzed': 8426.0, 'restarts': 16.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 8589.0, 'models': 66.0, 'models_level': 35735.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7006.0, 'distributed_sum_lbd': 17302.0, 'integrated': 39258.0, 'lemmas': 57667.0, 'lits_learnt': 4054954.0, 'lemmas_binary': 4715.0, 'lemmas_ternary': 2312.0, 'cpu_time': 12.546875, 'integrated_imps': 13239.0, 'integrated_jumps': 13357.0, 'guiding_paths_lits': 99843.0, 'guiding_paths': 568.0, 'splits': 0.0, 'lemmas_conflict': 8249.0, 'lemmas_loop': 13048.0, 'lemmas_other': 36370.0, 'lits_conflict': 814521.0, 'lits_loop': 107562.0, 'lits_other': 3132871.0, 'jumps': {'jumps': 8426.0, 'jumps_bounded': 1397.0, 'levels': 218353.0, 'levels_bounded': 202450.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-52] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45}

[13-11-2021_23-27-52] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 24 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 7 (100.00% solved)

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(24, 45)', truth=True, inc_range=None)

[13-11-2021_23-27-52] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 24, step = 45]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 24)

[13-11-2021_23-27-52] DEBUG :: ASH Planner Main #1 >> Reaction at search length 45:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [46]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(0)]), ('plan_module', [Number(46), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.263934s.

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 46: original = External(symbol='current_last_sgoals(24, 45)', truth=True, inc_range=None), conversion = current_last_sgoals(24,45).

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.103931s with result Satisfiable.

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [46]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.36786479999999955, Incremental time limit = None
Running cumulative time = 15.673309299999987, Cumulative time limit = 3600
Used memory = (RSS = 507.246094Mb, VMS = 504.171875Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 68
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 11.497711s, Solving = 4.175598s, Total = 15.673309s, Memory = (RSS = 507.246094Mb, VMS = 504.171875Mb)), Calls = 46
Final Model :: Total atoms = 27075, Cost = (55, 0), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-27-52] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=46, start_step=45, end_step=46, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=11.497711499999987, solving_time=4.1755978, total_time=15.673309299999987, memory=Memory(rss=507.24609375, vms=504.171875), step_range=range(0, 47), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2639338000000002, solving_time=0.10393099999999933, total_time=0.36786479999999955, memory=Memory(rss=507.24609375, vms=504.171875), step_range=range(46, 47), clingo_stats={'problem': {'lp': {'atoms': 176252.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 565646.0, 'bodies_tr': 565646.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9306.0, 'count_bodies_tr': 9306.0, 'sccs': 1060.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 22196.0, 'rules': 841614.0, 'rules_normal': 831652.0, 'rules_choice': 9318.0, 'rules_minimize': 92.0, 'rules_acyc': 0.0, 'rules_heuristic': 552.0, 'rules_tr': 841488.0, 'rules_tr_normal': 831652.0, 'rules_tr_choice': 9318.0, 'rules_tr_minimize': 92.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 426.0, 'eqs': 423193.0, 'eqs_atom': 82441.0, 'eqs_body': 11028.0, 'eqs_other': 329724.0}, 'lpStep': {'atoms': 3779.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13385.0, 'bodies_tr': 13385.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 23201.0, 'rules_normal': 22992.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 23201.0, 'rules_tr_normal': 22992.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9419.0, 'eqs_atom': 1899.0, 'eqs_body': 69.0, 'eqs_other': 7451.0}, 'generator': {'vars': 98247.0, 'vars_eliminated': 0.0, 'vars_frozen': 60188.0, 'constraints': 4834.0, 'constraints_binary': 187583.0, 'constraints_ternary': 25179.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 3263.0, 'conflicts': 40.0, 'conflicts_analyzed': 31.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 48.0, 'models': 2.0, 'models_level': 2210.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 19.0, 'distributed_sum_lbd': 45.0, 'integrated': 73.0, 'lemmas': 166.0, 'lits_learnt': 6100.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.21875, 'integrated_imps': 10.0, 'integrated_jumps': 2.0, 'guiding_paths_lits': 5509.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 31.0, 'lemmas_loop': 84.0, 'lemmas_other': 51.0, 'lits_conflict': 1934.0, 'lits_loop': 756.0, 'lits_other': 3410.0, 'jumps': {'jumps': 31.0, 'jumps_bounded': 3.0, 'levels': 37.0, 'levels_bounded': 6.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 46.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [55.0, 0.0], 'lower': [55.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3770275115966797, 'cpu': 0.53125, 'solve': 0.07180976867675781, 'unsat': 0.027896881103515625, 'sat': 0.011972427368164062}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 16.17524528503418, 'cpu': 25.78125, 'solve': 3.204233169555664, 'unsat': 1.5122814178466797, 'sat': 0.5902233123779297}, 'models': {'enumerated': 68.0, 'optimal': 24.0}, 'solving': {'solvers': {'choices': 84764.0, 'conflicts': 8894.0, 'conflicts_analyzed': 8457.0, 'restarts': 16.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 8637.0, 'models': 68.0, 'models_level': 37945.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7025.0, 'distributed_sum_lbd': 17347.0, 'integrated': 39331.0, 'lemmas': 57833.0, 'lits_learnt': 4061054.0, 'lemmas_binary': 4716.0, 'lemmas_ternary': 2316.0, 'cpu_time': 12.765625, 'integrated_imps': 13249.0, 'integrated_jumps': 13359.0, 'guiding_paths_lits': 105352.0, 'guiding_paths': 584.0, 'splits': 0.0, 'lemmas_conflict': 8280.0, 'lemmas_loop': 13132.0, 'lemmas_other': 36421.0, 'lits_conflict': 816455.0, 'lits_loop': 108318.0, 'lits_other': 3136281.0, 'jumps': {'jumps': 8457.0, 'jumps_bounded': 1400.0, 'levels': 218390.0, 'levels_bounded': 202456.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-52] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45, 24: 46}

[13-11-2021_23-27-52] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 25 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 8 (114.29% solved)

[13-11-2021_23-27-52] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 24 was achieved successfully.

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.330039s, Solving = 0.012285s, Total = 0.342323s, Memory = (RSS = 209.152344Mb, VMS = 200.636719Mb)
2 : Statistics :: Grounding = 0.148494s, Solving = 0.009500s, Total = 0.157994s, Memory = (RSS = 212.683594Mb, VMS = 204.320312Mb)
3 : Statistics :: Grounding = 0.214504s, Solving = 0.009812s, Total = 0.224316s, Memory = (RSS = 214.164062Mb, VMS = 205.687500Mb)
4 : Statistics :: Grounding = 0.220404s, Solving = 0.008128s, Total = 0.228532s, Memory = (RSS = 215.964844Mb, VMS = 207.398438Mb)
5 : Statistics :: Grounding = 0.265620s, Solving = 0.011737s, Total = 0.277357s, Memory = (RSS = 221.015625Mb, VMS = 212.339844Mb)
6 : Statistics :: Grounding = 0.227756s, Solving = 0.014098s, Total = 0.241854s, Memory = (RSS = 226.097656Mb, VMS = 217.667969Mb)
7 : Statistics :: Grounding = 0.250622s, Solving = 0.027322s, Total = 0.277944s, Memory = (RSS = 232.062500Mb, VMS = 224.382812Mb)
8 : Statistics :: Grounding = 0.234885s, Solving = 0.019379s, Total = 0.254265s, Memory = (RSS = 235.679688Mb, VMS = 227.308594Mb)
9 : Statistics :: Grounding = 0.262118s, Solving = 0.027527s, Total = 0.289645s, Memory = (RSS = 242.960938Mb, VMS = 236.089844Mb)
10 : Statistics :: Grounding = 0.249473s, Solving = 0.029974s, Total = 0.279448s, Memory = (RSS = 246.707031Mb, VMS = 239.019531Mb)
11 : Statistics :: Grounding = 0.265225s, Solving = 0.045070s, Total = 0.310295s, Memory = (RSS = 252.351562Mb, VMS = 244.429688Mb)
12 : Statistics :: Grounding = 0.256257s, Solving = 0.081174s, Total = 0.337431s, Memory = (RSS = 265.171875Mb, VMS = 260.195312Mb)
13 : Statistics :: Grounding = 0.265735s, Solving = 0.158324s, Total = 0.424059s, Memory = (RSS = 270.472656Mb, VMS = 263.996094Mb)
14 : Statistics :: Grounding = 0.332795s, Solving = 0.029703s, Total = 0.362498s, Memory = (RSS = 273.578125Mb, VMS = 266.320312Mb)
15 : Statistics :: Grounding = 0.257947s, Solving = 0.183665s, Total = 0.441612s, Memory = (RSS = 288.308594Mb, VMS = 288.320312Mb)
16 : Statistics :: Grounding = 0.268652s, Solving = 0.086167s, Total = 0.354819s, Memory = (RSS = 296.921875Mb, VMS = 295.464844Mb)
17 : Statistics :: Grounding = 0.266591s, Solving = 0.066746s, Total = 0.333336s, Memory = (RSS = 305.765625Mb, VMS = 303.003906Mb)
18 : Statistics :: Grounding = 0.254563s, Solving = 0.193084s, Total = 0.447647s, Memory = (RSS = 318.281250Mb, VMS = 314.070312Mb)
19 : Statistics :: Grounding = 0.266068s, Solving = 0.171681s, Total = 0.437749s, Memory = (RSS = 330.425781Mb, VMS = 325.500000Mb)
20 : Statistics :: Grounding = 0.261717s, Solving = 0.028983s, Total = 0.290700s, Memory = (RSS = 334.027344Mb, VMS = 327.703125Mb)
21 : Statistics :: Grounding = 0.253094s, Solving = 0.166728s, Total = 0.419823s, Memory = (RSS = 346.914062Mb, VMS = 351.960938Mb)
22 : Statistics :: Grounding = 0.291204s, Solving = 0.341370s, Total = 0.632573s, Memory = (RSS = 354.136719Mb, VMS = 357.792969Mb)
23 : Statistics :: Grounding = 0.285397s, Solving = 0.100111s, Total = 0.385508s, Memory = (RSS = 368.179688Mb, VMS = 370.566406Mb)
24 : Statistics :: Grounding = 0.219505s, Solving = 0.023644s, Total = 0.243148s, Memory = (RSS = 369.480469Mb, VMS = 371.554688Mb)
25 : Statistics :: Grounding = 0.229740s, Solving = 0.056139s, Total = 0.285879s, Memory = (RSS = 374.851562Mb, VMS = 376.257812Mb)
26 : Statistics :: Grounding = 0.224896s, Solving = 0.026877s, Total = 0.251774s, Memory = (RSS = 379.433594Mb, VMS = 380.734375Mb)
27 : Statistics :: Grounding = 0.231321s, Solving = 0.030014s, Total = 0.261335s, Memory = (RSS = 380.363281Mb, VMS = 380.882812Mb)
28 : Statistics :: Grounding = 0.223761s, Solving = 0.178525s, Total = 0.402286s, Memory = (RSS = 384.871094Mb, VMS = 384.496094Mb)
29 : Statistics :: Grounding = 0.277033s, Solving = 0.064505s, Total = 0.341538s, Memory = (RSS = 393.437500Mb, VMS = 392.472656Mb)
30 : Statistics :: Grounding = 0.227125s, Solving = 0.029483s, Total = 0.256608s, Memory = (RSS = 395.531250Mb, VMS = 393.246094Mb)
31 : Statistics :: Grounding = 0.229255s, Solving = 0.076908s, Total = 0.306163s, Memory = (RSS = 403.421875Mb, VMS = 400.292969Mb)
32 : Statistics :: Grounding = 0.239840s, Solving = 0.252808s, Total = 0.492648s, Memory = (RSS = 415.003906Mb, VMS = 410.554688Mb)
33 : Statistics :: Grounding = 0.244780s, Solving = 0.034794s, Total = 0.279574s, Memory = (RSS = 418.855469Mb, VMS = 413.242188Mb)
34 : Statistics :: Grounding = 0.259712s, Solving = 0.147569s, Total = 0.407281s, Memory = (RSS = 440.753906Mb, VMS = 452.945312Mb)
35 : Statistics :: Grounding = 0.274845s, Solving = 0.112882s, Total = 0.387727s, Memory = (RSS = 454.980469Mb, VMS = 465.398438Mb)
36 : Statistics :: Grounding = 0.269162s, Solving = 0.045034s, Total = 0.314196s, Memory = (RSS = 429.394531Mb, VMS = 437.675781Mb)
37 : Statistics :: Grounding = 0.213702s, Solving = 0.074443s, Total = 0.288145s, Memory = (RSS = 435.140625Mb, VMS = 443.035156Mb)
38 : Statistics :: Grounding = 0.169038s, Solving = 0.268956s, Total = 0.437994s, Memory = (RSS = 441.187500Mb, VMS = 447.964844Mb)
39 : Statistics :: Grounding = 0.233282s, Solving = 0.087867s, Total = 0.321148s, Memory = (RSS = 450.625000Mb, VMS = 456.445312Mb)
40 : Statistics :: Grounding = 0.232907s, Solving = 0.055925s, Total = 0.288832s, Memory = (RSS = 457.347656Mb, VMS = 462.128906Mb)
41 : Statistics :: Grounding = 0.242418s, Solving = 0.033763s, Total = 0.276182s, Memory = (RSS = 460.437500Mb, VMS = 464.632812Mb)
42 : Statistics :: Grounding = 0.249392s, Solving = 0.124878s, Total = 0.374270s, Memory = (RSS = 476.093750Mb, VMS = 478.664062Mb)
43 : Statistics :: Grounding = 0.264782s, Solving = 0.040151s, Total = 0.304933s, Memory = (RSS = 478.683594Mb, VMS = 479.808594Mb)
44 : Statistics :: Grounding = 0.261088s, Solving = 0.063243s, Total = 0.324330s, Memory = (RSS = 481.437500Mb, VMS = 481.687500Mb)
45 : Statistics :: Grounding = 0.287032s, Solving = 0.420689s, Total = 0.707721s, Memory = (RSS = 495.140625Mb, VMS = 493.722656Mb)
46 : Statistics :: Grounding = 0.263934s, Solving = 0.103931s, Total = 0.367865s, Memory = (RSS = 507.246094Mb, VMS = 504.171875Mb)

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 15.673309s due to: External generator exit.

[13-11-2021_23-27-52] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[13-11-2021_23-27-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[13-11-2021_23-27-53] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 15, 33: 16, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 31, 15: 32, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-27-53] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 15, 33: 16, 34: 16, 35: 17, 36: 18, 37: 18, 38: 19, 39: 19, 40: 20, 41: 21, 42: 22, 43: 23, 44: 23, 45: 23, 46: 24}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 31, 15: 32, 16: 34, 17: 35, 18: 37, 19: 39, 20: 40, 21: 41, 22: 42, 23: 45, 24: 46}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-27-53] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 24, Last requested goal index = 24 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-27-53] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 11.497711s, Solving = 4.175598s, Total = 15.673309s, Memory = (RSS = 507.246094Mb, VMS = 504.171875Mb)), Calls = 46
Model :: Total atoms = 27075, Cost = (55, 0), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-27-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 46 :: Actions = 60                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 23:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 25:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 30:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 31:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 32:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 33:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 34:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 35:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 36:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
        talos : release(manipulator_end_1,(block,3))
Step 37:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 39:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
        talos : release(manipulator_end_2,(block,2))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
        talos : lift(manipulator_end_1,(block,1))
Step 41:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((puzzle_room,0))
Step 42:
    Current Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 44:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 45:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 46:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)

[13-11-2021_23-27-53] INFO :: ASH Planner Main #1 >> Online planning increment 3 finished.

[13-11-2021_23-27-53] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 2 : Total constraining sgoals = 14 : Achieved sgoals = 14 : Unachieved sgoals = 0
Level = 1 : Solved problems = 3 : Total constraining sgoals = 30 : Achieved sgoals = 24 : Unachieved sgoals = 6

[13-11-2021_23-27-53] INFO :: ASH Planner Main #1 >> Current valid planning level range: [1-1]

[13-11-2021_23-27-53] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 4 by method ground-first: [1-1]

[13-11-2021_23-27-53] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 4:
Divided plan : Level =  2 (par-ref), Length =  13, Actions =  20 (Com = 0.65), Sgs = 20, Time =   5.778s (Gro =   4.447s, Sea =   1.331s), Expan (1.86, 1.82) (Dev = (0.90, 1.10), Bal = (0.48, 0.60))
Division points [total=1] : [(Index = 23, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-27-53] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [24-30]

[13-11-2021_23-27-53] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [24-30], problem number = 4, increment number = 4

[13-11-2021_23-27-53] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 24)
	('last_sgoals', 30)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016425336EA0>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-27-53] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 24
last_sgoals = 30
start_step = 45
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 51

[13-11-2021_23-27-53] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [24-30] : Minimum search length bound = disabled with value = 51

[13-11-2021_23-27-53] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-27-53] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = False, chosen = False

[13-11-2021_23-27-53] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-27-53] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[13-11-2021_23-27-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 25})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 26})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 27})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 30})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 30})

[13-11-2021_23-27-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[13-11-2021_23-27-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 8 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 25).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 26).
sub_goal(2, talos, move(hallway), in(talos), hallway, 27).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 28).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 29).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 29).
sub_goal(2, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 30).
sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 30).

[13-11-2021_23-27-53] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-27-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[13-11-2021_23-27-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-27-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000016439A39BD0>

[13-11-2021_23-27-53] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[13-11-2021_23-27-53] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000016439A39BD0> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,2)), 3)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 4)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 4)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)), 5)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,puzzle_room_door_handle_outer), 6)).
fix_action(occurs(1, talos, actuate(manipulator_end_1,puzzle_room_door), 7)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 8)).
fix_action(occurs(1, talos, release(manipulator_end_1,puzzle_room_door_handle_outer), 8)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 9)).
fix_action(occurs(1, talos, move((hallway,1)), 10)).
fix_action(occurs(1, talos, move((hallway,0)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 12)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)), 13)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,store_room_door_handle_outer), 14)).
fix_action(occurs(1, talos, actuate(manipulator_end_2,store_room_door), 15)).
fix_action(occurs(1, talos, release(manipulator_end_2,store_room_door_handle_outer), 16)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 17)).
fix_action(occurs(1, talos, move((store_room,1)), 18)).
fix_action(occurs(1, talos, move((store_room,0)), 19)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,6))), 21)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,5))), 21)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,6)), 22)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,5)), 22)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 23)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 23)).
fix_action(occurs(1, talos, move((store_room,1)), 24)).
fix_action(occurs(1, talos, move((hallway,0)), 25)).
fix_action(occurs(1, talos, move((hallway,1)), 26)).
fix_action(occurs(1, talos, move((hallway,2)), 27)).
fix_action(occurs(1, talos, move((puzzle_room,0)), 28)).
fix_action(occurs(1, talos, move((puzzle_room,1)), 29)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 30)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 30)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,6),puzzle_room_table_right), 31)).
fix_action(occurs(1, talos, release(manipulator_end_1,(block,6)), 32)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,3))), 33)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,3)), 34)).
fix_action(occurs(1, talos, put(manipulator_end_2,(block,5),(block,6)), 34)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,3),puzzle_room_table_left), 35)).
fix_action(occurs(1, talos, release(manipulator_end_2,(block,5)), 35)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,2))), 36)).
fix_action(occurs(1, talos, release(manipulator_end_1,(block,3)), 36)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,2)), 37)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,1))), 38)).
fix_action(occurs(1, talos, put(manipulator_end_2,(block,2),(block,3)), 38)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,1)), 39)).
fix_action(occurs(1, talos, release(manipulator_end_2,(block,2)), 39)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 40)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 40)).
fix_action(occurs(1, talos, lift(manipulator_end_1,(block,1)), 40)).
fix_action(occurs(1, talos, move((puzzle_room,0)), 41)).
fix_action(occurs(1, talos, move((hallway,2)), 42)).
fix_action(occurs(1, talos, move((hallway,1)), 43)).
fix_action(occurs(1, talos, move((hallway,0)), 44)).
fix_action(occurs(1, talos, move((store_room,1)), 45)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[13-11-2021_23-27-53] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000016439A39BD0> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), nothing, 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), nothing, 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), nothing, 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,2), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), nothing, 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (hallway,2), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), nothing, 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (hallway,2), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), nothing, 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (hallway,2), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), nothing, 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (hallway,2), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), nothing, 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), hallway, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (hallway,2), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), nothing, 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), hallway, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (hallway,2), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), nothing, 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), hallway, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (hallway,1), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), nothing, 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), hallway, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (hallway,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), nothing, 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (hallway,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), nothing, 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), hallway, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (hallway,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), nothing, 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), hallway, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(1, complete(blue), false, 14)).
fix_fluent(holds(1, complete(red), false, 14)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 14)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 14)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 14)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 14)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(1, configuration(store_room_door), closed, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 14)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(talos), (hallway,0), 14)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 14)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 14)).
fix_fluent(holds(1, on((block,3)), (block,1), 14)).
fix_fluent(holds(1, on((block,4)), nothing, 14)).
fix_fluent(holds(1, on((block,5)), nothing, 14)).
fix_fluent(holds(1, on((block,6)), nothing, 14)).
fix_fluent(holds(1, tower_base((block,1)), true, 14)).
fix_fluent(holds(1, tower_base((block,2)), true, 14)).
fix_fluent(holds(1, tower_base((block,3)), false, 14)).
fix_fluent(holds(1, tower_base((block,4)), false, 14)).
fix_fluent(holds(1, tower_base((block,5)), false, 14)).
fix_fluent(holds(1, tower_base((block,6)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), closed, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), store_room, 14)).
fix_fluent(holds(2, in((block,6)), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), hallway, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), nothing, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(1, complete(blue), false, 15)).
fix_fluent(holds(1, complete(red), false, 15)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 15)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 15)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 15)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 15)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(1, configuration(store_room_door), open, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 15)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(talos), (hallway,0), 15)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 15)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 15)).
fix_fluent(holds(1, on((block,3)), (block,1), 15)).
fix_fluent(holds(1, on((block,4)), nothing, 15)).
fix_fluent(holds(1, on((block,5)), nothing, 15)).
fix_fluent(holds(1, on((block,6)), nothing, 15)).
fix_fluent(holds(1, tower_base((block,1)), true, 15)).
fix_fluent(holds(1, tower_base((block,2)), true, 15)).
fix_fluent(holds(1, tower_base((block,3)), false, 15)).
fix_fluent(holds(1, tower_base((block,4)), false, 15)).
fix_fluent(holds(1, tower_base((block,5)), false, 15)).
fix_fluent(holds(1, tower_base((block,6)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), store_room, 15)).
fix_fluent(holds(2, in((block,6)), store_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), hallway, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), nothing, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(1, complete(blue), false, 16)).
fix_fluent(holds(1, complete(red), false, 16)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 16)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 16)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(1, configuration(store_room_door), open, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 16)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 16)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(talos), (hallway,0), 16)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 16)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 16)).
fix_fluent(holds(1, on((block,3)), (block,1), 16)).
fix_fluent(holds(1, on((block,4)), nothing, 16)).
fix_fluent(holds(1, on((block,5)), nothing, 16)).
fix_fluent(holds(1, on((block,6)), nothing, 16)).
fix_fluent(holds(1, tower_base((block,1)), true, 16)).
fix_fluent(holds(1, tower_base((block,2)), true, 16)).
fix_fluent(holds(1, tower_base((block,3)), false, 16)).
fix_fluent(holds(1, tower_base((block,4)), false, 16)).
fix_fluent(holds(1, tower_base((block,5)), false, 16)).
fix_fluent(holds(1, tower_base((block,6)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), store_room, 16)).
fix_fluent(holds(2, in((block,6)), store_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), hallway, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), nothing, 16)).
fix_fluent(holds(2, on((block,6)), nothing, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(1, complete(blue), false, 17)).
fix_fluent(holds(1, complete(red), false, 17)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 17)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 17)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(1, configuration(store_room_door), open, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 17)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 17)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(talos), (hallway,0), 17)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 17)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 17)).
fix_fluent(holds(1, on((block,3)), (block,1), 17)).
fix_fluent(holds(1, on((block,4)), nothing, 17)).
fix_fluent(holds(1, on((block,5)), nothing, 17)).
fix_fluent(holds(1, on((block,6)), nothing, 17)).
fix_fluent(holds(1, tower_base((block,1)), true, 17)).
fix_fluent(holds(1, tower_base((block,2)), true, 17)).
fix_fluent(holds(1, tower_base((block,3)), false, 17)).
fix_fluent(holds(1, tower_base((block,4)), false, 17)).
fix_fluent(holds(1, tower_base((block,5)), false, 17)).
fix_fluent(holds(1, tower_base((block,6)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), store_room, 17)).
fix_fluent(holds(2, in((block,6)), store_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), hallway, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), (block,1), 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), nothing, 17)).
fix_fluent(holds(2, on((block,6)), nothing, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), false, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(1, complete(blue), false, 18)).
fix_fluent(holds(1, complete(red), false, 18)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 18)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 18)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(1, configuration(store_room_door), open, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 18)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(talos), (store_room,1), 18)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 18)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 18)).
fix_fluent(holds(1, on((block,3)), (block,1), 18)).
fix_fluent(holds(1, on((block,4)), nothing, 18)).
fix_fluent(holds(1, on((block,5)), nothing, 18)).
fix_fluent(holds(1, on((block,6)), nothing, 18)).
fix_fluent(holds(1, tower_base((block,1)), true, 18)).
fix_fluent(holds(1, tower_base((block,2)), true, 18)).
fix_fluent(holds(1, tower_base((block,3)), false, 18)).
fix_fluent(holds(1, tower_base((block,4)), false, 18)).
fix_fluent(holds(1, tower_base((block,5)), false, 18)).
fix_fluent(holds(1, tower_base((block,6)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), open, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), store_room, 18)).
fix_fluent(holds(2, in((block,5)), store_room, 18)).
fix_fluent(holds(2, in((block,6)), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), store_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), (block,1), 18)).
fix_fluent(holds(2, on((block,4)), nothing, 18)).
fix_fluent(holds(2, on((block,5)), nothing, 18)).
fix_fluent(holds(2, on((block,6)), nothing, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), false, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(1, complete(blue), false, 19)).
fix_fluent(holds(1, complete(red), false, 19)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 19)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 19)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(1, configuration(store_room_door), open, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 19)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 19)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(talos), (store_room,0), 19)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 19)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 19)).
fix_fluent(holds(1, on((block,3)), (block,1), 19)).
fix_fluent(holds(1, on((block,4)), nothing, 19)).
fix_fluent(holds(1, on((block,5)), nothing, 19)).
fix_fluent(holds(1, on((block,6)), nothing, 19)).
fix_fluent(holds(1, tower_base((block,1)), true, 19)).
fix_fluent(holds(1, tower_base((block,2)), true, 19)).
fix_fluent(holds(1, tower_base((block,3)), false, 19)).
fix_fluent(holds(1, tower_base((block,4)), false, 19)).
fix_fluent(holds(1, tower_base((block,5)), false, 19)).
fix_fluent(holds(1, tower_base((block,6)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(2, complete(blue), false, 19)).
fix_fluent(holds(2, complete(red), false, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 19)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(2, configuration(store_room_door), open, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,4)), store_room, 19)).
fix_fluent(holds(2, in((block,5)), store_room, 19)).
fix_fluent(holds(2, in((block,6)), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 19)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 19)).
fix_fluent(holds(2, in(talos), store_room, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,3)), (block,1), 19)).
fix_fluent(holds(2, on((block,4)), nothing, 19)).
fix_fluent(holds(2, on((block,5)), nothing, 19)).
fix_fluent(holds(2, on((block,6)), nothing, 19)).
fix_fluent(holds(2, tower_base((block,1)), true, 19)).
fix_fluent(holds(2, tower_base((block,2)), true, 19)).
fix_fluent(holds(2, tower_base((block,3)), false, 19)).
fix_fluent(holds(2, tower_base((block,4)), false, 19)).
fix_fluent(holds(2, tower_base((block,5)), false, 19)).
fix_fluent(holds(2, tower_base((block,6)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(1, complete(blue), false, 20)).
fix_fluent(holds(1, complete(red), false, 20)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 20)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 20)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(1, configuration(store_room_door), open, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 20)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 20)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(talos), (store_room,0), 20)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 20)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 20)).
fix_fluent(holds(1, on((block,3)), (block,1), 20)).
fix_fluent(holds(1, on((block,4)), nothing, 20)).
fix_fluent(holds(1, on((block,5)), nothing, 20)).
fix_fluent(holds(1, on((block,6)), nothing, 20)).
fix_fluent(holds(1, tower_base((block,1)), true, 20)).
fix_fluent(holds(1, tower_base((block,2)), true, 20)).
fix_fluent(holds(1, tower_base((block,3)), false, 20)).
fix_fluent(holds(1, tower_base((block,4)), false, 20)).
fix_fluent(holds(1, tower_base((block,5)), false, 20)).
fix_fluent(holds(1, tower_base((block,6)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(2, complete(blue), false, 20)).
fix_fluent(holds(2, complete(red), false, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 20)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(2, configuration(store_room_door), open, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,4)), store_room, 20)).
fix_fluent(holds(2, in((block,5)), store_room, 20)).
fix_fluent(holds(2, in((block,6)), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 20)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 20)).
fix_fluent(holds(2, in(talos), store_room, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,3)), (block,1), 20)).
fix_fluent(holds(2, on((block,4)), nothing, 20)).
fix_fluent(holds(2, on((block,5)), nothing, 20)).
fix_fluent(holds(2, on((block,6)), nothing, 20)).
fix_fluent(holds(2, tower_base((block,1)), true, 20)).
fix_fluent(holds(2, tower_base((block,2)), true, 20)).
fix_fluent(holds(2, tower_base((block,3)), false, 20)).
fix_fluent(holds(2, tower_base((block,4)), false, 20)).
fix_fluent(holds(2, tower_base((block,5)), false, 20)).
fix_fluent(holds(2, tower_base((block,6)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(1, complete(blue), false, 21)).
fix_fluent(holds(1, complete(red), false, 21)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 21)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 21)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 21)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 21)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(1, configuration(store_room_door), open, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 21)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 21)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(talos), (store_room,0), 21)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 21)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 21)).
fix_fluent(holds(1, on((block,3)), (block,1), 21)).
fix_fluent(holds(1, on((block,4)), nothing, 21)).
fix_fluent(holds(1, on((block,5)), nothing, 21)).
fix_fluent(holds(1, on((block,6)), nothing, 21)).
fix_fluent(holds(1, tower_base((block,1)), true, 21)).
fix_fluent(holds(1, tower_base((block,2)), true, 21)).
fix_fluent(holds(1, tower_base((block,3)), false, 21)).
fix_fluent(holds(1, tower_base((block,4)), false, 21)).
fix_fluent(holds(1, tower_base((block,5)), false, 21)).
fix_fluent(holds(1, tower_base((block,6)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(2, complete(blue), false, 21)).
fix_fluent(holds(2, complete(red), false, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 21)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(2, configuration(store_room_door), open, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,4)), store_room, 21)).
fix_fluent(holds(2, in((block,5)), store_room, 21)).
fix_fluent(holds(2, in((block,6)), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 21)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 21)).
fix_fluent(holds(2, in(talos), store_room, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,3)), (block,1), 21)).
fix_fluent(holds(2, on((block,4)), nothing, 21)).
fix_fluent(holds(2, on((block,5)), nothing, 21)).
fix_fluent(holds(2, on((block,6)), nothing, 21)).
fix_fluent(holds(2, tower_base((block,1)), true, 21)).
fix_fluent(holds(2, tower_base((block,2)), true, 21)).
fix_fluent(holds(2, tower_base((block,3)), false, 21)).
fix_fluent(holds(2, tower_base((block,4)), false, 21)).
fix_fluent(holds(2, tower_base((block,5)), false, 21)).
fix_fluent(holds(2, tower_base((block,6)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(1, complete(blue), false, 22)).
fix_fluent(holds(1, complete(red), false, 22)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 22)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 22)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 22)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 22)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(1, configuration(store_room_door), open, 22)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 22)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 22)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(talos), (store_room,0), 22)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 22)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 22)).
fix_fluent(holds(1, on((block,3)), (block,1), 22)).
fix_fluent(holds(1, on((block,4)), nothing, 22)).
fix_fluent(holds(1, on((block,5)), nothing, 22)).
fix_fluent(holds(1, on((block,6)), nothing, 22)).
fix_fluent(holds(1, tower_base((block,1)), true, 22)).
fix_fluent(holds(1, tower_base((block,2)), true, 22)).
fix_fluent(holds(1, tower_base((block,3)), false, 22)).
fix_fluent(holds(1, tower_base((block,4)), false, 22)).
fix_fluent(holds(1, tower_base((block,5)), false, 22)).
fix_fluent(holds(1, tower_base((block,6)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(2, complete(blue), false, 22)).
fix_fluent(holds(2, complete(red), false, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 22)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(2, configuration(store_room_door), open, 22)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,4)), store_room, 22)).
fix_fluent(holds(2, in((block,5)), store_room, 22)).
fix_fluent(holds(2, in((block,6)), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 22)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 22)).
fix_fluent(holds(2, in(talos), store_room, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,3)), (block,1), 22)).
fix_fluent(holds(2, on((block,4)), nothing, 22)).
fix_fluent(holds(2, on((block,5)), nothing, 22)).
fix_fluent(holds(2, on((block,6)), nothing, 22)).
fix_fluent(holds(2, tower_base((block,1)), true, 22)).
fix_fluent(holds(2, tower_base((block,2)), true, 22)).
fix_fluent(holds(2, tower_base((block,3)), false, 22)).
fix_fluent(holds(2, tower_base((block,4)), false, 22)).
fix_fluent(holds(2, tower_base((block,5)), false, 22)).
fix_fluent(holds(2, tower_base((block,6)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(1, complete(blue), false, 23)).
fix_fluent(holds(1, complete(red), false, 23)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 23)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 23)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 23)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 23)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(1, configuration(store_room_door), open, 23)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 23)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 23)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 23)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 23)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(talos), (store_room,0), 23)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 23)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 23)).
fix_fluent(holds(1, on((block,3)), (block,1), 23)).
fix_fluent(holds(1, on((block,4)), nothing, 23)).
fix_fluent(holds(1, on((block,5)), nothing, 23)).
fix_fluent(holds(1, on((block,6)), nothing, 23)).
fix_fluent(holds(1, tower_base((block,1)), true, 23)).
fix_fluent(holds(1, tower_base((block,2)), true, 23)).
fix_fluent(holds(1, tower_base((block,3)), false, 23)).
fix_fluent(holds(1, tower_base((block,4)), false, 23)).
fix_fluent(holds(1, tower_base((block,5)), false, 23)).
fix_fluent(holds(1, tower_base((block,6)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(2, complete(blue), false, 23)).
fix_fluent(holds(2, complete(red), false, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 23)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(2, configuration(store_room_door), open, 23)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 23)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,4)), store_room, 23)).
fix_fluent(holds(2, in((block,5)), store_room, 23)).
fix_fluent(holds(2, in((block,6)), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 23)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 23)).
fix_fluent(holds(2, in(talos), store_room, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,3)), (block,1), 23)).
fix_fluent(holds(2, on((block,4)), nothing, 23)).
fix_fluent(holds(2, on((block,5)), nothing, 23)).
fix_fluent(holds(2, on((block,6)), nothing, 23)).
fix_fluent(holds(2, tower_base((block,1)), true, 23)).
fix_fluent(holds(2, tower_base((block,2)), true, 23)).
fix_fluent(holds(2, tower_base((block,3)), false, 23)).
fix_fluent(holds(2, tower_base((block,4)), false, 23)).
fix_fluent(holds(2, tower_base((block,5)), false, 23)).
fix_fluent(holds(2, tower_base((block,6)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(1, complete(blue), false, 24)).
fix_fluent(holds(1, complete(red), false, 24)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 24)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 24)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 24)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 24)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(1, configuration(store_room_door), open, 24)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 24)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 24)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 24)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 24)).
fix_fluent(holds(1, in((block,5)), (store_room,1), 24)).
fix_fluent(holds(1, in((block,6)), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(talos), (store_room,1), 24)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 24)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 24)).
fix_fluent(holds(1, on((block,3)), (block,1), 24)).
fix_fluent(holds(1, on((block,4)), nothing, 24)).
fix_fluent(holds(1, on((block,5)), nothing, 24)).
fix_fluent(holds(1, on((block,6)), nothing, 24)).
fix_fluent(holds(1, tower_base((block,1)), true, 24)).
fix_fluent(holds(1, tower_base((block,2)), true, 24)).
fix_fluent(holds(1, tower_base((block,3)), false, 24)).
fix_fluent(holds(1, tower_base((block,4)), false, 24)).
fix_fluent(holds(1, tower_base((block,5)), false, 24)).
fix_fluent(holds(1, tower_base((block,6)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(2, complete(blue), false, 24)).
fix_fluent(holds(2, complete(red), false, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 24)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(2, configuration(store_room_door), open, 24)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 24)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,4)), store_room, 24)).
fix_fluent(holds(2, in((block,5)), store_room, 24)).
fix_fluent(holds(2, in((block,6)), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 24)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 24)).
fix_fluent(holds(2, in(talos), store_room, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,3)), (block,1), 24)).
fix_fluent(holds(2, on((block,4)), nothing, 24)).
fix_fluent(holds(2, on((block,5)), nothing, 24)).
fix_fluent(holds(2, on((block,6)), nothing, 24)).
fix_fluent(holds(2, tower_base((block,1)), true, 24)).
fix_fluent(holds(2, tower_base((block,2)), true, 24)).
fix_fluent(holds(2, tower_base((block,3)), false, 24)).
fix_fluent(holds(2, tower_base((block,4)), false, 24)).
fix_fluent(holds(2, tower_base((block,5)), false, 24)).
fix_fluent(holds(2, tower_base((block,6)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(1, complete(blue), false, 25)).
fix_fluent(holds(1, complete(red), false, 25)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 25)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 25)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 25)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 25)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(1, configuration(store_room_door), open, 25)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 25)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 25)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 25)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 25)).
fix_fluent(holds(1, in((block,5)), (hallway,0), 25)).
fix_fluent(holds(1, in((block,6)), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 25)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(talos), (hallway,0), 25)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 25)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 25)).
fix_fluent(holds(1, on((block,3)), (block,1), 25)).
fix_fluent(holds(1, on((block,4)), nothing, 25)).
fix_fluent(holds(1, on((block,5)), nothing, 25)).
fix_fluent(holds(1, on((block,6)), nothing, 25)).
fix_fluent(holds(1, tower_base((block,1)), true, 25)).
fix_fluent(holds(1, tower_base((block,2)), true, 25)).
fix_fluent(holds(1, tower_base((block,3)), false, 25)).
fix_fluent(holds(1, tower_base((block,4)), false, 25)).
fix_fluent(holds(1, tower_base((block,5)), false, 25)).
fix_fluent(holds(1, tower_base((block,6)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(2, complete(blue), false, 25)).
fix_fluent(holds(2, complete(red), false, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 25)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(2, configuration(store_room_door), open, 25)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 25)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,4)), store_room, 25)).
fix_fluent(holds(2, in((block,5)), hallway, 25)).
fix_fluent(holds(2, in((block,6)), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 25)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 25)).
fix_fluent(holds(2, in(talos), hallway, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,3)), (block,1), 25)).
fix_fluent(holds(2, on((block,4)), nothing, 25)).
fix_fluent(holds(2, on((block,5)), nothing, 25)).
fix_fluent(holds(2, on((block,6)), nothing, 25)).
fix_fluent(holds(2, tower_base((block,1)), true, 25)).
fix_fluent(holds(2, tower_base((block,2)), true, 25)).
fix_fluent(holds(2, tower_base((block,3)), false, 25)).
fix_fluent(holds(2, tower_base((block,4)), false, 25)).
fix_fluent(holds(2, tower_base((block,5)), false, 25)).
fix_fluent(holds(2, tower_base((block,6)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(1, complete(blue), false, 26)).
fix_fluent(holds(1, complete(red), false, 26)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 26)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 26)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 26)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 26)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(1, configuration(store_room_door), open, 26)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 26)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 26)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 26)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 26)).
fix_fluent(holds(1, in((block,5)), (hallway,1), 26)).
fix_fluent(holds(1, in((block,6)), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(talos), (hallway,1), 26)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 26)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 26)).
fix_fluent(holds(1, on((block,3)), (block,1), 26)).
fix_fluent(holds(1, on((block,4)), nothing, 26)).
fix_fluent(holds(1, on((block,5)), nothing, 26)).
fix_fluent(holds(1, on((block,6)), nothing, 26)).
fix_fluent(holds(1, tower_base((block,1)), true, 26)).
fix_fluent(holds(1, tower_base((block,2)), true, 26)).
fix_fluent(holds(1, tower_base((block,3)), false, 26)).
fix_fluent(holds(1, tower_base((block,4)), false, 26)).
fix_fluent(holds(1, tower_base((block,5)), false, 26)).
fix_fluent(holds(1, tower_base((block,6)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(2, complete(blue), false, 26)).
fix_fluent(holds(2, complete(red), false, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 26)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(2, configuration(store_room_door), open, 26)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 26)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,4)), store_room, 26)).
fix_fluent(holds(2, in((block,5)), hallway, 26)).
fix_fluent(holds(2, in((block,6)), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 26)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 26)).
fix_fluent(holds(2, in(talos), hallway, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,3)), (block,1), 26)).
fix_fluent(holds(2, on((block,4)), nothing, 26)).
fix_fluent(holds(2, on((block,5)), nothing, 26)).
fix_fluent(holds(2, on((block,6)), nothing, 26)).
fix_fluent(holds(2, tower_base((block,1)), true, 26)).
fix_fluent(holds(2, tower_base((block,2)), true, 26)).
fix_fluent(holds(2, tower_base((block,3)), false, 26)).
fix_fluent(holds(2, tower_base((block,4)), false, 26)).
fix_fluent(holds(2, tower_base((block,5)), false, 26)).
fix_fluent(holds(2, tower_base((block,6)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(1, complete(blue), false, 27)).
fix_fluent(holds(1, complete(red), false, 27)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 27)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 27)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 27)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 27)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(1, configuration(store_room_door), open, 27)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 27)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 27)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 27)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 27)).
fix_fluent(holds(1, in((block,5)), (hallway,2), 27)).
fix_fluent(holds(1, in((block,6)), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 27)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(talos), (hallway,2), 27)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 27)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 27)).
fix_fluent(holds(1, on((block,3)), (block,1), 27)).
fix_fluent(holds(1, on((block,4)), nothing, 27)).
fix_fluent(holds(1, on((block,5)), nothing, 27)).
fix_fluent(holds(1, on((block,6)), nothing, 27)).
fix_fluent(holds(1, tower_base((block,1)), true, 27)).
fix_fluent(holds(1, tower_base((block,2)), true, 27)).
fix_fluent(holds(1, tower_base((block,3)), false, 27)).
fix_fluent(holds(1, tower_base((block,4)), false, 27)).
fix_fluent(holds(1, tower_base((block,5)), false, 27)).
fix_fluent(holds(1, tower_base((block,6)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(2, complete(blue), false, 27)).
fix_fluent(holds(2, complete(red), false, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 27)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(2, configuration(store_room_door), open, 27)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 27)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,4)), store_room, 27)).
fix_fluent(holds(2, in((block,5)), hallway, 27)).
fix_fluent(holds(2, in((block,6)), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 27)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 27)).
fix_fluent(holds(2, in(talos), hallway, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,3)), (block,1), 27)).
fix_fluent(holds(2, on((block,4)), nothing, 27)).
fix_fluent(holds(2, on((block,5)), nothing, 27)).
fix_fluent(holds(2, on((block,6)), nothing, 27)).
fix_fluent(holds(2, tower_base((block,1)), true, 27)).
fix_fluent(holds(2, tower_base((block,2)), true, 27)).
fix_fluent(holds(2, tower_base((block,3)), false, 27)).
fix_fluent(holds(2, tower_base((block,4)), false, 27)).
fix_fluent(holds(2, tower_base((block,5)), false, 27)).
fix_fluent(holds(2, tower_base((block,6)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(1, complete(blue), false, 28)).
fix_fluent(holds(1, complete(red), false, 28)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 28)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 28)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 28)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 28)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(1, configuration(store_room_door), open, 28)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 28)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 28)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 28)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 28)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 28)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(talos), (puzzle_room,0), 28)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 28)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 28)).
fix_fluent(holds(1, on((block,3)), (block,1), 28)).
fix_fluent(holds(1, on((block,4)), nothing, 28)).
fix_fluent(holds(1, on((block,5)), nothing, 28)).
fix_fluent(holds(1, on((block,6)), nothing, 28)).
fix_fluent(holds(1, tower_base((block,1)), true, 28)).
fix_fluent(holds(1, tower_base((block,2)), true, 28)).
fix_fluent(holds(1, tower_base((block,3)), false, 28)).
fix_fluent(holds(1, tower_base((block,4)), false, 28)).
fix_fluent(holds(1, tower_base((block,5)), false, 28)).
fix_fluent(holds(1, tower_base((block,6)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(2, complete(blue), false, 28)).
fix_fluent(holds(2, complete(red), false, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 28)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(2, configuration(store_room_door), open, 28)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 28)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 28)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,4)), store_room, 28)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 28)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 28)).
fix_fluent(holds(2, in(talos), puzzle_room, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,3)), (block,1), 28)).
fix_fluent(holds(2, on((block,4)), nothing, 28)).
fix_fluent(holds(2, on((block,5)), nothing, 28)).
fix_fluent(holds(2, on((block,6)), nothing, 28)).
fix_fluent(holds(2, tower_base((block,1)), true, 28)).
fix_fluent(holds(2, tower_base((block,2)), true, 28)).
fix_fluent(holds(2, tower_base((block,3)), false, 28)).
fix_fluent(holds(2, tower_base((block,4)), false, 28)).
fix_fluent(holds(2, tower_base((block,5)), false, 28)).
fix_fluent(holds(2, tower_base((block,6)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(1, complete(blue), false, 29)).
fix_fluent(holds(1, complete(red), false, 29)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 29)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 29)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 29)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 29)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(1, configuration(store_room_door), open, 29)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 29)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 29)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 29)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 29)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 29)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 29)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 29)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 29)).
fix_fluent(holds(1, on((block,3)), (block,1), 29)).
fix_fluent(holds(1, on((block,4)), nothing, 29)).
fix_fluent(holds(1, on((block,5)), nothing, 29)).
fix_fluent(holds(1, on((block,6)), nothing, 29)).
fix_fluent(holds(1, tower_base((block,1)), true, 29)).
fix_fluent(holds(1, tower_base((block,2)), true, 29)).
fix_fluent(holds(1, tower_base((block,3)), false, 29)).
fix_fluent(holds(1, tower_base((block,4)), false, 29)).
fix_fluent(holds(1, tower_base((block,5)), false, 29)).
fix_fluent(holds(1, tower_base((block,6)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(2, complete(blue), false, 29)).
fix_fluent(holds(2, complete(red), false, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 29)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(2, configuration(store_room_door), open, 29)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 29)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 29)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,4)), store_room, 29)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 29)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 29)).
fix_fluent(holds(2, in(talos), puzzle_room, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,3)), (block,1), 29)).
fix_fluent(holds(2, on((block,4)), nothing, 29)).
fix_fluent(holds(2, on((block,5)), nothing, 29)).
fix_fluent(holds(2, on((block,6)), nothing, 29)).
fix_fluent(holds(2, tower_base((block,1)), true, 29)).
fix_fluent(holds(2, tower_base((block,2)), true, 29)).
fix_fluent(holds(2, tower_base((block,3)), false, 29)).
fix_fluent(holds(2, tower_base((block,4)), false, 29)).
fix_fluent(holds(2, tower_base((block,5)), false, 29)).
fix_fluent(holds(2, tower_base((block,6)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(1, complete(blue), false, 30)).
fix_fluent(holds(1, complete(red), false, 30)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 30)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 30)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 30)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 30)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(1, configuration(store_room_door), open, 30)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 30)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 30)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 30)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 30)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 30)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 30)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 30)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 30)).
fix_fluent(holds(1, on((block,3)), (block,1), 30)).
fix_fluent(holds(1, on((block,4)), nothing, 30)).
fix_fluent(holds(1, on((block,5)), nothing, 30)).
fix_fluent(holds(1, on((block,6)), nothing, 30)).
fix_fluent(holds(1, tower_base((block,1)), true, 30)).
fix_fluent(holds(1, tower_base((block,2)), true, 30)).
fix_fluent(holds(1, tower_base((block,3)), false, 30)).
fix_fluent(holds(1, tower_base((block,4)), false, 30)).
fix_fluent(holds(1, tower_base((block,5)), false, 30)).
fix_fluent(holds(1, tower_base((block,6)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(2, complete(blue), false, 30)).
fix_fluent(holds(2, complete(red), false, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 30)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(2, configuration(store_room_door), open, 30)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 30)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 30)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,4)), store_room, 30)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 30)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 30)).
fix_fluent(holds(2, in(talos), puzzle_room, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,3)), (block,1), 30)).
fix_fluent(holds(2, on((block,4)), nothing, 30)).
fix_fluent(holds(2, on((block,5)), nothing, 30)).
fix_fluent(holds(2, on((block,6)), nothing, 30)).
fix_fluent(holds(2, tower_base((block,1)), true, 30)).
fix_fluent(holds(2, tower_base((block,2)), true, 30)).
fix_fluent(holds(2, tower_base((block,3)), false, 30)).
fix_fluent(holds(2, tower_base((block,4)), false, 30)).
fix_fluent(holds(2, tower_base((block,5)), false, 30)).
fix_fluent(holds(2, tower_base((block,6)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(1, complete(blue), false, 31)).
fix_fluent(holds(1, complete(red), false, 31)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 31)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 31)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 31)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 31)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(1, configuration(store_room_door), open, 31)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 31)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 31)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 31)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 31)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 31)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 31)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 31)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, on((block,3)), (block,1), 31)).
fix_fluent(holds(1, on((block,4)), nothing, 31)).
fix_fluent(holds(1, on((block,5)), nothing, 31)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, tower_base((block,1)), true, 31)).
fix_fluent(holds(1, tower_base((block,2)), true, 31)).
fix_fluent(holds(1, tower_base((block,3)), false, 31)).
fix_fluent(holds(1, tower_base((block,4)), false, 31)).
fix_fluent(holds(1, tower_base((block,5)), false, 31)).
fix_fluent(holds(1, tower_base((block,6)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(2, complete(blue), false, 31)).
fix_fluent(holds(2, complete(red), false, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 31)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(2, configuration(store_room_door), open, 31)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 31)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 31)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,4)), store_room, 31)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 31)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 31)).
fix_fluent(holds(2, in(talos), puzzle_room, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,3)), (block,1), 31)).
fix_fluent(holds(2, on((block,4)), nothing, 31)).
fix_fluent(holds(2, on((block,5)), nothing, 31)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 31)).
fix_fluent(holds(2, tower_base((block,1)), true, 31)).
fix_fluent(holds(2, tower_base((block,2)), true, 31)).
fix_fluent(holds(2, tower_base((block,3)), false, 31)).
fix_fluent(holds(2, tower_base((block,4)), false, 31)).
fix_fluent(holds(2, tower_base((block,5)), false, 31)).
fix_fluent(holds(2, tower_base((block,6)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(1, complete(blue), false, 32)).
fix_fluent(holds(1, complete(red), false, 32)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 32)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 32)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 32)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 32)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(1, configuration(store_room_door), open, 32)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 32)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 32)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 32)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 32)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 32)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 32)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 32)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, on((block,3)), (block,1), 32)).
fix_fluent(holds(1, on((block,4)), nothing, 32)).
fix_fluent(holds(1, on((block,5)), nothing, 32)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, tower_base((block,1)), true, 32)).
fix_fluent(holds(1, tower_base((block,2)), true, 32)).
fix_fluent(holds(1, tower_base((block,3)), false, 32)).
fix_fluent(holds(1, tower_base((block,4)), false, 32)).
fix_fluent(holds(1, tower_base((block,5)), false, 32)).
fix_fluent(holds(1, tower_base((block,6)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(2, complete(blue), false, 32)).
fix_fluent(holds(2, complete(red), false, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 32)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(2, configuration(store_room_door), open, 32)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 32)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 32)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,4)), store_room, 32)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 32)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 32)).
fix_fluent(holds(2, in(talos), puzzle_room, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,3)), (block,1), 32)).
fix_fluent(holds(2, on((block,4)), nothing, 32)).
fix_fluent(holds(2, on((block,5)), nothing, 32)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 32)).
fix_fluent(holds(2, tower_base((block,1)), true, 32)).
fix_fluent(holds(2, tower_base((block,2)), true, 32)).
fix_fluent(holds(2, tower_base((block,3)), false, 32)).
fix_fluent(holds(2, tower_base((block,4)), false, 32)).
fix_fluent(holds(2, tower_base((block,5)), false, 32)).
fix_fluent(holds(2, tower_base((block,6)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(1, complete(blue), false, 33)).
fix_fluent(holds(1, complete(red), false, 33)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 33)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 33)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 33)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 33)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(1, configuration(store_room_door), open, 33)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 33)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 33)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 33)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 33)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 33)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 33)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 33)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, on((block,3)), (block,1), 33)).
fix_fluent(holds(1, on((block,4)), nothing, 33)).
fix_fluent(holds(1, on((block,5)), nothing, 33)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, tower_base((block,1)), true, 33)).
fix_fluent(holds(1, tower_base((block,2)), true, 33)).
fix_fluent(holds(1, tower_base((block,3)), false, 33)).
fix_fluent(holds(1, tower_base((block,4)), false, 33)).
fix_fluent(holds(1, tower_base((block,5)), false, 33)).
fix_fluent(holds(1, tower_base((block,6)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(2, complete(blue), false, 33)).
fix_fluent(holds(2, complete(red), false, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 33)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(2, configuration(store_room_door), open, 33)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 33)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 33)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,4)), store_room, 33)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 33)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 33)).
fix_fluent(holds(2, in(talos), puzzle_room, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,3)), (block,1), 33)).
fix_fluent(holds(2, on((block,4)), nothing, 33)).
fix_fluent(holds(2, on((block,5)), nothing, 33)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 33)).
fix_fluent(holds(2, tower_base((block,1)), true, 33)).
fix_fluent(holds(2, tower_base((block,2)), true, 33)).
fix_fluent(holds(2, tower_base((block,3)), false, 33)).
fix_fluent(holds(2, tower_base((block,4)), false, 33)).
fix_fluent(holds(2, tower_base((block,5)), false, 33)).
fix_fluent(holds(2, tower_base((block,6)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(1, complete(blue), false, 34)).
fix_fluent(holds(1, complete(red), false, 34)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 34)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 34)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 34)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 34)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(1, configuration(store_room_door), open, 34)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 34)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 34)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 34)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 34)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 34)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 34)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 34)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, on((block,3)), (block,1), 34)).
fix_fluent(holds(1, on((block,4)), nothing, 34)).
fix_fluent(holds(1, on((block,5)), (block,6), 34)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, tower_base((block,1)), true, 34)).
fix_fluent(holds(1, tower_base((block,2)), true, 34)).
fix_fluent(holds(1, tower_base((block,3)), false, 34)).
fix_fluent(holds(1, tower_base((block,4)), false, 34)).
fix_fluent(holds(1, tower_base((block,5)), false, 34)).
fix_fluent(holds(1, tower_base((block,6)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(2, complete(blue), false, 34)).
fix_fluent(holds(2, complete(red), false, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 34)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(2, configuration(store_room_door), open, 34)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 34)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 34)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,4)), store_room, 34)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 34)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 34)).
fix_fluent(holds(2, in(talos), puzzle_room, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,3)), (block,1), 34)).
fix_fluent(holds(2, on((block,4)), nothing, 34)).
fix_fluent(holds(2, on((block,5)), (block,6), 34)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 34)).
fix_fluent(holds(2, tower_base((block,1)), true, 34)).
fix_fluent(holds(2, tower_base((block,2)), true, 34)).
fix_fluent(holds(2, tower_base((block,3)), false, 34)).
fix_fluent(holds(2, tower_base((block,4)), false, 34)).
fix_fluent(holds(2, tower_base((block,5)), false, 34)).
fix_fluent(holds(2, tower_base((block,6)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(1, complete(blue), false, 35)).
fix_fluent(holds(1, complete(red), false, 35)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 35)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 35)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 35)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 35)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(1, configuration(store_room_door), open, 35)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 35)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 35)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 35)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 35)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 35)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 35)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,4)), nothing, 35)).
fix_fluent(holds(1, on((block,5)), (block,6), 35)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, tower_base((block,1)), true, 35)).
fix_fluent(holds(1, tower_base((block,2)), true, 35)).
fix_fluent(holds(1, tower_base((block,3)), true, 35)).
fix_fluent(holds(1, tower_base((block,4)), false, 35)).
fix_fluent(holds(1, tower_base((block,5)), false, 35)).
fix_fluent(holds(1, tower_base((block,6)), true, 35)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 35)).
fix_fluent(holds(2, complete(blue), false, 35)).
fix_fluent(holds(2, complete(red), false, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 35)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(2, configuration(store_room_door), open, 35)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 35)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 35)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,4)), store_room, 35)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 35)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 35)).
fix_fluent(holds(2, in(talos), puzzle_room, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,4)), nothing, 35)).
fix_fluent(holds(2, on((block,5)), (block,6), 35)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 35)).
fix_fluent(holds(2, tower_base((block,1)), true, 35)).
fix_fluent(holds(2, tower_base((block,2)), true, 35)).
fix_fluent(holds(2, tower_base((block,3)), true, 35)).
fix_fluent(holds(2, tower_base((block,4)), false, 35)).
fix_fluent(holds(2, tower_base((block,5)), false, 35)).
fix_fluent(holds(2, tower_base((block,6)), true, 35)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 35)).
fix_fluent(holds(1, complete(blue), false, 36)).
fix_fluent(holds(1, complete(red), false, 36)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 36)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,2)), 36)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 36)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 36)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 36)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 36)).
fix_fluent(holds(1, configuration(store_room_door), open, 36)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 36)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 36)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 36)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 36)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 36)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 36)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 36)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 36)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 36)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 36)).
fix_fluent(holds(1, on((block,4)), nothing, 36)).
fix_fluent(holds(1, on((block,5)), (block,6), 36)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 36)).
fix_fluent(holds(1, tower_base((block,1)), true, 36)).
fix_fluent(holds(1, tower_base((block,2)), true, 36)).
fix_fluent(holds(1, tower_base((block,3)), true, 36)).
fix_fluent(holds(1, tower_base((block,4)), false, 36)).
fix_fluent(holds(1, tower_base((block,5)), false, 36)).
fix_fluent(holds(1, tower_base((block,6)), true, 36)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 36)).
fix_fluent(holds(2, complete(blue), false, 36)).
fix_fluent(holds(2, complete(red), false, 36)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 36)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 36)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 36)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 36)).
fix_fluent(holds(2, configuration(store_room_door), open, 36)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 36)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 36)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,4)), store_room, 36)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 36)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 36)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 36)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 36)).
fix_fluent(holds(2, in(talos), puzzle_room, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 36)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 36)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 36)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 36)).
fix_fluent(holds(2, on((block,4)), nothing, 36)).
fix_fluent(holds(2, on((block,5)), (block,6), 36)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 36)).
fix_fluent(holds(2, tower_base((block,1)), true, 36)).
fix_fluent(holds(2, tower_base((block,2)), true, 36)).
fix_fluent(holds(2, tower_base((block,3)), true, 36)).
fix_fluent(holds(2, tower_base((block,4)), false, 36)).
fix_fluent(holds(2, tower_base((block,5)), false, 36)).
fix_fluent(holds(2, tower_base((block,6)), true, 36)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 36)).
fix_fluent(holds(1, complete(blue), false, 37)).
fix_fluent(holds(1, complete(red), false, 37)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 37)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,2)), 37)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 37)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 37)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 37)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 37)).
fix_fluent(holds(1, configuration(store_room_door), open, 37)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 37)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,2), 37)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 37)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,2), 37)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 37)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 37)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 37)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 37)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 37)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 37)).
fix_fluent(holds(1, on((block,4)), nothing, 37)).
fix_fluent(holds(1, on((block,5)), (block,6), 37)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 37)).
fix_fluent(holds(1, tower_base((block,1)), true, 37)).
fix_fluent(holds(1, tower_base((block,2)), true, 37)).
fix_fluent(holds(1, tower_base((block,3)), true, 37)).
fix_fluent(holds(1, tower_base((block,4)), false, 37)).
fix_fluent(holds(1, tower_base((block,5)), false, 37)).
fix_fluent(holds(1, tower_base((block,6)), true, 37)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 37)).
fix_fluent(holds(2, complete(blue), false, 37)).
fix_fluent(holds(2, complete(red), false, 37)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 37)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 37)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 37)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 37)).
fix_fluent(holds(2, configuration(store_room_door), open, 37)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 37)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,2), 37)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,4)), store_room, 37)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 37)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 37)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 37)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 37)).
fix_fluent(holds(2, in(talos), puzzle_room, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 37)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 37)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 37)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 37)).
fix_fluent(holds(2, on((block,4)), nothing, 37)).
fix_fluent(holds(2, on((block,5)), (block,6), 37)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 37)).
fix_fluent(holds(2, tower_base((block,1)), true, 37)).
fix_fluent(holds(2, tower_base((block,2)), true, 37)).
fix_fluent(holds(2, tower_base((block,3)), true, 37)).
fix_fluent(holds(2, tower_base((block,4)), false, 37)).
fix_fluent(holds(2, tower_base((block,5)), false, 37)).
fix_fluent(holds(2, tower_base((block,6)), true, 37)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 37)).
fix_fluent(holds(1, complete(blue), false, 38)).
fix_fluent(holds(1, complete(red), false, 38)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 38)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,2)), 38)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 38)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 38)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 38)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 38)).
fix_fluent(holds(1, configuration(store_room_door), open, 38)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 38)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,2), 38)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 38)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,2), 38)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 38)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 38)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 38)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 38)).
fix_fluent(holds(1, on((block,2)), (block,3), 38)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 38)).
fix_fluent(holds(1, on((block,4)), nothing, 38)).
fix_fluent(holds(1, on((block,5)), (block,6), 38)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 38)).
fix_fluent(holds(1, tower_base((block,1)), true, 38)).
fix_fluent(holds(1, tower_base((block,2)), false, 38)).
fix_fluent(holds(1, tower_base((block,3)), true, 38)).
fix_fluent(holds(1, tower_base((block,4)), false, 38)).
fix_fluent(holds(1, tower_base((block,5)), false, 38)).
fix_fluent(holds(1, tower_base((block,6)), true, 38)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 38)).
fix_fluent(holds(2, complete(blue), false, 38)).
fix_fluent(holds(2, complete(red), false, 38)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 38)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 38)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 38)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 38)).
fix_fluent(holds(2, configuration(store_room_door), open, 38)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 38)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,2), 38)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,4)), store_room, 38)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 38)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 38)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 38)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 38)).
fix_fluent(holds(2, in(talos), puzzle_room, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 38)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 38)).
fix_fluent(holds(2, on((block,2)), (block,3), 38)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 38)).
fix_fluent(holds(2, on((block,4)), nothing, 38)).
fix_fluent(holds(2, on((block,5)), (block,6), 38)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 38)).
fix_fluent(holds(2, tower_base((block,1)), true, 38)).
fix_fluent(holds(2, tower_base((block,2)), false, 38)).
fix_fluent(holds(2, tower_base((block,3)), true, 38)).
fix_fluent(holds(2, tower_base((block,4)), false, 38)).
fix_fluent(holds(2, tower_base((block,5)), false, 38)).
fix_fluent(holds(2, tower_base((block,6)), true, 38)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 38)).
fix_fluent(holds(1, complete(blue), false, 39)).
fix_fluent(holds(1, complete(red), false, 39)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 39)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 39)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 39)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 39)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 39)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 39)).
fix_fluent(holds(1, configuration(store_room_door), open, 39)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 39)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 39)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 39)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 39)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 39)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 39)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 39)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 39)).
fix_fluent(holds(1, on((block,2)), (block,3), 39)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 39)).
fix_fluent(holds(1, on((block,4)), nothing, 39)).
fix_fluent(holds(1, on((block,5)), (block,6), 39)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 39)).
fix_fluent(holds(1, tower_base((block,1)), true, 39)).
fix_fluent(holds(1, tower_base((block,2)), false, 39)).
fix_fluent(holds(1, tower_base((block,3)), true, 39)).
fix_fluent(holds(1, tower_base((block,4)), false, 39)).
fix_fluent(holds(1, tower_base((block,5)), false, 39)).
fix_fluent(holds(1, tower_base((block,6)), true, 39)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 39)).
fix_fluent(holds(2, complete(blue), false, 39)).
fix_fluent(holds(2, complete(red), false, 39)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 39)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 39)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 39)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 39)).
fix_fluent(holds(2, configuration(store_room_door), open, 39)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 39)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 39)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,4)), store_room, 39)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 39)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 39)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 39)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 39)).
fix_fluent(holds(2, in(talos), puzzle_room, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 39)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 39)).
fix_fluent(holds(2, on((block,2)), (block,3), 39)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 39)).
fix_fluent(holds(2, on((block,4)), nothing, 39)).
fix_fluent(holds(2, on((block,5)), (block,6), 39)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 39)).
fix_fluent(holds(2, tower_base((block,1)), true, 39)).
fix_fluent(holds(2, tower_base((block,2)), false, 39)).
fix_fluent(holds(2, tower_base((block,3)), true, 39)).
fix_fluent(holds(2, tower_base((block,4)), false, 39)).
fix_fluent(holds(2, tower_base((block,5)), false, 39)).
fix_fluent(holds(2, tower_base((block,6)), true, 39)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 39)).
fix_fluent(holds(1, complete(blue), false, 40)).
fix_fluent(holds(1, complete(red), false, 40)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 40)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 40)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 40)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 40)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 40)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 40)).
fix_fluent(holds(1, configuration(store_room_door), open, 40)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 40)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 40)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 40)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 40)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 40)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 40)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 40)).
fix_fluent(holds(1, on((block,1)), nothing, 40)).
fix_fluent(holds(1, on((block,2)), (block,3), 40)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 40)).
fix_fluent(holds(1, on((block,4)), nothing, 40)).
fix_fluent(holds(1, on((block,5)), (block,6), 40)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 40)).
fix_fluent(holds(1, tower_base((block,1)), false, 40)).
fix_fluent(holds(1, tower_base((block,2)), false, 40)).
fix_fluent(holds(1, tower_base((block,3)), true, 40)).
fix_fluent(holds(1, tower_base((block,4)), false, 40)).
fix_fluent(holds(1, tower_base((block,5)), false, 40)).
fix_fluent(holds(1, tower_base((block,6)), true, 40)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 40)).
fix_fluent(holds(2, complete(blue), false, 40)).
fix_fluent(holds(2, complete(red), false, 40)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 40)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 40)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 40)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 40)).
fix_fluent(holds(2, configuration(store_room_door), open, 40)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 40)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 40)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,4)), store_room, 40)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 40)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 40)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 40)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 40)).
fix_fluent(holds(2, in(talos), puzzle_room, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 40)).
fix_fluent(holds(2, on((block,1)), nothing, 40)).
fix_fluent(holds(2, on((block,2)), (block,3), 40)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 40)).
fix_fluent(holds(2, on((block,4)), nothing, 40)).
fix_fluent(holds(2, on((block,5)), (block,6), 40)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 40)).
fix_fluent(holds(2, tower_base((block,1)), false, 40)).
fix_fluent(holds(2, tower_base((block,2)), false, 40)).
fix_fluent(holds(2, tower_base((block,3)), true, 40)).
fix_fluent(holds(2, tower_base((block,4)), false, 40)).
fix_fluent(holds(2, tower_base((block,5)), false, 40)).
fix_fluent(holds(2, tower_base((block,6)), true, 40)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 40)).
fix_fluent(holds(1, complete(blue), false, 41)).
fix_fluent(holds(1, complete(red), false, 41)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 41)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 41)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 41)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 41)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 41)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 41)).
fix_fluent(holds(1, configuration(store_room_door), open, 41)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 41)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 41)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 41)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 41)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,0), 41)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 41)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(talos), (puzzle_room,0), 41)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 41)).
fix_fluent(holds(1, on((block,1)), nothing, 41)).
fix_fluent(holds(1, on((block,2)), (block,3), 41)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 41)).
fix_fluent(holds(1, on((block,4)), nothing, 41)).
fix_fluent(holds(1, on((block,5)), (block,6), 41)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 41)).
fix_fluent(holds(1, tower_base((block,1)), false, 41)).
fix_fluent(holds(1, tower_base((block,2)), false, 41)).
fix_fluent(holds(1, tower_base((block,3)), true, 41)).
fix_fluent(holds(1, tower_base((block,4)), false, 41)).
fix_fluent(holds(1, tower_base((block,5)), false, 41)).
fix_fluent(holds(1, tower_base((block,6)), true, 41)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 41)).
fix_fluent(holds(2, complete(blue), false, 41)).
fix_fluent(holds(2, complete(red), false, 41)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 41)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 41)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 41)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 41)).
fix_fluent(holds(2, configuration(store_room_door), open, 41)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 41)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 41)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,4)), store_room, 41)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 41)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 41)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 41)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 41)).
fix_fluent(holds(2, in(talos), puzzle_room, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 41)).
fix_fluent(holds(2, on((block,1)), nothing, 41)).
fix_fluent(holds(2, on((block,2)), (block,3), 41)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 41)).
fix_fluent(holds(2, on((block,4)), nothing, 41)).
fix_fluent(holds(2, on((block,5)), (block,6), 41)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 41)).
fix_fluent(holds(2, tower_base((block,1)), false, 41)).
fix_fluent(holds(2, tower_base((block,2)), false, 41)).
fix_fluent(holds(2, tower_base((block,3)), true, 41)).
fix_fluent(holds(2, tower_base((block,4)), false, 41)).
fix_fluent(holds(2, tower_base((block,5)), false, 41)).
fix_fluent(holds(2, tower_base((block,6)), true, 41)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 41)).
fix_fluent(holds(1, complete(blue), false, 42)).
fix_fluent(holds(1, complete(red), false, 42)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 42)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 42)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 42)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 42)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 42)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 42)).
fix_fluent(holds(1, configuration(store_room_door), open, 42)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 42)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 42)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 42)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 42)).
fix_fluent(holds(1, in((block,1)), (hallway,2), 42)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 42)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 42)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(talos), (hallway,2), 42)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 42)).
fix_fluent(holds(1, on((block,1)), nothing, 42)).
fix_fluent(holds(1, on((block,2)), (block,3), 42)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 42)).
fix_fluent(holds(1, on((block,4)), nothing, 42)).
fix_fluent(holds(1, on((block,5)), (block,6), 42)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 42)).
fix_fluent(holds(1, tower_base((block,1)), false, 42)).
fix_fluent(holds(1, tower_base((block,2)), false, 42)).
fix_fluent(holds(1, tower_base((block,3)), true, 42)).
fix_fluent(holds(1, tower_base((block,4)), false, 42)).
fix_fluent(holds(1, tower_base((block,5)), false, 42)).
fix_fluent(holds(1, tower_base((block,6)), true, 42)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 42)).
fix_fluent(holds(2, complete(blue), false, 42)).
fix_fluent(holds(2, complete(red), false, 42)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 42)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 42)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 42)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 42)).
fix_fluent(holds(2, configuration(store_room_door), open, 42)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 42)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 42)).
fix_fluent(holds(2, in((block,1)), hallway, 42)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 42)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 42)).
fix_fluent(holds(2, in((block,4)), store_room, 42)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 42)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 42)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 42)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 42)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 42)).
fix_fluent(holds(2, in(talos), hallway, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 42)).
fix_fluent(holds(2, on((block,1)), nothing, 42)).
fix_fluent(holds(2, on((block,2)), (block,3), 42)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 42)).
fix_fluent(holds(2, on((block,4)), nothing, 42)).
fix_fluent(holds(2, on((block,5)), (block,6), 42)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 42)).
fix_fluent(holds(2, tower_base((block,1)), false, 42)).
fix_fluent(holds(2, tower_base((block,2)), false, 42)).
fix_fluent(holds(2, tower_base((block,3)), true, 42)).
fix_fluent(holds(2, tower_base((block,4)), false, 42)).
fix_fluent(holds(2, tower_base((block,5)), false, 42)).
fix_fluent(holds(2, tower_base((block,6)), true, 42)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 42)).
fix_fluent(holds(1, complete(blue), false, 43)).
fix_fluent(holds(1, complete(red), false, 43)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 43)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 43)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 43)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 43)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 43)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 43)).
fix_fluent(holds(1, configuration(store_room_door), open, 43)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 43)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 43)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 43)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 43)).
fix_fluent(holds(1, in((block,1)), (hallway,1), 43)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 43)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 43)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(talos), (hallway,1), 43)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 43)).
fix_fluent(holds(1, on((block,1)), nothing, 43)).
fix_fluent(holds(1, on((block,2)), (block,3), 43)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 43)).
fix_fluent(holds(1, on((block,4)), nothing, 43)).
fix_fluent(holds(1, on((block,5)), (block,6), 43)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 43)).
fix_fluent(holds(1, tower_base((block,1)), false, 43)).
fix_fluent(holds(1, tower_base((block,2)), false, 43)).
fix_fluent(holds(1, tower_base((block,3)), true, 43)).
fix_fluent(holds(1, tower_base((block,4)), false, 43)).
fix_fluent(holds(1, tower_base((block,5)), false, 43)).
fix_fluent(holds(1, tower_base((block,6)), true, 43)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 43)).
fix_fluent(holds(2, complete(blue), false, 43)).
fix_fluent(holds(2, complete(red), false, 43)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 43)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 43)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 43)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 43)).
fix_fluent(holds(2, configuration(store_room_door), open, 43)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 43)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 43)).
fix_fluent(holds(2, in((block,1)), hallway, 43)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 43)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 43)).
fix_fluent(holds(2, in((block,4)), store_room, 43)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 43)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 43)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 43)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 43)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 43)).
fix_fluent(holds(2, in(talos), hallway, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 43)).
fix_fluent(holds(2, on((block,1)), nothing, 43)).
fix_fluent(holds(2, on((block,2)), (block,3), 43)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 43)).
fix_fluent(holds(2, on((block,4)), nothing, 43)).
fix_fluent(holds(2, on((block,5)), (block,6), 43)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 43)).
fix_fluent(holds(2, tower_base((block,1)), false, 43)).
fix_fluent(holds(2, tower_base((block,2)), false, 43)).
fix_fluent(holds(2, tower_base((block,3)), true, 43)).
fix_fluent(holds(2, tower_base((block,4)), false, 43)).
fix_fluent(holds(2, tower_base((block,5)), false, 43)).
fix_fluent(holds(2, tower_base((block,6)), true, 43)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 43)).
fix_fluent(holds(1, complete(blue), false, 44)).
fix_fluent(holds(1, complete(red), false, 44)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 44)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 44)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 44)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 44)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 44)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 44)).
fix_fluent(holds(1, configuration(store_room_door), open, 44)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 44)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 44)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 44)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 44)).
fix_fluent(holds(1, in((block,1)), (hallway,0), 44)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 44)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 44)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(talos), (hallway,0), 44)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 44)).
fix_fluent(holds(1, on((block,1)), nothing, 44)).
fix_fluent(holds(1, on((block,2)), (block,3), 44)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 44)).
fix_fluent(holds(1, on((block,4)), nothing, 44)).
fix_fluent(holds(1, on((block,5)), (block,6), 44)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 44)).
fix_fluent(holds(1, tower_base((block,1)), false, 44)).
fix_fluent(holds(1, tower_base((block,2)), false, 44)).
fix_fluent(holds(1, tower_base((block,3)), true, 44)).
fix_fluent(holds(1, tower_base((block,4)), false, 44)).
fix_fluent(holds(1, tower_base((block,5)), false, 44)).
fix_fluent(holds(1, tower_base((block,6)), true, 44)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 44)).
fix_fluent(holds(2, complete(blue), false, 44)).
fix_fluent(holds(2, complete(red), false, 44)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 44)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 44)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 44)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 44)).
fix_fluent(holds(2, configuration(store_room_door), open, 44)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 44)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 44)).
fix_fluent(holds(2, in((block,1)), hallway, 44)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 44)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 44)).
fix_fluent(holds(2, in((block,4)), store_room, 44)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 44)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 44)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 44)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 44)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 44)).
fix_fluent(holds(2, in(talos), hallway, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 44)).
fix_fluent(holds(2, on((block,1)), nothing, 44)).
fix_fluent(holds(2, on((block,2)), (block,3), 44)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 44)).
fix_fluent(holds(2, on((block,4)), nothing, 44)).
fix_fluent(holds(2, on((block,5)), (block,6), 44)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 44)).
fix_fluent(holds(2, tower_base((block,1)), false, 44)).
fix_fluent(holds(2, tower_base((block,2)), false, 44)).
fix_fluent(holds(2, tower_base((block,3)), true, 44)).
fix_fluent(holds(2, tower_base((block,4)), false, 44)).
fix_fluent(holds(2, tower_base((block,5)), false, 44)).
fix_fluent(holds(2, tower_base((block,6)), true, 44)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 44)).
fix_fluent(holds(1, complete(blue), false, 45)).
fix_fluent(holds(1, complete(red), false, 45)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 45)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 45)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 45)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 45)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 45)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 45)).
fix_fluent(holds(1, configuration(store_room_door), open, 45)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 45)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 45)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 45)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 45)).
fix_fluent(holds(1, in((block,1)), (store_room,1), 45)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 45)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 45)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(talos), (store_room,1), 45)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 45)).
fix_fluent(holds(1, on((block,1)), nothing, 45)).
fix_fluent(holds(1, on((block,2)), (block,3), 45)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 45)).
fix_fluent(holds(1, on((block,4)), nothing, 45)).
fix_fluent(holds(1, on((block,5)), (block,6), 45)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 45)).
fix_fluent(holds(1, tower_base((block,1)), false, 45)).
fix_fluent(holds(1, tower_base((block,2)), false, 45)).
fix_fluent(holds(1, tower_base((block,3)), true, 45)).
fix_fluent(holds(1, tower_base((block,4)), false, 45)).
fix_fluent(holds(1, tower_base((block,5)), false, 45)).
fix_fluent(holds(1, tower_base((block,6)), true, 45)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 45)).
fix_fluent(holds(2, complete(blue), false, 45)).
fix_fluent(holds(2, complete(red), false, 45)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 45)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 45)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 45)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 45)).
fix_fluent(holds(2, configuration(store_room_door), open, 45)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 45)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 45)).
fix_fluent(holds(2, in((block,1)), store_room, 45)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 45)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 45)).
fix_fluent(holds(2, in((block,4)), store_room, 45)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 45)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 45)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 45)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 45)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 45)).
fix_fluent(holds(2, in(talos), store_room, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 45)).
fix_fluent(holds(2, on((block,1)), nothing, 45)).
fix_fluent(holds(2, on((block,2)), (block,3), 45)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 45)).
fix_fluent(holds(2, on((block,4)), nothing, 45)).
fix_fluent(holds(2, on((block,5)), (block,6), 45)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 45)).
fix_fluent(holds(2, tower_base((block,1)), false, 45)).
fix_fluent(holds(2, tower_base((block,2)), false, 45)).
fix_fluent(holds(2, tower_base((block,3)), true, 45)).
fix_fluent(holds(2, tower_base((block,4)), false, 45)).
fix_fluent(holds(2, tower_base((block,5)), false, 45)).
fix_fluent(holds(2, tower_base((block,6)), true, 45)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 45)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[13-11-2021_23-27-53] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 45)
	('last_sgoals', 30)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000016425336EA0>)
	('first_sgoals', 25)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000016439A39BD0>)

[13-11-2021_23-27-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(25, 46)', truth=True, inc_range=None)

[13-11-2021_23-27-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-27-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [47]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(0)]), ('plan_module', [Number(47), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.263425s.

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 47: original = External(symbol='current_last_sgoals(25, 46)', truth=True, inc_range=None), conversion = current_last_sgoals(25,46).

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.100510s with result Satisfiable.

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [47]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3639349999999979, Incremental time limit = None
Running cumulative time = 16.037244299999983, Cumulative time limit = 3600
Used memory = (RSS = 524.691406Mb, VMS = 520.390625Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 70
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 11.761136s, Solving = 4.276108s, Total = 16.037244s, Memory = (RSS = 524.691406Mb, VMS = 520.390625Mb)), Calls = 47
Final Model :: Total atoms = 29053, Cost = (55, 0), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-27-54] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=47, start_step=46, end_step=47, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=11.761136199999985, solving_time=4.2761081, total_time=16.037244299999983, memory=Memory(rss=524.69140625, vms=520.390625), step_range=range(0, 48), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26342469999999807, solving_time=0.10051029999999983, total_time=0.3639349999999979, memory=Memory(rss=524.69140625, vms=520.390625), step_range=range(47, 48), clingo_stats={'problem': {'lp': {'atoms': 182062.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 579495.0, 'bodies_tr': 579495.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9507.0, 'count_bodies_tr': 9507.0, 'sccs': 1085.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 22790.0, 'rules': 867812.0, 'rules_normal': 857641.0, 'rules_choice': 9513.0, 'rules_minimize': 94.0, 'rules_acyc': 0.0, 'rules_heuristic': 564.0, 'rules_tr': 867686.0, 'rules_tr_normal': 857641.0, 'rules_tr_choice': 9513.0, 'rules_tr_minimize': 94.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 438.0, 'eqs': 433965.0, 'eqs_atom': 84768.0, 'eqs_body': 11512.0, 'eqs_other': 337685.0}, 'lpStep': {'atoms': 5810.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13849.0, 'bodies_tr': 13849.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 26198.0, 'rules_normal': 25989.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26198.0, 'rules_tr_normal': 25989.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10772.0, 'eqs_atom': 2327.0, 'eqs_body': 484.0, 'eqs_other': 7961.0}, 'generator': {'vars': 100928.0, 'vars_eliminated': 0.0, 'vars_frozen': 61816.0, 'constraints': 1090.0, 'constraints_binary': 126403.0, 'constraints_ternary': 4223.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 2500.0, 'conflicts': 7.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 1.0, 'models': 2.0, 'models_level': 2308.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 16.0, 'integrated': 48.0, 'lemmas': 79.0, 'lits_learnt': 1395.0, 'lemmas_binary': 42.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.078125, 'integrated_imps': 10.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 5733.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 28.0, 'lemmas_other': 46.0, 'lits_conflict': 372.0, 'lits_loop': 201.0, 'lits_other': 822.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 0.0, 'levels': 5.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 47.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [55.0, 0.0], 'lower': [55.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.5500888824462891, 'cpu': 0.578125, 'solve': 0.06131935119628906, 'unsat': 0.025905609130859375, 'sat': 0.0074748992919921875}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 16.72533416748047, 'cpu': 26.359375, 'solve': 3.265552520751953, 'unsat': 1.538187026977539, 'sat': 0.5976982116699219}, 'models': {'enumerated': 70.0, 'optimal': 25.0}, 'solving': {'solvers': {'choices': 87264.0, 'conflicts': 8901.0, 'conflicts_analyzed': 8462.0, 'restarts': 16.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 8638.0, 'models': 70.0, 'models_level': 40253.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7033.0, 'distributed_sum_lbd': 17363.0, 'integrated': 39379.0, 'lemmas': 57912.0, 'lits_learnt': 4062449.0, 'lemmas_binary': 4758.0, 'lemmas_ternary': 2316.0, 'cpu_time': 12.84375, 'integrated_imps': 13259.0, 'integrated_jumps': 13359.0, 'guiding_paths_lits': 111085.0, 'guiding_paths': 592.0, 'splits': 0.0, 'lemmas_conflict': 8285.0, 'lemmas_loop': 13160.0, 'lemmas_other': 36467.0, 'lits_conflict': 816827.0, 'lits_loop': 108519.0, 'lits_other': 3137103.0, 'jumps': {'jumps': 8462.0, 'jumps_bounded': 1400.0, 'levels': 218395.0, 'levels_bounded': 202456.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-54] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47}

[13-11-2021_23-27-54] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 26 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 2 ( 33.33% solved)

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(26, 47)', truth=True, inc_range=None)

[13-11-2021_23-27-54] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 26, step = 47]:
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 26)

[13-11-2021_23-27-54] DEBUG :: ASH Planner Main #1 >> Reaction at search length 47:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [48]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(48), Number(0)]), ('plan_module', [Number(48), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.230721s.

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 48: original = External(symbol='current_last_sgoals(26, 47)', truth=True, inc_range=None), conversion = current_last_sgoals(26,47).

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047457s with result Unsatisfiable.

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [48]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2781774000000006, Incremental time limit = None
Running cumulative time = 16.315421699999987, Cumulative time limit = 3600
Used memory = (RSS = 527.003906Mb, VMS = 522.304688Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-54] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=48, start_step=47, end_step=48, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=11.991856699999985, solving_time=4.323565, total_time=16.315421699999987, memory=Memory(rss=527.00390625, vms=522.3046875), step_range=range(0, 49), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23072050000000033, solving_time=0.047456900000000246, total_time=0.2781774000000006, memory=Memory(rss=527.00390625, vms=522.3046875), step_range=range(48, 49), clingo_stats={'problem': {'lp': {'atoms': 185160.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 590438.0, 'bodies_tr': 590438.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9708.0, 'count_bodies_tr': 9708.0, 'sccs': 1098.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 23024.0, 'rules': 889017.0, 'rules_normal': 878637.0, 'rules_choice': 9708.0, 'rules_minimize': 96.0, 'rules_acyc': 0.0, 'rules_heuristic': 576.0, 'rules_tr': 888880.0, 'rules_tr_normal': 878637.0, 'rules_tr_choice': 9708.0, 'rules_tr_minimize': 96.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 439.0, 'eqs': 445871.0, 'eqs_atom': 86480.0, 'eqs_body': 12021.0, 'eqs_other': 347370.0}, 'lpStep': {'atoms': 3098.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10943.0, 'bodies_tr': 10943.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 21205.0, 'rules_normal': 20996.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21194.0, 'rules_tr_normal': 20996.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 11906.0, 'eqs_atom': 1712.0, 'eqs_body': 509.0, 'eqs_other': 9685.0}, 'generator': {'vars': 101646.0, 'vars_eliminated': 0.0, 'vars_frozen': 62369.0, 'constraints': 1280.0, 'constraints_binary': 136373.0, 'constraints_ternary': 5041.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 5957.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 48.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.28521156311035156, 'cpu': 0.28125, 'solve': 0.00595855712890625, 'unsat': 0.00595855712890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 17.01054573059082, 'cpu': 26.640625, 'solve': 3.2715110778808594, 'unsat': 1.5441455841064453, 'sat': 0.5976982116699219}, 'models': {'enumerated': 70.0, 'optimal': 25.0}, 'solving': {'solvers': {'choices': 87264.0, 'conflicts': 8907.0, 'conflicts_analyzed': 8462.0, 'restarts': 16.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 8638.0, 'models': 70.0, 'models_level': 40253.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7033.0, 'distributed_sum_lbd': 17363.0, 'integrated': 39379.0, 'lemmas': 57912.0, 'lits_learnt': 4062449.0, 'lemmas_binary': 4758.0, 'lemmas_ternary': 2316.0, 'cpu_time': 12.84375, 'integrated_imps': 13259.0, 'integrated_jumps': 13359.0, 'guiding_paths_lits': 117042.0, 'guiding_paths': 599.0, 'splits': 0.0, 'lemmas_conflict': 8285.0, 'lemmas_loop': 13160.0, 'lemmas_other': 36467.0, 'lits_conflict': 816827.0, 'lits_loop': 108519.0, 'lits_other': 3137103.0, 'jumps': {'jumps': 8462.0, 'jumps_bounded': 1400.0, 'levels': 218395.0, 'levels_bounded': 202456.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-54] DEBUG :: ASH Planner Main #1 >> Reaction at search length 48:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [49]:
Running step bounds   | Previous =     48 : Current =     49
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('state_module', [Number(49), Number(0)]), ('plan_module', [Number(49), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.258337s.

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042468s with result Unsatisfiable.

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [49]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3008047999999981, Incremental time limit = None
Running cumulative time = 16.616226499999982, Cumulative time limit = 3600
Used memory = (RSS = 528.753906Mb, VMS = 523.261719Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-54] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=49, start_step=48, end_step=49, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=12.250193799999984, solving_time=4.3660327, total_time=16.616226499999982, memory=Memory(rss=528.75390625, vms=523.26171875), step_range=range(0, 50), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.25833709999999854, solving_time=0.04246769999999955, total_time=0.3008047999999981, memory=Memory(rss=528.75390625, vms=523.26171875), step_range=range(49, 50), clingo_stats={'problem': {'lp': {'atoms': 188427.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 602011.0, 'bodies_tr': 602011.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9909.0, 'count_bodies_tr': 9909.0, 'sccs': 1123.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 23422.0, 'rules': 911361.0, 'rules_normal': 900772.0, 'rules_choice': 9903.0, 'rules_minimize': 98.0, 'rules_acyc': 0.0, 'rules_heuristic': 588.0, 'rules_tr': 911217.0, 'rules_tr_normal': 900772.0, 'rules_tr_choice': 9903.0, 'rules_tr_minimize': 98.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 444.0, 'eqs': 455875.0, 'eqs_atom': 88104.0, 'eqs_body': 12317.0, 'eqs_other': 355454.0}, 'lpStep': {'atoms': 3267.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11573.0, 'bodies_tr': 11573.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 22344.0, 'rules_normal': 22135.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22337.0, 'rules_tr_normal': 22135.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 5.0, 'eqs': 10004.0, 'eqs_atom': 1624.0, 'eqs_body': 296.0, 'eqs_other': 8084.0}, 'generator': {'vars': 103212.0, 'vars_eliminated': 0.0, 'vars_frozen': 63410.0, 'constraints': 1670.0, 'constraints_binary': 150454.0, 'constraints_ternary': 6735.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 12.0, 'conflicts': 24.0, 'conflicts_analyzed': 12.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 12.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 12.0, 'distributed_sum_lbd': 22.0, 'integrated': 39.0, 'lemmas': 71.0, 'lits_learnt': 402.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 39.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 6181.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 12.0, 'lemmas_loop': 20.0, 'lemmas_other': 39.0, 'lits_conflict': 67.0, 'lits_loop': 100.0, 'lits_other': 235.0, 'jumps': {'jumps': 12.0, 'jumps_bounded': 12.0, 'levels': 1795.0, 'levels_bounded': 1783.0, 'max': 885.0, 'max_executed': 1.0, 'max_bounded': 884.0}}}}, 'summary': {'call': 49.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [56.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.30820274353027344, 'cpu': 0.421875, 'solve': 0.008005142211914062, 'unsat': 0.008005142211914062, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 17.318748474121094, 'cpu': 27.0625, 'solve': 3.2795162200927734, 'unsat': 1.5521507263183594, 'sat': 0.5976982116699219}, 'models': {'enumerated': 70.0, 'optimal': 25.0}, 'solving': {'solvers': {'choices': 87276.0, 'conflicts': 8931.0, 'conflicts_analyzed': 8474.0, 'restarts': 16.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 8650.0, 'models': 70.0, 'models_level': 40253.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7045.0, 'distributed_sum_lbd': 17385.0, 'integrated': 39418.0, 'lemmas': 57983.0, 'lits_learnt': 4062851.0, 'lemmas_binary': 4758.0, 'lemmas_ternary': 2316.0, 'cpu_time': 12.96875, 'integrated_imps': 13298.0, 'integrated_jumps': 13359.0, 'guiding_paths_lits': 123223.0, 'guiding_paths': 608.0, 'splits': 0.0, 'lemmas_conflict': 8297.0, 'lemmas_loop': 13180.0, 'lemmas_other': 36506.0, 'lits_conflict': 816894.0, 'lits_loop': 108619.0, 'lits_other': 3137338.0, 'jumps': {'jumps': 8474.0, 'jumps_bounded': 1412.0, 'levels': 220190.0, 'levels_bounded': 204239.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-54] DEBUG :: ASH Planner Main #1 >> Reaction at search length 49:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [50]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(50), Number(0)]), ('plan_module', [Number(50), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.294922s.

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.167144s with result Satisfiable.

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [50]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4620664999999953, Incremental time limit = None
Running cumulative time = 17.07829299999998, Cumulative time limit = 3600
Used memory = (RSS = 548.457031Mb, VMS = 541.988281Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 74
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 12.545116s, Solving = 4.533177s, Total = 17.078293s, Memory = (RSS = 548.457031Mb, VMS = 541.988281Mb)), Calls = 50
Final Model :: Total atoms = 30243, Cost = (59, 0), Optimality proven = False, Number = 4, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-27-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=50, start_step=49, end_step=50, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=12.545116099999984, solving_time=4.5331768999999955, total_time=17.07829299999998, memory=Memory(rss=548.45703125, vms=541.98828125), step_range=range(0, 51), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.29492229999999964, solving_time=0.16714419999999564, total_time=0.4620664999999953, memory=Memory(rss=548.45703125, vms=541.98828125), step_range=range(50, 51), clingo_stats={'problem': {'lp': {'atoms': 191980.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 614165.0, 'bodies_tr': 614165.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10110.0, 'count_bodies_tr': 10110.0, 'sccs': 1148.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 23820.0, 'rules': 934721.0, 'rules_normal': 923923.0, 'rules_choice': 10098.0, 'rules_minimize': 100.0, 'rules_acyc': 0.0, 'rules_heuristic': 600.0, 'rules_tr': 934573.0, 'rules_tr_normal': 923923.0, 'rules_tr_choice': 10098.0, 'rules_tr_minimize': 100.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 452.0, 'eqs': 466517.0, 'eqs_atom': 89705.0, 'eqs_body': 12511.0, 'eqs_other': 364301.0}, 'lpStep': {'atoms': 3553.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12154.0, 'bodies_tr': 12154.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 23360.0, 'rules_normal': 23151.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 23356.0, 'rules_tr_normal': 23151.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 10642.0, 'eqs_atom': 1601.0, 'eqs_body': 194.0, 'eqs_other': 8847.0}, 'generator': {'vars': 104982.0, 'vars_eliminated': 0.0, 'vars_frozen': 64558.0, 'constraints': 1903.0, 'constraints_binary': 164896.0, 'constraints_ternary': 8285.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 14136.0, 'conflicts': 124.0, 'conflicts_analyzed': 119.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 205.0, 'models': 4.0, 'models_level': 5135.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 117.0, 'distributed_sum_lbd': 139.0, 'integrated': 770.0, 'lemmas': 992.0, 'lits_learnt': 3826.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 20.0, 'cpu_time': 0.375, 'integrated_imps': 688.0, 'integrated_jumps': 4000.0, 'guiding_paths_lits': 7320.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 117.0, 'lemmas_loop': 165.0, 'lemmas_other': 710.0, 'lits_conflict': 624.0, 'lits_loop': 1444.0, 'lits_other': 1758.0, 'jumps': {'jumps': 119.0, 'jumps_bounded': 26.0, 'levels': 19393.0, 'levels_bounded': 17247.0, 'max': 1119.0, 'max_executed': 1119.0, 'max_bounded': 916.0}}}}, 'summary': {'call': 50.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [59.0, 0.0], 'lower': [59.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.46979331970214844, 'cpu': 0.71875, 'solve': 0.12821578979492188, 'unsat': 0.03391838073730469, 'sat': 0.009462356567382812}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 17.788541793823242, 'cpu': 27.78125, 'solve': 3.4077320098876953, 'unsat': 1.586069107055664, 'sat': 0.6071605682373047}, 'models': {'enumerated': 74.0, 'optimal': 26.0}, 'solving': {'solvers': {'choices': 101412.0, 'conflicts': 9055.0, 'conflicts_analyzed': 8593.0, 'restarts': 16.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 8855.0, 'models': 74.0, 'models_level': 45388.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7162.0, 'distributed_sum_lbd': 17524.0, 'integrated': 40188.0, 'lemmas': 58975.0, 'lits_learnt': 4066677.0, 'lemmas_binary': 4759.0, 'lemmas_ternary': 2336.0, 'cpu_time': 13.34375, 'integrated_imps': 13986.0, 'integrated_jumps': 17359.0, 'guiding_paths_lits': 130543.0, 'guiding_paths': 621.0, 'splits': 0.0, 'lemmas_conflict': 8414.0, 'lemmas_loop': 13345.0, 'lemmas_other': 37216.0, 'lits_conflict': 817518.0, 'lits_loop': 110063.0, 'lits_other': 3139096.0, 'jumps': {'jumps': 8593.0, 'jumps_bounded': 1438.0, 'levels': 239583.0, 'levels_bounded': 221486.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-55] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50}

[13-11-2021_23-27-55] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 27 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 3 ( 50.00% solved)

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(27, 50)', truth=True, inc_range=None)

[13-11-2021_23-27-55] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 27, step = 50]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 27)

[13-11-2021_23-27-55] DEBUG :: ASH Planner Main #1 >> Reaction at search length 50:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [51]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(0)]), ('plan_module', [Number(51), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.251719s.

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 51: original = External(symbol='current_last_sgoals(27, 50)', truth=True, inc_range=None), conversion = current_last_sgoals(27,50).

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045508s with result Unsatisfiable.

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [51]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2972268999999983, Incremental time limit = None
Running cumulative time = 17.37551989999998, Cumulative time limit = 3600
Used memory = (RSS = 548.199219Mb, VMS = 541.328125Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=51, start_step=50, end_step=51, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=12.79683529999998, solving_time=4.578684599999997, total_time=17.37551989999998, memory=Memory(rss=548.45703125, vms=541.98828125), step_range=range(0, 52), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2517191999999966, solving_time=0.045507700000001705, total_time=0.2972268999999983, memory=Memory(rss=548.19921875, vms=541.328125), step_range=range(51, 52), clingo_stats={'problem': {'lp': {'atoms': 195550.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 625699.0, 'bodies_tr': 625699.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10311.0, 'count_bodies_tr': 10311.0, 'sccs': 1165.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 24074.0, 'rules': 957896.0, 'rules_normal': 946889.0, 'rules_choice': 10293.0, 'rules_minimize': 102.0, 'rules_acyc': 0.0, 'rules_heuristic': 612.0, 'rules_tr': 957740.0, 'rules_tr_normal': 946889.0, 'rules_tr_choice': 10293.0, 'rules_tr_minimize': 102.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 456.0, 'eqs': 476561.0, 'eqs_atom': 91430.0, 'eqs_body': 12898.0, 'eqs_other': 372233.0}, 'lpStep': {'atoms': 3570.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11534.0, 'bodies_tr': 11534.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 254.0, 'rules': 23175.0, 'rules_normal': 22966.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 23167.0, 'rules_tr_normal': 22966.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 10044.0, 'eqs_atom': 1725.0, 'eqs_body': 387.0, 'eqs_other': 7932.0}, 'generator': {'vars': 105994.0, 'vars_eliminated': 0.0, 'vars_frozen': 65276.0, 'constraints': 1644.0, 'constraints_binary': 165207.0, 'constraints_ternary': 5725.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 2.0, 'lits_learnt': 18.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 5682.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 2.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 18.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 51.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3087139129638672, 'cpu': 0.40625, 'solve': 0.0080108642578125, 'unsat': 0.0080108642578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 18.09725570678711, 'cpu': 28.1875, 'solve': 3.415742874145508, 'unsat': 1.5940799713134766, 'sat': 0.6071605682373047}, 'models': {'enumerated': 74.0, 'optimal': 26.0}, 'solving': {'solvers': {'choices': 101412.0, 'conflicts': 9057.0, 'conflicts_analyzed': 8593.0, 'restarts': 16.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 8855.0, 'models': 74.0, 'models_level': 45388.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7162.0, 'distributed_sum_lbd': 17524.0, 'integrated': 40188.0, 'lemmas': 58977.0, 'lits_learnt': 4066695.0, 'lemmas_binary': 4759.0, 'lemmas_ternary': 2336.0, 'cpu_time': 13.453125, 'integrated_imps': 13986.0, 'integrated_jumps': 17359.0, 'guiding_paths_lits': 136225.0, 'guiding_paths': 627.0, 'splits': 0.0, 'lemmas_conflict': 8414.0, 'lemmas_loop': 13347.0, 'lemmas_other': 37216.0, 'lits_conflict': 817518.0, 'lits_loop': 110081.0, 'lits_other': 3139096.0, 'jumps': {'jumps': 8593.0, 'jumps_bounded': 1438.0, 'levels': 239583.0, 'levels_bounded': 221486.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-55] DEBUG :: ASH Planner Main #1 >> Reaction at search length 51:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [52]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(0)]), ('plan_module', [Number(52), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.231488s.

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.092573s with result Satisfiable.

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [52]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3240612000000027, Incremental time limit = None
Running cumulative time = 17.699581099999982, Cumulative time limit = 3600
Used memory = (RSS = 558.625000Mb, VMS = 580.367188Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 75
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 13.028323s, Solving = 4.671258s, Total = 17.699581s, Memory = (RSS = 558.625000Mb, VMS = 580.367188Mb)), Calls = 52
Final Model :: Total atoms = 31035, Cost = (61, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-27-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=52, start_step=51, end_step=52, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=13.02832339999998, solving_time=4.6712577, total_time=17.699581099999982, memory=Memory(rss=558.625, vms=580.3671875), step_range=range(0, 53), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23148809999999997, solving_time=0.09257310000000274, total_time=0.3240612000000027, memory=Memory(rss=558.625, vms=580.3671875), step_range=range(52, 53), clingo_stats={'problem': {'lp': {'atoms': 198753.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 637261.0, 'bodies_tr': 637261.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10512.0, 'count_bodies_tr': 10512.0, 'sccs': 1182.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 24332.0, 'rules': 981523.0, 'rules_normal': 970307.0, 'rules_choice': 10488.0, 'rules_minimize': 104.0, 'rules_acyc': 0.0, 'rules_heuristic': 624.0, 'rules_tr': 981359.0, 'rules_tr_normal': 970307.0, 'rules_tr_choice': 10488.0, 'rules_tr_minimize': 104.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 460.0, 'eqs': 490602.0, 'eqs_atom': 93089.0, 'eqs_body': 13296.0, 'eqs_other': 384217.0}, 'lpStep': {'atoms': 3203.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11562.0, 'bodies_tr': 11562.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 258.0, 'rules': 23627.0, 'rules_normal': 23418.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 23619.0, 'rules_tr_normal': 23418.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 14041.0, 'eqs_atom': 1659.0, 'eqs_body': 398.0, 'eqs_other': 11984.0}, 'generator': {'vars': 107155.0, 'vars_eliminated': 0.0, 'vars_frozen': 66052.0, 'constraints': 1886.0, 'constraints_binary': 179517.0, 'constraints_ternary': 7086.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 3020.0, 'conflicts': 57.0, 'conflicts_analyzed': 51.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 41.0, 'models': 1.0, 'models_level': 1370.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 57.0, 'distributed_sum_lbd': 128.0, 'integrated': 342.0, 'lemmas': 531.0, 'lits_learnt': 6554.0, 'lemmas_binary': 14.0, 'lemmas_ternary': 63.0, 'cpu_time': 0.1875, 'integrated_imps': 183.0, 'integrated_jumps': 182.0, 'guiding_paths_lits': 6853.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 51.0, 'lemmas_loop': 142.0, 'lemmas_other': 338.0, 'lits_conflict': 762.0, 'lits_loop': 1261.0, 'lits_other': 4531.0, 'jumps': {'jumps': 51.0, 'jumps_bounded': 26.0, 'levels': 14660.0, 'levels_bounded': 14504.0, 'max': 981.0, 'max_executed': 981.0, 'max_bounded': 980.0}}}}, 'summary': {'call': 52.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [61.0, 0.0], 'lower': [61.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.33226585388183594, 'cpu': 0.484375, 'solve': 0.04738616943359375, 'unsat': 0.030916213989257812, 'sat': 0.016469955444335938}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 18.429521560668945, 'cpu': 28.671875, 'solve': 3.4631290435791016, 'unsat': 1.6249961853027344, 'sat': 0.6236305236816406}, 'models': {'enumerated': 75.0, 'optimal': 27.0}, 'solving': {'solvers': {'choices': 104432.0, 'conflicts': 9114.0, 'conflicts_analyzed': 8644.0, 'restarts': 16.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 8896.0, 'models': 75.0, 'models_level': 46758.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7219.0, 'distributed_sum_lbd': 17652.0, 'integrated': 40530.0, 'lemmas': 59508.0, 'lits_learnt': 4073249.0, 'lemmas_binary': 4773.0, 'lemmas_ternary': 2399.0, 'cpu_time': 13.640625, 'integrated_imps': 14169.0, 'integrated_jumps': 17541.0, 'guiding_paths_lits': 143078.0, 'guiding_paths': 640.0, 'splits': 0.0, 'lemmas_conflict': 8465.0, 'lemmas_loop': 13489.0, 'lemmas_other': 37554.0, 'lits_conflict': 818280.0, 'lits_loop': 111342.0, 'lits_other': 3143627.0, 'jumps': {'jumps': 8644.0, 'jumps_bounded': 1464.0, 'levels': 254243.0, 'levels_bounded': 235990.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-55] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52}

[13-11-2021_23-27-55] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 28 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 4 ( 66.67% solved)

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(28, 52)', truth=True, inc_range=None)

[13-11-2021_23-27-55] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 28, step = 52]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 28)

[13-11-2021_23-27-55] DEBUG :: ASH Planner Main #1 >> Reaction at search length 52:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [53]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(53), Number(0)]), ('plan_module', [Number(53), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.242164s.

[13-11-2021_23-27-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 53: original = External(symbol='current_last_sgoals(28, 52)', truth=True, inc_range=None), conversion = current_last_sgoals(28,52).

[13-11-2021_23-27-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048272s with result Unsatisfiable.

[13-11-2021_23-27-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [53]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2904362999999961, Incremental time limit = None
Running cumulative time = 17.990017399999978, Cumulative time limit = 3600
Used memory = (RSS = 561.757812Mb, VMS = 582.386719Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-56] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=53, start_step=52, end_step=53, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=13.27048779999998, solving_time=4.719529599999996, total_time=17.990017399999978, memory=Memory(rss=561.7578125, vms=582.38671875), step_range=range(0, 54), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24216440000000006, solving_time=0.04827189999999604, total_time=0.2904362999999961, memory=Memory(rss=561.7578125, vms=582.38671875), step_range=range(53, 54), clingo_stats={'problem': {'lp': {'atoms': 201981.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 649236.0, 'bodies_tr': 649236.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10713.0, 'count_bodies_tr': 10713.0, 'sccs': 1207.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 24730.0, 'rules': 1006001.0, 'rules_normal': 994576.0, 'rules_choice': 10683.0, 'rules_minimize': 106.0, 'rules_acyc': 0.0, 'rules_heuristic': 636.0, 'rules_tr': 1005833.0, 'rules_tr_normal': 994576.0, 'rules_tr_choice': 10683.0, 'rules_tr_minimize': 106.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 468.0, 'eqs': 501041.0, 'eqs_atom': 94611.0, 'eqs_body': 13477.0, 'eqs_other': 392953.0}, 'lpStep': {'atoms': 3228.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11975.0, 'bodies_tr': 11975.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 24478.0, 'rules_normal': 24269.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 24474.0, 'rules_tr_normal': 24269.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 10439.0, 'eqs_atom': 1522.0, 'eqs_body': 181.0, 'eqs_other': 8736.0}, 'generator': {'vars': 108883.0, 'vars_eliminated': 0.0, 'vars_frozen': 67180.0, 'constraints': 2285.0, 'constraints_binary': 196813.0, 'constraints_ternary': 9049.0, 'acyc_edges': 0.0, 'complexity': 219222.0}}, 'solving': {'solvers': {'choices': 1.0, 'conflicts': 10.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 1.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 69.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 7077.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 7.0, 'lemmas_other': 0.0, 'lits_conflict': 2.0, 'lits_loop': 67.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 3.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 53.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [56.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.29923057556152344, 'cpu': 0.3125, 'solve': 0.009006500244140625, 'unsat': 0.009006500244140625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 18.72875213623047, 'cpu': 28.984375, 'solve': 3.472135543823242, 'unsat': 1.634002685546875, 'sat': 0.6236305236816406}, 'models': {'enumerated': 75.0, 'optimal': 27.0}, 'solving': {'solvers': {'choices': 104433.0, 'conflicts': 9124.0, 'conflicts_analyzed': 8645.0, 'restarts': 16.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 8897.0, 'models': 75.0, 'models_level': 46758.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7220.0, 'distributed_sum_lbd': 17654.0, 'integrated': 40530.0, 'lemmas': 59516.0, 'lits_learnt': 4073318.0, 'lemmas_binary': 4774.0, 'lemmas_ternary': 2399.0, 'cpu_time': 13.65625, 'integrated_imps': 14169.0, 'integrated_jumps': 17541.0, 'guiding_paths_lits': 150155.0, 'guiding_paths': 648.0, 'splits': 0.0, 'lemmas_conflict': 8466.0, 'lemmas_loop': 13496.0, 'lemmas_other': 37554.0, 'lits_conflict': 818282.0, 'lits_loop': 111409.0, 'lits_other': 3143627.0, 'jumps': {'jumps': 8645.0, 'jumps_bounded': 1465.0, 'levels': 254246.0, 'levels_bounded': 235992.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-56] DEBUG :: ASH Planner Main #1 >> Reaction at search length 53:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [54]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(0)]), ('plan_module', [Number(54), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.252566s.

[13-11-2021_23-27-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.071904s with result Unsatisfiable.

[13-11-2021_23-27-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [54]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.32447030000000154, Incremental time limit = None
Running cumulative time = 18.31448769999998, Cumulative time limit = 3600
Used memory = (RSS = 565.089844Mb, VMS = 585.066406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-56] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=54, start_step=53, end_step=54, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=13.523053799999982, solving_time=4.791433899999996, total_time=18.31448769999998, memory=Memory(rss=565.08984375, vms=585.06640625), step_range=range(0, 55), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2525660000000016, solving_time=0.07190429999999992, total_time=0.32447030000000154, memory=Memory(rss=565.08984375, vms=585.06640625), step_range=range(54, 55), clingo_stats={'problem': {'lp': {'atoms': 205460.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 661790.0, 'bodies_tr': 661790.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10914.0, 'count_bodies_tr': 10914.0, 'sccs': 1232.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 25134.0, 'rules': 1031670.0, 'rules_normal': 1020036.0, 'rules_choice': 10878.0, 'rules_minimize': 108.0, 'rules_acyc': 0.0, 'rules_heuristic': 648.0, 'rules_tr': 1031498.0, 'rules_tr_normal': 1020036.0, 'rules_tr_choice': 10878.0, 'rules_tr_minimize': 108.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 476.0, 'eqs': 517500.0, 'eqs_atom': 96365.0, 'eqs_body': 13761.0, 'eqs_other': 407374.0}, 'lpStep': {'atoms': 3479.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12554.0, 'bodies_tr': 12554.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 404.0, 'rules': 25669.0, 'rules_normal': 25460.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 25665.0, 'rules_tr_normal': 25460.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 16459.0, 'eqs_atom': 1754.0, 'eqs_body': 284.0, 'eqs_other': 14421.0}, 'generator': {'vars': 110804.0, 'vars_eliminated': 0.0, 'vars_frozen': 68387.0, 'constraints': 2709.0, 'constraints_binary': 216041.0, 'constraints_ternary': 11434.0, 'acyc_edges': 0.0, 'complexity': 230600.0}}, 'solving': {'solvers': {'choices': 239.0, 'conflicts': 156.0, 'conflicts_analyzed': 143.0, 'restarts': 0.0, 'restarts_last': 27.0, 'extra': {'domain_choices': 132.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 139.0, 'distributed_sum_lbd': 318.0, 'integrated': 830.0, 'lemmas': 1145.0, 'lits_learnt': 24011.0, 'lemmas_binary': 32.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 467.0, 'integrated_jumps': 59.0, 'guiding_paths_lits': 7301.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 141.0, 'lemmas_loop': 292.0, 'lemmas_other': 712.0, 'lits_conflict': 3809.0, 'lits_loop': 1887.0, 'lits_other': 18315.0, 'jumps': {'jumps': 143.0, 'jumps_bounded': 75.0, 'levels': 1290.0, 'levels_bounded': 1113.0, 'max': 224.0, 'max_executed': 224.0, 'max_bounded': 223.0}}}}, 'summary': {'call': 54.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [62.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.3321495056152344, 'cpu': 0.421875, 'solve': 0.016963958740234375, 'unsat': 0.016963958740234375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 19.060901641845703, 'cpu': 29.40625, 'solve': 3.4890995025634766, 'unsat': 1.6509666442871094, 'sat': 0.6236305236816406}, 'models': {'enumerated': 75.0, 'optimal': 27.0}, 'solving': {'solvers': {'choices': 104672.0, 'conflicts': 9280.0, 'conflicts_analyzed': 8788.0, 'restarts': 16.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 9029.0, 'models': 75.0, 'models_level': 46758.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7359.0, 'distributed_sum_lbd': 17972.0, 'integrated': 41360.0, 'lemmas': 60661.0, 'lits_learnt': 4097329.0, 'lemmas_binary': 4806.0, 'lemmas_ternary': 2399.0, 'cpu_time': 13.765625, 'integrated_imps': 14636.0, 'integrated_jumps': 17600.0, 'guiding_paths_lits': 157456.0, 'guiding_paths': 662.0, 'splits': 0.0, 'lemmas_conflict': 8607.0, 'lemmas_loop': 13788.0, 'lemmas_other': 38266.0, 'lits_conflict': 822091.0, 'lits_loop': 113296.0, 'lits_other': 3161942.0, 'jumps': {'jumps': 8788.0, 'jumps_bounded': 1540.0, 'levels': 255536.0, 'levels_bounded': 237105.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-56] DEBUG :: ASH Planner Main #1 >> Reaction at search length 54:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [55]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(0)]), ('plan_module', [Number(55), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.270050s.

[13-11-2021_23-27-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.406484s with result Satisfiable.

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [55]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.6765337000000002, Incremental time limit = None
Running cumulative time = 18.99102139999998, Cumulative time limit = 3600
Used memory = (RSS = 573.398438Mb, VMS = 592.285156Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 76
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 13.793104s, Solving = 5.197917s, Total = 18.991021s, Memory = (RSS = 573.398438Mb, VMS = 592.285156Mb)), Calls = 55
Final Model :: Total atoms = 32225, Cost = (64, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-57] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=55, start_step=54, end_step=55, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=13.793103999999982, solving_time=5.197917399999996, total_time=18.99102139999998, memory=Memory(rss=573.3984375, vms=592.28515625), step_range=range(0, 56), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2700502, solving_time=0.4064835000000002, total_time=0.6765337000000002, memory=Memory(rss=573.3984375, vms=592.28515625), step_range=range(55, 56), clingo_stats={'problem': {'lp': {'atoms': 208971.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 674956.0, 'bodies_tr': 674956.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11115.0, 'count_bodies_tr': 11115.0, 'sccs': 1257.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 25728.0, 'rules': 1058387.0, 'rules_normal': 1046544.0, 'rules_choice': 11073.0, 'rules_minimize': 110.0, 'rules_acyc': 0.0, 'rules_heuristic': 660.0, 'rules_tr': 1058215.0, 'rules_tr_normal': 1046544.0, 'rules_tr_choice': 11073.0, 'rules_tr_minimize': 110.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 488.0, 'eqs': 526768.0, 'eqs_atom': 98029.0, 'eqs_body': 13837.0, 'eqs_other': 414902.0}, 'lpStep': {'atoms': 3511.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13166.0, 'bodies_tr': 13166.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 26717.0, 'rules_normal': 26508.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26717.0, 'rules_tr_normal': 26508.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9268.0, 'eqs_atom': 1664.0, 'eqs_body': 76.0, 'eqs_other': 7528.0}, 'generator': {'vars': 113388.0, 'vars_eliminated': 0.0, 'vars_frozen': 69992.0, 'constraints': 3339.0, 'constraints_binary': 239615.0, 'constraints_ternary': 14912.0, 'acyc_edges': 0.0, 'complexity': 258366.0}}, 'solving': {'solvers': {'choices': 3579.0, 'conflicts': 397.0, 'conflicts_analyzed': 385.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 282.0, 'models': 1.0, 'models_level': 1486.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 345.0, 'distributed_sum_lbd': 830.0, 'integrated': 2071.0, 'lemmas': 3147.0, 'lits_learnt': 83820.0, 'lemmas_binary': 237.0, 'lemmas_ternary': 108.0, 'cpu_time': 0.84375, 'integrated_imps': 744.0, 'integrated_jumps': 261.0, 'guiding_paths_lits': 7525.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 378.0, 'lemmas_loop': 833.0, 'lemmas_other': 1936.0, 'lits_conflict': 13763.0, 'lits_loop': 6499.0, 'lits_other': 63558.0, 'jumps': {'jumps': 385.0, 'jumps_bounded': 82.0, 'levels': 8217.0, 'levels_bounded': 7677.0, 'max': 1077.0, 'max_executed': 1077.0, 'max_bounded': 1075.0}}}}, 'summary': {'call': 55.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [64.0, 0.0], 'lower': [64.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.6843624114990234, 'cpu': 1.15625, 'solve': 0.3700828552246094, 'unsat': 0.3491554260253906, 'sat': 0.02092742919921875}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 19.745264053344727, 'cpu': 30.5625, 'solve': 3.859182357788086, 'unsat': 2.0001220703125, 'sat': 0.6445579528808594}, 'models': {'enumerated': 76.0, 'optimal': 28.0}, 'solving': {'solvers': {'choices': 108251.0, 'conflicts': 9677.0, 'conflicts_analyzed': 9173.0, 'restarts': 16.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 9311.0, 'models': 76.0, 'models_level': 48244.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7704.0, 'distributed_sum_lbd': 18802.0, 'integrated': 43431.0, 'lemmas': 63808.0, 'lits_learnt': 4181149.0, 'lemmas_binary': 5043.0, 'lemmas_ternary': 2507.0, 'cpu_time': 14.609375, 'integrated_imps': 15380.0, 'integrated_jumps': 17861.0, 'guiding_paths_lits': 164981.0, 'guiding_paths': 679.0, 'splits': 0.0, 'lemmas_conflict': 8985.0, 'lemmas_loop': 14621.0, 'lemmas_other': 40202.0, 'lits_conflict': 835854.0, 'lits_loop': 119795.0, 'lits_other': 3225500.0, 'jumps': {'jumps': 9173.0, 'jumps_bounded': 1622.0, 'levels': 263753.0, 'levels_bounded': 244782.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-57] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52, 28: 55}

[13-11-2021_23-27-57] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 29 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 5 ( 83.33% solved)

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(29, 55)', truth=True, inc_range=None)

[13-11-2021_23-27-57] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 29, step = 55]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 29)
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 29)

[13-11-2021_23-27-57] DEBUG :: ASH Planner Main #1 >> Reaction at search length 55:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [56]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(0)]), ('plan_module', [Number(56), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.263307s.

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 56: original = External(symbol='current_last_sgoals(29, 55)', truth=True, inc_range=None), conversion = current_last_sgoals(29,55).

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.111942s with result Satisfiable.

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [56]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.37524919999999895, Incremental time limit = None
Running cumulative time = 19.36627059999998, Cumulative time limit = 3600
Used memory = (RSS = 584.808594Mb, VMS = 601.957031Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 78
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 14.056411s, Solving = 5.309859s, Total = 19.366271s, Memory = (RSS = 584.808594Mb, VMS = 601.957031Mb)), Calls = 56
Final Model :: Total atoms = 32628, Cost = (66, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-57] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=56, start_step=55, end_step=56, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=14.05641109999998, solving_time=5.309859499999996, total_time=19.36627059999998, memory=Memory(rss=584.80859375, vms=601.95703125), step_range=range(0, 57), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2633070999999987, solving_time=0.11194210000000027, total_time=0.37524919999999895, memory=Memory(rss=584.80859375, vms=601.95703125), step_range=range(56, 57), clingo_stats={'problem': {'lp': {'atoms': 212729.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 688608.0, 'bodies_tr': 688608.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11316.0, 'count_bodies_tr': 11316.0, 'sccs': 1282.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 26322.0, 'rules': 1086198.0, 'rules_normal': 1074146.0, 'rules_choice': 11268.0, 'rules_minimize': 112.0, 'rules_acyc': 0.0, 'rules_heuristic': 672.0, 'rules_tr': 1086026.0, 'rules_tr_normal': 1074146.0, 'rules_tr_choice': 11268.0, 'rules_tr_minimize': 112.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 500.0, 'eqs': 536719.0, 'eqs_atom': 99901.0, 'eqs_body': 13907.0, 'eqs_other': 422911.0}, 'lpStep': {'atoms': 3758.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13652.0, 'bodies_tr': 13652.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 27811.0, 'rules_normal': 27602.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27811.0, 'rules_tr_normal': 27602.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9951.0, 'eqs_atom': 1872.0, 'eqs_body': 70.0, 'eqs_other': 8009.0}, 'generator': {'vars': 116040.0, 'vars_eliminated': 0.0, 'vars_frozen': 71609.0, 'constraints': 3950.0, 'constraints_binary': 261443.0, 'constraints_ternary': 18434.0, 'acyc_edges': 0.0, 'complexity': 284403.0}}, 'solving': {'solvers': {'choices': 3241.0, 'conflicts': 20.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 17.0, 'models': 2.0, 'models_level': 3053.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 22.0, 'integrated': 54.0, 'lemmas': 198.0, 'lits_learnt': 2938.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.171875, 'integrated_imps': 27.0, 'integrated_jumps': 16.0, 'guiding_paths_lits': 7749.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 148.0, 'lemmas_other': 41.0, 'lits_conflict': 267.0, 'lits_loop': 1321.0, 'lits_other': 1350.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 4.0, 'levels': 17.0, 'levels_bounded': 8.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 56.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [66.0, 0.0], 'lower': [66.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.3858966827392578, 'cpu': 0.5, 'solve': 0.07676506042480469, 'unsat': 0.029895782470703125, 'sat': 0.0109405517578125}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 20.131160736083984, 'cpu': 31.0625, 'solve': 3.9359474182128906, 'unsat': 2.030017852783203, 'sat': 0.6554985046386719}, 'models': {'enumerated': 78.0, 'optimal': 29.0}, 'solving': {'solvers': {'choices': 111492.0, 'conflicts': 9697.0, 'conflicts_analyzed': 9182.0, 'restarts': 16.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 9328.0, 'models': 78.0, 'models_level': 51297.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7713.0, 'distributed_sum_lbd': 18824.0, 'integrated': 43485.0, 'lemmas': 64006.0, 'lits_learnt': 4184087.0, 'lemmas_binary': 5044.0, 'lemmas_ternary': 2507.0, 'cpu_time': 14.78125, 'integrated_imps': 15407.0, 'integrated_jumps': 17877.0, 'guiding_paths_lits': 172730.0, 'guiding_paths': 697.0, 'splits': 0.0, 'lemmas_conflict': 8994.0, 'lemmas_loop': 14769.0, 'lemmas_other': 40243.0, 'lits_conflict': 836121.0, 'lits_loop': 121116.0, 'lits_other': 3226850.0, 'jumps': {'jumps': 9182.0, 'jumps_bounded': 1626.0, 'levels': 263770.0, 'levels_bounded': 244790.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-57] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52, 28: 55, 29: 56}

[13-11-2021_23-27-57] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 30 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 6 (100.00% solved)

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(30, 56)', truth=True, inc_range=None)

[13-11-2021_23-27-57] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 30, step = 56]:
sub_goal(2, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 30)
sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 30)

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(56)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[13-11-2021_23-27-57] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(1, complete(blue), false, false)
final_goal(1, complete(blue), true, true)
final_goal(1, complete(red), false, false)
final_goal(1, complete(red), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1)), false, true)
final_goal(1, tower_base((block,1)), true, false)
final_goal(1, tower_base((block,2)), false, true)
final_goal(1, tower_base((block,2)), true, false)
final_goal(1, tower_base((block,3)), false, false)
final_goal(1, tower_base((block,3)), true, true)
final_goal(1, tower_base((block,4)), false, true)
final_goal(1, tower_base((block,4)), true, false)
final_goal(1, tower_base((block,5)), false, true)
final_goal(1, tower_base((block,5)), true, false)
final_goal(1, tower_base((block,6)), false, false)
final_goal(1, tower_base((block,6)), true, true)
final_goal(1, unordered_tower((block,1)), false, true)
final_goal(1, unordered_tower((block,1)), true, false)
final_goal(1, unordered_tower((block,2)), false, true)
final_goal(1, unordered_tower((block,2)), true, false)
final_goal(1, unordered_tower((block,3)), false, true)
final_goal(1, unordered_tower((block,3)), true, false)
final_goal(1, unordered_tower((block,4)), false, true)
final_goal(1, unordered_tower((block,4)), true, false)
final_goal(1, unordered_tower((block,5)), false, true)
final_goal(1, unordered_tower((block,5)), true, false)
final_goal(1, unordered_tower((block,6)), false, true)
final_goal(1, unordered_tower((block,6)), true, false)

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [57]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(0)]), ('plan_module', [Number(57), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.274941s.

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 57: original = External(symbol='current_last_sgoals(30, 56)', truth=True, inc_range=None), conversion = current_last_sgoals(30,56).

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 57: original = External(symbol='seq_achieve_fgoals(56)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(56).

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055643s with result Unsatisfiable.

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [57]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.33058409999999583, Incremental time limit = None
Running cumulative time = 19.696854699999975, Cumulative time limit = 3600
Used memory = (RSS = 588.718750Mb, VMS = 604.339844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-57] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=57, start_step=56, end_step=57, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=14.33135219999998, solving_time=5.365502499999993, total_time=19.696854699999975, memory=Memory(rss=588.71875, vms=604.33984375), step_range=range(0, 58), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2749410999999995, solving_time=0.055642999999996334, total_time=0.33058409999999583, memory=Memory(rss=588.71875, vms=604.33984375), step_range=range(57, 58), clingo_stats={'problem': {'lp': {'atoms': 216492.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 702299.0, 'bodies_tr': 702299.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11517.0, 'count_bodies_tr': 11517.0, 'sccs': 1307.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 26916.0, 'rules': 1114483.0, 'rules_normal': 1102222.0, 'rules_choice': 11463.0, 'rules_minimize': 114.0, 'rules_acyc': 0.0, 'rules_heuristic': 684.0, 'rules_tr': 1114311.0, 'rules_tr_normal': 1102222.0, 'rules_tr_choice': 11463.0, 'rules_tr_minimize': 114.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 512.0, 'eqs': 546756.0, 'eqs_atom': 101781.0, 'eqs_body': 13977.0, 'eqs_other': 430998.0}, 'lpStep': {'atoms': 3763.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13691.0, 'bodies_tr': 13691.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 28285.0, 'rules_normal': 28076.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28285.0, 'rules_tr_normal': 28076.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10037.0, 'eqs_atom': 1880.0, 'eqs_body': 70.0, 'eqs_other': 8087.0}, 'generator': {'vars': 118692.0, 'vars_eliminated': 0.0, 'vars_frozen': 73226.0, 'constraints': 4602.0, 'constraints_binary': 286039.0, 'constraints_ternary': 22398.0, 'acyc_edges': 0.0, 'complexity': 313699.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 7973.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 57.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.33965492248535156, 'cpu': 0.40625, 'solve': 0.0109710693359375, 'unsat': 0.0109710693359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 20.470815658569336, 'cpu': 31.46875, 'solve': 3.946918487548828, 'unsat': 2.0409889221191406, 'sat': 0.6554985046386719}, 'models': {'enumerated': 78.0, 'optimal': 29.0}, 'solving': {'solvers': {'choices': 111492.0, 'conflicts': 9705.0, 'conflicts_analyzed': 9182.0, 'restarts': 16.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 9328.0, 'models': 78.0, 'models_level': 51297.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7713.0, 'distributed_sum_lbd': 18824.0, 'integrated': 43485.0, 'lemmas': 64006.0, 'lits_learnt': 4184087.0, 'lemmas_binary': 5044.0, 'lemmas_ternary': 2507.0, 'cpu_time': 14.84375, 'integrated_imps': 15407.0, 'integrated_jumps': 17877.0, 'guiding_paths_lits': 180703.0, 'guiding_paths': 704.0, 'splits': 0.0, 'lemmas_conflict': 8994.0, 'lemmas_loop': 14769.0, 'lemmas_other': 40243.0, 'lits_conflict': 836121.0, 'lits_loop': 121116.0, 'lits_other': 3226850.0, 'jumps': {'jumps': 9182.0, 'jumps_bounded': 1626.0, 'levels': 263770.0, 'levels_bounded': 244790.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [58]:
Running step bounds   | Previous =     57 : Current =     58
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-27-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('state_module', [Number(58), Number(0)]), ('plan_module', [Number(58), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-27-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.274129s.

[13-11-2021_23-27-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 58: original = External(symbol='seq_achieve_fgoals(56)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(56).

[13-11-2021_23-27-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-27-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.108049s with result Satisfiable.

[13-11-2021_23-27-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [58]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.38217800000000324, Incremental time limit = None
Running cumulative time = 20.079032699999978, Cumulative time limit = 3600
Used memory = (RSS = 595.972656Mb, VMS = 609.468750Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-27-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 79
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 14.605481s, Solving = 5.473551s, Total = 20.079033s, Memory = (RSS = 595.972656Mb, VMS = 609.468750Mb)), Calls = 58
Final Model :: Total atoms = 33853, Cost = (69, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-58] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=58, start_step=57, end_step=58, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=14.605481299999983, solving_time=5.473551399999993, total_time=20.079032699999978, memory=Memory(rss=595.97265625, vms=609.46875), step_range=range(0, 59), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27412910000000323, solving_time=0.1080489, total_time=0.38217800000000324, memory=Memory(rss=595.97265625, vms=609.46875), step_range=range(58, 59), clingo_stats={'problem': {'lp': {'atoms': 220263.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 716029.0, 'bodies_tr': 716029.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11718.0, 'count_bodies_tr': 11718.0, 'sccs': 1332.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 27510.0, 'rules': 1143242.0, 'rules_normal': 1130772.0, 'rules_choice': 11658.0, 'rules_minimize': 116.0, 'rules_acyc': 0.0, 'rules_heuristic': 696.0, 'rules_tr': 1143070.0, 'rules_tr_normal': 1130772.0, 'rules_tr_choice': 11658.0, 'rules_tr_minimize': 116.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 524.0, 'eqs': 556879.0, 'eqs_atom': 103669.0, 'eqs_body': 14047.0, 'eqs_other': 439163.0}, 'lpStep': {'atoms': 3771.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13730.0, 'bodies_tr': 13730.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 28759.0, 'rules_normal': 28550.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28759.0, 'rules_tr_normal': 28550.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10123.0, 'eqs_atom': 1888.0, 'eqs_body': 70.0, 'eqs_other': 8165.0}, 'generator': {'vars': 121344.0, 'vars_eliminated': 0.0, 'vars_frozen': 74843.0, 'constraints': 5254.0, 'constraints_binary': 311101.0, 'constraints_ternary': 26362.0, 'acyc_edges': 0.0, 'complexity': 343461.0}}, 'solving': {'solvers': {'choices': 3884.0, 'conflicts': 240.0, 'conflicts_analyzed': 229.0, 'restarts': 0.0, 'restarts_last': 51.0, 'extra': {'domain_choices': 387.0, 'models': 1.0, 'models_level': 1606.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 214.0, 'distributed_sum_lbd': 536.0, 'integrated': 1284.0, 'lemmas': 1763.0, 'lits_learnt': 60426.0, 'lemmas_binary': 117.0, 'lemmas_ternary': 140.0, 'cpu_time': 0.3125, 'integrated_imps': 495.0, 'integrated_jumps': 587.0, 'guiding_paths_lits': 8197.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 226.0, 'lemmas_loop': 426.0, 'lemmas_other': 1111.0, 'lits_conflict': 11392.0, 'lits_loop': 3622.0, 'lits_other': 45412.0, 'jumps': {'jumps': 229.0, 'jumps_bounded': 42.0, 'levels': 8868.0, 'levels_bounded': 8563.0, 'max': 1108.0, 'max_executed': 1108.0, 'max_bounded': 1107.0}}}}, 'summary': {'call': 58.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [69.0, 0.0], 'lower': [69.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.391937255859375, 'cpu': 0.640625, 'solve': 0.07078361511230469, 'unsat': 0.03989219665527344, 'sat': 0.03089141845703125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 20.86275291442871, 'cpu': 32.109375, 'solve': 4.017702102661133, 'unsat': 2.080881118774414, 'sat': 0.6863899230957031}, 'models': {'enumerated': 79.0, 'optimal': 30.0}, 'solving': {'solvers': {'choices': 115376.0, 'conflicts': 9945.0, 'conflicts_analyzed': 9411.0, 'restarts': 16.0, 'restarts_last': 208.0, 'extra': {'domain_choices': 9715.0, 'models': 79.0, 'models_level': 52903.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7927.0, 'distributed_sum_lbd': 19360.0, 'integrated': 44769.0, 'lemmas': 65769.0, 'lits_learnt': 4244513.0, 'lemmas_binary': 5161.0, 'lemmas_ternary': 2647.0, 'cpu_time': 15.15625, 'integrated_imps': 15902.0, 'integrated_jumps': 18464.0, 'guiding_paths_lits': 188900.0, 'guiding_paths': 721.0, 'splits': 0.0, 'lemmas_conflict': 9220.0, 'lemmas_loop': 15195.0, 'lemmas_other': 41354.0, 'lits_conflict': 847513.0, 'lits_loop': 124738.0, 'lits_other': 3272262.0, 'jumps': {'jumps': 9411.0, 'jumps_bounded': 1668.0, 'levels': 272638.0, 'levels_bounded': 253353.0, 'max': 1700.0, 'max_executed': 1700.0, 'max_bounded': 1699.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-27-58] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52, 28: 55, 29: 56, 30: 58}

[13-11-2021_23-27-58] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 31 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 7 (116.67% solved)

[13-11-2021_23-27-58] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 30 was achieved successfully.

[13-11-2021_23-27-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-27-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.330039s, Solving = 0.012285s, Total = 0.342323s, Memory = (RSS = 209.152344Mb, VMS = 200.636719Mb)
2 : Statistics :: Grounding = 0.148494s, Solving = 0.009500s, Total = 0.157994s, Memory = (RSS = 212.683594Mb, VMS = 204.320312Mb)
3 : Statistics :: Grounding = 0.214504s, Solving = 0.009812s, Total = 0.224316s, Memory = (RSS = 214.164062Mb, VMS = 205.687500Mb)
4 : Statistics :: Grounding = 0.220404s, Solving = 0.008128s, Total = 0.228532s, Memory = (RSS = 215.964844Mb, VMS = 207.398438Mb)
5 : Statistics :: Grounding = 0.265620s, Solving = 0.011737s, Total = 0.277357s, Memory = (RSS = 221.015625Mb, VMS = 212.339844Mb)
6 : Statistics :: Grounding = 0.227756s, Solving = 0.014098s, Total = 0.241854s, Memory = (RSS = 226.097656Mb, VMS = 217.667969Mb)
7 : Statistics :: Grounding = 0.250622s, Solving = 0.027322s, Total = 0.277944s, Memory = (RSS = 232.062500Mb, VMS = 224.382812Mb)
8 : Statistics :: Grounding = 0.234885s, Solving = 0.019379s, Total = 0.254265s, Memory = (RSS = 235.679688Mb, VMS = 227.308594Mb)
9 : Statistics :: Grounding = 0.262118s, Solving = 0.027527s, Total = 0.289645s, Memory = (RSS = 242.960938Mb, VMS = 236.089844Mb)
10 : Statistics :: Grounding = 0.249473s, Solving = 0.029974s, Total = 0.279448s, Memory = (RSS = 246.707031Mb, VMS = 239.019531Mb)
11 : Statistics :: Grounding = 0.265225s, Solving = 0.045070s, Total = 0.310295s, Memory = (RSS = 252.351562Mb, VMS = 244.429688Mb)
12 : Statistics :: Grounding = 0.256257s, Solving = 0.081174s, Total = 0.337431s, Memory = (RSS = 265.171875Mb, VMS = 260.195312Mb)
13 : Statistics :: Grounding = 0.265735s, Solving = 0.158324s, Total = 0.424059s, Memory = (RSS = 270.472656Mb, VMS = 263.996094Mb)
14 : Statistics :: Grounding = 0.332795s, Solving = 0.029703s, Total = 0.362498s, Memory = (RSS = 273.578125Mb, VMS = 266.320312Mb)
15 : Statistics :: Grounding = 0.257947s, Solving = 0.183665s, Total = 0.441612s, Memory = (RSS = 288.308594Mb, VMS = 288.320312Mb)
16 : Statistics :: Grounding = 0.268652s, Solving = 0.086167s, Total = 0.354819s, Memory = (RSS = 296.921875Mb, VMS = 295.464844Mb)
17 : Statistics :: Grounding = 0.266591s, Solving = 0.066746s, Total = 0.333336s, Memory = (RSS = 305.765625Mb, VMS = 303.003906Mb)
18 : Statistics :: Grounding = 0.254563s, Solving = 0.193084s, Total = 0.447647s, Memory = (RSS = 318.281250Mb, VMS = 314.070312Mb)
19 : Statistics :: Grounding = 0.266068s, Solving = 0.171681s, Total = 0.437749s, Memory = (RSS = 330.425781Mb, VMS = 325.500000Mb)
20 : Statistics :: Grounding = 0.261717s, Solving = 0.028983s, Total = 0.290700s, Memory = (RSS = 334.027344Mb, VMS = 327.703125Mb)
21 : Statistics :: Grounding = 0.253094s, Solving = 0.166728s, Total = 0.419823s, Memory = (RSS = 346.914062Mb, VMS = 351.960938Mb)
22 : Statistics :: Grounding = 0.291204s, Solving = 0.341370s, Total = 0.632573s, Memory = (RSS = 354.136719Mb, VMS = 357.792969Mb)
23 : Statistics :: Grounding = 0.285397s, Solving = 0.100111s, Total = 0.385508s, Memory = (RSS = 368.179688Mb, VMS = 370.566406Mb)
24 : Statistics :: Grounding = 0.219505s, Solving = 0.023644s, Total = 0.243148s, Memory = (RSS = 369.480469Mb, VMS = 371.554688Mb)
25 : Statistics :: Grounding = 0.229740s, Solving = 0.056139s, Total = 0.285879s, Memory = (RSS = 374.851562Mb, VMS = 376.257812Mb)
26 : Statistics :: Grounding = 0.224896s, Solving = 0.026877s, Total = 0.251774s, Memory = (RSS = 379.433594Mb, VMS = 380.734375Mb)
27 : Statistics :: Grounding = 0.231321s, Solving = 0.030014s, Total = 0.261335s, Memory = (RSS = 380.363281Mb, VMS = 380.882812Mb)
28 : Statistics :: Grounding = 0.223761s, Solving = 0.178525s, Total = 0.402286s, Memory = (RSS = 384.871094Mb, VMS = 384.496094Mb)
29 : Statistics :: Grounding = 0.277033s, Solving = 0.064505s, Total = 0.341538s, Memory = (RSS = 393.437500Mb, VMS = 392.472656Mb)
30 : Statistics :: Grounding = 0.227125s, Solving = 0.029483s, Total = 0.256608s, Memory = (RSS = 395.531250Mb, VMS = 393.246094Mb)
31 : Statistics :: Grounding = 0.229255s, Solving = 0.076908s, Total = 0.306163s, Memory = (RSS = 403.421875Mb, VMS = 400.292969Mb)
32 : Statistics :: Grounding = 0.239840s, Solving = 0.252808s, Total = 0.492648s, Memory = (RSS = 415.003906Mb, VMS = 410.554688Mb)
33 : Statistics :: Grounding = 0.244780s, Solving = 0.034794s, Total = 0.279574s, Memory = (RSS = 418.855469Mb, VMS = 413.242188Mb)
34 : Statistics :: Grounding = 0.259712s, Solving = 0.147569s, Total = 0.407281s, Memory = (RSS = 440.753906Mb, VMS = 452.945312Mb)
35 : Statistics :: Grounding = 0.274845s, Solving = 0.112882s, Total = 0.387727s, Memory = (RSS = 454.980469Mb, VMS = 465.398438Mb)
36 : Statistics :: Grounding = 0.269162s, Solving = 0.045034s, Total = 0.314196s, Memory = (RSS = 429.394531Mb, VMS = 437.675781Mb)
37 : Statistics :: Grounding = 0.213702s, Solving = 0.074443s, Total = 0.288145s, Memory = (RSS = 435.140625Mb, VMS = 443.035156Mb)
38 : Statistics :: Grounding = 0.169038s, Solving = 0.268956s, Total = 0.437994s, Memory = (RSS = 441.187500Mb, VMS = 447.964844Mb)
39 : Statistics :: Grounding = 0.233282s, Solving = 0.087867s, Total = 0.321148s, Memory = (RSS = 450.625000Mb, VMS = 456.445312Mb)
40 : Statistics :: Grounding = 0.232907s, Solving = 0.055925s, Total = 0.288832s, Memory = (RSS = 457.347656Mb, VMS = 462.128906Mb)
41 : Statistics :: Grounding = 0.242418s, Solving = 0.033763s, Total = 0.276182s, Memory = (RSS = 460.437500Mb, VMS = 464.632812Mb)
42 : Statistics :: Grounding = 0.249392s, Solving = 0.124878s, Total = 0.374270s, Memory = (RSS = 476.093750Mb, VMS = 478.664062Mb)
43 : Statistics :: Grounding = 0.264782s, Solving = 0.040151s, Total = 0.304933s, Memory = (RSS = 478.683594Mb, VMS = 479.808594Mb)
44 : Statistics :: Grounding = 0.261088s, Solving = 0.063243s, Total = 0.324330s, Memory = (RSS = 481.437500Mb, VMS = 481.687500Mb)
45 : Statistics :: Grounding = 0.287032s, Solving = 0.420689s, Total = 0.707721s, Memory = (RSS = 495.140625Mb, VMS = 493.722656Mb)
46 : Statistics :: Grounding = 0.263934s, Solving = 0.103931s, Total = 0.367865s, Memory = (RSS = 507.246094Mb, VMS = 504.171875Mb)
47 : Statistics :: Grounding = 0.263425s, Solving = 0.100510s, Total = 0.363935s, Memory = (RSS = 524.691406Mb, VMS = 520.390625Mb)
48 : Statistics :: Grounding = 0.230721s, Solving = 0.047457s, Total = 0.278177s, Memory = (RSS = 527.003906Mb, VMS = 522.304688Mb)
49 : Statistics :: Grounding = 0.258337s, Solving = 0.042468s, Total = 0.300805s, Memory = (RSS = 528.753906Mb, VMS = 523.261719Mb)
50 : Statistics :: Grounding = 0.294922s, Solving = 0.167144s, Total = 0.462066s, Memory = (RSS = 548.457031Mb, VMS = 541.988281Mb)
51 : Statistics :: Grounding = 0.251719s, Solving = 0.045508s, Total = 0.297227s, Memory = (RSS = 548.199219Mb, VMS = 541.328125Mb)
52 : Statistics :: Grounding = 0.231488s, Solving = 0.092573s, Total = 0.324061s, Memory = (RSS = 558.625000Mb, VMS = 580.367188Mb)
53 : Statistics :: Grounding = 0.242164s, Solving = 0.048272s, Total = 0.290436s, Memory = (RSS = 561.757812Mb, VMS = 582.386719Mb)
54 : Statistics :: Grounding = 0.252566s, Solving = 0.071904s, Total = 0.324470s, Memory = (RSS = 565.089844Mb, VMS = 585.066406Mb)
55 : Statistics :: Grounding = 0.270050s, Solving = 0.406484s, Total = 0.676534s, Memory = (RSS = 573.398438Mb, VMS = 592.285156Mb)
56 : Statistics :: Grounding = 0.263307s, Solving = 0.111942s, Total = 0.375249s, Memory = (RSS = 584.808594Mb, VMS = 601.957031Mb)
57 : Statistics :: Grounding = 0.274941s, Solving = 0.055643s, Total = 0.330584s, Memory = (RSS = 588.718750Mb, VMS = 604.339844Mb)
58 : Statistics :: Grounding = 0.274129s, Solving = 0.108049s, Total = 0.382178s, Memory = (RSS = 595.972656Mb, VMS = 609.468750Mb)

[13-11-2021_23-27-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 20.079033s due to: External generator exit.

[13-11-2021_23-27-58] DEBUG :: ASH Planner Main #1 >> Deleting program grounding at level 1.

[13-11-2021_23-27-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-11-2021_23-27-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-11-2021_23-27-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-27-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-27-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[13-11-2021_23-27-59] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 15, 33: 16, 34: 16, 35: 17, 36: 18, 37: 18, 38: 19, 39: 19, 40: 20, 41: 21, 42: 22, 43: 23, 44: 23, 45: 23, 46: 24}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 31, 15: 32, 16: 34, 17: 35, 18: 37, 19: 39, 20: 40, 21: 41, 22: 42, 23: 45, 24: 46}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-27-59] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 15, 33: 16, 34: 16, 35: 17, 36: 18, 37: 18, 38: 19, 39: 19, 40: 20, 41: 21, 42: 22, 43: 23, 44: 23, 45: 23, 46: 24, 47: 24, 48: 25, 49: 25, 50: 26, 51: 27, 52: 27, 53: 28, 54: 28, 55: 28, 56: 29, 57: 29, 58: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 31, 15: 32, 16: 34, 17: 35, 18: 37, 19: 39, 20: 40, 21: 41, 22: 42, 23: 45, 24: 47, 25: 49, 26: 50, 27: 52, 28: 55, 29: 57, 30: 58}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-27-59] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 30, Last requested goal index = 30 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-27-59] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 14.605481s, Solving = 5.473551s, Total = 20.079033s, Memory = (RSS = 595.972656Mb, VMS = 609.468750Mb)), Calls = 58
Model :: Total atoms = 33853, Cost = (69, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-27-59] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 58 :: Actions = 75                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 23:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 25:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 30:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 31:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 32:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 33:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 34:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 35:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 36:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
        talos : configure(manipulator_limb_2,extended)
        talos : release(manipulator_end_1,(block,3))
Step 37:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 39:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
        talos : release(manipulator_end_2,(block,2))
Step 40:
    Current Sub-goals:
        [Index = 20] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
        talos : lift(manipulator_end_1,(block,1))
Step 41:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((puzzle_room,0))
Step 42:
    Current Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 44:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 45:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 46:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 47:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 48:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 49:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 50:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 51:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 52:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 53:
    Current Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 55:
    Current Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 57:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 58:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 30] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 30] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))
        talos : put(manipulator_end_2,(block,4),(block,5))

[13-11-2021_23-27-59] INFO :: ASH Planner Main #1 >> Online planning increment 4 finished.

[13-11-2021_23-27-59] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=58, step_range=range(0, 59)

[13-11-2021_23-27-59] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 48
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-27-59] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=30, step_range=range(0, 31)

[13-11-2021_23-27-59] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 48
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-27-59] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=14, step_range=range(0, 15)

[13-11-2021_23-27-59] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 48
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-27-59] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 58, Actions = 21

[13-11-2021_23-27-59] INFO :: ASH Planner Main #1 >>           ========================================          
                     Ground level plan                      
          ========================================          
                 Steps = 58 :: Actions = 75                 
                ----------------------------                

(1, [Action({'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1})])
(2, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2})])
(3, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 3})])
(4, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 4}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 4})])
(5, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 5})])
(6, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 6})])
(7, [Action({'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 7})])
(8, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 8}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 8})])
(9, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 9})])
(10, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 10})])
(11, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 11})])
(12, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 12})])
(13, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))', 'S': 13})])
(14, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,store_room_door_handle_outer)', 'S': 14})])
(15, [Action({'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_2,store_room_door)', 'S': 15})])
(16, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,store_room_door_handle_outer)', 'S': 16})])
(17, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 17})])
(18, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 18})])
(19, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 19})])
(20, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 20}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 20})])
(21, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,6)))', 'S': 21}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,5)))', 'S': 21})])
(22, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,6))', 'S': 22}), Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,5))', 'S': 22})])
(23, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 23})])
(24, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 24})])
(25, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 25})])
(26, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 26})])
(27, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 27})])
(28, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 28})])
(29, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 29})])
(30, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 30}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 30})])
(31, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,6),puzzle_room_table_right)', 'S': 31})])
(32, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,6))', 'S': 32})])
(33, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 33})])
(34, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 34}), Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,5),(block,6))', 'S': 34})])
(35, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 35}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,5))', 'S': 35})])
(36, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,2)))', 'S': 36}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 36})])
(37, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,2))', 'S': 37})])
(38, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,1)))', 'S': 38}), Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,2),(block,3))', 'S': 38})])
(39, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,1))', 'S': 39}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,2))', 'S': 39})])
(40, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 40}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 40}), Action({'L': 1, 'R': 'talos', 'A': 'lift(manipulator_end_1,(block,1))', 'S': 40})])
(41, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 41})])
(42, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 42})])
(43, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 43})])
(44, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 44})])
(45, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 45})])
(46, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 46})])
(47, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 47})])
(48, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 48})])
(49, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 49})])
(50, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 50})])
(51, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 51})])
(52, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 52})])
(53, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 53})])
(54, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 54})])
(55, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 55})])
(56, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 56})])
(57, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 57})])
(58, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,1),(block,2))', 'S': 58}), Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,4),(block,5))', 'S': 58})])

Hierarchical planning summary: (Execution latency = 12.24903419999999, Overall total planning time = 27.535739899999967, Average partial plan yield time = 13.733743724999988)

     ====================================================================================================================================================================================     
 | Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.642s (Gro =   1.404s, Sea =   0.237s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00)) |  
 | Level =  2 (com-ref), Length =  30, Actions =  48 (Com = 0.62), Sgs = 48, Time =   5.778s (Gro =   4.447s, Sea =   1.331s), Expan (2.14, 2.29) (Dev = (1.61, 2.87), Bal = (0.75, 1.26)) |  
  | Level =  1 (com-ref), Length =  58, Actions =  75 (Com = 0.77), Sgs = 0, Time =  20.116s (Gro =  14.636s, Sea =   5.480s), Expan (1.93, 1.56) (Dev = (1.66, 1.06), Bal = (0.86, 0.68)) |  
     ====================================================================================================================================================================================     

[13-11-2021_23-27-59] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=58, step_range=range(0, 59)

[13-11-2021_23-27-59] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 48
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-27-59] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=30, step_range=range(0, 31)

[13-11-2021_23-27-59] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 48
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-27-59] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=14, step_range=range(0, 15)

[13-11-2021_23-27-59] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 48
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-27-59] INFO :: __main__ >> Saving generated plan to file: ./solutions/plans/ASH_Plan_2021-11-13_23-27-24.txt

[13-11-2021_23-27-59] INFO :: __main__ >> Saving generated refinement schema to file: ./solutions/schemas/ASH_Schema_2021-11-13_23-27-24.txt

[13-11-2021_23-28-00] ERROR :: __main__ >> Exception during main:

Traceback (most recent call last):
  File "C:\Users\Ollie Kampo\OneDrive - University of Birmingham\Desktop\ASH - Planner\launch.py", line 912, in <module>
    exit_code = __main()
  File "C:\Users\Ollie Kampo\OneDrive - University of Birmingham\Desktop\ASH - Planner\launch.py", line 476, in __main
    concat_length
NameError: name 'concat_length' is not defined
[13-11-2021_23-28-00] INFO :: __main__ >> Overall time: Real = 35.868920700000004, Process = 49.765625

[13-11-2021_23-28-00] INFO :: __main__ >> Exiting with code -1

